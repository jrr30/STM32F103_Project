
STMF103C8_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ab0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08004bc0  08004bc0  00014bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cf4  08004cf4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004cf4  08004cf4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cf4  08004cf4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cf4  08004cf4  00014cf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cf8  08004cf8  00014cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004cfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e18  20000078  08004d74  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e90  08004d74  00020e90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d65  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f4  00000000  00000000  00032e06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00035f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00037048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a665  00000000  00000000  00038048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012ec1  00000000  00000000  000526ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095602  00000000  00000000  0006556e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fab70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e58  00000000  00000000  000fabc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ba8 	.word	0x08004ba8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08004ba8 	.word	0x08004ba8

08000150 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000156:	4b1a      	ldr	r3, [pc, #104]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000158:	699b      	ldr	r3, [r3, #24]
 800015a:	4a19      	ldr	r2, [pc, #100]	; (80001c0 <MX_GPIO_Init+0x70>)
 800015c:	f043 0310 	orr.w	r3, r3, #16
 8000160:	6193      	str	r3, [r2, #24]
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	f003 0310 	and.w	r3, r3, #16
 800016a:	60fb      	str	r3, [r7, #12]
 800016c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000174:	f043 0320 	orr.w	r3, r3, #32
 8000178:	6193      	str	r3, [r2, #24]
 800017a:	4b11      	ldr	r3, [pc, #68]	; (80001c0 <MX_GPIO_Init+0x70>)
 800017c:	699b      	ldr	r3, [r3, #24]
 800017e:	f003 0320 	and.w	r3, r3, #32
 8000182:	60bb      	str	r3, [r7, #8]
 8000184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000186:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <MX_GPIO_Init+0x70>)
 800018c:	f043 0304 	orr.w	r3, r3, #4
 8000190:	6193      	str	r3, [r2, #24]
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000194:	699b      	ldr	r3, [r3, #24]
 8000196:	f003 0304 	and.w	r3, r3, #4
 800019a:	607b      	str	r3, [r7, #4]
 800019c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a07      	ldr	r2, [pc, #28]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001a4:	f043 0308 	orr.w	r3, r3, #8
 80001a8:	6193      	str	r3, [r2, #24]
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	f003 0308 	and.w	r3, r3, #8
 80001b2:	603b      	str	r3, [r7, #0]
 80001b4:	683b      	ldr	r3, [r7, #0]

}
 80001b6:	bf00      	nop
 80001b8:	3714      	adds	r7, #20
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	40021000 	.word	0x40021000

080001c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001d4:	f003 0301 	and.w	r3, r3, #1
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d013      	beq.n	8000204 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d00b      	beq.n	8000204 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001ec:	e000      	b.n	80001f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d0f9      	beq.n	80001ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	b2d2      	uxtb	r2, r2
 8000202:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000204:	687b      	ldr	r3, [r7, #4]
}
 8000206:	4618      	mov	r0, r3
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000216:	f000 fb1d 	bl	8000854 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021a:	f000 f845 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021e:	f7ff ff97 	bl	8000150 <MX_GPIO_Init>
  MX_RTC_Init();
 8000222:	f000 f911 	bl	8000448 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000226:	f000 fa79 	bl	800071c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Status = xTaskCreate(Get_Time_RTC_Runnable, "Get Time ", 100, NULL, 2, &Get_Time_Handler);
 800022a:	4b15      	ldr	r3, [pc, #84]	; (8000280 <main+0x70>)
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	2302      	movs	r3, #2
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2300      	movs	r3, #0
 8000234:	2264      	movs	r2, #100	; 0x64
 8000236:	4913      	ldr	r1, [pc, #76]	; (8000284 <main+0x74>)
 8000238:	4813      	ldr	r0, [pc, #76]	; (8000288 <main+0x78>)
 800023a:	f002 fc49 	bl	8002ad0 <xTaskCreate>
 800023e:	4603      	mov	r3, r0
 8000240:	4a12      	ldr	r2, [pc, #72]	; (800028c <main+0x7c>)
 8000242:	6013      	str	r3, [r2, #0]
  Status = xTaskCreate(Print_Time_Runnable, "Print Time", 100, NULL, 2, &Print_Time_Handler);
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <main+0x80>)
 8000246:	9301      	str	r3, [sp, #4]
 8000248:	2302      	movs	r3, #2
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2300      	movs	r3, #0
 800024e:	2264      	movs	r2, #100	; 0x64
 8000250:	4910      	ldr	r1, [pc, #64]	; (8000294 <main+0x84>)
 8000252:	4811      	ldr	r0, [pc, #68]	; (8000298 <main+0x88>)
 8000254:	f002 fc3c 	bl	8002ad0 <xTaskCreate>
 8000258:	4603      	mov	r3, r0
 800025a:	4a0c      	ldr	r2, [pc, #48]	; (800028c <main+0x7c>)
 800025c:	6013      	str	r3, [r2, #0]
  Status = xTaskCreate(Process_UART_Data_unnable, "UART Rx", 100, NULL, 2, &Process_Rx_Data_Handler);
 800025e:	4b0f      	ldr	r3, [pc, #60]	; (800029c <main+0x8c>)
 8000260:	9301      	str	r3, [sp, #4]
 8000262:	2302      	movs	r3, #2
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	2300      	movs	r3, #0
 8000268:	2264      	movs	r2, #100	; 0x64
 800026a:	490d      	ldr	r1, [pc, #52]	; (80002a0 <main+0x90>)
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <main+0x94>)
 800026e:	f002 fc2f 	bl	8002ad0 <xTaskCreate>
 8000272:	4603      	mov	r3, r0
 8000274:	4a05      	ldr	r2, [pc, #20]	; (800028c <main+0x7c>)
 8000276:	6013      	str	r3, [r2, #0]


  vTaskStartScheduler();
 8000278:	f002 fd98 	bl	8002dac <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027c:	e7fe      	b.n	800027c <main+0x6c>
 800027e:	bf00      	nop
 8000280:	20000094 	.word	0x20000094
 8000284:	08004bc0 	.word	0x08004bc0
 8000288:	08000375 	.word	0x08000375
 800028c:	20000dd8 	.word	0x20000dd8
 8000290:	20000098 	.word	0x20000098
 8000294:	08004bcc 	.word	0x08004bcc
 8000298:	080003b9 	.word	0x080003b9
 800029c:	2000009c 	.word	0x2000009c
 80002a0:	08004bd8 	.word	0x08004bd8
 80002a4:	0800034d 	.word	0x0800034d

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b094      	sub	sp, #80	; 0x50
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f003 fc8a 	bl	8003bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002d8:	2305      	movs	r3, #5
 80002da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fd52 	bl	8000d98 <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002fa:	f000 f89f 	bl	800043c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000302:	2301      	movs	r3, #1
 8000304:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f000 ffbd 	bl	8001298 <HAL_RCC_ClockConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000324:	f000 f88a 	bl	800043c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000328:	2301      	movs	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800032c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000330:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f001 f979 	bl	800162c <HAL_RCCEx_PeriphCLKConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000340:	f000 f87c 	bl	800043c <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3750      	adds	r7, #80	; 0x50
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <Process_UART_Data_unnable>:

/* USER CODE BEGIN 4 */

static void Process_UART_Data_unnable(void * parameters)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("Process UART TX Rx Alive\n");
 8000354:	4805      	ldr	r0, [pc, #20]	; (800036c <Process_UART_Data_unnable+0x20>)
 8000356:	f003 fcc9 	bl	8003cec <puts>
		taskYIELD();
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <Process_UART_Data_unnable+0x24>)
 800035c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	f3bf 8f4f 	dsb	sy
 8000366:	f3bf 8f6f 	isb	sy
		printf("Process UART TX Rx Alive\n");
 800036a:	e7f3      	b.n	8000354 <Process_UART_Data_unnable+0x8>
 800036c:	08004be0 	.word	0x08004be0
 8000370:	e000ed04 	.word	0xe000ed04

08000374 <Get_Time_RTC_Runnable>:
	}
}

static void Get_Time_RTC_Runnable(void * parameters)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef Local_RTC_Data;
	for(;;)
	{
		HAL_RTC_GetTime(&hrtc, &Local_RTC_Data, RTC_FORMAT_BIN);
 800037c:	f107 030c 	add.w	r3, r7, #12
 8000380:	2200      	movs	r2, #0
 8000382:	4619      	mov	r1, r3
 8000384:	4809      	ldr	r0, [pc, #36]	; (80003ac <Get_Time_RTC_Runnable+0x38>)
 8000386:	f001 fbf9 	bl	8001b7c <HAL_RTC_GetTime>
		//printf("Getting Time Alive\n");
		printf("%d:%d:%d\n", Local_RTC_Data.Hours, Local_RTC_Data.Minutes, Local_RTC_Data.Seconds);
 800038a:	7b3b      	ldrb	r3, [r7, #12]
 800038c:	4619      	mov	r1, r3
 800038e:	7b7b      	ldrb	r3, [r7, #13]
 8000390:	461a      	mov	r2, r3
 8000392:	7bbb      	ldrb	r3, [r7, #14]
 8000394:	4806      	ldr	r0, [pc, #24]	; (80003b0 <Get_Time_RTC_Runnable+0x3c>)
 8000396:	f003 fc23 	bl	8003be0 <iprintf>
		taskYIELD();
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <Get_Time_RTC_Runnable+0x40>)
 800039c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003a0:	601a      	str	r2, [r3, #0]
 80003a2:	f3bf 8f4f 	dsb	sy
 80003a6:	f3bf 8f6f 	isb	sy
		HAL_RTC_GetTime(&hrtc, &Local_RTC_Data, RTC_FORMAT_BIN);
 80003aa:	e7e7      	b.n	800037c <Get_Time_RTC_Runnable+0x8>
 80003ac:	20000ddc 	.word	0x20000ddc
 80003b0:	08004bfc 	.word	0x08004bfc
 80003b4:	e000ed04 	.word	0xe000ed04

080003b8 <Print_Time_Runnable>:
	}
}

static void Print_Time_Runnable(void * parameters)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("Printing Time Alive\n");
 80003c0:	4805      	ldr	r0, [pc, #20]	; (80003d8 <Print_Time_Runnable+0x20>)
 80003c2:	f003 fc93 	bl	8003cec <puts>
		taskYIELD();
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <Print_Time_Runnable+0x24>)
 80003c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003cc:	601a      	str	r2, [r3, #0]
 80003ce:	f3bf 8f4f 	dsb	sy
 80003d2:	f3bf 8f6f 	isb	sy
		printf("Printing Time Alive\n");
 80003d6:	e7f3      	b.n	80003c0 <Print_Time_Runnable+0x8>
 80003d8:	08004c08 	.word	0x08004c08
 80003dc:	e000ed04 	.word	0xe000ed04

080003e0 <_write>:
}



int _write(int file, char *ptr, int len)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b086      	sub	sp, #24
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ec:	2300      	movs	r3, #0
 80003ee:	617b      	str	r3, [r7, #20]
 80003f0:	e009      	b.n	8000406 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	1c5a      	adds	r2, r3, #1
 80003f6:	60ba      	str	r2, [r7, #8]
 80003f8:	781b      	ldrb	r3, [r3, #0]
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff fee2 	bl	80001c4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	3301      	adds	r3, #1
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	697a      	ldr	r2, [r7, #20]
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	429a      	cmp	r2, r3
 800040c:	dbf1      	blt.n	80003f2 <_write+0x12>
	}
	return len;
 800040e:	687b      	ldr	r3, [r7, #4]
}
 8000410:	4618      	mov	r0, r3
 8000412:	3718      	adds	r7, #24
 8000414:	46bd      	mov	sp, r7
 8000416:	bd80      	pop	{r7, pc}

08000418 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d101      	bne.n	800042e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800042a:	f000 fa29 	bl	8000880 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40000800 	.word	0x40000800

0800043c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000440:	b672      	cpsid	i
}
 8000442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000444:	e7fe      	b.n	8000444 <Error_Handler+0x8>
	...

08000448 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	2100      	movs	r1, #0
 8000452:	460a      	mov	r2, r1
 8000454:	801a      	strh	r2, [r3, #0]
 8000456:	460a      	mov	r2, r1
 8000458:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800045a:	2300      	movs	r3, #0
 800045c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800045e:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <MX_RTC_Init+0x8c>)
 8000460:	4a1d      	ldr	r2, [pc, #116]	; (80004d8 <MX_RTC_Init+0x90>)
 8000462:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000464:	4b1b      	ldr	r3, [pc, #108]	; (80004d4 <MX_RTC_Init+0x8c>)
 8000466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800046a:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 800046c:	4b19      	ldr	r3, [pc, #100]	; (80004d4 <MX_RTC_Init+0x8c>)
 800046e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000472:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000474:	4817      	ldr	r0, [pc, #92]	; (80004d4 <MX_RTC_Init+0x8c>)
 8000476:	f001 fa53 	bl	8001920 <HAL_RTC_Init>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000480:	f7ff ffdc 	bl	800043c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 800048c:	2300      	movs	r3, #0
 800048e:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2200      	movs	r2, #0
 8000494:	4619      	mov	r1, r3
 8000496:	480f      	ldr	r0, [pc, #60]	; (80004d4 <MX_RTC_Init+0x8c>)
 8000498:	f001 fad8 	bl	8001a4c <HAL_RTC_SetTime>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d001      	beq.n	80004a6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80004a2:	f7ff ffcb 	bl	800043c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80004a6:	2301      	movs	r3, #1
 80004a8:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80004aa:	2301      	movs	r3, #1
 80004ac:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 80004ae:	2301      	movs	r3, #1
 80004b0:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 80004b2:	2300      	movs	r3, #0
 80004b4:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80004b6:	463b      	mov	r3, r7
 80004b8:	2200      	movs	r2, #0
 80004ba:	4619      	mov	r1, r3
 80004bc:	4805      	ldr	r0, [pc, #20]	; (80004d4 <MX_RTC_Init+0x8c>)
 80004be:	f001 fc35 	bl	8001d2c <HAL_RTC_SetDate>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d001      	beq.n	80004cc <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80004c8:	f7ff ffb8 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80004cc:	bf00      	nop
 80004ce:	3708      	adds	r7, #8
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	20000ddc 	.word	0x20000ddc
 80004d8:	40002800 	.word	0x40002800

080004dc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <HAL_RTC_MspInit+0x3c>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d110      	bne.n	8000510 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80004ee:	f000 fc47 	bl	8000d80 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80004f2:	4b0a      	ldr	r3, [pc, #40]	; (800051c <HAL_RTC_MspInit+0x40>)
 80004f4:	69db      	ldr	r3, [r3, #28]
 80004f6:	4a09      	ldr	r2, [pc, #36]	; (800051c <HAL_RTC_MspInit+0x40>)
 80004f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80004fc:	61d3      	str	r3, [r2, #28]
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <HAL_RTC_MspInit+0x40>)
 8000500:	69db      	ldr	r3, [r3, #28]
 8000502:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800050a:	4b05      	ldr	r3, [pc, #20]	; (8000520 <HAL_RTC_MspInit+0x44>)
 800050c:	2201      	movs	r2, #1
 800050e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000510:	bf00      	nop
 8000512:	3710      	adds	r7, #16
 8000514:	46bd      	mov	sp, r7
 8000516:	bd80      	pop	{r7, pc}
 8000518:	40002800 	.word	0x40002800
 800051c:	40021000 	.word	0x40021000
 8000520:	4242043c 	.word	0x4242043c

08000524 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <HAL_MspInit+0x5c>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a14      	ldr	r2, [pc, #80]	; (8000580 <HAL_MspInit+0x5c>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	6193      	str	r3, [r2, #24]
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_MspInit+0x5c>)
 8000538:	699b      	ldr	r3, [r3, #24]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_MspInit+0x5c>)
 8000544:	69db      	ldr	r3, [r3, #28]
 8000546:	4a0e      	ldr	r2, [pc, #56]	; (8000580 <HAL_MspInit+0x5c>)
 8000548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054c:	61d3      	str	r3, [r2, #28]
 800054e:	4b0c      	ldr	r3, [pc, #48]	; (8000580 <HAL_MspInit+0x5c>)
 8000550:	69db      	ldr	r3, [r3, #28]
 8000552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800055a:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <HAL_MspInit+0x60>)
 800055c:	685b      	ldr	r3, [r3, #4]
 800055e:	60fb      	str	r3, [r7, #12]
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <HAL_MspInit+0x60>)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000576:	bf00      	nop
 8000578:	3714      	adds	r7, #20
 800057a:	46bd      	mov	sp, r7
 800057c:	bc80      	pop	{r7}
 800057e:	4770      	bx	lr
 8000580:	40021000 	.word	0x40021000
 8000584:	40010000 	.word	0x40010000

08000588 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000598:	2200      	movs	r2, #0
 800059a:	6879      	ldr	r1, [r7, #4]
 800059c:	201e      	movs	r0, #30
 800059e:	f000 fa40 	bl	8000a22 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80005a2:	201e      	movs	r0, #30
 80005a4:	f000 fa59 	bl	8000a5a <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80005a8:	4b1e      	ldr	r3, [pc, #120]	; (8000624 <HAL_InitTick+0x9c>)
 80005aa:	69db      	ldr	r3, [r3, #28]
 80005ac:	4a1d      	ldr	r2, [pc, #116]	; (8000624 <HAL_InitTick+0x9c>)
 80005ae:	f043 0304 	orr.w	r3, r3, #4
 80005b2:	61d3      	str	r3, [r2, #28]
 80005b4:	4b1b      	ldr	r3, [pc, #108]	; (8000624 <HAL_InitTick+0x9c>)
 80005b6:	69db      	ldr	r3, [r3, #28]
 80005b8:	f003 0304 	and.w	r3, r3, #4
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005c0:	f107 0210 	add.w	r2, r7, #16
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	4611      	mov	r1, r2
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 ffe0 	bl	8001590 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005d0:	f000 ffb6 	bl	8001540 <HAL_RCC_GetPCLK1Freq>
 80005d4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d8:	4a13      	ldr	r2, [pc, #76]	; (8000628 <HAL_InitTick+0xa0>)
 80005da:	fba2 2303 	umull	r2, r3, r2, r3
 80005de:	0c9b      	lsrs	r3, r3, #18
 80005e0:	3b01      	subs	r3, #1
 80005e2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <HAL_InitTick+0xa4>)
 80005e6:	4a12      	ldr	r2, [pc, #72]	; (8000630 <HAL_InitTick+0xa8>)
 80005e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005ea:	4b10      	ldr	r3, [pc, #64]	; (800062c <HAL_InitTick+0xa4>)
 80005ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005f0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <HAL_InitTick+0xa4>)
 80005f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005f6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <HAL_InitTick+0xa4>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <HAL_InitTick+0xa4>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <HAL_InitTick+0xa4>)
 8000606:	f001 fee9 	bl	80023dc <HAL_TIM_Base_Init>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d104      	bne.n	800061a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000610:	4806      	ldr	r0, [pc, #24]	; (800062c <HAL_InitTick+0xa4>)
 8000612:	f001 ff3b 	bl	800248c <HAL_TIM_Base_Start_IT>
 8000616:	4603      	mov	r3, r0
 8000618:	e000      	b.n	800061c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800061a:	2301      	movs	r3, #1
}
 800061c:	4618      	mov	r0, r3
 800061e:	3730      	adds	r7, #48	; 0x30
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40021000 	.word	0x40021000
 8000628:	431bde83 	.word	0x431bde83
 800062c:	20000df0 	.word	0x20000df0
 8000630:	40000800 	.word	0x40000800

08000634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000638:	e7fe      	b.n	8000638 <NMI_Handler+0x4>

0800063a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063a:	b480      	push	{r7}
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800063e:	e7fe      	b.n	800063e <HardFault_Handler+0x4>

08000640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000644:	e7fe      	b.n	8000644 <MemManage_Handler+0x4>

08000646 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064a:	e7fe      	b.n	800064a <BusFault_Handler+0x4>

0800064c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000650:	e7fe      	b.n	8000650 <UsageFault_Handler+0x4>

08000652 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000652:	b480      	push	{r7}
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000656:	bf00      	nop
 8000658:	46bd      	mov	sp, r7
 800065a:	bc80      	pop	{r7}
 800065c:	4770      	bx	lr
	...

08000660 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <TIM4_IRQHandler+0x10>)
 8000666:	f001 ff63 	bl	8002530 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000df0 	.word	0x20000df0

08000674 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	60f8      	str	r0, [r7, #12]
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	e00a      	b.n	800069c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000686:	f3af 8000 	nop.w
 800068a:	4601      	mov	r1, r0
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	1c5a      	adds	r2, r3, #1
 8000690:	60ba      	str	r2, [r7, #8]
 8000692:	b2ca      	uxtb	r2, r1
 8000694:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	3301      	adds	r3, #1
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	697a      	ldr	r2, [r7, #20]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	dbf0      	blt.n	8000686 <_read+0x12>
	}

return len;
 80006a4:	687b      	ldr	r3, [r7, #4]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3718      	adds	r7, #24
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <_close>:
	}
	return len;
}

int _close(int file)
{
 80006ae:	b480      	push	{r7}
 80006b0:	b083      	sub	sp, #12
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
	return -1;
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr

080006c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
 80006cc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006ce:	683b      	ldr	r3, [r7, #0]
 80006d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006d4:	605a      	str	r2, [r3, #4]
	return 0;
 80006d6:	2300      	movs	r3, #0
}
 80006d8:	4618      	mov	r0, r3
 80006da:	370c      	adds	r7, #12
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <_isatty>:

int _isatty(int file)
{
 80006e2:	b480      	push	{r7}
 80006e4:	b083      	sub	sp, #12
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	return 1;
 80006ea:	2301      	movs	r3, #1
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b085      	sub	sp, #20
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	60f8      	str	r0, [r7, #12]
 80006fe:	60b9      	str	r1, [r7, #8]
 8000700:	607a      	str	r2, [r7, #4]
	return 0;
 8000702:	2300      	movs	r3, #0
}
 8000704:	4618      	mov	r0, r3
 8000706:	3714      	adds	r7, #20
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000712:	bf00      	nop
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
	...

0800071c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000722:	4a12      	ldr	r2, [pc, #72]	; (800076c <MX_USART1_UART_Init+0x50>)
 8000724:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000726:	4b10      	ldr	r3, [pc, #64]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000728:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800072c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000734:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000740:	4b09      	ldr	r3, [pc, #36]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000742:	220c      	movs	r2, #12
 8000744:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800074c:	4b06      	ldr	r3, [pc, #24]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000752:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_USART1_UART_Init+0x4c>)
 8000754:	f002 f88c 	bl	8002870 <HAL_UART_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800075e:	f7ff fe6d 	bl	800043c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000e38 	.word	0x20000e38
 800076c:	40013800 	.word	0x40013800

08000770 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000778:	f107 0310 	add.w	r3, r7, #16
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <HAL_UART_MspInit+0x8c>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d131      	bne.n	80007f4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <HAL_UART_MspInit+0x90>)
 8000792:	699b      	ldr	r3, [r3, #24]
 8000794:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <HAL_UART_MspInit+0x90>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079a:	6193      	str	r3, [r2, #24]
 800079c:	4b18      	ldr	r3, [pc, #96]	; (8000800 <HAL_UART_MspInit+0x90>)
 800079e:	699b      	ldr	r3, [r3, #24]
 80007a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b15      	ldr	r3, [pc, #84]	; (8000800 <HAL_UART_MspInit+0x90>)
 80007aa:	699b      	ldr	r3, [r3, #24]
 80007ac:	4a14      	ldr	r2, [pc, #80]	; (8000800 <HAL_UART_MspInit+0x90>)
 80007ae:	f043 0304 	orr.w	r3, r3, #4
 80007b2:	6193      	str	r3, [r2, #24]
 80007b4:	4b12      	ldr	r3, [pc, #72]	; (8000800 <HAL_UART_MspInit+0x90>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	f003 0304 	and.w	r3, r3, #4
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ca:	2303      	movs	r3, #3
 80007cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ce:	f107 0310 	add.w	r3, r7, #16
 80007d2:	4619      	mov	r1, r3
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <HAL_UART_MspInit+0x94>)
 80007d6:	f000 f94f 	bl	8000a78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	4619      	mov	r1, r3
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <HAL_UART_MspInit+0x94>)
 80007f0:	f000 f942 	bl	8000a78 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40013800 	.word	0x40013800
 8000800:	40021000 	.word	0x40021000
 8000804:	40010800 	.word	0x40010800

08000808 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000808:	480c      	ldr	r0, [pc, #48]	; (800083c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800080a:	490d      	ldr	r1, [pc, #52]	; (8000840 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800080c:	4a0d      	ldr	r2, [pc, #52]	; (8000844 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800080e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000810:	e002      	b.n	8000818 <LoopCopyDataInit>

08000812 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000812:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000814:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000816:	3304      	adds	r3, #4

08000818 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000818:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800081a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800081c:	d3f9      	bcc.n	8000812 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081e:	4a0a      	ldr	r2, [pc, #40]	; (8000848 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000820:	4c0a      	ldr	r4, [pc, #40]	; (800084c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000822:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000824:	e001      	b.n	800082a <LoopFillZerobss>

08000826 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000826:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000828:	3204      	adds	r2, #4

0800082a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800082a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800082c:	d3fb      	bcc.n	8000826 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800082e:	f7ff ff6e 	bl	800070e <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000832:	f003 f9a9 	bl	8003b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000836:	f7ff fceb 	bl	8000210 <main>
  bx lr
 800083a:	4770      	bx	lr
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000844:	08004cfc 	.word	0x08004cfc
  ldr r2, =_sbss
 8000848:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800084c:	20000e90 	.word	0x20000e90

08000850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_2_IRQHandler>
	...

08000854 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_Init+0x28>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_Init+0x28>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 f8d1 	bl	8000a0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086a:	200f      	movs	r0, #15
 800086c:	f7ff fe8c 	bl	8000588 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000870:	f7ff fe58 	bl	8000524 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40022000 	.word	0x40022000

08000880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000884:	4b05      	ldr	r3, [pc, #20]	; (800089c <HAL_IncTick+0x1c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	461a      	mov	r2, r3
 800088a:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <HAL_IncTick+0x20>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	4413      	add	r3, r2
 8000890:	4a03      	ldr	r2, [pc, #12]	; (80008a0 <HAL_IncTick+0x20>)
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000e7c 	.word	0x20000e7c

080008a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  return uwTick;
 80008a8:	4b02      	ldr	r3, [pc, #8]	; (80008b4 <HAL_GetTick+0x10>)
 80008aa:	681b      	ldr	r3, [r3, #0]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bc80      	pop	{r7}
 80008b2:	4770      	bx	lr
 80008b4:	20000e7c 	.word	0x20000e7c

080008b8 <__NVIC_SetPriorityGrouping>:
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f003 0307 	and.w	r3, r3, #7
 80008c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ca:	68db      	ldr	r3, [r3, #12]
 80008cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008ce:	68ba      	ldr	r2, [r7, #8]
 80008d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008d4:	4013      	ands	r3, r2
 80008d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ea:	4a04      	ldr	r2, [pc, #16]	; (80008fc <__NVIC_SetPriorityGrouping+0x44>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	60d3      	str	r3, [r2, #12]
}
 80008f0:	bf00      	nop
 80008f2:	3714      	adds	r7, #20
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_GetPriorityGrouping>:
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000904:	4b04      	ldr	r3, [pc, #16]	; (8000918 <__NVIC_GetPriorityGrouping+0x18>)
 8000906:	68db      	ldr	r3, [r3, #12]
 8000908:	0a1b      	lsrs	r3, r3, #8
 800090a:	f003 0307 	and.w	r3, r3, #7
}
 800090e:	4618      	mov	r0, r3
 8000910:	46bd      	mov	sp, r7
 8000912:	bc80      	pop	{r7}
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	e000ed00 	.word	0xe000ed00

0800091c <__NVIC_EnableIRQ>:
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	2b00      	cmp	r3, #0
 800092c:	db0b      	blt.n	8000946 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	f003 021f 	and.w	r2, r3, #31
 8000934:	4906      	ldr	r1, [pc, #24]	; (8000950 <__NVIC_EnableIRQ+0x34>)
 8000936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093a:	095b      	lsrs	r3, r3, #5
 800093c:	2001      	movs	r0, #1
 800093e:	fa00 f202 	lsl.w	r2, r0, r2
 8000942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000946:	bf00      	nop
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	bc80      	pop	{r7}
 800094e:	4770      	bx	lr
 8000950:	e000e100 	.word	0xe000e100

08000954 <__NVIC_SetPriority>:
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	6039      	str	r1, [r7, #0]
 800095e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000964:	2b00      	cmp	r3, #0
 8000966:	db0a      	blt.n	800097e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	b2da      	uxtb	r2, r3
 800096c:	490c      	ldr	r1, [pc, #48]	; (80009a0 <__NVIC_SetPriority+0x4c>)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	0112      	lsls	r2, r2, #4
 8000974:	b2d2      	uxtb	r2, r2
 8000976:	440b      	add	r3, r1
 8000978:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800097c:	e00a      	b.n	8000994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	b2da      	uxtb	r2, r3
 8000982:	4908      	ldr	r1, [pc, #32]	; (80009a4 <__NVIC_SetPriority+0x50>)
 8000984:	79fb      	ldrb	r3, [r7, #7]
 8000986:	f003 030f 	and.w	r3, r3, #15
 800098a:	3b04      	subs	r3, #4
 800098c:	0112      	lsls	r2, r2, #4
 800098e:	b2d2      	uxtb	r2, r2
 8000990:	440b      	add	r3, r1
 8000992:	761a      	strb	r2, [r3, #24]
}
 8000994:	bf00      	nop
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	bc80      	pop	{r7}
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000e100 	.word	0xe000e100
 80009a4:	e000ed00 	.word	0xe000ed00

080009a8 <NVIC_EncodePriority>:
{
 80009a8:	b480      	push	{r7}
 80009aa:	b089      	sub	sp, #36	; 0x24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	60f8      	str	r0, [r7, #12]
 80009b0:	60b9      	str	r1, [r7, #8]
 80009b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	f1c3 0307 	rsb	r3, r3, #7
 80009c2:	2b04      	cmp	r3, #4
 80009c4:	bf28      	it	cs
 80009c6:	2304      	movcs	r3, #4
 80009c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ca:	69fb      	ldr	r3, [r7, #28]
 80009cc:	3304      	adds	r3, #4
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d902      	bls.n	80009d8 <NVIC_EncodePriority+0x30>
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3b03      	subs	r3, #3
 80009d6:	e000      	b.n	80009da <NVIC_EncodePriority+0x32>
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	43da      	mvns	r2, r3
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	401a      	ands	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa01 f303 	lsl.w	r3, r1, r3
 80009fa:	43d9      	mvns	r1, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a00:	4313      	orrs	r3, r2
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3724      	adds	r7, #36	; 0x24
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr

08000a0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f7ff ff4f 	bl	80008b8 <__NVIC_SetPriorityGrouping>
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	4603      	mov	r3, r0
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
 8000a2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a34:	f7ff ff64 	bl	8000900 <__NVIC_GetPriorityGrouping>
 8000a38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	68b9      	ldr	r1, [r7, #8]
 8000a3e:	6978      	ldr	r0, [r7, #20]
 8000a40:	f7ff ffb2 	bl	80009a8 <NVIC_EncodePriority>
 8000a44:	4602      	mov	r2, r0
 8000a46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4a:	4611      	mov	r1, r2
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff81 	bl	8000954 <__NVIC_SetPriority>
}
 8000a52:	bf00      	nop
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	4603      	mov	r3, r0
 8000a62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f7ff ff57 	bl	800091c <__NVIC_EnableIRQ>
}
 8000a6e:	bf00      	nop
 8000a70:	3708      	adds	r7, #8
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
	...

08000a78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b08b      	sub	sp, #44	; 0x2c
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a8a:	e169      	b.n	8000d60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a90:	fa02 f303 	lsl.w	r3, r2, r3
 8000a94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	69fa      	ldr	r2, [r7, #28]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000aa0:	69ba      	ldr	r2, [r7, #24]
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	429a      	cmp	r2, r3
 8000aa6:	f040 8158 	bne.w	8000d5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	685b      	ldr	r3, [r3, #4]
 8000aae:	4a9a      	ldr	r2, [pc, #616]	; (8000d18 <HAL_GPIO_Init+0x2a0>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d05e      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ab4:	4a98      	ldr	r2, [pc, #608]	; (8000d18 <HAL_GPIO_Init+0x2a0>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d875      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000aba:	4a98      	ldr	r2, [pc, #608]	; (8000d1c <HAL_GPIO_Init+0x2a4>)
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d058      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ac0:	4a96      	ldr	r2, [pc, #600]	; (8000d1c <HAL_GPIO_Init+0x2a4>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d86f      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000ac6:	4a96      	ldr	r2, [pc, #600]	; (8000d20 <HAL_GPIO_Init+0x2a8>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d052      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000acc:	4a94      	ldr	r2, [pc, #592]	; (8000d20 <HAL_GPIO_Init+0x2a8>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d869      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000ad2:	4a94      	ldr	r2, [pc, #592]	; (8000d24 <HAL_GPIO_Init+0x2ac>)
 8000ad4:	4293      	cmp	r3, r2
 8000ad6:	d04c      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ad8:	4a92      	ldr	r2, [pc, #584]	; (8000d24 <HAL_GPIO_Init+0x2ac>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d863      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000ade:	4a92      	ldr	r2, [pc, #584]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d046      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
 8000ae4:	4a90      	ldr	r2, [pc, #576]	; (8000d28 <HAL_GPIO_Init+0x2b0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d85d      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000aea:	2b12      	cmp	r3, #18
 8000aec:	d82a      	bhi.n	8000b44 <HAL_GPIO_Init+0xcc>
 8000aee:	2b12      	cmp	r3, #18
 8000af0:	d859      	bhi.n	8000ba6 <HAL_GPIO_Init+0x12e>
 8000af2:	a201      	add	r2, pc, #4	; (adr r2, 8000af8 <HAL_GPIO_Init+0x80>)
 8000af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af8:	08000b73 	.word	0x08000b73
 8000afc:	08000b4d 	.word	0x08000b4d
 8000b00:	08000b5f 	.word	0x08000b5f
 8000b04:	08000ba1 	.word	0x08000ba1
 8000b08:	08000ba7 	.word	0x08000ba7
 8000b0c:	08000ba7 	.word	0x08000ba7
 8000b10:	08000ba7 	.word	0x08000ba7
 8000b14:	08000ba7 	.word	0x08000ba7
 8000b18:	08000ba7 	.word	0x08000ba7
 8000b1c:	08000ba7 	.word	0x08000ba7
 8000b20:	08000ba7 	.word	0x08000ba7
 8000b24:	08000ba7 	.word	0x08000ba7
 8000b28:	08000ba7 	.word	0x08000ba7
 8000b2c:	08000ba7 	.word	0x08000ba7
 8000b30:	08000ba7 	.word	0x08000ba7
 8000b34:	08000ba7 	.word	0x08000ba7
 8000b38:	08000ba7 	.word	0x08000ba7
 8000b3c:	08000b55 	.word	0x08000b55
 8000b40:	08000b69 	.word	0x08000b69
 8000b44:	4a79      	ldr	r2, [pc, #484]	; (8000d2c <HAL_GPIO_Init+0x2b4>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d013      	beq.n	8000b72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b4a:	e02c      	b.n	8000ba6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	623b      	str	r3, [r7, #32]
          break;
 8000b52:	e029      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	3304      	adds	r3, #4
 8000b5a:	623b      	str	r3, [r7, #32]
          break;
 8000b5c:	e024      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	3308      	adds	r3, #8
 8000b64:	623b      	str	r3, [r7, #32]
          break;
 8000b66:	e01f      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	330c      	adds	r3, #12
 8000b6e:	623b      	str	r3, [r7, #32]
          break;
 8000b70:	e01a      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	689b      	ldr	r3, [r3, #8]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b7a:	2304      	movs	r3, #4
 8000b7c:	623b      	str	r3, [r7, #32]
          break;
 8000b7e:	e013      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d105      	bne.n	8000b94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	69fa      	ldr	r2, [r7, #28]
 8000b90:	611a      	str	r2, [r3, #16]
          break;
 8000b92:	e009      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b94:	2308      	movs	r3, #8
 8000b96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	69fa      	ldr	r2, [r7, #28]
 8000b9c:	615a      	str	r2, [r3, #20]
          break;
 8000b9e:	e003      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
          break;
 8000ba4:	e000      	b.n	8000ba8 <HAL_GPIO_Init+0x130>
          break;
 8000ba6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	2bff      	cmp	r3, #255	; 0xff
 8000bac:	d801      	bhi.n	8000bb2 <HAL_GPIO_Init+0x13a>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	e001      	b.n	8000bb6 <HAL_GPIO_Init+0x13e>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3304      	adds	r3, #4
 8000bb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	2bff      	cmp	r3, #255	; 0xff
 8000bbc:	d802      	bhi.n	8000bc4 <HAL_GPIO_Init+0x14c>
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	e002      	b.n	8000bca <HAL_GPIO_Init+0x152>
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc6:	3b08      	subs	r3, #8
 8000bc8:	009b      	lsls	r3, r3, #2
 8000bca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	681a      	ldr	r2, [r3, #0]
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd8:	43db      	mvns	r3, r3
 8000bda:	401a      	ands	r2, r3
 8000bdc:	6a39      	ldr	r1, [r7, #32]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	431a      	orrs	r2, r3
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	685b      	ldr	r3, [r3, #4]
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	f000 80b1 	beq.w	8000d5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bf8:	4b4d      	ldr	r3, [pc, #308]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000bfa:	699b      	ldr	r3, [r3, #24]
 8000bfc:	4a4c      	ldr	r2, [pc, #304]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000bfe:	f043 0301 	orr.w	r3, r3, #1
 8000c02:	6193      	str	r3, [r2, #24]
 8000c04:	4b4a      	ldr	r3, [pc, #296]	; (8000d30 <HAL_GPIO_Init+0x2b8>)
 8000c06:	699b      	ldr	r3, [r3, #24]
 8000c08:	f003 0301 	and.w	r3, r3, #1
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c10:	4a48      	ldr	r2, [pc, #288]	; (8000d34 <HAL_GPIO_Init+0x2bc>)
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	089b      	lsrs	r3, r3, #2
 8000c16:	3302      	adds	r3, #2
 8000c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	220f      	movs	r2, #15
 8000c28:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2c:	43db      	mvns	r3, r3
 8000c2e:	68fa      	ldr	r2, [r7, #12]
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a40      	ldr	r2, [pc, #256]	; (8000d38 <HAL_GPIO_Init+0x2c0>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d013      	beq.n	8000c64 <HAL_GPIO_Init+0x1ec>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a3f      	ldr	r2, [pc, #252]	; (8000d3c <HAL_GPIO_Init+0x2c4>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d00d      	beq.n	8000c60 <HAL_GPIO_Init+0x1e8>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a3e      	ldr	r2, [pc, #248]	; (8000d40 <HAL_GPIO_Init+0x2c8>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d007      	beq.n	8000c5c <HAL_GPIO_Init+0x1e4>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a3d      	ldr	r2, [pc, #244]	; (8000d44 <HAL_GPIO_Init+0x2cc>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d101      	bne.n	8000c58 <HAL_GPIO_Init+0x1e0>
 8000c54:	2303      	movs	r3, #3
 8000c56:	e006      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c58:	2304      	movs	r3, #4
 8000c5a:	e004      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c5c:	2302      	movs	r3, #2
 8000c5e:	e002      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c60:	2301      	movs	r3, #1
 8000c62:	e000      	b.n	8000c66 <HAL_GPIO_Init+0x1ee>
 8000c64:	2300      	movs	r3, #0
 8000c66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c68:	f002 0203 	and.w	r2, r2, #3
 8000c6c:	0092      	lsls	r2, r2, #2
 8000c6e:	4093      	lsls	r3, r2
 8000c70:	68fa      	ldr	r2, [r7, #12]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c76:	492f      	ldr	r1, [pc, #188]	; (8000d34 <HAL_GPIO_Init+0x2bc>)
 8000c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	3302      	adds	r3, #2
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d006      	beq.n	8000c9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c90:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	492c      	ldr	r1, [pc, #176]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	600b      	str	r3, [r1, #0]
 8000c9c:	e006      	b.n	8000cac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c9e:	4b2a      	ldr	r3, [pc, #168]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	4928      	ldr	r1, [pc, #160]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ca8:	4013      	ands	r3, r2
 8000caa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cba:	685a      	ldr	r2, [r3, #4]
 8000cbc:	4922      	ldr	r1, [pc, #136]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	604b      	str	r3, [r1, #4]
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cc6:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cc8:	685a      	ldr	r2, [r3, #4]
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	491e      	ldr	r1, [pc, #120]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d006      	beq.n	8000cee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	689a      	ldr	r2, [r3, #8]
 8000ce4:	4918      	ldr	r1, [pc, #96]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	69bb      	ldr	r3, [r7, #24]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	608b      	str	r3, [r1, #8]
 8000cec:	e006      	b.n	8000cfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cee:	4b16      	ldr	r3, [pc, #88]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cf0:	689a      	ldr	r2, [r3, #8]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	4914      	ldr	r1, [pc, #80]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d021      	beq.n	8000d4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	490e      	ldr	r1, [pc, #56]	; (8000d48 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	60cb      	str	r3, [r1, #12]
 8000d14:	e021      	b.n	8000d5a <HAL_GPIO_Init+0x2e2>
 8000d16:	bf00      	nop
 8000d18:	10320000 	.word	0x10320000
 8000d1c:	10310000 	.word	0x10310000
 8000d20:	10220000 	.word	0x10220000
 8000d24:	10210000 	.word	0x10210000
 8000d28:	10120000 	.word	0x10120000
 8000d2c:	10110000 	.word	0x10110000
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	40010800 	.word	0x40010800
 8000d3c:	40010c00 	.word	0x40010c00
 8000d40:	40011000 	.word	0x40011000
 8000d44:	40011400 	.word	0x40011400
 8000d48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d4c:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <HAL_GPIO_Init+0x304>)
 8000d4e:	68da      	ldr	r2, [r3, #12]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4909      	ldr	r1, [pc, #36]	; (8000d7c <HAL_GPIO_Init+0x304>)
 8000d56:	4013      	ands	r3, r2
 8000d58:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d66:	fa22 f303 	lsr.w	r3, r2, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f47f ae8e 	bne.w	8000a8c <HAL_GPIO_Init+0x14>
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	372c      	adds	r7, #44	; 0x2c
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bc80      	pop	{r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	40010400 	.word	0x40010400

08000d80 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000d86:	2201      	movs	r2, #1
 8000d88:	601a      	str	r2, [r3, #0]
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	420e0020 	.word	0x420e0020

08000d98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d101      	bne.n	8000daa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e26c      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0301 	and.w	r3, r3, #1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 8087 	beq.w	8000ec6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000db8:	4b92      	ldr	r3, [pc, #584]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 030c 	and.w	r3, r3, #12
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	d00c      	beq.n	8000dde <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dc4:	4b8f      	ldr	r3, [pc, #572]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 030c 	and.w	r3, r3, #12
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d112      	bne.n	8000df6 <HAL_RCC_OscConfig+0x5e>
 8000dd0:	4b8c      	ldr	r3, [pc, #560]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ddc:	d10b      	bne.n	8000df6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dde:	4b89      	ldr	r3, [pc, #548]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d06c      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x12c>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d168      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e246      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dfe:	d106      	bne.n	8000e0e <HAL_RCC_OscConfig+0x76>
 8000e00:	4b80      	ldr	r3, [pc, #512]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a7f      	ldr	r2, [pc, #508]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	e02e      	b.n	8000e6c <HAL_RCC_OscConfig+0xd4>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10c      	bne.n	8000e30 <HAL_RCC_OscConfig+0x98>
 8000e16:	4b7b      	ldr	r3, [pc, #492]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a7a      	ldr	r2, [pc, #488]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	4b78      	ldr	r3, [pc, #480]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a77      	ldr	r2, [pc, #476]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e2c:	6013      	str	r3, [r2, #0]
 8000e2e:	e01d      	b.n	8000e6c <HAL_RCC_OscConfig+0xd4>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e38:	d10c      	bne.n	8000e54 <HAL_RCC_OscConfig+0xbc>
 8000e3a:	4b72      	ldr	r3, [pc, #456]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a71      	ldr	r2, [pc, #452]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e44:	6013      	str	r3, [r2, #0]
 8000e46:	4b6f      	ldr	r3, [pc, #444]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a6e      	ldr	r2, [pc, #440]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e50:	6013      	str	r3, [r2, #0]
 8000e52:	e00b      	b.n	8000e6c <HAL_RCC_OscConfig+0xd4>
 8000e54:	4b6b      	ldr	r3, [pc, #428]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a6a      	ldr	r2, [pc, #424]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b68      	ldr	r3, [pc, #416]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a67      	ldr	r2, [pc, #412]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d013      	beq.n	8000e9c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fd16 	bl	80008a4 <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fd12 	bl	80008a4 <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b64      	cmp	r3, #100	; 0x64
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e1fa      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8e:	4b5d      	ldr	r3, [pc, #372]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f0      	beq.n	8000e7c <HAL_RCC_OscConfig+0xe4>
 8000e9a:	e014      	b.n	8000ec6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e9c:	f7ff fd02 	bl	80008a4 <HAL_GetTick>
 8000ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea2:	e008      	b.n	8000eb6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea4:	f7ff fcfe 	bl	80008a4 <HAL_GetTick>
 8000ea8:	4602      	mov	r2, r0
 8000eaa:	693b      	ldr	r3, [r7, #16]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	2b64      	cmp	r3, #100	; 0x64
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e1e6      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb6:	4b53      	ldr	r3, [pc, #332]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d1f0      	bne.n	8000ea4 <HAL_RCC_OscConfig+0x10c>
 8000ec2:	e000      	b.n	8000ec6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d063      	beq.n	8000f9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ed2:	4b4c      	ldr	r3, [pc, #304]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00b      	beq.n	8000ef6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ede:	4b49      	ldr	r3, [pc, #292]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f003 030c 	and.w	r3, r3, #12
 8000ee6:	2b08      	cmp	r3, #8
 8000ee8:	d11c      	bne.n	8000f24 <HAL_RCC_OscConfig+0x18c>
 8000eea:	4b46      	ldr	r3, [pc, #280]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d116      	bne.n	8000f24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ef6:	4b43      	ldr	r3, [pc, #268]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 0302 	and.w	r3, r3, #2
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d005      	beq.n	8000f0e <HAL_RCC_OscConfig+0x176>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	691b      	ldr	r3, [r3, #16]
 8000f06:	2b01      	cmp	r3, #1
 8000f08:	d001      	beq.n	8000f0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e1ba      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	695b      	ldr	r3, [r3, #20]
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	4939      	ldr	r1, [pc, #228]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f22:	e03a      	b.n	8000f9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d020      	beq.n	8000f6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f2c:	4b36      	ldr	r3, [pc, #216]	; (8001008 <HAL_RCC_OscConfig+0x270>)
 8000f2e:	2201      	movs	r2, #1
 8000f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f32:	f7ff fcb7 	bl	80008a4 <HAL_GetTick>
 8000f36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f38:	e008      	b.n	8000f4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3a:	f7ff fcb3 	bl	80008a4 <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	693b      	ldr	r3, [r7, #16]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d901      	bls.n	8000f4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	e19b      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f4c:	4b2d      	ldr	r3, [pc, #180]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d0f0      	beq.n	8000f3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f58:	4b2a      	ldr	r3, [pc, #168]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	695b      	ldr	r3, [r3, #20]
 8000f64:	00db      	lsls	r3, r3, #3
 8000f66:	4927      	ldr	r1, [pc, #156]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	600b      	str	r3, [r1, #0]
 8000f6c:	e015      	b.n	8000f9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <HAL_RCC_OscConfig+0x270>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fc96 	bl	80008a4 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fc92 	bl	80008a4 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e17a      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0308 	and.w	r3, r3, #8
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d03a      	beq.n	800101c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d019      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <HAL_RCC_OscConfig+0x274>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb4:	f7ff fc76 	bl	80008a4 <HAL_GetTick>
 8000fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fba:	e008      	b.n	8000fce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fbc:	f7ff fc72 	bl	80008a4 <HAL_GetTick>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	1ad3      	subs	r3, r2, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d901      	bls.n	8000fce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	e15a      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <HAL_RCC_OscConfig+0x26c>)
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d0f0      	beq.n	8000fbc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fda:	2001      	movs	r0, #1
 8000fdc:	f000 fb08 	bl	80015f0 <RCC_Delay>
 8000fe0:	e01c      	b.n	800101c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fe2:	4b0a      	ldr	r3, [pc, #40]	; (800100c <HAL_RCC_OscConfig+0x274>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fe8:	f7ff fc5c 	bl	80008a4 <HAL_GetTick>
 8000fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fee:	e00f      	b.n	8001010 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff0:	f7ff fc58 	bl	80008a4 <HAL_GetTick>
 8000ff4:	4602      	mov	r2, r0
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	d908      	bls.n	8001010 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e140      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
 8001002:	bf00      	nop
 8001004:	40021000 	.word	0x40021000
 8001008:	42420000 	.word	0x42420000
 800100c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001010:	4b9e      	ldr	r3, [pc, #632]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1e9      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80a6 	beq.w	8001176 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800102e:	4b97      	ldr	r3, [pc, #604]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10d      	bne.n	8001056 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	4b94      	ldr	r3, [pc, #592]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	4a93      	ldr	r2, [pc, #588]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	61d3      	str	r3, [r2, #28]
 8001046:	4b91      	ldr	r3, [pc, #580]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001048:	69db      	ldr	r3, [r3, #28]
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001052:	2301      	movs	r3, #1
 8001054:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001056:	4b8e      	ldr	r3, [pc, #568]	; (8001290 <HAL_RCC_OscConfig+0x4f8>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	2b00      	cmp	r3, #0
 8001060:	d118      	bne.n	8001094 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001062:	4b8b      	ldr	r3, [pc, #556]	; (8001290 <HAL_RCC_OscConfig+0x4f8>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a8a      	ldr	r2, [pc, #552]	; (8001290 <HAL_RCC_OscConfig+0x4f8>)
 8001068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800106e:	f7ff fc19 	bl	80008a4 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001074:	e008      	b.n	8001088 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001076:	f7ff fc15 	bl	80008a4 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b64      	cmp	r3, #100	; 0x64
 8001082:	d901      	bls.n	8001088 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e0fd      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001088:	4b81      	ldr	r3, [pc, #516]	; (8001290 <HAL_RCC_OscConfig+0x4f8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001090:	2b00      	cmp	r3, #0
 8001092:	d0f0      	beq.n	8001076 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b01      	cmp	r3, #1
 800109a:	d106      	bne.n	80010aa <HAL_RCC_OscConfig+0x312>
 800109c:	4b7b      	ldr	r3, [pc, #492]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4a7a      	ldr	r2, [pc, #488]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6213      	str	r3, [r2, #32]
 80010a8:	e02d      	b.n	8001106 <HAL_RCC_OscConfig+0x36e>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d10c      	bne.n	80010cc <HAL_RCC_OscConfig+0x334>
 80010b2:	4b76      	ldr	r3, [pc, #472]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010b4:	6a1b      	ldr	r3, [r3, #32]
 80010b6:	4a75      	ldr	r2, [pc, #468]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010b8:	f023 0301 	bic.w	r3, r3, #1
 80010bc:	6213      	str	r3, [r2, #32]
 80010be:	4b73      	ldr	r3, [pc, #460]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010c0:	6a1b      	ldr	r3, [r3, #32]
 80010c2:	4a72      	ldr	r2, [pc, #456]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010c4:	f023 0304 	bic.w	r3, r3, #4
 80010c8:	6213      	str	r3, [r2, #32]
 80010ca:	e01c      	b.n	8001106 <HAL_RCC_OscConfig+0x36e>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b05      	cmp	r3, #5
 80010d2:	d10c      	bne.n	80010ee <HAL_RCC_OscConfig+0x356>
 80010d4:	4b6d      	ldr	r3, [pc, #436]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010d6:	6a1b      	ldr	r3, [r3, #32]
 80010d8:	4a6c      	ldr	r2, [pc, #432]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6213      	str	r3, [r2, #32]
 80010e0:	4b6a      	ldr	r3, [pc, #424]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4a69      	ldr	r2, [pc, #420]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6213      	str	r3, [r2, #32]
 80010ec:	e00b      	b.n	8001106 <HAL_RCC_OscConfig+0x36e>
 80010ee:	4b67      	ldr	r3, [pc, #412]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010f0:	6a1b      	ldr	r3, [r3, #32]
 80010f2:	4a66      	ldr	r2, [pc, #408]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010f4:	f023 0301 	bic.w	r3, r3, #1
 80010f8:	6213      	str	r3, [r2, #32]
 80010fa:	4b64      	ldr	r3, [pc, #400]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80010fc:	6a1b      	ldr	r3, [r3, #32]
 80010fe:	4a63      	ldr	r2, [pc, #396]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001100:	f023 0304 	bic.w	r3, r3, #4
 8001104:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d015      	beq.n	800113a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800110e:	f7ff fbc9 	bl	80008a4 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001114:	e00a      	b.n	800112c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001116:	f7ff fbc5 	bl	80008a4 <HAL_GetTick>
 800111a:	4602      	mov	r2, r0
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	f241 3288 	movw	r2, #5000	; 0x1388
 8001124:	4293      	cmp	r3, r2
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e0ab      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112c:	4b57      	ldr	r3, [pc, #348]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800112e:	6a1b      	ldr	r3, [r3, #32]
 8001130:	f003 0302 	and.w	r3, r3, #2
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0ee      	beq.n	8001116 <HAL_RCC_OscConfig+0x37e>
 8001138:	e014      	b.n	8001164 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113a:	f7ff fbb3 	bl	80008a4 <HAL_GetTick>
 800113e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001140:	e00a      	b.n	8001158 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001142:	f7ff fbaf 	bl	80008a4 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001150:	4293      	cmp	r3, r2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e095      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001158:	4b4c      	ldr	r3, [pc, #304]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800115a:	6a1b      	ldr	r3, [r3, #32]
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1ee      	bne.n	8001142 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001164:	7dfb      	ldrb	r3, [r7, #23]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d105      	bne.n	8001176 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800116a:	4b48      	ldr	r3, [pc, #288]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	4a47      	ldr	r2, [pc, #284]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001170:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001174:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	2b00      	cmp	r3, #0
 800117c:	f000 8081 	beq.w	8001282 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001180:	4b42      	ldr	r3, [pc, #264]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 030c 	and.w	r3, r3, #12
 8001188:	2b08      	cmp	r3, #8
 800118a:	d061      	beq.n	8001250 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	2b02      	cmp	r3, #2
 8001192:	d146      	bne.n	8001222 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001194:	4b3f      	ldr	r3, [pc, #252]	; (8001294 <HAL_RCC_OscConfig+0x4fc>)
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119a:	f7ff fb83 	bl	80008a4 <HAL_GetTick>
 800119e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a2:	f7ff fb7f 	bl	80008a4 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e067      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b4:	4b35      	ldr	r3, [pc, #212]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1f0      	bne.n	80011a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011c8:	d108      	bne.n	80011dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ca:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	492d      	ldr	r1, [pc, #180]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011dc:	4b2b      	ldr	r3, [pc, #172]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6a19      	ldr	r1, [r3, #32]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	430b      	orrs	r3, r1
 80011ee:	4927      	ldr	r1, [pc, #156]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 80011f0:	4313      	orrs	r3, r2
 80011f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <HAL_RCC_OscConfig+0x4fc>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fa:	f7ff fb53 	bl	80008a4 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001202:	f7ff fb4f 	bl	80008a4 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e037      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x46a>
 8001220:	e02f      	b.n	8001282 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001222:	4b1c      	ldr	r3, [pc, #112]	; (8001294 <HAL_RCC_OscConfig+0x4fc>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fb3c 	bl	80008a4 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001230:	f7ff fb38 	bl	80008a4 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e020      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x498>
 800124e:	e018      	b.n	8001282 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e013      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_RCC_OscConfig+0x4f4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	429a      	cmp	r2, r3
 800126e:	d106      	bne.n	800127e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127a:	429a      	cmp	r2, r3
 800127c:	d001      	beq.n	8001282 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e000      	b.n	8001284 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40021000 	.word	0x40021000
 8001290:	40007000 	.word	0x40007000
 8001294:	42420060 	.word	0x42420060

08001298 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e0d0      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012ac:	4b6a      	ldr	r3, [pc, #424]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	683a      	ldr	r2, [r7, #0]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d910      	bls.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012ba:	4b67      	ldr	r3, [pc, #412]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 0207 	bic.w	r2, r3, #7
 80012c2:	4965      	ldr	r1, [pc, #404]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ca:	4b63      	ldr	r3, [pc, #396]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d001      	beq.n	80012dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	e0b8      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0302 	and.w	r3, r3, #2
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012f4:	4b59      	ldr	r3, [pc, #356]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4a58      	ldr	r2, [pc, #352]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80012fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f003 0308 	and.w	r3, r3, #8
 8001308:	2b00      	cmp	r3, #0
 800130a:	d005      	beq.n	8001318 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800130c:	4b53      	ldr	r3, [pc, #332]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	4a52      	ldr	r2, [pc, #328]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001312:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001316:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001318:	4b50      	ldr	r3, [pc, #320]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	494d      	ldr	r1, [pc, #308]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d040      	beq.n	80013b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d107      	bne.n	800134e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800133e:	4b47      	ldr	r3, [pc, #284]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d115      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e07f      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2b02      	cmp	r3, #2
 8001354:	d107      	bne.n	8001366 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001356:	4b41      	ldr	r3, [pc, #260]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d109      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e073      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e06b      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001376:	4b39      	ldr	r3, [pc, #228]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f023 0203 	bic.w	r2, r3, #3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4936      	ldr	r1, [pc, #216]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001384:	4313      	orrs	r3, r2
 8001386:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001388:	f7ff fa8c 	bl	80008a4 <HAL_GetTick>
 800138c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138e:	e00a      	b.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001390:	f7ff fa88 	bl	80008a4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	; 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e053      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	4b2d      	ldr	r3, [pc, #180]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 020c 	and.w	r2, r3, #12
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d1eb      	bne.n	8001390 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	683a      	ldr	r2, [r7, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d210      	bcs.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f023 0207 	bic.w	r2, r3, #7
 80013ce:	4922      	ldr	r1, [pc, #136]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	683a      	ldr	r2, [r7, #0]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e032      	b.n	800144e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d008      	beq.n	8001406 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013f4:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4916      	ldr	r1, [pc, #88]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001402:	4313      	orrs	r3, r2
 8001404:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f003 0308 	and.w	r3, r3, #8
 800140e:	2b00      	cmp	r3, #0
 8001410:	d009      	beq.n	8001426 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001412:	4b12      	ldr	r3, [pc, #72]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	691b      	ldr	r3, [r3, #16]
 800141e:	00db      	lsls	r3, r3, #3
 8001420:	490e      	ldr	r1, [pc, #56]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	4313      	orrs	r3, r2
 8001424:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001426:	f000 f821 	bl	800146c <HAL_RCC_GetSysClockFreq>
 800142a:	4602      	mov	r2, r0
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_ClockConfig+0x1c4>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	091b      	lsrs	r3, r3, #4
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	490a      	ldr	r1, [pc, #40]	; (8001460 <HAL_RCC_ClockConfig+0x1c8>)
 8001438:	5ccb      	ldrb	r3, [r1, r3]
 800143a:	fa22 f303 	lsr.w	r3, r2, r3
 800143e:	4a09      	ldr	r2, [pc, #36]	; (8001464 <HAL_RCC_ClockConfig+0x1cc>)
 8001440:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <HAL_RCC_ClockConfig+0x1d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f89e 	bl	8000588 <HAL_InitTick>

  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	40022000 	.word	0x40022000
 800145c:	40021000 	.word	0x40021000
 8001460:	08004c44 	.word	0x08004c44
 8001464:	20000000 	.word	0x20000000
 8001468:	20000004 	.word	0x20000004

0800146c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800146c:	b490      	push	{r4, r7}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001474:	1d3c      	adds	r4, r7, #4
 8001476:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001478:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800147c:	f240 2301 	movw	r3, #513	; 0x201
 8001480:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
 800148e:	2300      	movs	r3, #0
 8001490:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001496:	4b22      	ldr	r3, [pc, #136]	; (8001520 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	f003 030c 	and.w	r3, r3, #12
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	d002      	beq.n	80014ac <HAL_RCC_GetSysClockFreq+0x40>
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	d003      	beq.n	80014b2 <HAL_RCC_GetSysClockFreq+0x46>
 80014aa:	e02d      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ae:	623b      	str	r3, [r7, #32]
      break;
 80014b0:	e02d      	b.n	800150e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014b2:	69fb      	ldr	r3, [r7, #28]
 80014b4:	0c9b      	lsrs	r3, r3, #18
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014be:	4413      	add	r3, r2
 80014c0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014c4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d013      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014d0:	4b13      	ldr	r3, [pc, #76]	; (8001520 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	0c5b      	lsrs	r3, r3, #17
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014de:	4413      	add	r3, r2
 80014e0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014e4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	4a0e      	ldr	r2, [pc, #56]	; (8001524 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ea:	fb02 f203 	mul.w	r2, r2, r3
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
 80014f6:	e004      	b.n	8001502 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <HAL_RCC_GetSysClockFreq+0xbc>)
 80014fc:	fb02 f303 	mul.w	r3, r2, r3
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001504:	623b      	str	r3, [r7, #32]
      break;
 8001506:	e002      	b.n	800150e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <HAL_RCC_GetSysClockFreq+0xb8>)
 800150a:	623b      	str	r3, [r7, #32]
      break;
 800150c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800150e:	6a3b      	ldr	r3, [r7, #32]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bc90      	pop	{r4, r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	08004c1c 	.word	0x08004c1c
 8001520:	40021000 	.word	0x40021000
 8001524:	007a1200 	.word	0x007a1200
 8001528:	003d0900 	.word	0x003d0900

0800152c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001530:	4b02      	ldr	r3, [pc, #8]	; (800153c <HAL_RCC_GetHCLKFreq+0x10>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	bc80      	pop	{r7}
 800153a:	4770      	bx	lr
 800153c:	20000000 	.word	0x20000000

08001540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001544:	f7ff fff2 	bl	800152c <HAL_RCC_GetHCLKFreq>
 8001548:	4602      	mov	r2, r0
 800154a:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	0a1b      	lsrs	r3, r3, #8
 8001550:	f003 0307 	and.w	r3, r3, #7
 8001554:	4903      	ldr	r1, [pc, #12]	; (8001564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001556:	5ccb      	ldrb	r3, [r1, r3]
 8001558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800155c:	4618      	mov	r0, r3
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40021000 	.word	0x40021000
 8001564:	08004c54 	.word	0x08004c54

08001568 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800156c:	f7ff ffde 	bl	800152c <HAL_RCC_GetHCLKFreq>
 8001570:	4602      	mov	r2, r0
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	0adb      	lsrs	r3, r3, #11
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	4903      	ldr	r1, [pc, #12]	; (800158c <HAL_RCC_GetPCLK2Freq+0x24>)
 800157e:	5ccb      	ldrb	r3, [r1, r3]
 8001580:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001584:	4618      	mov	r0, r3
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40021000 	.word	0x40021000
 800158c:	08004c54 	.word	0x08004c54

08001590 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	220f      	movs	r2, #15
 800159e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <HAL_RCC_GetClockConfig+0x58>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0203 	and.w	r2, r3, #3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_RCC_GetClockConfig+0x58>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_RCC_GetClockConfig+0x58>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_RCC_GetClockConfig+0x58>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015d2:	4b06      	ldr	r3, [pc, #24]	; (80015ec <HAL_RCC_GetClockConfig+0x5c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0207 	and.w	r2, r3, #7
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80015de:	bf00      	nop
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bc80      	pop	{r7}
 80015e6:	4770      	bx	lr
 80015e8:	40021000 	.word	0x40021000
 80015ec:	40022000 	.word	0x40022000

080015f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <RCC_Delay+0x34>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <RCC_Delay+0x38>)
 80015fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001602:	0a5b      	lsrs	r3, r3, #9
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	fb02 f303 	mul.w	r3, r2, r3
 800160a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800160c:	bf00      	nop
  }
  while (Delay --);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	1e5a      	subs	r2, r3, #1
 8001612:	60fa      	str	r2, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f9      	bne.n	800160c <RCC_Delay+0x1c>
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	20000000 	.word	0x20000000
 8001628:	10624dd3 	.word	0x10624dd3

0800162c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d07d      	beq.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001648:	2300      	movs	r3, #0
 800164a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800164c:	4b4f      	ldr	r3, [pc, #316]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d10d      	bne.n	8001674 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001658:	4b4c      	ldr	r3, [pc, #304]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	4a4b      	ldr	r2, [pc, #300]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800165e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001662:	61d3      	str	r3, [r2, #28]
 8001664:	4b49      	ldr	r3, [pc, #292]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001666:	69db      	ldr	r3, [r3, #28]
 8001668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001670:	2301      	movs	r3, #1
 8001672:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001674:	4b46      	ldr	r3, [pc, #280]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d118      	bne.n	80016b2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001680:	4b43      	ldr	r3, [pc, #268]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a42      	ldr	r2, [pc, #264]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800168c:	f7ff f90a 	bl	80008a4 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	e008      	b.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001694:	f7ff f906 	bl	80008a4 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b64      	cmp	r3, #100	; 0x64
 80016a0:	d901      	bls.n	80016a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e06d      	b.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a6:	4b3a      	ldr	r3, [pc, #232]	; (8001790 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80016b2:	4b36      	ldr	r3, [pc, #216]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016b4:	6a1b      	ldr	r3, [r3, #32]
 80016b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d02e      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d027      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016d0:	4b2e      	ldr	r3, [pc, #184]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016d8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016da:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80016dc:	2201      	movs	r2, #1
 80016de:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016e0:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016e6:	4a29      	ldr	r2, [pc, #164]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d014      	beq.n	8001720 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff f8d5 	bl	80008a4 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016fc:	e00a      	b.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016fe:	f7ff f8d1 	bl	80008a4 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	f241 3288 	movw	r2, #5000	; 0x1388
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e036      	b.n	8001782 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ee      	beq.n	80016fe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001720:	4b1a      	ldr	r3, [pc, #104]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4917      	ldr	r1, [pc, #92]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800172e:	4313      	orrs	r3, r2
 8001730:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001732:	7dfb      	ldrb	r3, [r7, #23]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	4a13      	ldr	r2, [pc, #76]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800173e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001742:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d008      	beq.n	8001762 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001750:	4b0e      	ldr	r3, [pc, #56]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	490b      	ldr	r1, [pc, #44]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800175e:	4313      	orrs	r3, r2
 8001760:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0310 	and.w	r3, r3, #16
 800176a:	2b00      	cmp	r3, #0
 800176c:	d008      	beq.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	4904      	ldr	r1, [pc, #16]	; (800178c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40021000 	.word	0x40021000
 8001790:	40007000 	.word	0x40007000
 8001794:	42420440 	.word	0x42420440

08001798 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b08d      	sub	sp, #52	; 0x34
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80017a0:	4b5a      	ldr	r3, [pc, #360]	; (800190c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80017a2:	f107 040c 	add.w	r4, r7, #12
 80017a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80017a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80017ac:	f240 2301 	movw	r3, #513	; 0x201
 80017b0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
 80017b6:	2300      	movs	r3, #0
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ba:	2300      	movs	r3, #0
 80017bc:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	2300      	movs	r3, #0
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b10      	cmp	r3, #16
 80017ca:	d00a      	beq.n	80017e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b10      	cmp	r3, #16
 80017d0:	f200 8091 	bhi.w	80018f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d04c      	beq.n	8001874 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d07c      	beq.n	80018da <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80017e0:	e089      	b.n	80018f6 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80017e2:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80017e8:	4b49      	ldr	r3, [pc, #292]	; (8001910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f000 8082 	beq.w	80018fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	0c9b      	lsrs	r3, r3, #18
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001802:	4413      	add	r3, r2
 8001804:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001808:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001810:	2b00      	cmp	r3, #0
 8001812:	d018      	beq.n	8001846 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001814:	4b3e      	ldr	r3, [pc, #248]	; (8001910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	0c5b      	lsrs	r3, r3, #17
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001822:	4413      	add	r3, r2
 8001824:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00d      	beq.n	8001850 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001834:	4a37      	ldr	r2, [pc, #220]	; (8001914 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	fbb2 f2f3 	udiv	r2, r2, r3
 800183c:	6a3b      	ldr	r3, [r7, #32]
 800183e:	fb02 f303 	mul.w	r3, r2, r3
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001844:	e004      	b.n	8001850 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001846:	6a3b      	ldr	r3, [r7, #32]
 8001848:	4a33      	ldr	r2, [pc, #204]	; (8001918 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800184a:	fb02 f303 	mul.w	r3, r2, r3
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001850:	4b2f      	ldr	r3, [pc, #188]	; (8001910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001858:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800185c:	d102      	bne.n	8001864 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001862:	e04a      	b.n	80018fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	4a2c      	ldr	r2, [pc, #176]	; (800191c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800186a:	fba2 2303 	umull	r2, r3, r2, r3
 800186e:	085b      	lsrs	r3, r3, #1
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001872:	e042      	b.n	80018fa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001874:	4b26      	ldr	r3, [pc, #152]	; (8001910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001876:	6a1b      	ldr	r3, [r3, #32]
 8001878:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001880:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001884:	d108      	bne.n	8001898 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d003      	beq.n	8001898 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
 8001896:	e01f      	b.n	80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800189e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018a2:	d109      	bne.n	80018b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80018a4:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80018b0:	f649 4340 	movw	r3, #40000	; 0x9c40
 80018b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80018b6:	e00f      	b.n	80018d8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018c2:	d11c      	bne.n	80018fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d016      	beq.n	80018fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80018d0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80018d6:	e012      	b.n	80018fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80018d8:	e011      	b.n	80018fe <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80018da:	f7ff fe45 	bl	8001568 <HAL_RCC_GetPCLK2Freq>
 80018de:	4602      	mov	r2, r0
 80018e0:	4b0b      	ldr	r3, [pc, #44]	; (8001910 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	0b9b      	lsrs	r3, r3, #14
 80018e6:	f003 0303 	and.w	r3, r3, #3
 80018ea:	3301      	adds	r3, #1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80018f4:	e004      	b.n	8001900 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80018f6:	bf00      	nop
 80018f8:	e002      	b.n	8001900 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80018fa:	bf00      	nop
 80018fc:	e000      	b.n	8001900 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80018fe:	bf00      	nop
    }
  }
  return (frequency);
 8001900:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001902:	4618      	mov	r0, r3
 8001904:	3734      	adds	r7, #52	; 0x34
 8001906:	46bd      	mov	sp, r7
 8001908:	bd90      	pop	{r4, r7, pc}
 800190a:	bf00      	nop
 800190c:	08004c2c 	.word	0x08004c2c
 8001910:	40021000 	.word	0x40021000
 8001914:	007a1200 	.word	0x007a1200
 8001918:	003d0900 	.word	0x003d0900
 800191c:	aaaaaaab 	.word	0xaaaaaaab

08001920 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e084      	b.n	8001a40 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7c5b      	ldrb	r3, [r3, #17]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe fdc8 	bl	80004dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2202      	movs	r2, #2
 8001950:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 faa0 	bl	8001e98 <HAL_RTC_WaitForSynchro>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d004      	beq.n	8001968 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2204      	movs	r2, #4
 8001962:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e06b      	b.n	8001a40 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fb59 	bl	8002020 <RTC_EnterInitMode>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d004      	beq.n	800197e <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2204      	movs	r2, #4
 8001978:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e060      	b.n	8001a40 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0207 	bic.w	r2, r2, #7
 800198c:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_RTC_Init+0x128>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a2b      	ldr	r2, [pc, #172]	; (8001a48 <HAL_RTC_Init+0x128>)
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80019a2:	4b29      	ldr	r3, [pc, #164]	; (8001a48 <HAL_RTC_Init+0x128>)
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	4926      	ldr	r1, [pc, #152]	; (8001a48 <HAL_RTC_Init+0x128>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019bc:	d003      	beq.n	80019c6 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e00e      	b.n	80019e4 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff fee6 	bl	8001798 <HAL_RCCEx_GetPeriphCLKFreq>
 80019cc:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d104      	bne.n	80019de <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2204      	movs	r2, #4
 80019d8:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e030      	b.n	8001a40 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f023 010f 	bic.w	r1, r3, #15
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	0c1a      	lsrs	r2, r3, #16
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0c1b      	lsrs	r3, r3, #16
 8001a02:	041b      	lsls	r3, r3, #16
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	b291      	uxth	r1, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f000 fb2d 	bl	8002070 <RTC_ExitInitMode>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d004      	beq.n	8001a26 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2204      	movs	r2, #4
 8001a20:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00c      	b.n	8001a40 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
  }
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40006c00 	.word	0x40006c00

08001a4c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a4c:	b590      	push	{r4, r7, lr}
 8001a4e:	b087      	sub	sp, #28
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <HAL_RTC_SetTime+0x20>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e080      	b.n	8001b72 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	7c1b      	ldrb	r3, [r3, #16]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d101      	bne.n	8001a7c <HAL_RTC_SetTime+0x30>
 8001a78:	2302      	movs	r3, #2
 8001a7a:	e07a      	b.n	8001b72 <HAL_RTC_SetTime+0x126>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2202      	movs	r2, #2
 8001a86:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d113      	bne.n	8001ab6 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	461a      	mov	r2, r3
 8001a94:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a98:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	011b      	lsls	r3, r3, #4
 8001aa6:	1a5b      	subs	r3, r3, r1
 8001aa8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001aaa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001aac:	68ba      	ldr	r2, [r7, #8]
 8001aae:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001ab0:	4413      	add	r3, r2
 8001ab2:	617b      	str	r3, [r7, #20]
 8001ab4:	e01e      	b.n	8001af4 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 fb1d 	bl	80020fa <RTC_Bcd2ToByte>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001ac8:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	785b      	ldrb	r3, [r3, #1]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fb12 	bl	80020fa <RTC_Bcd2ToByte>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4613      	mov	r3, r2
 8001adc:	011b      	lsls	r3, r3, #4
 8001ade:	1a9b      	subs	r3, r3, r2
 8001ae0:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ae2:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	789b      	ldrb	r3, [r3, #2]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 fb06 	bl	80020fa <RTC_Bcd2ToByte>
 8001aee:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001af0:	4423      	add	r3, r4
 8001af2:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001af4:	6979      	ldr	r1, [r7, #20]
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f000 fa2b 	bl	8001f52 <RTC_WriteTimeCounter>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d007      	beq.n	8001b12 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	2204      	movs	r2, #4
 8001b06:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e02f      	b.n	8001b72 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0205 	bic.w	r2, r2, #5
 8001b20:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001b22:	68f8      	ldr	r0, [r7, #12]
 8001b24:	f000 fa3c 	bl	8001fa0 <RTC_ReadAlarmCounter>
 8001b28:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b30:	d018      	beq.n	8001b64 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d214      	bcs.n	8001b64 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001b40:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b44:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001b46:	6939      	ldr	r1, [r7, #16]
 8001b48:	68f8      	ldr	r0, [r7, #12]
 8001b4a:	f000 fa42 	bl	8001fd2 <RTC_WriteAlarmCounter>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d007      	beq.n	8001b64 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2204      	movs	r2, #4
 8001b58:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e006      	b.n	8001b72 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001b70:	2300      	movs	r3, #0
  }
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd90      	pop	{r4, r7, pc}
	...

08001b7c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b088      	sub	sp, #32
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61bb      	str	r3, [r7, #24]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <HAL_RTC_GetTime+0x28>
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e0b5      	b.n	8001d14 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e0ac      	b.n	8001d14 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f999 	bl	8001ef2 <RTC_ReadTimeCounter>
 8001bc0:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	4a55      	ldr	r2, [pc, #340]	; (8001d1c <HAL_RTC_GetTime+0x1a0>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0adb      	lsrs	r3, r3, #11
 8001bcc:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	4b52      	ldr	r3, [pc, #328]	; (8001d1c <HAL_RTC_GetTime+0x1a0>)
 8001bd2:	fba3 1302 	umull	r1, r3, r3, r2
 8001bd6:	0adb      	lsrs	r3, r3, #11
 8001bd8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001bdc:	fb01 f303 	mul.w	r3, r1, r3
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	4a4f      	ldr	r2, [pc, #316]	; (8001d20 <HAL_RTC_GetTime+0x1a4>)
 8001be4:	fba2 2303 	umull	r2, r3, r2, r3
 8001be8:	095b      	lsrs	r3, r3, #5
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	4a4a      	ldr	r2, [pc, #296]	; (8001d1c <HAL_RTC_GetTime+0x1a0>)
 8001bf4:	fba2 1203 	umull	r1, r2, r2, r3
 8001bf8:	0ad2      	lsrs	r2, r2, #11
 8001bfa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8001bfe:	fb01 f202 	mul.w	r2, r1, r2
 8001c02:	1a9a      	subs	r2, r3, r2
 8001c04:	4b46      	ldr	r3, [pc, #280]	; (8001d20 <HAL_RTC_GetTime+0x1a4>)
 8001c06:	fba3 1302 	umull	r1, r3, r3, r2
 8001c0a:	0959      	lsrs	r1, r3, #5
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	011b      	lsls	r3, r3, #4
 8001c10:	1a5b      	subs	r3, r3, r1
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	1ad1      	subs	r1, r2, r3
 8001c16:	b2ca      	uxtb	r2, r1
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	2b17      	cmp	r3, #23
 8001c20:	d955      	bls.n	8001cce <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	4a3f      	ldr	r2, [pc, #252]	; (8001d24 <HAL_RTC_GetTime+0x1a8>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8001c2e:	6939      	ldr	r1, [r7, #16]
 8001c30:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <HAL_RTC_GetTime+0x1a8>)
 8001c32:	fba3 2301 	umull	r2, r3, r3, r1
 8001c36:	091a      	lsrs	r2, r3, #4
 8001c38:	4613      	mov	r3, r2
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	4413      	add	r3, r2
 8001c3e:	00db      	lsls	r3, r3, #3
 8001c40:	1aca      	subs	r2, r1, r3
 8001c42:	b2d2      	uxtb	r2, r2
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c48:	68f8      	ldr	r0, [r7, #12]
 8001c4a:	f000 f9a9 	bl	8001fa0 <RTC_ReadAlarmCounter>
 8001c4e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c56:	d008      	beq.n	8001c6a <HAL_RTC_GetTime+0xee>
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d904      	bls.n	8001c6a <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8001c60:	69fa      	ldr	r2, [r7, #28]
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	61fb      	str	r3, [r7, #28]
 8001c68:	e002      	b.n	8001c70 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c6e:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	4a2d      	ldr	r2, [pc, #180]	; (8001d28 <HAL_RTC_GetTime+0x1ac>)
 8001c74:	fb02 f303 	mul.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001c7e:	69b9      	ldr	r1, [r7, #24]
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f966 	bl	8001f52 <RTC_WriteTimeCounter>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e041      	b.n	8001d14 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c96:	d00c      	beq.n	8001cb2 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8001c98:	69fa      	ldr	r2, [r7, #28]
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001ca0:	69f9      	ldr	r1, [r7, #28]
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	f000 f995 	bl	8001fd2 <RTC_WriteAlarmCounter>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00a      	beq.n	8001cc4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e030      	b.n	8001d14 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001cb2:	69f9      	ldr	r1, [r7, #28]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f000 f98c 	bl	8001fd2 <RTC_WriteAlarmCounter>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e027      	b.n	8001d14 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8001cc4:	6979      	ldr	r1, [r7, #20]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fa34 	bl	8002134 <RTC_DateUpdate>
 8001ccc:	e003      	b.n	8001cd6 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d01a      	beq.n	8001d12 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f000 f9ed 	bl	80020c0 <RTC_ByteToBcd2>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	461a      	mov	r2, r3
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	785b      	ldrb	r3, [r3, #1]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 f9e4 	bl	80020c0 <RTC_ByteToBcd2>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	789b      	ldrb	r3, [r3, #2]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f9db 	bl	80020c0 <RTC_ByteToBcd2>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	91a2b3c5 	.word	0x91a2b3c5
 8001d20:	88888889 	.word	0x88888889
 8001d24:	aaaaaaab 	.word	0xaaaaaaab
 8001d28:	00015180 	.word	0x00015180

08001d2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b088      	sub	sp, #32
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61fb      	str	r3, [r7, #28]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <HAL_RTC_SetDate+0x24>
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e097      	b.n	8001e84 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	7c1b      	ldrb	r3, [r3, #16]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_RTC_SetDate+0x34>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e091      	b.n	8001e84 <HAL_RTC_SetDate+0x158>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d10c      	bne.n	8001d8c <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	78da      	ldrb	r2, [r3, #3]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	785a      	ldrb	r2, [r3, #1]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	789a      	ldrb	r2, [r3, #2]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	739a      	strb	r2, [r3, #14]
 8001d8a:	e01a      	b.n	8001dc2 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	78db      	ldrb	r3, [r3, #3]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f000 f9b2 	bl	80020fa <RTC_Bcd2ToByte>
 8001d96:	4603      	mov	r3, r0
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	785b      	ldrb	r3, [r3, #1]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f9a9 	bl	80020fa <RTC_Bcd2ToByte>
 8001da8:	4603      	mov	r3, r0
 8001daa:	461a      	mov	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	789b      	ldrb	r3, [r3, #2]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 f9a0 	bl	80020fa <RTC_Bcd2ToByte>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	7bdb      	ldrb	r3, [r3, #15]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	7b59      	ldrb	r1, [r3, #13]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	7b9b      	ldrb	r3, [r3, #14]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f000 fa8b 	bl	80022ec <RTC_WeekDayNum>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	461a      	mov	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	7b1a      	ldrb	r2, [r3, #12]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	f000 f883 	bl	8001ef2 <RTC_ReadTimeCounter>
 8001dec:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4a26      	ldr	r2, [pc, #152]	; (8001e8c <HAL_RTC_SetDate+0x160>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0adb      	lsrs	r3, r3, #11
 8001df8:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2b18      	cmp	r3, #24
 8001dfe:	d93a      	bls.n	8001e76 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	4a23      	ldr	r2, [pc, #140]	; (8001e90 <HAL_RTC_SetDate+0x164>)
 8001e04:	fba2 2303 	umull	r2, r3, r2, r3
 8001e08:	091b      	lsrs	r3, r3, #4
 8001e0a:	4a22      	ldr	r2, [pc, #136]	; (8001e94 <HAL_RTC_SetDate+0x168>)
 8001e0c:	fb02 f303 	mul.w	r3, r2, r3
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001e16:	69f9      	ldr	r1, [r7, #28]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f000 f89a 	bl	8001f52 <RTC_WriteTimeCounter>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d007      	beq.n	8001e34 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2204      	movs	r2, #4
 8001e28:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e027      	b.n	8001e84 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f000 f8b3 	bl	8001fa0 <RTC_ReadAlarmCounter>
 8001e3a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e42:	d018      	beq.n	8001e76 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d214      	bcs.n	8001e76 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001e52:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001e56:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001e58:	69b9      	ldr	r1, [r7, #24]
 8001e5a:	68f8      	ldr	r0, [r7, #12]
 8001e5c:	f000 f8b9 	bl	8001fd2 <RTC_WriteAlarmCounter>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d007      	beq.n	8001e76 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e006      	b.n	8001e84 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2201      	movs	r2, #1
 8001e7a:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3720      	adds	r7, #32
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	91a2b3c5 	.word	0x91a2b3c5
 8001e90:	aaaaaaab 	.word	0xaaaaaaab
 8001e94:	00015180 	.word	0x00015180

08001e98 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e01d      	b.n	8001eea <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0208 	bic.w	r2, r2, #8
 8001ebc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001ebe:	f7fe fcf1 	bl	80008a4 <HAL_GetTick>
 8001ec2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001ec4:	e009      	b.n	8001eda <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001ec6:	f7fe fced 	bl	80008a4 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed4:	d901      	bls.n	8001eda <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e007      	b.n	8001eea <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d0ee      	beq.n	8001ec6 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3710      	adds	r7, #16
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b087      	sub	sp, #28
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	827b      	strh	r3, [r7, #18]
 8001efe:	2300      	movs	r3, #0
 8001f00:	823b      	strh	r3, [r7, #16]
 8001f02:	2300      	movs	r3, #0
 8001f04:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	69db      	ldr	r3, [r3, #28]
 8001f18:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001f22:	8a7a      	ldrh	r2, [r7, #18]
 8001f24:	8a3b      	ldrh	r3, [r7, #16]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d008      	beq.n	8001f3c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001f2a:	8a3b      	ldrh	r3, [r7, #16]
 8001f2c:	041a      	lsls	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	b29b      	uxth	r3, r3
 8001f36:	4313      	orrs	r3, r2
 8001f38:	617b      	str	r3, [r7, #20]
 8001f3a:	e004      	b.n	8001f46 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001f3c:	8a7b      	ldrh	r3, [r7, #18]
 8001f3e:	041a      	lsls	r2, r3, #16
 8001f40:	89fb      	ldrh	r3, [r7, #14]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001f46:	697b      	ldr	r3, [r7, #20]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	371c      	adds	r7, #28
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f000 f85d 	bl	8002020 <RTC_EnterInitMode>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d002      	beq.n	8001f72 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	73fb      	strb	r3, [r7, #15]
 8001f70:	e011      	b.n	8001f96 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	0c12      	lsrs	r2, r2, #16
 8001f7a:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	b292      	uxth	r2, r2
 8001f84:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f872 	bl	8002070 <RTC_ExitInitMode>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	81fb      	strh	r3, [r7, #14]
 8001fac:	2300      	movs	r3, #0
 8001fae:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001fc0:	89fb      	ldrh	r3, [r7, #14]
 8001fc2:	041a      	lsls	r2, r3, #16
 8001fc4:	89bb      	ldrh	r3, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr

08001fd2 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f81d 	bl	8002020 <RTC_EnterInitMode>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d002      	beq.n	8001ff2 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
 8001ff0:	e011      	b.n	8002016 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	0c12      	lsrs	r2, r2, #16
 8001ffa:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	b292      	uxth	r2, r2
 8002004:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f832 	bl	8002070 <RTC_ExitInitMode>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800202c:	f7fe fc3a 	bl	80008a4 <HAL_GetTick>
 8002030:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002032:	e009      	b.n	8002048 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002034:	f7fe fc36 	bl	80008a4 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002042:	d901      	bls.n	8002048 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e00f      	b.n	8002068 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 0320 	and.w	r3, r3, #32
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0ee      	beq.n	8002034 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0210 	orr.w	r2, r2, #16
 8002064:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685a      	ldr	r2, [r3, #4]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0210 	bic.w	r2, r2, #16
 800208a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800208c:	f7fe fc0a 	bl	80008a4 <HAL_GetTick>
 8002090:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002092:	e009      	b.n	80020a8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002094:	f7fe fc06 	bl	80008a4 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020a2:	d901      	bls.n	80020a8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e007      	b.n	80020b8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f003 0320 	and.w	r3, r3, #32
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d0ee      	beq.n	8002094 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80020ce:	e005      	b.n	80020dc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	3301      	adds	r3, #1
 80020d4:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80020d6:	79fb      	ldrb	r3, [r7, #7]
 80020d8:	3b0a      	subs	r3, #10
 80020da:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80020dc:	79fb      	ldrb	r3, [r7, #7]
 80020de:	2b09      	cmp	r3, #9
 80020e0:	d8f6      	bhi.n	80020d0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	79fb      	ldrb	r3, [r7, #7]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b2db      	uxtb	r3, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	4603      	mov	r3, r0
 8002102:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002108:	79fb      	ldrb	r3, [r7, #7]
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	b2db      	uxtb	r3, r3
 800210e:	461a      	mov	r2, r3
 8002110:	4613      	mov	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	4413      	add	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800211a:	79fb      	ldrb	r3, [r7, #7]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	b2da      	uxtb	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	b2db      	uxtb	r3, r3
 8002126:	4413      	add	r3, r2
 8002128:	b2db      	uxtb	r3, r3
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	bc80      	pop	{r7}
 8002132:	4770      	bx	lr

08002134 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	7bdb      	ldrb	r3, [r3, #15]
 8002152:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7b5b      	ldrb	r3, [r3, #13]
 8002158:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	7b9b      	ldrb	r3, [r3, #14]
 800215e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	e06f      	b.n	8002246 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d011      	beq.n	8002190 <RTC_DateUpdate+0x5c>
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d00e      	beq.n	8002190 <RTC_DateUpdate+0x5c>
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b05      	cmp	r3, #5
 8002176:	d00b      	beq.n	8002190 <RTC_DateUpdate+0x5c>
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	2b07      	cmp	r3, #7
 800217c:	d008      	beq.n	8002190 <RTC_DateUpdate+0x5c>
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b08      	cmp	r3, #8
 8002182:	d005      	beq.n	8002190 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	2b0a      	cmp	r3, #10
 8002188:	d002      	beq.n	8002190 <RTC_DateUpdate+0x5c>
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	2b0c      	cmp	r3, #12
 800218e:	d117      	bne.n	80021c0 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2b1e      	cmp	r3, #30
 8002194:	d803      	bhi.n	800219e <RTC_DateUpdate+0x6a>
      {
        day++;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3301      	adds	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800219c:	e050      	b.n	8002240 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	2b0c      	cmp	r3, #12
 80021a2:	d005      	beq.n	80021b0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	3301      	adds	r3, #1
 80021a8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80021aa:	2301      	movs	r3, #1
 80021ac:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80021ae:	e047      	b.n	8002240 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80021b0:	2301      	movs	r3, #1
 80021b2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80021b4:	2301      	movs	r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
          year++;
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	3301      	adds	r3, #1
 80021bc:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80021be:	e03f      	b.n	8002240 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d008      	beq.n	80021d8 <RTC_DateUpdate+0xa4>
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	2b06      	cmp	r3, #6
 80021ca:	d005      	beq.n	80021d8 <RTC_DateUpdate+0xa4>
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b09      	cmp	r3, #9
 80021d0:	d002      	beq.n	80021d8 <RTC_DateUpdate+0xa4>
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b0b      	cmp	r3, #11
 80021d6:	d10c      	bne.n	80021f2 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2b1d      	cmp	r3, #29
 80021dc:	d803      	bhi.n	80021e6 <RTC_DateUpdate+0xb2>
      {
        day++;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	3301      	adds	r3, #1
 80021e2:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80021e4:	e02c      	b.n	8002240 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	3301      	adds	r3, #1
 80021ea:	613b      	str	r3, [r7, #16]
        day = 1U;
 80021ec:	2301      	movs	r3, #1
 80021ee:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80021f0:	e026      	b.n	8002240 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d123      	bne.n	8002240 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b1b      	cmp	r3, #27
 80021fc:	d803      	bhi.n	8002206 <RTC_DateUpdate+0xd2>
      {
        day++;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	3301      	adds	r3, #1
 8002202:	60fb      	str	r3, [r7, #12]
 8002204:	e01c      	b.n	8002240 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b1c      	cmp	r3, #28
 800220a:	d111      	bne.n	8002230 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	b29b      	uxth	r3, r3
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f839 	bl	8002288 <RTC_IsLeapYear>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <RTC_DateUpdate+0xf0>
        {
          day++;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	3301      	adds	r3, #1
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	e00d      	b.n	8002240 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	3301      	adds	r3, #1
 8002228:	613b      	str	r3, [r7, #16]
          day = 1U;
 800222a:	2301      	movs	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e007      	b.n	8002240 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2b1d      	cmp	r3, #29
 8002234:	d104      	bne.n	8002240 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	3301      	adds	r3, #1
 800223a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800223c:	2301      	movs	r3, #1
 800223e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	3301      	adds	r3, #1
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d38b      	bcc.n	8002166 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	b2da      	uxtb	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	b2da      	uxtb	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	b2da      	uxtb	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	b2db      	uxtb	r3, r3
 800226a:	68fa      	ldr	r2, [r7, #12]
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	4619      	mov	r1, r3
 8002270:	6978      	ldr	r0, [r7, #20]
 8002272:	f000 f83b 	bl	80022ec <RTC_WeekDayNum>
 8002276:	4603      	mov	r3, r0
 8002278:	461a      	mov	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	731a      	strb	r2, [r3, #12]
}
 800227e:	bf00      	nop
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
	...

08002288 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800229e:	2300      	movs	r3, #0
 80022a0:	e01d      	b.n	80022de <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	4a10      	ldr	r2, [pc, #64]	; (80022e8 <RTC_IsLeapYear+0x60>)
 80022a6:	fba2 1203 	umull	r1, r2, r2, r3
 80022aa:	0952      	lsrs	r2, r2, #5
 80022ac:	2164      	movs	r1, #100	; 0x64
 80022ae:	fb01 f202 	mul.w	r2, r1, r2
 80022b2:	1a9b      	subs	r3, r3, r2
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80022be:	88fb      	ldrh	r3, [r7, #6]
 80022c0:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <RTC_IsLeapYear+0x60>)
 80022c2:	fba2 1203 	umull	r1, r2, r2, r3
 80022c6:	09d2      	lsrs	r2, r2, #7
 80022c8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80022cc:	fb01 f202 	mul.w	r2, r1, r2
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d101      	bne.n	80022dc <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80022d8:	2301      	movs	r3, #1
 80022da:	e000      	b.n	80022de <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80022dc:	2300      	movs	r3, #0
  }
}
 80022de:	4618      	mov	r0, r3
 80022e0:	370c      	adds	r7, #12
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bc80      	pop	{r7}
 80022e6:	4770      	bx	lr
 80022e8:	51eb851f 	.word	0x51eb851f

080022ec <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b085      	sub	sp, #20
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
 80022f8:	4613      	mov	r3, r2
 80022fa:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	2300      	movs	r3, #0
 8002302:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800230a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800230c:	78fb      	ldrb	r3, [r7, #3]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d82d      	bhi.n	800236e <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	4613      	mov	r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	4413      	add	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	4a2c      	ldr	r2, [pc, #176]	; (80023d0 <RTC_WeekDayNum+0xe4>)
 8002320:	fba2 2303 	umull	r2, r3, r2, r3
 8002324:	085a      	lsrs	r2, r3, #1
 8002326:	78bb      	ldrb	r3, [r7, #2]
 8002328:	441a      	add	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	441a      	add	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	3b01      	subs	r3, #1
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	441a      	add	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3b01      	subs	r3, #1
 800233a:	4926      	ldr	r1, [pc, #152]	; (80023d4 <RTC_WeekDayNum+0xe8>)
 800233c:	fba1 1303 	umull	r1, r3, r1, r3
 8002340:	095b      	lsrs	r3, r3, #5
 8002342:	1ad2      	subs	r2, r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	3b01      	subs	r3, #1
 8002348:	4922      	ldr	r1, [pc, #136]	; (80023d4 <RTC_WeekDayNum+0xe8>)
 800234a:	fba1 1303 	umull	r1, r3, r1, r3
 800234e:	09db      	lsrs	r3, r3, #7
 8002350:	4413      	add	r3, r2
 8002352:	1d1a      	adds	r2, r3, #4
 8002354:	4b20      	ldr	r3, [pc, #128]	; (80023d8 <RTC_WeekDayNum+0xec>)
 8002356:	fba3 1302 	umull	r1, r3, r3, r2
 800235a:	1ad1      	subs	r1, r2, r3
 800235c:	0849      	lsrs	r1, r1, #1
 800235e:	440b      	add	r3, r1
 8002360:	0899      	lsrs	r1, r3, #2
 8002362:	460b      	mov	r3, r1
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	1a5b      	subs	r3, r3, r1
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	e029      	b.n	80023c2 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800236e:	78fa      	ldrb	r2, [r7, #3]
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	4a15      	ldr	r2, [pc, #84]	; (80023d0 <RTC_WeekDayNum+0xe4>)
 800237c:	fba2 2303 	umull	r2, r3, r2, r3
 8002380:	085a      	lsrs	r2, r3, #1
 8002382:	78bb      	ldrb	r3, [r7, #2]
 8002384:	441a      	add	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	441a      	add	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	089b      	lsrs	r3, r3, #2
 800238e:	441a      	add	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4910      	ldr	r1, [pc, #64]	; (80023d4 <RTC_WeekDayNum+0xe8>)
 8002394:	fba1 1303 	umull	r1, r3, r1, r3
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	490d      	ldr	r1, [pc, #52]	; (80023d4 <RTC_WeekDayNum+0xe8>)
 80023a0:	fba1 1303 	umull	r1, r3, r1, r3
 80023a4:	09db      	lsrs	r3, r3, #7
 80023a6:	4413      	add	r3, r2
 80023a8:	1c9a      	adds	r2, r3, #2
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <RTC_WeekDayNum+0xec>)
 80023ac:	fba3 1302 	umull	r1, r3, r3, r2
 80023b0:	1ad1      	subs	r1, r2, r3
 80023b2:	0849      	lsrs	r1, r1, #1
 80023b4:	440b      	add	r3, r1
 80023b6:	0899      	lsrs	r1, r3, #2
 80023b8:	460b      	mov	r3, r1
 80023ba:	00db      	lsls	r3, r3, #3
 80023bc:	1a5b      	subs	r3, r3, r1
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	b2db      	uxtb	r3, r3
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr
 80023d0:	38e38e39 	.word	0x38e38e39
 80023d4:	51eb851f 	.word	0x51eb851f
 80023d8:	24924925 	.word	0x24924925

080023dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e041      	b.n	8002472 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d106      	bne.n	8002408 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 f839 	bl	800247a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	4619      	mov	r1, r3
 800241a:	4610      	mov	r0, r2
 800241c:	f000 f9b4 	bl	8002788 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr

0800248c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b01      	cmp	r3, #1
 800249e:	d001      	beq.n	80024a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e03a      	b.n	800251a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2202      	movs	r2, #2
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_TIM_Base_Start_IT+0x98>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d00e      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x58>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ce:	d009      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x58>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a14      	ldr	r2, [pc, #80]	; (8002528 <HAL_TIM_Base_Start_IT+0x9c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d004      	beq.n	80024e4 <HAL_TIM_Base_Start_IT+0x58>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a13      	ldr	r2, [pc, #76]	; (800252c <HAL_TIM_Base_Start_IT+0xa0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d111      	bne.n	8002508 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2b06      	cmp	r3, #6
 80024f4:	d010      	beq.n	8002518 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f042 0201 	orr.w	r2, r2, #1
 8002504:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002506:	e007      	b.n	8002518 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f042 0201 	orr.w	r2, r2, #1
 8002516:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bc80      	pop	{r7}
 8002522:	4770      	bx	lr
 8002524:	40012c00 	.word	0x40012c00
 8002528:	40000400 	.word	0x40000400
 800252c:	40000800 	.word	0x40000800

08002530 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b02      	cmp	r3, #2
 8002544:	d122      	bne.n	800258c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b02      	cmp	r3, #2
 8002552:	d11b      	bne.n	800258c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f06f 0202 	mvn.w	r2, #2
 800255c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f003 0303 	and.w	r3, r3, #3
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f000 f8ed 	bl	8002752 <HAL_TIM_IC_CaptureCallback>
 8002578:	e005      	b.n	8002586 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8e0 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 f8ef 	bl	8002764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	2b04      	cmp	r3, #4
 8002598:	d122      	bne.n	80025e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d11b      	bne.n	80025e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0204 	mvn.w	r2, #4
 80025b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f8c3 	bl	8002752 <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8b6 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f8c5 	bl	8002764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0308 	and.w	r3, r3, #8
 80025ea:	2b08      	cmp	r3, #8
 80025ec:	d122      	bne.n	8002634 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d11b      	bne.n	8002634 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0208 	mvn.w	r2, #8
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2204      	movs	r2, #4
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f899 	bl	8002752 <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f88c 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f89b 	bl	8002764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0310 	and.w	r3, r3, #16
 800263e:	2b10      	cmp	r3, #16
 8002640:	d122      	bne.n	8002688 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b10      	cmp	r3, #16
 800264e:	d11b      	bne.n	8002688 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0210 	mvn.w	r2, #16
 8002658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2208      	movs	r2, #8
 800265e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f86f 	bl	8002752 <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f862 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f871 	bl	8002764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b01      	cmp	r3, #1
 8002694:	d10e      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d107      	bne.n	80026b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0201 	mvn.w	r2, #1
 80026ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fd feb2 	bl	8000418 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026be:	2b80      	cmp	r3, #128	; 0x80
 80026c0:	d10e      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026cc:	2b80      	cmp	r3, #128	; 0x80
 80026ce:	d107      	bne.n	80026e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 f8bf 	bl	800285e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	d10e      	bne.n	800270c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f8:	2b40      	cmp	r3, #64	; 0x40
 80026fa:	d107      	bne.n	800270c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002704:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f835 	bl	8002776 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0320 	and.w	r3, r3, #32
 8002716:	2b20      	cmp	r3, #32
 8002718:	d10e      	bne.n	8002738 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0320 	and.w	r3, r3, #32
 8002724:	2b20      	cmp	r3, #32
 8002726:	d107      	bne.n	8002738 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0220 	mvn.w	r2, #32
 8002730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f88a 	bl	800284c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	bc80      	pop	{r7}
 8002750:	4770      	bx	lr

08002752 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002752:	b480      	push	{r7}
 8002754:	b083      	sub	sp, #12
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	bc80      	pop	{r7}
 8002762:	4770      	bx	lr

08002764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a29      	ldr	r2, [pc, #164]	; (8002840 <TIM_Base_SetConfig+0xb8>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d00b      	beq.n	80027b8 <TIM_Base_SetConfig+0x30>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027a6:	d007      	beq.n	80027b8 <TIM_Base_SetConfig+0x30>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a26      	ldr	r2, [pc, #152]	; (8002844 <TIM_Base_SetConfig+0xbc>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d003      	beq.n	80027b8 <TIM_Base_SetConfig+0x30>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a25      	ldr	r2, [pc, #148]	; (8002848 <TIM_Base_SetConfig+0xc0>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d108      	bne.n	80027ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a1c      	ldr	r2, [pc, #112]	; (8002840 <TIM_Base_SetConfig+0xb8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00b      	beq.n	80027ea <TIM_Base_SetConfig+0x62>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d8:	d007      	beq.n	80027ea <TIM_Base_SetConfig+0x62>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <TIM_Base_SetConfig+0xbc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d003      	beq.n	80027ea <TIM_Base_SetConfig+0x62>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a18      	ldr	r2, [pc, #96]	; (8002848 <TIM_Base_SetConfig+0xc0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d108      	bne.n	80027fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	4313      	orrs	r3, r2
 80027fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a07      	ldr	r2, [pc, #28]	; (8002840 <TIM_Base_SetConfig+0xb8>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d103      	bne.n	8002830 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691a      	ldr	r2, [r3, #16]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	615a      	str	r2, [r3, #20]
}
 8002836:	bf00      	nop
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	40012c00 	.word	0x40012c00
 8002844:	40000400 	.word	0x40000400
 8002848:	40000800 	.word	0x40000800

0800284c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800285e:	b480      	push	{r7}
 8002860:	b083      	sub	sp, #12
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002866:	bf00      	nop
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr

08002870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e03f      	b.n	8002902 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d106      	bne.n	800289c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7fd ff6a 	bl	8000770 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2224      	movs	r2, #36	; 0x24
 80028a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f829 	bl	800290c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695a      	ldr	r2, [r3, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
	...

0800290c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	4313      	orrs	r3, r2
 800293a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002946:	f023 030c 	bic.w	r3, r3, #12
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	6812      	ldr	r2, [r2, #0]
 800294e:	68b9      	ldr	r1, [r7, #8]
 8002950:	430b      	orrs	r3, r1
 8002952:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2c      	ldr	r2, [pc, #176]	; (8002a20 <UART_SetConfig+0x114>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d103      	bne.n	800297c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002974:	f7fe fdf8 	bl	8001568 <HAL_RCC_GetPCLK2Freq>
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	e002      	b.n	8002982 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800297c:	f7fe fde0 	bl	8001540 <HAL_RCC_GetPCLK1Freq>
 8002980:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	009a      	lsls	r2, r3, #2
 800298c:	441a      	add	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	fbb2 f3f3 	udiv	r3, r2, r3
 8002998:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <UART_SetConfig+0x118>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	0119      	lsls	r1, r3, #4
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009a      	lsls	r2, r3, #2
 80029ac:	441a      	add	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <UART_SetConfig+0x118>)
 80029ba:	fba3 0302 	umull	r0, r3, r3, r2
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2064      	movs	r0, #100	; 0x64
 80029c2:	fb00 f303 	mul.w	r3, r0, r3
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	3332      	adds	r3, #50	; 0x32
 80029cc:	4a15      	ldr	r2, [pc, #84]	; (8002a24 <UART_SetConfig+0x118>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029d8:	4419      	add	r1, r3
 80029da:	68fa      	ldr	r2, [r7, #12]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009a      	lsls	r2, r3, #2
 80029e4:	441a      	add	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80029f0:	4b0c      	ldr	r3, [pc, #48]	; (8002a24 <UART_SetConfig+0x118>)
 80029f2:	fba3 0302 	umull	r0, r3, r3, r2
 80029f6:	095b      	lsrs	r3, r3, #5
 80029f8:	2064      	movs	r0, #100	; 0x64
 80029fa:	fb00 f303 	mul.w	r3, r0, r3
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	3332      	adds	r3, #50	; 0x32
 8002a04:	4a07      	ldr	r2, [pc, #28]	; (8002a24 <UART_SetConfig+0x118>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	f003 020f 	and.w	r2, r3, #15
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	440a      	add	r2, r1
 8002a16:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a18:	bf00      	nop
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40013800 	.word	0x40013800
 8002a24:	51eb851f 	.word	0x51eb851f

08002a28 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f103 0208 	add.w	r2, r3, #8
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a40:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f103 0208 	add.w	r2, r3, #8
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f103 0208 	add.w	r2, r3, #8
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a5c:	bf00      	nop
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bc80      	pop	{r7}
 8002a64:	4770      	bx	lr

08002a66 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a66:	b480      	push	{r7}
 8002a68:	b083      	sub	sp, #12
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bc80      	pop	{r7}
 8002a7c:	4770      	bx	lr

08002a7e <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b085      	sub	sp, #20
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6892      	ldr	r2, [r2, #8]
 8002a94:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6852      	ldr	r2, [r2, #4]
 8002a9e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d103      	bne.n	8002ab2 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1e5a      	subs	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3714      	adds	r7, #20
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08c      	sub	sp, #48	; 0x30
 8002ad4:	af04      	add	r7, sp, #16
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f000 fe53 	bl	8003790 <pvPortMalloc>
 8002aea:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00e      	beq.n	8002b10 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002af2:	2058      	movs	r0, #88	; 0x58
 8002af4:	f000 fe4c 	bl	8003790 <pvPortMalloc>
 8002af8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	631a      	str	r2, [r3, #48]	; 0x30
 8002b06:	e005      	b.n	8002b14 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002b08:	6978      	ldr	r0, [r7, #20]
 8002b0a:	f000 ff21 	bl	8003950 <vPortFree>
 8002b0e:	e001      	b.n	8002b14 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d013      	beq.n	8002b42 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b1a:	88fa      	ldrh	r2, [r7, #6]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9303      	str	r3, [sp, #12]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	9302      	str	r3, [sp, #8]
 8002b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f80e 	bl	8002b52 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002b36:	69f8      	ldr	r0, [r7, #28]
 8002b38:	f000 f8b0 	bl	8002c9c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	61bb      	str	r3, [r7, #24]
 8002b40:	e002      	b.n	8002b48 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b46:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002b48:	69bb      	ldr	r3, [r7, #24]
    }
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3720      	adds	r7, #32
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b088      	sub	sp, #32
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
 8002b5e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	461a      	mov	r2, r3
 8002b6a:	21a5      	movs	r1, #165	; 0xa5
 8002b6c:	f001 f830 	bl	8003bd0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f023 0307 	bic.w	r3, r3, #7
 8002b88:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002ba6:	bf00      	nop
 8002ba8:	e7fe      	b.n	8002ba8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d01f      	beq.n	8002bf0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	e012      	b.n	8002bdc <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bb6:	68ba      	ldr	r2, [r7, #8]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	4413      	add	r3, r2
 8002bbc:	7819      	ldrb	r1, [r3, #0]
 8002bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3334      	adds	r3, #52	; 0x34
 8002bc6:	460a      	mov	r2, r1
 8002bc8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	4413      	add	r3, r2
 8002bd0:	781b      	ldrb	r3, [r3, #0]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b09      	cmp	r3, #9
 8002be0:	d9e9      	bls.n	8002bb6 <prvInitialiseNewTask+0x64>
 8002be2:	e000      	b.n	8002be6 <prvInitialiseNewTask+0x94>
            {
                break;
 8002be4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002bee:	e003      	b.n	8002bf8 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d90a      	bls.n	8002c14 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	613b      	str	r3, [r7, #16]
    }
 8002c10:	bf00      	nop
 8002c12:	e7fe      	b.n	8002c12 <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d901      	bls.n	8002c1e <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c1a:	2304      	movs	r3, #4
 8002c1c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c22:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c28:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c32:	3304      	adds	r3, #4
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7ff ff16 	bl	8002a66 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3c:	3318      	adds	r3, #24
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff11 	bl	8002a66 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c48:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c4c:	f1c3 0205 	rsb	r2, r3, #5
 8002c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c52:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c58:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	3350      	adds	r3, #80	; 0x50
 8002c5e:	2204      	movs	r2, #4
 8002c60:	2100      	movs	r1, #0
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 ffb4 	bl	8003bd0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6a:	3354      	adds	r3, #84	; 0x54
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 ffad 	bl	8003bd0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	68f9      	ldr	r1, [r7, #12]
 8002c7a:	69b8      	ldr	r0, [r7, #24]
 8002c7c:	f000 fbd6 	bl	800342c <pxPortInitialiseStack>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d002      	beq.n	8002c92 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c90:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c92:	bf00      	nop
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ca4:	f000 fcb4 	bl	8003610 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ca8:	4b3a      	ldr	r3, [pc, #232]	; (8002d94 <prvAddNewTaskToReadyList+0xf8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	3301      	adds	r3, #1
 8002cae:	4a39      	ldr	r2, [pc, #228]	; (8002d94 <prvAddNewTaskToReadyList+0xf8>)
 8002cb0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002cb2:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <prvAddNewTaskToReadyList+0xfc>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d109      	bne.n	8002cce <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002cba:	4a37      	ldr	r2, [pc, #220]	; (8002d98 <prvAddNewTaskToReadyList+0xfc>)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cc0:	4b34      	ldr	r3, [pc, #208]	; (8002d94 <prvAddNewTaskToReadyList+0xf8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d110      	bne.n	8002cea <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002cc8:	f000 fb18 	bl	80032fc <prvInitialiseTaskLists>
 8002ccc:	e00d      	b.n	8002cea <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002cce:	4b33      	ldr	r3, [pc, #204]	; (8002d9c <prvAddNewTaskToReadyList+0x100>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d109      	bne.n	8002cea <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cd6:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <prvAddNewTaskToReadyList+0xfc>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d802      	bhi.n	8002cea <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002ce4:	4a2c      	ldr	r2, [pc, #176]	; (8002d98 <prvAddNewTaskToReadyList+0xfc>)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002cea:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <prvAddNewTaskToReadyList+0x104>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a2b      	ldr	r2, [pc, #172]	; (8002da0 <prvAddNewTaskToReadyList+0x104>)
 8002cf2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	; (8002da0 <prvAddNewTaskToReadyList+0x104>)
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	2201      	movs	r2, #1
 8002d02:	409a      	lsls	r2, r3
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <prvAddNewTaskToReadyList+0x108>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <prvAddNewTaskToReadyList+0x108>)
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d12:	4925      	ldr	r1, [pc, #148]	; (8002da8 <prvAddNewTaskToReadyList+0x10c>)
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	3304      	adds	r3, #4
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	609a      	str	r2, [r3, #8]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	60da      	str	r2, [r3, #12]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	3204      	adds	r2, #4
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	1d1a      	adds	r2, r3, #4
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4a15      	ldr	r2, [pc, #84]	; (8002da8 <prvAddNewTaskToReadyList+0x10c>)
 8002d52:	441a      	add	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	615a      	str	r2, [r3, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d5c:	4912      	ldr	r1, [pc, #72]	; (8002da8 <prvAddNewTaskToReadyList+0x10c>)
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	1c59      	adds	r1, r3, #1
 8002d6c:	480e      	ldr	r0, [pc, #56]	; (8002da8 <prvAddNewTaskToReadyList+0x10c>)
 8002d6e:	4613      	mov	r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	4413      	add	r3, r2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	4403      	add	r3, r0
 8002d78:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d7a:	f000 fc79 	bl	8003670 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d7e:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <prvAddNewTaskToReadyList+0x100>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d86:	4b04      	ldr	r3, [pc, #16]	; (8002d98 <prvAddNewTaskToReadyList+0xfc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000178 	.word	0x20000178
 8002d98:	200000a0 	.word	0x200000a0
 8002d9c:	20000184 	.word	0x20000184
 8002da0:	20000194 	.word	0x20000194
 8002da4:	20000180 	.word	0x20000180
 8002da8:	200000a4 	.word	0x200000a4

08002dac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <vTaskStartScheduler+0x7c>)
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	2300      	movs	r3, #0
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2282      	movs	r2, #130	; 0x82
 8002dbe:	491b      	ldr	r1, [pc, #108]	; (8002e2c <vTaskStartScheduler+0x80>)
 8002dc0:	481b      	ldr	r0, [pc, #108]	; (8002e30 <vTaskStartScheduler+0x84>)
 8002dc2:	f7ff fe85 	bl	8002ad0 <xTaskCreate>
 8002dc6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d116      	bne.n	8002dfc <vTaskStartScheduler+0x50>
        __asm volatile
 8002dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd2:	f383 8811 	msr	BASEPRI, r3
 8002dd6:	f3bf 8f6f 	isb	sy
 8002dda:	f3bf 8f4f 	dsb	sy
 8002dde:	60bb      	str	r3, [r7, #8]
    }
 8002de0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002de2:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <vTaskStartScheduler+0x88>)
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002de8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002dea:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <vTaskStartScheduler+0x8c>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002df0:	4b12      	ldr	r3, [pc, #72]	; (8002e3c <vTaskStartScheduler+0x90>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002df6:	f000 fb99 	bl	800352c <xPortStartScheduler>
 8002dfa:	e00e      	b.n	8002e1a <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e02:	d10a      	bne.n	8002e1a <vTaskStartScheduler+0x6e>
        __asm volatile
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	f383 8811 	msr	BASEPRI, r3
 8002e0c:	f3bf 8f6f 	isb	sy
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	607b      	str	r3, [r7, #4]
    }
 8002e16:	bf00      	nop
 8002e18:	e7fe      	b.n	8002e18 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002e1a:	4b09      	ldr	r3, [pc, #36]	; (8002e40 <vTaskStartScheduler+0x94>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	2000019c 	.word	0x2000019c
 8002e2c:	08004c3c 	.word	0x08004c3c
 8002e30:	080032d9 	.word	0x080032d9
 8002e34:	20000198 	.word	0x20000198
 8002e38:	20000184 	.word	0x20000184
 8002e3c:	2000017c 	.word	0x2000017c
 8002e40:	2000000c 	.word	0x2000000c

08002e44 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002e48:	4b04      	ldr	r3, [pc, #16]	; (8002e5c <vTaskSuspendAll+0x18>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	4a03      	ldr	r2, [pc, #12]	; (8002e5c <vTaskSuspendAll+0x18>)
 8002e50:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002e52:	bf00      	nop
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bc80      	pop	{r7}
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	200001a0 	.word	0x200001a0

08002e60 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b088      	sub	sp, #32
 8002e64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002e6e:	4b6b      	ldr	r3, [pc, #428]	; (800301c <xTaskResumeAll+0x1bc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <xTaskResumeAll+0x2c>
        __asm volatile
 8002e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	607b      	str	r3, [r7, #4]
    }
 8002e88:	bf00      	nop
 8002e8a:	e7fe      	b.n	8002e8a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002e8c:	f000 fbc0 	bl	8003610 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002e90:	4b62      	ldr	r3, [pc, #392]	; (800301c <xTaskResumeAll+0x1bc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3b01      	subs	r3, #1
 8002e96:	4a61      	ldr	r2, [pc, #388]	; (800301c <xTaskResumeAll+0x1bc>)
 8002e98:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e9a:	4b60      	ldr	r3, [pc, #384]	; (800301c <xTaskResumeAll+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	f040 80b4 	bne.w	800300c <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ea4:	4b5e      	ldr	r3, [pc, #376]	; (8003020 <xTaskResumeAll+0x1c0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 80af 	beq.w	800300c <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002eae:	e08a      	b.n	8002fc6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eb0:	4b5c      	ldr	r3, [pc, #368]	; (8003024 <xTaskResumeAll+0x1c4>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	6a12      	ldr	r2, [r2, #32]
 8002ec6:	609a      	str	r2, [r3, #8]
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	69d2      	ldr	r2, [r2, #28]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3318      	adds	r3, #24
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d103      	bne.n	8002ee6 <xTaskResumeAll+0x86>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	6a1a      	ldr	r2, [r3, #32]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	629a      	str	r2, [r3, #40]	; 0x28
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	1e5a      	subs	r2, r3, #1
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	68d2      	ldr	r2, [r2, #12]
 8002f04:	609a      	str	r2, [r3, #8]
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	6892      	ldr	r2, [r2, #8]
 8002f0e:	605a      	str	r2, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	3304      	adds	r3, #4
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d103      	bne.n	8002f24 <xTaskResumeAll+0xc4>
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	68da      	ldr	r2, [r3, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	2200      	movs	r2, #0
 8002f28:	615a      	str	r2, [r3, #20]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	1e5a      	subs	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f38:	2201      	movs	r2, #1
 8002f3a:	409a      	lsls	r2, r3
 8002f3c:	4b3a      	ldr	r3, [pc, #232]	; (8003028 <xTaskResumeAll+0x1c8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	4a39      	ldr	r2, [pc, #228]	; (8003028 <xTaskResumeAll+0x1c8>)
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f4a:	4938      	ldr	r1, [pc, #224]	; (800302c <xTaskResumeAll+0x1cc>)
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3304      	adds	r3, #4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	60bb      	str	r3, [r7, #8]
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	60da      	str	r2, [r3, #12]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	69fa      	ldr	r2, [r7, #28]
 8002f70:	3204      	adds	r2, #4
 8002f72:	605a      	str	r2, [r3, #4]
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	1d1a      	adds	r2, r3, #4
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f80:	4613      	mov	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4a28      	ldr	r2, [pc, #160]	; (800302c <xTaskResumeAll+0x1cc>)
 8002f8a:	441a      	add	r2, r3
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	615a      	str	r2, [r3, #20]
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f94:	4925      	ldr	r1, [pc, #148]	; (800302c <xTaskResumeAll+0x1cc>)
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	1c59      	adds	r1, r3, #1
 8002fa4:	4821      	ldr	r0, [pc, #132]	; (800302c <xTaskResumeAll+0x1cc>)
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	4403      	add	r3, r0
 8002fb0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb6:	4b1e      	ldr	r3, [pc, #120]	; (8003030 <xTaskResumeAll+0x1d0>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d302      	bcc.n	8002fc6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002fc0:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <xTaskResumeAll+0x1d4>)
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fc6:	4b17      	ldr	r3, [pc, #92]	; (8003024 <xTaskResumeAll+0x1c4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f47f af70 	bne.w	8002eb0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fd6:	f000 fa0f 	bl	80033f8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fda:	4b17      	ldr	r3, [pc, #92]	; (8003038 <xTaskResumeAll+0x1d8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fe6:	f000 f829 	bl	800303c <xTaskIncrementTick>
 8002fea:	4603      	mov	r3, r0
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d002      	beq.n	8002ff6 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002ff0:	4b10      	ldr	r3, [pc, #64]	; (8003034 <xTaskResumeAll+0x1d4>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f1      	bne.n	8002fe6 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8003002:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <xTaskResumeAll+0x1d8>)
 8003004:	2200      	movs	r2, #0
 8003006:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003008:	4b0a      	ldr	r3, [pc, #40]	; (8003034 <xTaskResumeAll+0x1d4>)
 800300a:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800300c:	f000 fb30 	bl	8003670 <vPortExitCritical>

    return xAlreadyYielded;
 8003010:	697b      	ldr	r3, [r7, #20]
}
 8003012:	4618      	mov	r0, r3
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	200001a0 	.word	0x200001a0
 8003020:	20000178 	.word	0x20000178
 8003024:	20000138 	.word	0x20000138
 8003028:	20000180 	.word	0x20000180
 800302c:	200000a4 	.word	0x200000a4
 8003030:	200000a0 	.word	0x200000a0
 8003034:	2000018c 	.word	0x2000018c
 8003038:	20000188 	.word	0x20000188

0800303c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003042:	2300      	movs	r3, #0
 8003044:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003046:	4b6e      	ldr	r3, [pc, #440]	; (8003200 <xTaskIncrementTick+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 80cd 	bne.w	80031ea <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003050:	4b6c      	ldr	r3, [pc, #432]	; (8003204 <xTaskIncrementTick+0x1c8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3301      	adds	r3, #1
 8003056:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003058:	4a6a      	ldr	r2, [pc, #424]	; (8003204 <xTaskIncrementTick+0x1c8>)
 800305a:	6a3b      	ldr	r3, [r7, #32]
 800305c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d120      	bne.n	80030a6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003064:	4b68      	ldr	r3, [pc, #416]	; (8003208 <xTaskIncrementTick+0x1cc>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <xTaskIncrementTick+0x48>
        __asm volatile
 800306e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003072:	f383 8811 	msr	BASEPRI, r3
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	f3bf 8f4f 	dsb	sy
 800307e:	607b      	str	r3, [r7, #4]
    }
 8003080:	bf00      	nop
 8003082:	e7fe      	b.n	8003082 <xTaskIncrementTick+0x46>
 8003084:	4b60      	ldr	r3, [pc, #384]	; (8003208 <xTaskIncrementTick+0x1cc>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	61fb      	str	r3, [r7, #28]
 800308a:	4b60      	ldr	r3, [pc, #384]	; (800320c <xTaskIncrementTick+0x1d0>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a5e      	ldr	r2, [pc, #376]	; (8003208 <xTaskIncrementTick+0x1cc>)
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	4a5e      	ldr	r2, [pc, #376]	; (800320c <xTaskIncrementTick+0x1d0>)
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b5d      	ldr	r3, [pc, #372]	; (8003210 <xTaskIncrementTick+0x1d4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	3301      	adds	r3, #1
 800309e:	4a5c      	ldr	r2, [pc, #368]	; (8003210 <xTaskIncrementTick+0x1d4>)
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	f000 f9a9 	bl	80033f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030a6:	4b5b      	ldr	r3, [pc, #364]	; (8003214 <xTaskIncrementTick+0x1d8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a3a      	ldr	r2, [r7, #32]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	f0c0 80a1 	bcc.w	80031f4 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030b2:	4b55      	ldr	r3, [pc, #340]	; (8003208 <xTaskIncrementTick+0x1cc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d104      	bne.n	80030c6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030bc:	4b55      	ldr	r3, [pc, #340]	; (8003214 <xTaskIncrementTick+0x1d8>)
 80030be:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80030c2:	601a      	str	r2, [r3, #0]
                    break;
 80030c4:	e096      	b.n	80031f4 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030c6:	4b50      	ldr	r3, [pc, #320]	; (8003208 <xTaskIncrementTick+0x1cc>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80030d6:	6a3a      	ldr	r2, [r7, #32]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d203      	bcs.n	80030e6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80030de:	4a4d      	ldr	r2, [pc, #308]	; (8003214 <xTaskIncrementTick+0x1d8>)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80030e4:	e086      	b.n	80031f4 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80030e6:	69bb      	ldr	r3, [r7, #24]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	68d2      	ldr	r2, [r2, #12]
 80030f4:	609a      	str	r2, [r3, #8]
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	69ba      	ldr	r2, [r7, #24]
 80030fc:	6892      	ldr	r2, [r2, #8]
 80030fe:	605a      	str	r2, [r3, #4]
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	3304      	adds	r3, #4
 8003108:	429a      	cmp	r2, r3
 800310a:	d103      	bne.n	8003114 <xTaskIncrementTick+0xd8>
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2200      	movs	r2, #0
 8003118:	615a      	str	r2, [r3, #20]
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	1e5a      	subs	r2, r3, #1
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	2b00      	cmp	r3, #0
 800312a:	d01e      	beq.n	800316a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	69ba      	ldr	r2, [r7, #24]
 8003138:	6a12      	ldr	r2, [r2, #32]
 800313a:	609a      	str	r2, [r3, #8]
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	69d2      	ldr	r2, [r2, #28]
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	3318      	adds	r3, #24
 800314e:	429a      	cmp	r2, r3
 8003150:	d103      	bne.n	800315a <xTaskIncrementTick+0x11e>
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	6a1a      	ldr	r2, [r3, #32]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2200      	movs	r2, #0
 800315e:	629a      	str	r2, [r3, #40]	; 0x28
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	1e5a      	subs	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316e:	2201      	movs	r2, #1
 8003170:	409a      	lsls	r2, r3
 8003172:	4b29      	ldr	r3, [pc, #164]	; (8003218 <xTaskIncrementTick+0x1dc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4313      	orrs	r3, r2
 8003178:	4a27      	ldr	r2, [pc, #156]	; (8003218 <xTaskIncrementTick+0x1dc>)
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003180:	4926      	ldr	r1, [pc, #152]	; (800321c <xTaskIncrementTick+0x1e0>)
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	3304      	adds	r3, #4
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	60da      	str	r2, [r3, #12]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	3204      	adds	r2, #4
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	1d1a      	adds	r2, r3, #4
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b6:	4613      	mov	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	4413      	add	r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	4a17      	ldr	r2, [pc, #92]	; (800321c <xTaskIncrementTick+0x1e0>)
 80031c0:	441a      	add	r2, r3
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	615a      	str	r2, [r3, #20]
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ca:	4914      	ldr	r1, [pc, #80]	; (800321c <xTaskIncrementTick+0x1e0>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	1c59      	adds	r1, r3, #1
 80031da:	4810      	ldr	r0, [pc, #64]	; (800321c <xTaskIncrementTick+0x1e0>)
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4403      	add	r3, r0
 80031e6:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031e8:	e763      	b.n	80030b2 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <xTaskIncrementTick+0x1e4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3301      	adds	r3, #1
 80031f0:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <xTaskIncrementTick+0x1e4>)
 80031f2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3728      	adds	r7, #40	; 0x28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200001a0 	.word	0x200001a0
 8003204:	2000017c 	.word	0x2000017c
 8003208:	20000130 	.word	0x20000130
 800320c:	20000134 	.word	0x20000134
 8003210:	20000190 	.word	0x20000190
 8003214:	20000198 	.word	0x20000198
 8003218:	20000180 	.word	0x20000180
 800321c:	200000a4 	.word	0x200000a4
 8003220:	20000188 	.word	0x20000188

08003224 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800322a:	4b26      	ldr	r3, [pc, #152]	; (80032c4 <vTaskSwitchContext+0xa0>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d003      	beq.n	800323a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003232:	4b25      	ldr	r3, [pc, #148]	; (80032c8 <vTaskSwitchContext+0xa4>)
 8003234:	2201      	movs	r2, #1
 8003236:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003238:	e03f      	b.n	80032ba <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800323a:	4b23      	ldr	r3, [pc, #140]	; (80032c8 <vTaskSwitchContext+0xa4>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003240:	4b22      	ldr	r3, [pc, #136]	; (80032cc <vTaskSwitchContext+0xa8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800324e:	7afb      	ldrb	r3, [r7, #11]
 8003250:	f1c3 031f 	rsb	r3, r3, #31
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	491e      	ldr	r1, [pc, #120]	; (80032d0 <vTaskSwitchContext+0xac>)
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d10a      	bne.n	8003280 <vTaskSwitchContext+0x5c>
        __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	607b      	str	r3, [r7, #4]
    }
 800327c:	bf00      	nop
 800327e:	e7fe      	b.n	800327e <vTaskSwitchContext+0x5a>
 8003280:	697a      	ldr	r2, [r7, #20]
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	4a11      	ldr	r2, [pc, #68]	; (80032d0 <vTaskSwitchContext+0xac>)
 800328c:	4413      	add	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	3308      	adds	r3, #8
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d104      	bne.n	80032b0 <vTaskSwitchContext+0x8c>
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	605a      	str	r2, [r3, #4]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	4a07      	ldr	r2, [pc, #28]	; (80032d4 <vTaskSwitchContext+0xb0>)
 80032b8:	6013      	str	r3, [r2, #0]
}
 80032ba:	bf00      	nop
 80032bc:	371c      	adds	r7, #28
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	200001a0 	.word	0x200001a0
 80032c8:	2000018c 	.word	0x2000018c
 80032cc:	20000180 	.word	0x20000180
 80032d0:	200000a4 	.word	0x200000a4
 80032d4:	200000a0 	.word	0x200000a0

080032d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80032e0:	f000 f84c 	bl	800337c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80032e4:	4b04      	ldr	r3, [pc, #16]	; (80032f8 <prvIdleTask+0x20>)
 80032e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80032f4:	e7f4      	b.n	80032e0 <prvIdleTask+0x8>
 80032f6:	bf00      	nop
 80032f8:	e000ed04 	.word	0xe000ed04

080032fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b082      	sub	sp, #8
 8003300:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003302:	2300      	movs	r3, #0
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	e00c      	b.n	8003322 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4a12      	ldr	r2, [pc, #72]	; (800335c <prvInitialiseTaskLists+0x60>)
 8003314:	4413      	add	r3, r2
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fb86 	bl	8002a28 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3301      	adds	r3, #1
 8003320:	607b      	str	r3, [r7, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b04      	cmp	r3, #4
 8003326:	d9ef      	bls.n	8003308 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003328:	480d      	ldr	r0, [pc, #52]	; (8003360 <prvInitialiseTaskLists+0x64>)
 800332a:	f7ff fb7d 	bl	8002a28 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800332e:	480d      	ldr	r0, [pc, #52]	; (8003364 <prvInitialiseTaskLists+0x68>)
 8003330:	f7ff fb7a 	bl	8002a28 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003334:	480c      	ldr	r0, [pc, #48]	; (8003368 <prvInitialiseTaskLists+0x6c>)
 8003336:	f7ff fb77 	bl	8002a28 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800333a:	480c      	ldr	r0, [pc, #48]	; (800336c <prvInitialiseTaskLists+0x70>)
 800333c:	f7ff fb74 	bl	8002a28 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003340:	480b      	ldr	r0, [pc, #44]	; (8003370 <prvInitialiseTaskLists+0x74>)
 8003342:	f7ff fb71 	bl	8002a28 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003346:	4b0b      	ldr	r3, [pc, #44]	; (8003374 <prvInitialiseTaskLists+0x78>)
 8003348:	4a05      	ldr	r2, [pc, #20]	; (8003360 <prvInitialiseTaskLists+0x64>)
 800334a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800334c:	4b0a      	ldr	r3, [pc, #40]	; (8003378 <prvInitialiseTaskLists+0x7c>)
 800334e:	4a05      	ldr	r2, [pc, #20]	; (8003364 <prvInitialiseTaskLists+0x68>)
 8003350:	601a      	str	r2, [r3, #0]
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	200000a4 	.word	0x200000a4
 8003360:	20000108 	.word	0x20000108
 8003364:	2000011c 	.word	0x2000011c
 8003368:	20000138 	.word	0x20000138
 800336c:	2000014c 	.word	0x2000014c
 8003370:	20000164 	.word	0x20000164
 8003374:	20000130 	.word	0x20000130
 8003378:	20000134 	.word	0x20000134

0800337c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003382:	e019      	b.n	80033b8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003384:	f000 f944 	bl	8003610 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003388:	4b10      	ldr	r3, [pc, #64]	; (80033cc <prvCheckTasksWaitingTermination+0x50>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3304      	adds	r3, #4
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fb72 	bl	8002a7e <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800339a:	4b0d      	ldr	r3, [pc, #52]	; (80033d0 <prvCheckTasksWaitingTermination+0x54>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	3b01      	subs	r3, #1
 80033a0:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <prvCheckTasksWaitingTermination+0x54>)
 80033a2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80033a4:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <prvCheckTasksWaitingTermination+0x58>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	4a0a      	ldr	r2, [pc, #40]	; (80033d4 <prvCheckTasksWaitingTermination+0x58>)
 80033ac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80033ae:	f000 f95f 	bl	8003670 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f810 	bl	80033d8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033b8:	4b06      	ldr	r3, [pc, #24]	; (80033d4 <prvCheckTasksWaitingTermination+0x58>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d1e1      	bne.n	8003384 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	2000014c 	.word	0x2000014c
 80033d0:	20000178 	.word	0x20000178
 80033d4:	20000160 	.word	0x20000160

080033d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e4:	4618      	mov	r0, r3
 80033e6:	f000 fab3 	bl	8003950 <vPortFree>
                vPortFree( pxTCB );
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fab0 	bl	8003950 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033fc:	4b09      	ldr	r3, [pc, #36]	; (8003424 <prvResetNextTaskUnblockTime+0x2c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d104      	bne.n	8003410 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <prvResetNextTaskUnblockTime+0x30>)
 8003408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800340c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800340e:	e005      	b.n	800341c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <prvResetNextTaskUnblockTime+0x2c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a03      	ldr	r2, [pc, #12]	; (8003428 <prvResetNextTaskUnblockTime+0x30>)
 800341a:	6013      	str	r3, [r2, #0]
}
 800341c:	bf00      	nop
 800341e:	46bd      	mov	sp, r7
 8003420:	bc80      	pop	{r7}
 8003422:	4770      	bx	lr
 8003424:	20000130 	.word	0x20000130
 8003428:	20000198 	.word	0x20000198

0800342c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	3b04      	subs	r3, #4
 800343c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003444:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3b04      	subs	r3, #4
 800344a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f023 0201 	bic.w	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	3b04      	subs	r3, #4
 800345a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800345c:	4a08      	ldr	r2, [pc, #32]	; (8003480 <pxPortInitialiseStack+0x54>)
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	3b14      	subs	r3, #20
 8003466:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	3b20      	subs	r3, #32
 8003472:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003474:	68fb      	ldr	r3, [r7, #12]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr
 8003480:	08003485 	.word	0x08003485

08003484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800348a:	2300      	movs	r3, #0
 800348c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800348e:	4b12      	ldr	r3, [pc, #72]	; (80034d8 <prvTaskExitError+0x54>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003496:	d00a      	beq.n	80034ae <prvTaskExitError+0x2a>
        __asm volatile
 8003498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800349c:	f383 8811 	msr	BASEPRI, r3
 80034a0:	f3bf 8f6f 	isb	sy
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	60fb      	str	r3, [r7, #12]
    }
 80034aa:	bf00      	nop
 80034ac:	e7fe      	b.n	80034ac <prvTaskExitError+0x28>
        __asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	60bb      	str	r3, [r7, #8]
    }
 80034c0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80034c2:	bf00      	nop
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d0fc      	beq.n	80034c4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80034ca:	bf00      	nop
 80034cc:	bf00      	nop
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bc80      	pop	{r7}
 80034d4:	4770      	bx	lr
 80034d6:	bf00      	nop
 80034d8:	20000010 	.word	0x20000010
 80034dc:	00000000 	.word	0x00000000

080034e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80034e0:	4b07      	ldr	r3, [pc, #28]	; (8003500 <pxCurrentTCBConst2>)
 80034e2:	6819      	ldr	r1, [r3, #0]
 80034e4:	6808      	ldr	r0, [r1, #0]
 80034e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80034ea:	f380 8809 	msr	PSP, r0
 80034ee:	f3bf 8f6f 	isb	sy
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f380 8811 	msr	BASEPRI, r0
 80034fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80034fe:	4770      	bx	lr

08003500 <pxCurrentTCBConst2>:
 8003500:	200000a0 	.word	0x200000a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop

08003508 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003508:	4806      	ldr	r0, [pc, #24]	; (8003524 <prvPortStartFirstTask+0x1c>)
 800350a:	6800      	ldr	r0, [r0, #0]
 800350c:	6800      	ldr	r0, [r0, #0]
 800350e:	f380 8808 	msr	MSP, r0
 8003512:	b662      	cpsie	i
 8003514:	b661      	cpsie	f
 8003516:	f3bf 8f4f 	dsb	sy
 800351a:	f3bf 8f6f 	isb	sy
 800351e:	df00      	svc	0
 8003520:	bf00      	nop
 8003522:	0000      	.short	0x0000
 8003524:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003528:	bf00      	nop
 800352a:	bf00      	nop

0800352c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003532:	4b32      	ldr	r3, [pc, #200]	; (80035fc <xPortStartScheduler+0xd0>)
 8003534:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	b2db      	uxtb	r3, r3
 800353c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	22ff      	movs	r2, #255	; 0xff
 8003542:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003554:	b2da      	uxtb	r2, r3
 8003556:	4b2a      	ldr	r3, [pc, #168]	; (8003600 <xPortStartScheduler+0xd4>)
 8003558:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800355a:	4b2a      	ldr	r3, [pc, #168]	; (8003604 <xPortStartScheduler+0xd8>)
 800355c:	2207      	movs	r2, #7
 800355e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003560:	e009      	b.n	8003576 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8003562:	4b28      	ldr	r3, [pc, #160]	; (8003604 <xPortStartScheduler+0xd8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3b01      	subs	r3, #1
 8003568:	4a26      	ldr	r2, [pc, #152]	; (8003604 <xPortStartScheduler+0xd8>)
 800356a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003576:	78fb      	ldrb	r3, [r7, #3]
 8003578:	b2db      	uxtb	r3, r3
 800357a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800357e:	2b80      	cmp	r3, #128	; 0x80
 8003580:	d0ef      	beq.n	8003562 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003582:	4b20      	ldr	r3, [pc, #128]	; (8003604 <xPortStartScheduler+0xd8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f1c3 0307 	rsb	r3, r3, #7
 800358a:	2b04      	cmp	r3, #4
 800358c:	d00a      	beq.n	80035a4 <xPortStartScheduler+0x78>
        __asm volatile
 800358e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	60bb      	str	r3, [r7, #8]
    }
 80035a0:	bf00      	nop
 80035a2:	e7fe      	b.n	80035a2 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035a4:	4b17      	ldr	r3, [pc, #92]	; (8003604 <xPortStartScheduler+0xd8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	4a16      	ldr	r2, [pc, #88]	; (8003604 <xPortStartScheduler+0xd8>)
 80035ac:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035ae:	4b15      	ldr	r3, [pc, #84]	; (8003604 <xPortStartScheduler+0xd8>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035b6:	4a13      	ldr	r2, [pc, #76]	; (8003604 <xPortStartScheduler+0xd8>)
 80035b8:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <xPortStartScheduler+0xdc>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <xPortStartScheduler+0xdc>)
 80035c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035cc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <xPortStartScheduler+0xdc>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a0d      	ldr	r2, [pc, #52]	; (8003608 <xPortStartScheduler+0xdc>)
 80035d4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80035d8:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80035da:	f000 f8b7 	bl	800374c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80035de:	4b0b      	ldr	r3, [pc, #44]	; (800360c <xPortStartScheduler+0xe0>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80035e4:	f7ff ff90 	bl	8003508 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80035e8:	f7ff fe1c 	bl	8003224 <vTaskSwitchContext>
    prvTaskExitError();
 80035ec:	f7ff ff4a 	bl	8003484 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	e000e400 	.word	0xe000e400
 8003600:	200001a4 	.word	0x200001a4
 8003604:	200001a8 	.word	0x200001a8
 8003608:	e000ed20 	.word	0xe000ed20
 800360c:	20000010 	.word	0x20000010

08003610 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003610:	b480      	push	{r7}
 8003612:	b083      	sub	sp, #12
 8003614:	af00      	add	r7, sp, #0
        __asm volatile
 8003616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361a:	f383 8811 	msr	BASEPRI, r3
 800361e:	f3bf 8f6f 	isb	sy
 8003622:	f3bf 8f4f 	dsb	sy
 8003626:	607b      	str	r3, [r7, #4]
    }
 8003628:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800362a:	4b0f      	ldr	r3, [pc, #60]	; (8003668 <vPortEnterCritical+0x58>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	4a0d      	ldr	r2, [pc, #52]	; (8003668 <vPortEnterCritical+0x58>)
 8003632:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <vPortEnterCritical+0x58>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d10f      	bne.n	800365c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <vPortEnterCritical+0x5c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00a      	beq.n	800365c <vPortEnterCritical+0x4c>
        __asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	603b      	str	r3, [r7, #0]
    }
 8003658:	bf00      	nop
 800365a:	e7fe      	b.n	800365a <vPortEnterCritical+0x4a>
    }
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20000010 	.word	0x20000010
 800366c:	e000ed04 	.word	0xe000ed04

08003670 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003676:	4b11      	ldr	r3, [pc, #68]	; (80036bc <vPortExitCritical+0x4c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d10a      	bne.n	8003694 <vPortExitCritical+0x24>
        __asm volatile
 800367e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003682:	f383 8811 	msr	BASEPRI, r3
 8003686:	f3bf 8f6f 	isb	sy
 800368a:	f3bf 8f4f 	dsb	sy
 800368e:	607b      	str	r3, [r7, #4]
    }
 8003690:	bf00      	nop
 8003692:	e7fe      	b.n	8003692 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <vPortExitCritical+0x4c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	4a08      	ldr	r2, [pc, #32]	; (80036bc <vPortExitCritical+0x4c>)
 800369c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800369e:	4b07      	ldr	r3, [pc, #28]	; (80036bc <vPortExitCritical+0x4c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d105      	bne.n	80036b2 <vPortExitCritical+0x42>
 80036a6:	2300      	movs	r3, #0
 80036a8:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80036b0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80036b2:	bf00      	nop
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr
 80036bc:	20000010 	.word	0x20000010

080036c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80036c0:	f3ef 8009 	mrs	r0, PSP
 80036c4:	f3bf 8f6f 	isb	sy
 80036c8:	4b0d      	ldr	r3, [pc, #52]	; (8003700 <pxCurrentTCBConst>)
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036d0:	6010      	str	r0, [r2, #0]
 80036d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80036d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80036da:	f380 8811 	msr	BASEPRI, r0
 80036de:	f7ff fda1 	bl	8003224 <vTaskSwitchContext>
 80036e2:	f04f 0000 	mov.w	r0, #0
 80036e6:	f380 8811 	msr	BASEPRI, r0
 80036ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80036ee:	6819      	ldr	r1, [r3, #0]
 80036f0:	6808      	ldr	r0, [r1, #0]
 80036f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036f6:	f380 8809 	msr	PSP, r0
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	4770      	bx	lr

08003700 <pxCurrentTCBConst>:
 8003700:	200000a0 	.word	0x200000a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003704:	bf00      	nop
 8003706:	bf00      	nop

08003708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
        __asm volatile
 800370e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003712:	f383 8811 	msr	BASEPRI, r3
 8003716:	f3bf 8f6f 	isb	sy
 800371a:	f3bf 8f4f 	dsb	sy
 800371e:	607b      	str	r3, [r7, #4]
    }
 8003720:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003722:	f7ff fc8b 	bl	800303c <xTaskIncrementTick>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800372c:	4b06      	ldr	r3, [pc, #24]	; (8003748 <SysTick_Handler+0x40>)
 800372e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003732:	601a      	str	r2, [r3, #0]
 8003734:	2300      	movs	r3, #0
 8003736:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	f383 8811 	msr	BASEPRI, r3
    }
 800373e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	e000ed04 	.word	0xe000ed04

0800374c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <vPortSetupTimerInterrupt+0x30>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <vPortSetupTimerInterrupt+0x34>)
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <vPortSetupTimerInterrupt+0x38>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a09      	ldr	r2, [pc, #36]	; (8003788 <vPortSetupTimerInterrupt+0x3c>)
 8003762:	fba2 2303 	umull	r2, r3, r2, r3
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	4a08      	ldr	r2, [pc, #32]	; (800378c <vPortSetupTimerInterrupt+0x40>)
 800376a:	3b01      	subs	r3, #1
 800376c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800376e:	4b03      	ldr	r3, [pc, #12]	; (800377c <vPortSetupTimerInterrupt+0x30>)
 8003770:	2207      	movs	r2, #7
 8003772:	601a      	str	r2, [r3, #0]
}
 8003774:	bf00      	nop
 8003776:	46bd      	mov	sp, r7
 8003778:	bc80      	pop	{r7}
 800377a:	4770      	bx	lr
 800377c:	e000e010 	.word	0xe000e010
 8003780:	e000e018 	.word	0xe000e018
 8003784:	20000000 	.word	0x20000000
 8003788:	10624dd3 	.word	0x10624dd3
 800378c:	e000e014 	.word	0xe000e014

08003790 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b08a      	sub	sp, #40	; 0x28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003798:	2300      	movs	r3, #0
 800379a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800379c:	f7ff fb52 	bl	8002e44 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80037a0:	4b65      	ldr	r3, [pc, #404]	; (8003938 <pvPortMalloc+0x1a8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80037a8:	f000 f934 	bl	8003a14 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80037ac:	4b63      	ldr	r3, [pc, #396]	; (800393c <pvPortMalloc+0x1ac>)
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4013      	ands	r3, r2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f040 80a7 	bne.w	8003908 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d02d      	beq.n	800381c <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80037c0:	2208      	movs	r2, #8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d227      	bcs.n	800381c <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80037cc:	2208      	movs	r2, #8
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f003 0307 	and.w	r3, r3, #7
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d021      	beq.n	8003822 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	f023 0307 	bic.w	r3, r3, #7
 80037e4:	3308      	adds	r3, #8
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d214      	bcs.n	8003816 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f023 0307 	bic.w	r3, r3, #7
 80037f2:	3308      	adds	r3, #8
 80037f4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f003 0307 	and.w	r3, r3, #7
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d010      	beq.n	8003822 <pvPortMalloc+0x92>
        __asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	617b      	str	r3, [r7, #20]
    }
 8003812:	bf00      	nop
 8003814:	e7fe      	b.n	8003814 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003816:	2300      	movs	r3, #0
 8003818:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800381a:	e002      	b.n	8003822 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800381c:	2300      	movs	r3, #0
 800381e:	607b      	str	r3, [r7, #4]
 8003820:	e000      	b.n	8003824 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003822:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d06e      	beq.n	8003908 <pvPortMalloc+0x178>
 800382a:	4b45      	ldr	r3, [pc, #276]	; (8003940 <pvPortMalloc+0x1b0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	429a      	cmp	r2, r3
 8003832:	d869      	bhi.n	8003908 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003834:	4b43      	ldr	r3, [pc, #268]	; (8003944 <pvPortMalloc+0x1b4>)
 8003836:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003838:	4b42      	ldr	r3, [pc, #264]	; (8003944 <pvPortMalloc+0x1b4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800383e:	e004      	b.n	800384a <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	429a      	cmp	r2, r3
 8003852:	d903      	bls.n	800385c <pvPortMalloc+0xcc>
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d1f1      	bne.n	8003840 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800385c:	4b36      	ldr	r3, [pc, #216]	; (8003938 <pvPortMalloc+0x1a8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	429a      	cmp	r2, r3
 8003864:	d050      	beq.n	8003908 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003866:	6a3b      	ldr	r3, [r7, #32]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2208      	movs	r2, #8
 800386c:	4413      	add	r3, r2
 800386e:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	1ad2      	subs	r2, r2, r3
 8003880:	2308      	movs	r3, #8
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	429a      	cmp	r2, r3
 8003886:	d91f      	bls.n	80038c8 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4413      	add	r3, r2
 800388e:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <pvPortMalloc+0x120>
        __asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	613b      	str	r3, [r7, #16]
    }
 80038ac:	bf00      	nop
 80038ae:	e7fe      	b.n	80038ae <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	1ad2      	subs	r2, r2, r3
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80038c2:	69b8      	ldr	r0, [r7, #24]
 80038c4:	f000 f908 	bl	8003ad8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <pvPortMalloc+0x1b0>)
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	4a1b      	ldr	r2, [pc, #108]	; (8003940 <pvPortMalloc+0x1b0>)
 80038d4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038d6:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <pvPortMalloc+0x1b0>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4b1b      	ldr	r3, [pc, #108]	; (8003948 <pvPortMalloc+0x1b8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d203      	bcs.n	80038ea <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80038e2:	4b17      	ldr	r3, [pc, #92]	; (8003940 <pvPortMalloc+0x1b0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a18      	ldr	r2, [pc, #96]	; (8003948 <pvPortMalloc+0x1b8>)
 80038e8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	4b13      	ldr	r3, [pc, #76]	; (800393c <pvPortMalloc+0x1ac>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	2200      	movs	r2, #0
 80038fc:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80038fe:	4b13      	ldr	r3, [pc, #76]	; (800394c <pvPortMalloc+0x1bc>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	3301      	adds	r3, #1
 8003904:	4a11      	ldr	r2, [pc, #68]	; (800394c <pvPortMalloc+0x1bc>)
 8003906:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003908:	f7ff faaa 	bl	8002e60 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	f003 0307 	and.w	r3, r3, #7
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00a      	beq.n	800392c <pvPortMalloc+0x19c>
        __asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	60fb      	str	r3, [r7, #12]
    }
 8003928:	bf00      	nop
 800392a:	e7fe      	b.n	800392a <pvPortMalloc+0x19a>
    return pvReturn;
 800392c:	69fb      	ldr	r3, [r7, #28]
}
 800392e:	4618      	mov	r0, r3
 8003930:	3728      	adds	r7, #40	; 0x28
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	20000db4 	.word	0x20000db4
 800393c:	20000dc8 	.word	0x20000dc8
 8003940:	20000db8 	.word	0x20000db8
 8003944:	20000dac 	.word	0x20000dac
 8003948:	20000dbc 	.word	0x20000dbc
 800394c:	20000dc0 	.word	0x20000dc0

08003950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d04d      	beq.n	80039fe <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003962:	2308      	movs	r3, #8
 8003964:	425b      	negs	r3, r3
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4413      	add	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <vPortFree+0xb8>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4013      	ands	r3, r2
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10a      	bne.n	8003994 <vPortFree+0x44>
        __asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	60fb      	str	r3, [r7, #12]
    }
 8003990:	bf00      	nop
 8003992:	e7fe      	b.n	8003992 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <vPortFree+0x62>
        __asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	60bb      	str	r3, [r7, #8]
    }
 80039ae:	bf00      	nop
 80039b0:	e7fe      	b.n	80039b0 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <vPortFree+0xb8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4013      	ands	r3, r2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01e      	beq.n	80039fe <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d11a      	bne.n	80039fe <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <vPortFree+0xb8>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	401a      	ands	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80039d8:	f7ff fa34 	bl	8002e44 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	4b0a      	ldr	r3, [pc, #40]	; (8003a0c <vPortFree+0xbc>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4413      	add	r3, r2
 80039e6:	4a09      	ldr	r2, [pc, #36]	; (8003a0c <vPortFree+0xbc>)
 80039e8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80039ea:	6938      	ldr	r0, [r7, #16]
 80039ec:	f000 f874 	bl	8003ad8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80039f0:	4b07      	ldr	r3, [pc, #28]	; (8003a10 <vPortFree+0xc0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	4a06      	ldr	r2, [pc, #24]	; (8003a10 <vPortFree+0xc0>)
 80039f8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80039fa:	f7ff fa31 	bl	8002e60 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80039fe:	bf00      	nop
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	20000dc8 	.word	0x20000dc8
 8003a0c:	20000db8 	.word	0x20000db8
 8003a10:	20000dc4 	.word	0x20000dc4

08003a14 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a1e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003a20:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <prvHeapInit+0xac>)
 8003a22:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00c      	beq.n	8003a48 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	3307      	adds	r3, #7
 8003a32:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f023 0307 	bic.w	r3, r3, #7
 8003a3a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <prvHeapInit+0xac>)
 8003a44:	4413      	add	r3, r2
 8003a46:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003a4c:	4a1d      	ldr	r2, [pc, #116]	; (8003ac4 <prvHeapInit+0xb0>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003a52:	4b1c      	ldr	r3, [pc, #112]	; (8003ac4 <prvHeapInit+0xb0>)
 8003a54:	2200      	movs	r2, #0
 8003a56:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	4413      	add	r3, r2
 8003a5e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8003a60:	2208      	movs	r2, #8
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f023 0307 	bic.w	r3, r3, #7
 8003a6e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <prvHeapInit+0xb4>)
 8003a74:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003a76:	4b14      	ldr	r3, [pc, #80]	; (8003ac8 <prvHeapInit+0xb4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8003a7e:	4b12      	ldr	r3, [pc, #72]	; (8003ac8 <prvHeapInit+0xb4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2200      	movs	r2, #0
 8003a84:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	1ad2      	subs	r2, r2, r3
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003a94:	4b0c      	ldr	r3, [pc, #48]	; (8003ac8 <prvHeapInit+0xb4>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a0a      	ldr	r2, [pc, #40]	; (8003acc <prvHeapInit+0xb8>)
 8003aa2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4a09      	ldr	r2, [pc, #36]	; (8003ad0 <prvHeapInit+0xbc>)
 8003aaa:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003aac:	4b09      	ldr	r3, [pc, #36]	; (8003ad4 <prvHeapInit+0xc0>)
 8003aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003ab2:	601a      	str	r2, [r3, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	3714      	adds	r7, #20
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	200001ac 	.word	0x200001ac
 8003ac4:	20000dac 	.word	0x20000dac
 8003ac8:	20000db4 	.word	0x20000db4
 8003acc:	20000dbc 	.word	0x20000dbc
 8003ad0:	20000db8 	.word	0x20000db8
 8003ad4:	20000dc8 	.word	0x20000dc8

08003ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b085      	sub	sp, #20
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003ae0:	4b27      	ldr	r3, [pc, #156]	; (8003b80 <prvInsertBlockIntoFreeList+0xa8>)
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e002      	b.n	8003aec <prvInsertBlockIntoFreeList+0x14>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d8f7      	bhi.n	8003ae6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	68ba      	ldr	r2, [r7, #8]
 8003b00:	4413      	add	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d108      	bne.n	8003b1a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	441a      	add	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68ba      	ldr	r2, [r7, #8]
 8003b24:	441a      	add	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d118      	bne.n	8003b60 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b14      	ldr	r3, [pc, #80]	; (8003b84 <prvInsertBlockIntoFreeList+0xac>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d00d      	beq.n	8003b56 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685a      	ldr	r2, [r3, #4]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	441a      	add	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	601a      	str	r2, [r3, #0]
 8003b54:	e008      	b.n	8003b68 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <prvInsertBlockIntoFreeList+0xac>)
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	e003      	b.n	8003b68 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d002      	beq.n	8003b76 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003b76:	bf00      	nop
 8003b78:	3714      	adds	r7, #20
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bc80      	pop	{r7}
 8003b7e:	4770      	bx	lr
 8003b80:	20000dac 	.word	0x20000dac
 8003b84:	20000db4 	.word	0x20000db4

08003b88 <__libc_init_array>:
 8003b88:	b570      	push	{r4, r5, r6, lr}
 8003b8a:	2600      	movs	r6, #0
 8003b8c:	4d0c      	ldr	r5, [pc, #48]	; (8003bc0 <__libc_init_array+0x38>)
 8003b8e:	4c0d      	ldr	r4, [pc, #52]	; (8003bc4 <__libc_init_array+0x3c>)
 8003b90:	1b64      	subs	r4, r4, r5
 8003b92:	10a4      	asrs	r4, r4, #2
 8003b94:	42a6      	cmp	r6, r4
 8003b96:	d109      	bne.n	8003bac <__libc_init_array+0x24>
 8003b98:	f001 f806 	bl	8004ba8 <_init>
 8003b9c:	2600      	movs	r6, #0
 8003b9e:	4d0a      	ldr	r5, [pc, #40]	; (8003bc8 <__libc_init_array+0x40>)
 8003ba0:	4c0a      	ldr	r4, [pc, #40]	; (8003bcc <__libc_init_array+0x44>)
 8003ba2:	1b64      	subs	r4, r4, r5
 8003ba4:	10a4      	asrs	r4, r4, #2
 8003ba6:	42a6      	cmp	r6, r4
 8003ba8:	d105      	bne.n	8003bb6 <__libc_init_array+0x2e>
 8003baa:	bd70      	pop	{r4, r5, r6, pc}
 8003bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb0:	4798      	blx	r3
 8003bb2:	3601      	adds	r6, #1
 8003bb4:	e7ee      	b.n	8003b94 <__libc_init_array+0xc>
 8003bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bba:	4798      	blx	r3
 8003bbc:	3601      	adds	r6, #1
 8003bbe:	e7f2      	b.n	8003ba6 <__libc_init_array+0x1e>
 8003bc0:	08004cf4 	.word	0x08004cf4
 8003bc4:	08004cf4 	.word	0x08004cf4
 8003bc8:	08004cf4 	.word	0x08004cf4
 8003bcc:	08004cf8 	.word	0x08004cf8

08003bd0 <memset>:
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	4402      	add	r2, r0
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d100      	bne.n	8003bda <memset+0xa>
 8003bd8:	4770      	bx	lr
 8003bda:	f803 1b01 	strb.w	r1, [r3], #1
 8003bde:	e7f9      	b.n	8003bd4 <memset+0x4>

08003be0 <iprintf>:
 8003be0:	b40f      	push	{r0, r1, r2, r3}
 8003be2:	4b0a      	ldr	r3, [pc, #40]	; (8003c0c <iprintf+0x2c>)
 8003be4:	b513      	push	{r0, r1, r4, lr}
 8003be6:	681c      	ldr	r4, [r3, #0]
 8003be8:	b124      	cbz	r4, 8003bf4 <iprintf+0x14>
 8003bea:	69a3      	ldr	r3, [r4, #24]
 8003bec:	b913      	cbnz	r3, 8003bf4 <iprintf+0x14>
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f000 fa5e 	bl	80040b0 <__sinit>
 8003bf4:	ab05      	add	r3, sp, #20
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	9a04      	ldr	r2, [sp, #16]
 8003bfa:	68a1      	ldr	r1, [r4, #8]
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	f000 fc29 	bl	8004454 <_vfiprintf_r>
 8003c02:	b002      	add	sp, #8
 8003c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c08:	b004      	add	sp, #16
 8003c0a:	4770      	bx	lr
 8003c0c:	20000014 	.word	0x20000014

08003c10 <_puts_r>:
 8003c10:	b570      	push	{r4, r5, r6, lr}
 8003c12:	460e      	mov	r6, r1
 8003c14:	4605      	mov	r5, r0
 8003c16:	b118      	cbz	r0, 8003c20 <_puts_r+0x10>
 8003c18:	6983      	ldr	r3, [r0, #24]
 8003c1a:	b90b      	cbnz	r3, 8003c20 <_puts_r+0x10>
 8003c1c:	f000 fa48 	bl	80040b0 <__sinit>
 8003c20:	69ab      	ldr	r3, [r5, #24]
 8003c22:	68ac      	ldr	r4, [r5, #8]
 8003c24:	b913      	cbnz	r3, 8003c2c <_puts_r+0x1c>
 8003c26:	4628      	mov	r0, r5
 8003c28:	f000 fa42 	bl	80040b0 <__sinit>
 8003c2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <_puts_r+0xd0>)
 8003c2e:	429c      	cmp	r4, r3
 8003c30:	d120      	bne.n	8003c74 <_puts_r+0x64>
 8003c32:	686c      	ldr	r4, [r5, #4]
 8003c34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c36:	07db      	lsls	r3, r3, #31
 8003c38:	d405      	bmi.n	8003c46 <_puts_r+0x36>
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	0598      	lsls	r0, r3, #22
 8003c3e:	d402      	bmi.n	8003c46 <_puts_r+0x36>
 8003c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003c42:	f000 fad3 	bl	80041ec <__retarget_lock_acquire_recursive>
 8003c46:	89a3      	ldrh	r3, [r4, #12]
 8003c48:	0719      	lsls	r1, r3, #28
 8003c4a:	d51d      	bpl.n	8003c88 <_puts_r+0x78>
 8003c4c:	6923      	ldr	r3, [r4, #16]
 8003c4e:	b1db      	cbz	r3, 8003c88 <_puts_r+0x78>
 8003c50:	3e01      	subs	r6, #1
 8003c52:	68a3      	ldr	r3, [r4, #8]
 8003c54:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	60a3      	str	r3, [r4, #8]
 8003c5c:	bb39      	cbnz	r1, 8003cae <_puts_r+0x9e>
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da38      	bge.n	8003cd4 <_puts_r+0xc4>
 8003c62:	4622      	mov	r2, r4
 8003c64:	210a      	movs	r1, #10
 8003c66:	4628      	mov	r0, r5
 8003c68:	f000 f848 	bl	8003cfc <__swbuf_r>
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d011      	beq.n	8003c94 <_puts_r+0x84>
 8003c70:	250a      	movs	r5, #10
 8003c72:	e011      	b.n	8003c98 <_puts_r+0x88>
 8003c74:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <_puts_r+0xd4>)
 8003c76:	429c      	cmp	r4, r3
 8003c78:	d101      	bne.n	8003c7e <_puts_r+0x6e>
 8003c7a:	68ac      	ldr	r4, [r5, #8]
 8003c7c:	e7da      	b.n	8003c34 <_puts_r+0x24>
 8003c7e:	4b1a      	ldr	r3, [pc, #104]	; (8003ce8 <_puts_r+0xd8>)
 8003c80:	429c      	cmp	r4, r3
 8003c82:	bf08      	it	eq
 8003c84:	68ec      	ldreq	r4, [r5, #12]
 8003c86:	e7d5      	b.n	8003c34 <_puts_r+0x24>
 8003c88:	4621      	mov	r1, r4
 8003c8a:	4628      	mov	r0, r5
 8003c8c:	f000 f888 	bl	8003da0 <__swsetup_r>
 8003c90:	2800      	cmp	r0, #0
 8003c92:	d0dd      	beq.n	8003c50 <_puts_r+0x40>
 8003c94:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003c98:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003c9a:	07da      	lsls	r2, r3, #31
 8003c9c:	d405      	bmi.n	8003caa <_puts_r+0x9a>
 8003c9e:	89a3      	ldrh	r3, [r4, #12]
 8003ca0:	059b      	lsls	r3, r3, #22
 8003ca2:	d402      	bmi.n	8003caa <_puts_r+0x9a>
 8003ca4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003ca6:	f000 faa2 	bl	80041ee <__retarget_lock_release_recursive>
 8003caa:	4628      	mov	r0, r5
 8003cac:	bd70      	pop	{r4, r5, r6, pc}
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	da04      	bge.n	8003cbc <_puts_r+0xac>
 8003cb2:	69a2      	ldr	r2, [r4, #24]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	dc06      	bgt.n	8003cc6 <_puts_r+0xb6>
 8003cb8:	290a      	cmp	r1, #10
 8003cba:	d004      	beq.n	8003cc6 <_puts_r+0xb6>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	6022      	str	r2, [r4, #0]
 8003cc2:	7019      	strb	r1, [r3, #0]
 8003cc4:	e7c5      	b.n	8003c52 <_puts_r+0x42>
 8003cc6:	4622      	mov	r2, r4
 8003cc8:	4628      	mov	r0, r5
 8003cca:	f000 f817 	bl	8003cfc <__swbuf_r>
 8003cce:	3001      	adds	r0, #1
 8003cd0:	d1bf      	bne.n	8003c52 <_puts_r+0x42>
 8003cd2:	e7df      	b.n	8003c94 <_puts_r+0x84>
 8003cd4:	250a      	movs	r5, #10
 8003cd6:	6823      	ldr	r3, [r4, #0]
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	6022      	str	r2, [r4, #0]
 8003cdc:	701d      	strb	r5, [r3, #0]
 8003cde:	e7db      	b.n	8003c98 <_puts_r+0x88>
 8003ce0:	08004c80 	.word	0x08004c80
 8003ce4:	08004ca0 	.word	0x08004ca0
 8003ce8:	08004c60 	.word	0x08004c60

08003cec <puts>:
 8003cec:	4b02      	ldr	r3, [pc, #8]	; (8003cf8 <puts+0xc>)
 8003cee:	4601      	mov	r1, r0
 8003cf0:	6818      	ldr	r0, [r3, #0]
 8003cf2:	f7ff bf8d 	b.w	8003c10 <_puts_r>
 8003cf6:	bf00      	nop
 8003cf8:	20000014 	.word	0x20000014

08003cfc <__swbuf_r>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	460e      	mov	r6, r1
 8003d00:	4614      	mov	r4, r2
 8003d02:	4605      	mov	r5, r0
 8003d04:	b118      	cbz	r0, 8003d0e <__swbuf_r+0x12>
 8003d06:	6983      	ldr	r3, [r0, #24]
 8003d08:	b90b      	cbnz	r3, 8003d0e <__swbuf_r+0x12>
 8003d0a:	f000 f9d1 	bl	80040b0 <__sinit>
 8003d0e:	4b21      	ldr	r3, [pc, #132]	; (8003d94 <__swbuf_r+0x98>)
 8003d10:	429c      	cmp	r4, r3
 8003d12:	d12b      	bne.n	8003d6c <__swbuf_r+0x70>
 8003d14:	686c      	ldr	r4, [r5, #4]
 8003d16:	69a3      	ldr	r3, [r4, #24]
 8003d18:	60a3      	str	r3, [r4, #8]
 8003d1a:	89a3      	ldrh	r3, [r4, #12]
 8003d1c:	071a      	lsls	r2, r3, #28
 8003d1e:	d52f      	bpl.n	8003d80 <__swbuf_r+0x84>
 8003d20:	6923      	ldr	r3, [r4, #16]
 8003d22:	b36b      	cbz	r3, 8003d80 <__swbuf_r+0x84>
 8003d24:	6923      	ldr	r3, [r4, #16]
 8003d26:	6820      	ldr	r0, [r4, #0]
 8003d28:	b2f6      	uxtb	r6, r6
 8003d2a:	1ac0      	subs	r0, r0, r3
 8003d2c:	6963      	ldr	r3, [r4, #20]
 8003d2e:	4637      	mov	r7, r6
 8003d30:	4283      	cmp	r3, r0
 8003d32:	dc04      	bgt.n	8003d3e <__swbuf_r+0x42>
 8003d34:	4621      	mov	r1, r4
 8003d36:	4628      	mov	r0, r5
 8003d38:	f000 f926 	bl	8003f88 <_fflush_r>
 8003d3c:	bb30      	cbnz	r0, 8003d8c <__swbuf_r+0x90>
 8003d3e:	68a3      	ldr	r3, [r4, #8]
 8003d40:	3001      	adds	r0, #1
 8003d42:	3b01      	subs	r3, #1
 8003d44:	60a3      	str	r3, [r4, #8]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	6022      	str	r2, [r4, #0]
 8003d4c:	701e      	strb	r6, [r3, #0]
 8003d4e:	6963      	ldr	r3, [r4, #20]
 8003d50:	4283      	cmp	r3, r0
 8003d52:	d004      	beq.n	8003d5e <__swbuf_r+0x62>
 8003d54:	89a3      	ldrh	r3, [r4, #12]
 8003d56:	07db      	lsls	r3, r3, #31
 8003d58:	d506      	bpl.n	8003d68 <__swbuf_r+0x6c>
 8003d5a:	2e0a      	cmp	r6, #10
 8003d5c:	d104      	bne.n	8003d68 <__swbuf_r+0x6c>
 8003d5e:	4621      	mov	r1, r4
 8003d60:	4628      	mov	r0, r5
 8003d62:	f000 f911 	bl	8003f88 <_fflush_r>
 8003d66:	b988      	cbnz	r0, 8003d8c <__swbuf_r+0x90>
 8003d68:	4638      	mov	r0, r7
 8003d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d6c:	4b0a      	ldr	r3, [pc, #40]	; (8003d98 <__swbuf_r+0x9c>)
 8003d6e:	429c      	cmp	r4, r3
 8003d70:	d101      	bne.n	8003d76 <__swbuf_r+0x7a>
 8003d72:	68ac      	ldr	r4, [r5, #8]
 8003d74:	e7cf      	b.n	8003d16 <__swbuf_r+0x1a>
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <__swbuf_r+0xa0>)
 8003d78:	429c      	cmp	r4, r3
 8003d7a:	bf08      	it	eq
 8003d7c:	68ec      	ldreq	r4, [r5, #12]
 8003d7e:	e7ca      	b.n	8003d16 <__swbuf_r+0x1a>
 8003d80:	4621      	mov	r1, r4
 8003d82:	4628      	mov	r0, r5
 8003d84:	f000 f80c 	bl	8003da0 <__swsetup_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d0cb      	beq.n	8003d24 <__swbuf_r+0x28>
 8003d8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003d90:	e7ea      	b.n	8003d68 <__swbuf_r+0x6c>
 8003d92:	bf00      	nop
 8003d94:	08004c80 	.word	0x08004c80
 8003d98:	08004ca0 	.word	0x08004ca0
 8003d9c:	08004c60 	.word	0x08004c60

08003da0 <__swsetup_r>:
 8003da0:	4b32      	ldr	r3, [pc, #200]	; (8003e6c <__swsetup_r+0xcc>)
 8003da2:	b570      	push	{r4, r5, r6, lr}
 8003da4:	681d      	ldr	r5, [r3, #0]
 8003da6:	4606      	mov	r6, r0
 8003da8:	460c      	mov	r4, r1
 8003daa:	b125      	cbz	r5, 8003db6 <__swsetup_r+0x16>
 8003dac:	69ab      	ldr	r3, [r5, #24]
 8003dae:	b913      	cbnz	r3, 8003db6 <__swsetup_r+0x16>
 8003db0:	4628      	mov	r0, r5
 8003db2:	f000 f97d 	bl	80040b0 <__sinit>
 8003db6:	4b2e      	ldr	r3, [pc, #184]	; (8003e70 <__swsetup_r+0xd0>)
 8003db8:	429c      	cmp	r4, r3
 8003dba:	d10f      	bne.n	8003ddc <__swsetup_r+0x3c>
 8003dbc:	686c      	ldr	r4, [r5, #4]
 8003dbe:	89a3      	ldrh	r3, [r4, #12]
 8003dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dc4:	0719      	lsls	r1, r3, #28
 8003dc6:	d42c      	bmi.n	8003e22 <__swsetup_r+0x82>
 8003dc8:	06dd      	lsls	r5, r3, #27
 8003dca:	d411      	bmi.n	8003df0 <__swsetup_r+0x50>
 8003dcc:	2309      	movs	r3, #9
 8003dce:	6033      	str	r3, [r6, #0]
 8003dd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dd8:	81a3      	strh	r3, [r4, #12]
 8003dda:	e03e      	b.n	8003e5a <__swsetup_r+0xba>
 8003ddc:	4b25      	ldr	r3, [pc, #148]	; (8003e74 <__swsetup_r+0xd4>)
 8003dde:	429c      	cmp	r4, r3
 8003de0:	d101      	bne.n	8003de6 <__swsetup_r+0x46>
 8003de2:	68ac      	ldr	r4, [r5, #8]
 8003de4:	e7eb      	b.n	8003dbe <__swsetup_r+0x1e>
 8003de6:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <__swsetup_r+0xd8>)
 8003de8:	429c      	cmp	r4, r3
 8003dea:	bf08      	it	eq
 8003dec:	68ec      	ldreq	r4, [r5, #12]
 8003dee:	e7e6      	b.n	8003dbe <__swsetup_r+0x1e>
 8003df0:	0758      	lsls	r0, r3, #29
 8003df2:	d512      	bpl.n	8003e1a <__swsetup_r+0x7a>
 8003df4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003df6:	b141      	cbz	r1, 8003e0a <__swsetup_r+0x6a>
 8003df8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dfc:	4299      	cmp	r1, r3
 8003dfe:	d002      	beq.n	8003e06 <__swsetup_r+0x66>
 8003e00:	4630      	mov	r0, r6
 8003e02:	f000 fa59 	bl	80042b8 <_free_r>
 8003e06:	2300      	movs	r3, #0
 8003e08:	6363      	str	r3, [r4, #52]	; 0x34
 8003e0a:	89a3      	ldrh	r3, [r4, #12]
 8003e0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e10:	81a3      	strh	r3, [r4, #12]
 8003e12:	2300      	movs	r3, #0
 8003e14:	6063      	str	r3, [r4, #4]
 8003e16:	6923      	ldr	r3, [r4, #16]
 8003e18:	6023      	str	r3, [r4, #0]
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f043 0308 	orr.w	r3, r3, #8
 8003e20:	81a3      	strh	r3, [r4, #12]
 8003e22:	6923      	ldr	r3, [r4, #16]
 8003e24:	b94b      	cbnz	r3, 8003e3a <__swsetup_r+0x9a>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e30:	d003      	beq.n	8003e3a <__swsetup_r+0x9a>
 8003e32:	4621      	mov	r1, r4
 8003e34:	4630      	mov	r0, r6
 8003e36:	f000 f9ff 	bl	8004238 <__smakebuf_r>
 8003e3a:	89a0      	ldrh	r0, [r4, #12]
 8003e3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e40:	f010 0301 	ands.w	r3, r0, #1
 8003e44:	d00a      	beq.n	8003e5c <__swsetup_r+0xbc>
 8003e46:	2300      	movs	r3, #0
 8003e48:	60a3      	str	r3, [r4, #8]
 8003e4a:	6963      	ldr	r3, [r4, #20]
 8003e4c:	425b      	negs	r3, r3
 8003e4e:	61a3      	str	r3, [r4, #24]
 8003e50:	6923      	ldr	r3, [r4, #16]
 8003e52:	b943      	cbnz	r3, 8003e66 <__swsetup_r+0xc6>
 8003e54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e58:	d1ba      	bne.n	8003dd0 <__swsetup_r+0x30>
 8003e5a:	bd70      	pop	{r4, r5, r6, pc}
 8003e5c:	0781      	lsls	r1, r0, #30
 8003e5e:	bf58      	it	pl
 8003e60:	6963      	ldrpl	r3, [r4, #20]
 8003e62:	60a3      	str	r3, [r4, #8]
 8003e64:	e7f4      	b.n	8003e50 <__swsetup_r+0xb0>
 8003e66:	2000      	movs	r0, #0
 8003e68:	e7f7      	b.n	8003e5a <__swsetup_r+0xba>
 8003e6a:	bf00      	nop
 8003e6c:	20000014 	.word	0x20000014
 8003e70:	08004c80 	.word	0x08004c80
 8003e74:	08004ca0 	.word	0x08004ca0
 8003e78:	08004c60 	.word	0x08004c60

08003e7c <__sflush_r>:
 8003e7c:	898a      	ldrh	r2, [r1, #12]
 8003e7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e82:	4605      	mov	r5, r0
 8003e84:	0710      	lsls	r0, r2, #28
 8003e86:	460c      	mov	r4, r1
 8003e88:	d458      	bmi.n	8003f3c <__sflush_r+0xc0>
 8003e8a:	684b      	ldr	r3, [r1, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	dc05      	bgt.n	8003e9c <__sflush_r+0x20>
 8003e90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	dc02      	bgt.n	8003e9c <__sflush_r+0x20>
 8003e96:	2000      	movs	r0, #0
 8003e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	d0f9      	beq.n	8003e96 <__sflush_r+0x1a>
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ea8:	682f      	ldr	r7, [r5, #0]
 8003eaa:	602b      	str	r3, [r5, #0]
 8003eac:	d032      	beq.n	8003f14 <__sflush_r+0x98>
 8003eae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	075a      	lsls	r2, r3, #29
 8003eb4:	d505      	bpl.n	8003ec2 <__sflush_r+0x46>
 8003eb6:	6863      	ldr	r3, [r4, #4]
 8003eb8:	1ac0      	subs	r0, r0, r3
 8003eba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003ebc:	b10b      	cbz	r3, 8003ec2 <__sflush_r+0x46>
 8003ebe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ec0:	1ac0      	subs	r0, r0, r3
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ec8:	4628      	mov	r0, r5
 8003eca:	6a21      	ldr	r1, [r4, #32]
 8003ecc:	47b0      	blx	r6
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	d106      	bne.n	8003ee2 <__sflush_r+0x66>
 8003ed4:	6829      	ldr	r1, [r5, #0]
 8003ed6:	291d      	cmp	r1, #29
 8003ed8:	d82c      	bhi.n	8003f34 <__sflush_r+0xb8>
 8003eda:	4a2a      	ldr	r2, [pc, #168]	; (8003f84 <__sflush_r+0x108>)
 8003edc:	40ca      	lsrs	r2, r1
 8003ede:	07d6      	lsls	r6, r2, #31
 8003ee0:	d528      	bpl.n	8003f34 <__sflush_r+0xb8>
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	6062      	str	r2, [r4, #4]
 8003ee6:	6922      	ldr	r2, [r4, #16]
 8003ee8:	04d9      	lsls	r1, r3, #19
 8003eea:	6022      	str	r2, [r4, #0]
 8003eec:	d504      	bpl.n	8003ef8 <__sflush_r+0x7c>
 8003eee:	1c42      	adds	r2, r0, #1
 8003ef0:	d101      	bne.n	8003ef6 <__sflush_r+0x7a>
 8003ef2:	682b      	ldr	r3, [r5, #0]
 8003ef4:	b903      	cbnz	r3, 8003ef8 <__sflush_r+0x7c>
 8003ef6:	6560      	str	r0, [r4, #84]	; 0x54
 8003ef8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003efa:	602f      	str	r7, [r5, #0]
 8003efc:	2900      	cmp	r1, #0
 8003efe:	d0ca      	beq.n	8003e96 <__sflush_r+0x1a>
 8003f00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f04:	4299      	cmp	r1, r3
 8003f06:	d002      	beq.n	8003f0e <__sflush_r+0x92>
 8003f08:	4628      	mov	r0, r5
 8003f0a:	f000 f9d5 	bl	80042b8 <_free_r>
 8003f0e:	2000      	movs	r0, #0
 8003f10:	6360      	str	r0, [r4, #52]	; 0x34
 8003f12:	e7c1      	b.n	8003e98 <__sflush_r+0x1c>
 8003f14:	6a21      	ldr	r1, [r4, #32]
 8003f16:	2301      	movs	r3, #1
 8003f18:	4628      	mov	r0, r5
 8003f1a:	47b0      	blx	r6
 8003f1c:	1c41      	adds	r1, r0, #1
 8003f1e:	d1c7      	bne.n	8003eb0 <__sflush_r+0x34>
 8003f20:	682b      	ldr	r3, [r5, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0c4      	beq.n	8003eb0 <__sflush_r+0x34>
 8003f26:	2b1d      	cmp	r3, #29
 8003f28:	d001      	beq.n	8003f2e <__sflush_r+0xb2>
 8003f2a:	2b16      	cmp	r3, #22
 8003f2c:	d101      	bne.n	8003f32 <__sflush_r+0xb6>
 8003f2e:	602f      	str	r7, [r5, #0]
 8003f30:	e7b1      	b.n	8003e96 <__sflush_r+0x1a>
 8003f32:	89a3      	ldrh	r3, [r4, #12]
 8003f34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f38:	81a3      	strh	r3, [r4, #12]
 8003f3a:	e7ad      	b.n	8003e98 <__sflush_r+0x1c>
 8003f3c:	690f      	ldr	r7, [r1, #16]
 8003f3e:	2f00      	cmp	r7, #0
 8003f40:	d0a9      	beq.n	8003e96 <__sflush_r+0x1a>
 8003f42:	0793      	lsls	r3, r2, #30
 8003f44:	bf18      	it	ne
 8003f46:	2300      	movne	r3, #0
 8003f48:	680e      	ldr	r6, [r1, #0]
 8003f4a:	bf08      	it	eq
 8003f4c:	694b      	ldreq	r3, [r1, #20]
 8003f4e:	eba6 0807 	sub.w	r8, r6, r7
 8003f52:	600f      	str	r7, [r1, #0]
 8003f54:	608b      	str	r3, [r1, #8]
 8003f56:	f1b8 0f00 	cmp.w	r8, #0
 8003f5a:	dd9c      	ble.n	8003e96 <__sflush_r+0x1a>
 8003f5c:	4643      	mov	r3, r8
 8003f5e:	463a      	mov	r2, r7
 8003f60:	4628      	mov	r0, r5
 8003f62:	6a21      	ldr	r1, [r4, #32]
 8003f64:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003f66:	47b0      	blx	r6
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	dc06      	bgt.n	8003f7a <__sflush_r+0xfe>
 8003f6c:	89a3      	ldrh	r3, [r4, #12]
 8003f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	e78e      	b.n	8003e98 <__sflush_r+0x1c>
 8003f7a:	4407      	add	r7, r0
 8003f7c:	eba8 0800 	sub.w	r8, r8, r0
 8003f80:	e7e9      	b.n	8003f56 <__sflush_r+0xda>
 8003f82:	bf00      	nop
 8003f84:	20400001 	.word	0x20400001

08003f88 <_fflush_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	690b      	ldr	r3, [r1, #16]
 8003f8c:	4605      	mov	r5, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	b913      	cbnz	r3, 8003f98 <_fflush_r+0x10>
 8003f92:	2500      	movs	r5, #0
 8003f94:	4628      	mov	r0, r5
 8003f96:	bd38      	pop	{r3, r4, r5, pc}
 8003f98:	b118      	cbz	r0, 8003fa2 <_fflush_r+0x1a>
 8003f9a:	6983      	ldr	r3, [r0, #24]
 8003f9c:	b90b      	cbnz	r3, 8003fa2 <_fflush_r+0x1a>
 8003f9e:	f000 f887 	bl	80040b0 <__sinit>
 8003fa2:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <_fflush_r+0x6c>)
 8003fa4:	429c      	cmp	r4, r3
 8003fa6:	d11b      	bne.n	8003fe0 <_fflush_r+0x58>
 8003fa8:	686c      	ldr	r4, [r5, #4]
 8003faa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0ef      	beq.n	8003f92 <_fflush_r+0xa>
 8003fb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003fb4:	07d0      	lsls	r0, r2, #31
 8003fb6:	d404      	bmi.n	8003fc2 <_fflush_r+0x3a>
 8003fb8:	0599      	lsls	r1, r3, #22
 8003fba:	d402      	bmi.n	8003fc2 <_fflush_r+0x3a>
 8003fbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fbe:	f000 f915 	bl	80041ec <__retarget_lock_acquire_recursive>
 8003fc2:	4628      	mov	r0, r5
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	f7ff ff59 	bl	8003e7c <__sflush_r>
 8003fca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fcc:	4605      	mov	r5, r0
 8003fce:	07da      	lsls	r2, r3, #31
 8003fd0:	d4e0      	bmi.n	8003f94 <_fflush_r+0xc>
 8003fd2:	89a3      	ldrh	r3, [r4, #12]
 8003fd4:	059b      	lsls	r3, r3, #22
 8003fd6:	d4dd      	bmi.n	8003f94 <_fflush_r+0xc>
 8003fd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fda:	f000 f908 	bl	80041ee <__retarget_lock_release_recursive>
 8003fde:	e7d9      	b.n	8003f94 <_fflush_r+0xc>
 8003fe0:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <_fflush_r+0x70>)
 8003fe2:	429c      	cmp	r4, r3
 8003fe4:	d101      	bne.n	8003fea <_fflush_r+0x62>
 8003fe6:	68ac      	ldr	r4, [r5, #8]
 8003fe8:	e7df      	b.n	8003faa <_fflush_r+0x22>
 8003fea:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <_fflush_r+0x74>)
 8003fec:	429c      	cmp	r4, r3
 8003fee:	bf08      	it	eq
 8003ff0:	68ec      	ldreq	r4, [r5, #12]
 8003ff2:	e7da      	b.n	8003faa <_fflush_r+0x22>
 8003ff4:	08004c80 	.word	0x08004c80
 8003ff8:	08004ca0 	.word	0x08004ca0
 8003ffc:	08004c60 	.word	0x08004c60

08004000 <std>:
 8004000:	2300      	movs	r3, #0
 8004002:	b510      	push	{r4, lr}
 8004004:	4604      	mov	r4, r0
 8004006:	e9c0 3300 	strd	r3, r3, [r0]
 800400a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800400e:	6083      	str	r3, [r0, #8]
 8004010:	8181      	strh	r1, [r0, #12]
 8004012:	6643      	str	r3, [r0, #100]	; 0x64
 8004014:	81c2      	strh	r2, [r0, #14]
 8004016:	6183      	str	r3, [r0, #24]
 8004018:	4619      	mov	r1, r3
 800401a:	2208      	movs	r2, #8
 800401c:	305c      	adds	r0, #92	; 0x5c
 800401e:	f7ff fdd7 	bl	8003bd0 <memset>
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <std+0x38>)
 8004024:	6224      	str	r4, [r4, #32]
 8004026:	6263      	str	r3, [r4, #36]	; 0x24
 8004028:	4b04      	ldr	r3, [pc, #16]	; (800403c <std+0x3c>)
 800402a:	62a3      	str	r3, [r4, #40]	; 0x28
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <std+0x40>)
 800402e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <std+0x44>)
 8004032:	6323      	str	r3, [r4, #48]	; 0x30
 8004034:	bd10      	pop	{r4, pc}
 8004036:	bf00      	nop
 8004038:	08004a01 	.word	0x08004a01
 800403c:	08004a23 	.word	0x08004a23
 8004040:	08004a5b 	.word	0x08004a5b
 8004044:	08004a7f 	.word	0x08004a7f

08004048 <_cleanup_r>:
 8004048:	4901      	ldr	r1, [pc, #4]	; (8004050 <_cleanup_r+0x8>)
 800404a:	f000 b8af 	b.w	80041ac <_fwalk_reent>
 800404e:	bf00      	nop
 8004050:	08003f89 	.word	0x08003f89

08004054 <__sfmoreglue>:
 8004054:	b570      	push	{r4, r5, r6, lr}
 8004056:	2568      	movs	r5, #104	; 0x68
 8004058:	1e4a      	subs	r2, r1, #1
 800405a:	4355      	muls	r5, r2
 800405c:	460e      	mov	r6, r1
 800405e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004062:	f000 f975 	bl	8004350 <_malloc_r>
 8004066:	4604      	mov	r4, r0
 8004068:	b140      	cbz	r0, 800407c <__sfmoreglue+0x28>
 800406a:	2100      	movs	r1, #0
 800406c:	e9c0 1600 	strd	r1, r6, [r0]
 8004070:	300c      	adds	r0, #12
 8004072:	60a0      	str	r0, [r4, #8]
 8004074:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004078:	f7ff fdaa 	bl	8003bd0 <memset>
 800407c:	4620      	mov	r0, r4
 800407e:	bd70      	pop	{r4, r5, r6, pc}

08004080 <__sfp_lock_acquire>:
 8004080:	4801      	ldr	r0, [pc, #4]	; (8004088 <__sfp_lock_acquire+0x8>)
 8004082:	f000 b8b3 	b.w	80041ec <__retarget_lock_acquire_recursive>
 8004086:	bf00      	nop
 8004088:	20000e88 	.word	0x20000e88

0800408c <__sfp_lock_release>:
 800408c:	4801      	ldr	r0, [pc, #4]	; (8004094 <__sfp_lock_release+0x8>)
 800408e:	f000 b8ae 	b.w	80041ee <__retarget_lock_release_recursive>
 8004092:	bf00      	nop
 8004094:	20000e88 	.word	0x20000e88

08004098 <__sinit_lock_acquire>:
 8004098:	4801      	ldr	r0, [pc, #4]	; (80040a0 <__sinit_lock_acquire+0x8>)
 800409a:	f000 b8a7 	b.w	80041ec <__retarget_lock_acquire_recursive>
 800409e:	bf00      	nop
 80040a0:	20000e83 	.word	0x20000e83

080040a4 <__sinit_lock_release>:
 80040a4:	4801      	ldr	r0, [pc, #4]	; (80040ac <__sinit_lock_release+0x8>)
 80040a6:	f000 b8a2 	b.w	80041ee <__retarget_lock_release_recursive>
 80040aa:	bf00      	nop
 80040ac:	20000e83 	.word	0x20000e83

080040b0 <__sinit>:
 80040b0:	b510      	push	{r4, lr}
 80040b2:	4604      	mov	r4, r0
 80040b4:	f7ff fff0 	bl	8004098 <__sinit_lock_acquire>
 80040b8:	69a3      	ldr	r3, [r4, #24]
 80040ba:	b11b      	cbz	r3, 80040c4 <__sinit+0x14>
 80040bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80040c0:	f7ff bff0 	b.w	80040a4 <__sinit_lock_release>
 80040c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80040c8:	6523      	str	r3, [r4, #80]	; 0x50
 80040ca:	4b13      	ldr	r3, [pc, #76]	; (8004118 <__sinit+0x68>)
 80040cc:	4a13      	ldr	r2, [pc, #76]	; (800411c <__sinit+0x6c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80040d2:	42a3      	cmp	r3, r4
 80040d4:	bf08      	it	eq
 80040d6:	2301      	moveq	r3, #1
 80040d8:	4620      	mov	r0, r4
 80040da:	bf08      	it	eq
 80040dc:	61a3      	streq	r3, [r4, #24]
 80040de:	f000 f81f 	bl	8004120 <__sfp>
 80040e2:	6060      	str	r0, [r4, #4]
 80040e4:	4620      	mov	r0, r4
 80040e6:	f000 f81b 	bl	8004120 <__sfp>
 80040ea:	60a0      	str	r0, [r4, #8]
 80040ec:	4620      	mov	r0, r4
 80040ee:	f000 f817 	bl	8004120 <__sfp>
 80040f2:	2200      	movs	r2, #0
 80040f4:	2104      	movs	r1, #4
 80040f6:	60e0      	str	r0, [r4, #12]
 80040f8:	6860      	ldr	r0, [r4, #4]
 80040fa:	f7ff ff81 	bl	8004000 <std>
 80040fe:	2201      	movs	r2, #1
 8004100:	2109      	movs	r1, #9
 8004102:	68a0      	ldr	r0, [r4, #8]
 8004104:	f7ff ff7c 	bl	8004000 <std>
 8004108:	2202      	movs	r2, #2
 800410a:	2112      	movs	r1, #18
 800410c:	68e0      	ldr	r0, [r4, #12]
 800410e:	f7ff ff77 	bl	8004000 <std>
 8004112:	2301      	movs	r3, #1
 8004114:	61a3      	str	r3, [r4, #24]
 8004116:	e7d1      	b.n	80040bc <__sinit+0xc>
 8004118:	08004c5c 	.word	0x08004c5c
 800411c:	08004049 	.word	0x08004049

08004120 <__sfp>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	4607      	mov	r7, r0
 8004124:	f7ff ffac 	bl	8004080 <__sfp_lock_acquire>
 8004128:	4b1e      	ldr	r3, [pc, #120]	; (80041a4 <__sfp+0x84>)
 800412a:	681e      	ldr	r6, [r3, #0]
 800412c:	69b3      	ldr	r3, [r6, #24]
 800412e:	b913      	cbnz	r3, 8004136 <__sfp+0x16>
 8004130:	4630      	mov	r0, r6
 8004132:	f7ff ffbd 	bl	80040b0 <__sinit>
 8004136:	3648      	adds	r6, #72	; 0x48
 8004138:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800413c:	3b01      	subs	r3, #1
 800413e:	d503      	bpl.n	8004148 <__sfp+0x28>
 8004140:	6833      	ldr	r3, [r6, #0]
 8004142:	b30b      	cbz	r3, 8004188 <__sfp+0x68>
 8004144:	6836      	ldr	r6, [r6, #0]
 8004146:	e7f7      	b.n	8004138 <__sfp+0x18>
 8004148:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800414c:	b9d5      	cbnz	r5, 8004184 <__sfp+0x64>
 800414e:	4b16      	ldr	r3, [pc, #88]	; (80041a8 <__sfp+0x88>)
 8004150:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004154:	60e3      	str	r3, [r4, #12]
 8004156:	6665      	str	r5, [r4, #100]	; 0x64
 8004158:	f000 f847 	bl	80041ea <__retarget_lock_init_recursive>
 800415c:	f7ff ff96 	bl	800408c <__sfp_lock_release>
 8004160:	2208      	movs	r2, #8
 8004162:	4629      	mov	r1, r5
 8004164:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004168:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800416c:	6025      	str	r5, [r4, #0]
 800416e:	61a5      	str	r5, [r4, #24]
 8004170:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004174:	f7ff fd2c 	bl	8003bd0 <memset>
 8004178:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800417c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004180:	4620      	mov	r0, r4
 8004182:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004184:	3468      	adds	r4, #104	; 0x68
 8004186:	e7d9      	b.n	800413c <__sfp+0x1c>
 8004188:	2104      	movs	r1, #4
 800418a:	4638      	mov	r0, r7
 800418c:	f7ff ff62 	bl	8004054 <__sfmoreglue>
 8004190:	4604      	mov	r4, r0
 8004192:	6030      	str	r0, [r6, #0]
 8004194:	2800      	cmp	r0, #0
 8004196:	d1d5      	bne.n	8004144 <__sfp+0x24>
 8004198:	f7ff ff78 	bl	800408c <__sfp_lock_release>
 800419c:	230c      	movs	r3, #12
 800419e:	603b      	str	r3, [r7, #0]
 80041a0:	e7ee      	b.n	8004180 <__sfp+0x60>
 80041a2:	bf00      	nop
 80041a4:	08004c5c 	.word	0x08004c5c
 80041a8:	ffff0001 	.word	0xffff0001

080041ac <_fwalk_reent>:
 80041ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041b0:	4606      	mov	r6, r0
 80041b2:	4688      	mov	r8, r1
 80041b4:	2700      	movs	r7, #0
 80041b6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80041ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80041be:	f1b9 0901 	subs.w	r9, r9, #1
 80041c2:	d505      	bpl.n	80041d0 <_fwalk_reent+0x24>
 80041c4:	6824      	ldr	r4, [r4, #0]
 80041c6:	2c00      	cmp	r4, #0
 80041c8:	d1f7      	bne.n	80041ba <_fwalk_reent+0xe>
 80041ca:	4638      	mov	r0, r7
 80041cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041d0:	89ab      	ldrh	r3, [r5, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d907      	bls.n	80041e6 <_fwalk_reent+0x3a>
 80041d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80041da:	3301      	adds	r3, #1
 80041dc:	d003      	beq.n	80041e6 <_fwalk_reent+0x3a>
 80041de:	4629      	mov	r1, r5
 80041e0:	4630      	mov	r0, r6
 80041e2:	47c0      	blx	r8
 80041e4:	4307      	orrs	r7, r0
 80041e6:	3568      	adds	r5, #104	; 0x68
 80041e8:	e7e9      	b.n	80041be <_fwalk_reent+0x12>

080041ea <__retarget_lock_init_recursive>:
 80041ea:	4770      	bx	lr

080041ec <__retarget_lock_acquire_recursive>:
 80041ec:	4770      	bx	lr

080041ee <__retarget_lock_release_recursive>:
 80041ee:	4770      	bx	lr

080041f0 <__swhatbuf_r>:
 80041f0:	b570      	push	{r4, r5, r6, lr}
 80041f2:	460e      	mov	r6, r1
 80041f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f8:	4614      	mov	r4, r2
 80041fa:	2900      	cmp	r1, #0
 80041fc:	461d      	mov	r5, r3
 80041fe:	b096      	sub	sp, #88	; 0x58
 8004200:	da07      	bge.n	8004212 <__swhatbuf_r+0x22>
 8004202:	2300      	movs	r3, #0
 8004204:	602b      	str	r3, [r5, #0]
 8004206:	89b3      	ldrh	r3, [r6, #12]
 8004208:	061a      	lsls	r2, r3, #24
 800420a:	d410      	bmi.n	800422e <__swhatbuf_r+0x3e>
 800420c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004210:	e00e      	b.n	8004230 <__swhatbuf_r+0x40>
 8004212:	466a      	mov	r2, sp
 8004214:	f000 fc5a 	bl	8004acc <_fstat_r>
 8004218:	2800      	cmp	r0, #0
 800421a:	dbf2      	blt.n	8004202 <__swhatbuf_r+0x12>
 800421c:	9a01      	ldr	r2, [sp, #4]
 800421e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004222:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004226:	425a      	negs	r2, r3
 8004228:	415a      	adcs	r2, r3
 800422a:	602a      	str	r2, [r5, #0]
 800422c:	e7ee      	b.n	800420c <__swhatbuf_r+0x1c>
 800422e:	2340      	movs	r3, #64	; 0x40
 8004230:	2000      	movs	r0, #0
 8004232:	6023      	str	r3, [r4, #0]
 8004234:	b016      	add	sp, #88	; 0x58
 8004236:	bd70      	pop	{r4, r5, r6, pc}

08004238 <__smakebuf_r>:
 8004238:	898b      	ldrh	r3, [r1, #12]
 800423a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800423c:	079d      	lsls	r5, r3, #30
 800423e:	4606      	mov	r6, r0
 8004240:	460c      	mov	r4, r1
 8004242:	d507      	bpl.n	8004254 <__smakebuf_r+0x1c>
 8004244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004248:	6023      	str	r3, [r4, #0]
 800424a:	6123      	str	r3, [r4, #16]
 800424c:	2301      	movs	r3, #1
 800424e:	6163      	str	r3, [r4, #20]
 8004250:	b002      	add	sp, #8
 8004252:	bd70      	pop	{r4, r5, r6, pc}
 8004254:	466a      	mov	r2, sp
 8004256:	ab01      	add	r3, sp, #4
 8004258:	f7ff ffca 	bl	80041f0 <__swhatbuf_r>
 800425c:	9900      	ldr	r1, [sp, #0]
 800425e:	4605      	mov	r5, r0
 8004260:	4630      	mov	r0, r6
 8004262:	f000 f875 	bl	8004350 <_malloc_r>
 8004266:	b948      	cbnz	r0, 800427c <__smakebuf_r+0x44>
 8004268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800426c:	059a      	lsls	r2, r3, #22
 800426e:	d4ef      	bmi.n	8004250 <__smakebuf_r+0x18>
 8004270:	f023 0303 	bic.w	r3, r3, #3
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	81a3      	strh	r3, [r4, #12]
 800427a:	e7e3      	b.n	8004244 <__smakebuf_r+0xc>
 800427c:	4b0d      	ldr	r3, [pc, #52]	; (80042b4 <__smakebuf_r+0x7c>)
 800427e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004280:	89a3      	ldrh	r3, [r4, #12]
 8004282:	6020      	str	r0, [r4, #0]
 8004284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004288:	81a3      	strh	r3, [r4, #12]
 800428a:	9b00      	ldr	r3, [sp, #0]
 800428c:	6120      	str	r0, [r4, #16]
 800428e:	6163      	str	r3, [r4, #20]
 8004290:	9b01      	ldr	r3, [sp, #4]
 8004292:	b15b      	cbz	r3, 80042ac <__smakebuf_r+0x74>
 8004294:	4630      	mov	r0, r6
 8004296:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800429a:	f000 fc29 	bl	8004af0 <_isatty_r>
 800429e:	b128      	cbz	r0, 80042ac <__smakebuf_r+0x74>
 80042a0:	89a3      	ldrh	r3, [r4, #12]
 80042a2:	f023 0303 	bic.w	r3, r3, #3
 80042a6:	f043 0301 	orr.w	r3, r3, #1
 80042aa:	81a3      	strh	r3, [r4, #12]
 80042ac:	89a0      	ldrh	r0, [r4, #12]
 80042ae:	4305      	orrs	r5, r0
 80042b0:	81a5      	strh	r5, [r4, #12]
 80042b2:	e7cd      	b.n	8004250 <__smakebuf_r+0x18>
 80042b4:	08004049 	.word	0x08004049

080042b8 <_free_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4605      	mov	r5, r0
 80042bc:	2900      	cmp	r1, #0
 80042be:	d043      	beq.n	8004348 <_free_r+0x90>
 80042c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042c4:	1f0c      	subs	r4, r1, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bfb8      	it	lt
 80042ca:	18e4      	addlt	r4, r4, r3
 80042cc:	f000 fc40 	bl	8004b50 <__malloc_lock>
 80042d0:	4a1e      	ldr	r2, [pc, #120]	; (800434c <_free_r+0x94>)
 80042d2:	6813      	ldr	r3, [r2, #0]
 80042d4:	4610      	mov	r0, r2
 80042d6:	b933      	cbnz	r3, 80042e6 <_free_r+0x2e>
 80042d8:	6063      	str	r3, [r4, #4]
 80042da:	6014      	str	r4, [r2, #0]
 80042dc:	4628      	mov	r0, r5
 80042de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042e2:	f000 bc3b 	b.w	8004b5c <__malloc_unlock>
 80042e6:	42a3      	cmp	r3, r4
 80042e8:	d90a      	bls.n	8004300 <_free_r+0x48>
 80042ea:	6821      	ldr	r1, [r4, #0]
 80042ec:	1862      	adds	r2, r4, r1
 80042ee:	4293      	cmp	r3, r2
 80042f0:	bf01      	itttt	eq
 80042f2:	681a      	ldreq	r2, [r3, #0]
 80042f4:	685b      	ldreq	r3, [r3, #4]
 80042f6:	1852      	addeq	r2, r2, r1
 80042f8:	6022      	streq	r2, [r4, #0]
 80042fa:	6063      	str	r3, [r4, #4]
 80042fc:	6004      	str	r4, [r0, #0]
 80042fe:	e7ed      	b.n	80042dc <_free_r+0x24>
 8004300:	461a      	mov	r2, r3
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	b10b      	cbz	r3, 800430a <_free_r+0x52>
 8004306:	42a3      	cmp	r3, r4
 8004308:	d9fa      	bls.n	8004300 <_free_r+0x48>
 800430a:	6811      	ldr	r1, [r2, #0]
 800430c:	1850      	adds	r0, r2, r1
 800430e:	42a0      	cmp	r0, r4
 8004310:	d10b      	bne.n	800432a <_free_r+0x72>
 8004312:	6820      	ldr	r0, [r4, #0]
 8004314:	4401      	add	r1, r0
 8004316:	1850      	adds	r0, r2, r1
 8004318:	4283      	cmp	r3, r0
 800431a:	6011      	str	r1, [r2, #0]
 800431c:	d1de      	bne.n	80042dc <_free_r+0x24>
 800431e:	6818      	ldr	r0, [r3, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	4401      	add	r1, r0
 8004324:	6011      	str	r1, [r2, #0]
 8004326:	6053      	str	r3, [r2, #4]
 8004328:	e7d8      	b.n	80042dc <_free_r+0x24>
 800432a:	d902      	bls.n	8004332 <_free_r+0x7a>
 800432c:	230c      	movs	r3, #12
 800432e:	602b      	str	r3, [r5, #0]
 8004330:	e7d4      	b.n	80042dc <_free_r+0x24>
 8004332:	6820      	ldr	r0, [r4, #0]
 8004334:	1821      	adds	r1, r4, r0
 8004336:	428b      	cmp	r3, r1
 8004338:	bf01      	itttt	eq
 800433a:	6819      	ldreq	r1, [r3, #0]
 800433c:	685b      	ldreq	r3, [r3, #4]
 800433e:	1809      	addeq	r1, r1, r0
 8004340:	6021      	streq	r1, [r4, #0]
 8004342:	6063      	str	r3, [r4, #4]
 8004344:	6054      	str	r4, [r2, #4]
 8004346:	e7c9      	b.n	80042dc <_free_r+0x24>
 8004348:	bd38      	pop	{r3, r4, r5, pc}
 800434a:	bf00      	nop
 800434c:	20000dcc 	.word	0x20000dcc

08004350 <_malloc_r>:
 8004350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004352:	1ccd      	adds	r5, r1, #3
 8004354:	f025 0503 	bic.w	r5, r5, #3
 8004358:	3508      	adds	r5, #8
 800435a:	2d0c      	cmp	r5, #12
 800435c:	bf38      	it	cc
 800435e:	250c      	movcc	r5, #12
 8004360:	2d00      	cmp	r5, #0
 8004362:	4606      	mov	r6, r0
 8004364:	db01      	blt.n	800436a <_malloc_r+0x1a>
 8004366:	42a9      	cmp	r1, r5
 8004368:	d903      	bls.n	8004372 <_malloc_r+0x22>
 800436a:	230c      	movs	r3, #12
 800436c:	6033      	str	r3, [r6, #0]
 800436e:	2000      	movs	r0, #0
 8004370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004372:	f000 fbed 	bl	8004b50 <__malloc_lock>
 8004376:	4921      	ldr	r1, [pc, #132]	; (80043fc <_malloc_r+0xac>)
 8004378:	680a      	ldr	r2, [r1, #0]
 800437a:	4614      	mov	r4, r2
 800437c:	b99c      	cbnz	r4, 80043a6 <_malloc_r+0x56>
 800437e:	4f20      	ldr	r7, [pc, #128]	; (8004400 <_malloc_r+0xb0>)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	b923      	cbnz	r3, 800438e <_malloc_r+0x3e>
 8004384:	4621      	mov	r1, r4
 8004386:	4630      	mov	r0, r6
 8004388:	f000 fb2a 	bl	80049e0 <_sbrk_r>
 800438c:	6038      	str	r0, [r7, #0]
 800438e:	4629      	mov	r1, r5
 8004390:	4630      	mov	r0, r6
 8004392:	f000 fb25 	bl	80049e0 <_sbrk_r>
 8004396:	1c43      	adds	r3, r0, #1
 8004398:	d123      	bne.n	80043e2 <_malloc_r+0x92>
 800439a:	230c      	movs	r3, #12
 800439c:	4630      	mov	r0, r6
 800439e:	6033      	str	r3, [r6, #0]
 80043a0:	f000 fbdc 	bl	8004b5c <__malloc_unlock>
 80043a4:	e7e3      	b.n	800436e <_malloc_r+0x1e>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	1b5b      	subs	r3, r3, r5
 80043aa:	d417      	bmi.n	80043dc <_malloc_r+0x8c>
 80043ac:	2b0b      	cmp	r3, #11
 80043ae:	d903      	bls.n	80043b8 <_malloc_r+0x68>
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	441c      	add	r4, r3
 80043b4:	6025      	str	r5, [r4, #0]
 80043b6:	e004      	b.n	80043c2 <_malloc_r+0x72>
 80043b8:	6863      	ldr	r3, [r4, #4]
 80043ba:	42a2      	cmp	r2, r4
 80043bc:	bf0c      	ite	eq
 80043be:	600b      	streq	r3, [r1, #0]
 80043c0:	6053      	strne	r3, [r2, #4]
 80043c2:	4630      	mov	r0, r6
 80043c4:	f000 fbca 	bl	8004b5c <__malloc_unlock>
 80043c8:	f104 000b 	add.w	r0, r4, #11
 80043cc:	1d23      	adds	r3, r4, #4
 80043ce:	f020 0007 	bic.w	r0, r0, #7
 80043d2:	1ac2      	subs	r2, r0, r3
 80043d4:	d0cc      	beq.n	8004370 <_malloc_r+0x20>
 80043d6:	1a1b      	subs	r3, r3, r0
 80043d8:	50a3      	str	r3, [r4, r2]
 80043da:	e7c9      	b.n	8004370 <_malloc_r+0x20>
 80043dc:	4622      	mov	r2, r4
 80043de:	6864      	ldr	r4, [r4, #4]
 80043e0:	e7cc      	b.n	800437c <_malloc_r+0x2c>
 80043e2:	1cc4      	adds	r4, r0, #3
 80043e4:	f024 0403 	bic.w	r4, r4, #3
 80043e8:	42a0      	cmp	r0, r4
 80043ea:	d0e3      	beq.n	80043b4 <_malloc_r+0x64>
 80043ec:	1a21      	subs	r1, r4, r0
 80043ee:	4630      	mov	r0, r6
 80043f0:	f000 faf6 	bl	80049e0 <_sbrk_r>
 80043f4:	3001      	adds	r0, #1
 80043f6:	d1dd      	bne.n	80043b4 <_malloc_r+0x64>
 80043f8:	e7cf      	b.n	800439a <_malloc_r+0x4a>
 80043fa:	bf00      	nop
 80043fc:	20000dcc 	.word	0x20000dcc
 8004400:	20000dd0 	.word	0x20000dd0

08004404 <__sfputc_r>:
 8004404:	6893      	ldr	r3, [r2, #8]
 8004406:	b410      	push	{r4}
 8004408:	3b01      	subs	r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	6093      	str	r3, [r2, #8]
 800440e:	da07      	bge.n	8004420 <__sfputc_r+0x1c>
 8004410:	6994      	ldr	r4, [r2, #24]
 8004412:	42a3      	cmp	r3, r4
 8004414:	db01      	blt.n	800441a <__sfputc_r+0x16>
 8004416:	290a      	cmp	r1, #10
 8004418:	d102      	bne.n	8004420 <__sfputc_r+0x1c>
 800441a:	bc10      	pop	{r4}
 800441c:	f7ff bc6e 	b.w	8003cfc <__swbuf_r>
 8004420:	6813      	ldr	r3, [r2, #0]
 8004422:	1c58      	adds	r0, r3, #1
 8004424:	6010      	str	r0, [r2, #0]
 8004426:	7019      	strb	r1, [r3, #0]
 8004428:	4608      	mov	r0, r1
 800442a:	bc10      	pop	{r4}
 800442c:	4770      	bx	lr

0800442e <__sfputs_r>:
 800442e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004430:	4606      	mov	r6, r0
 8004432:	460f      	mov	r7, r1
 8004434:	4614      	mov	r4, r2
 8004436:	18d5      	adds	r5, r2, r3
 8004438:	42ac      	cmp	r4, r5
 800443a:	d101      	bne.n	8004440 <__sfputs_r+0x12>
 800443c:	2000      	movs	r0, #0
 800443e:	e007      	b.n	8004450 <__sfputs_r+0x22>
 8004440:	463a      	mov	r2, r7
 8004442:	4630      	mov	r0, r6
 8004444:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004448:	f7ff ffdc 	bl	8004404 <__sfputc_r>
 800444c:	1c43      	adds	r3, r0, #1
 800444e:	d1f3      	bne.n	8004438 <__sfputs_r+0xa>
 8004450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004454 <_vfiprintf_r>:
 8004454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004458:	460d      	mov	r5, r1
 800445a:	4614      	mov	r4, r2
 800445c:	4698      	mov	r8, r3
 800445e:	4606      	mov	r6, r0
 8004460:	b09d      	sub	sp, #116	; 0x74
 8004462:	b118      	cbz	r0, 800446c <_vfiprintf_r+0x18>
 8004464:	6983      	ldr	r3, [r0, #24]
 8004466:	b90b      	cbnz	r3, 800446c <_vfiprintf_r+0x18>
 8004468:	f7ff fe22 	bl	80040b0 <__sinit>
 800446c:	4b89      	ldr	r3, [pc, #548]	; (8004694 <_vfiprintf_r+0x240>)
 800446e:	429d      	cmp	r5, r3
 8004470:	d11b      	bne.n	80044aa <_vfiprintf_r+0x56>
 8004472:	6875      	ldr	r5, [r6, #4]
 8004474:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004476:	07d9      	lsls	r1, r3, #31
 8004478:	d405      	bmi.n	8004486 <_vfiprintf_r+0x32>
 800447a:	89ab      	ldrh	r3, [r5, #12]
 800447c:	059a      	lsls	r2, r3, #22
 800447e:	d402      	bmi.n	8004486 <_vfiprintf_r+0x32>
 8004480:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004482:	f7ff feb3 	bl	80041ec <__retarget_lock_acquire_recursive>
 8004486:	89ab      	ldrh	r3, [r5, #12]
 8004488:	071b      	lsls	r3, r3, #28
 800448a:	d501      	bpl.n	8004490 <_vfiprintf_r+0x3c>
 800448c:	692b      	ldr	r3, [r5, #16]
 800448e:	b9eb      	cbnz	r3, 80044cc <_vfiprintf_r+0x78>
 8004490:	4629      	mov	r1, r5
 8004492:	4630      	mov	r0, r6
 8004494:	f7ff fc84 	bl	8003da0 <__swsetup_r>
 8004498:	b1c0      	cbz	r0, 80044cc <_vfiprintf_r+0x78>
 800449a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800449c:	07dc      	lsls	r4, r3, #31
 800449e:	d50e      	bpl.n	80044be <_vfiprintf_r+0x6a>
 80044a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044a4:	b01d      	add	sp, #116	; 0x74
 80044a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044aa:	4b7b      	ldr	r3, [pc, #492]	; (8004698 <_vfiprintf_r+0x244>)
 80044ac:	429d      	cmp	r5, r3
 80044ae:	d101      	bne.n	80044b4 <_vfiprintf_r+0x60>
 80044b0:	68b5      	ldr	r5, [r6, #8]
 80044b2:	e7df      	b.n	8004474 <_vfiprintf_r+0x20>
 80044b4:	4b79      	ldr	r3, [pc, #484]	; (800469c <_vfiprintf_r+0x248>)
 80044b6:	429d      	cmp	r5, r3
 80044b8:	bf08      	it	eq
 80044ba:	68f5      	ldreq	r5, [r6, #12]
 80044bc:	e7da      	b.n	8004474 <_vfiprintf_r+0x20>
 80044be:	89ab      	ldrh	r3, [r5, #12]
 80044c0:	0598      	lsls	r0, r3, #22
 80044c2:	d4ed      	bmi.n	80044a0 <_vfiprintf_r+0x4c>
 80044c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80044c6:	f7ff fe92 	bl	80041ee <__retarget_lock_release_recursive>
 80044ca:	e7e9      	b.n	80044a0 <_vfiprintf_r+0x4c>
 80044cc:	2300      	movs	r3, #0
 80044ce:	9309      	str	r3, [sp, #36]	; 0x24
 80044d0:	2320      	movs	r3, #32
 80044d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80044d6:	2330      	movs	r3, #48	; 0x30
 80044d8:	f04f 0901 	mov.w	r9, #1
 80044dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80044e0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80046a0 <_vfiprintf_r+0x24c>
 80044e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80044e8:	4623      	mov	r3, r4
 80044ea:	469a      	mov	sl, r3
 80044ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044f0:	b10a      	cbz	r2, 80044f6 <_vfiprintf_r+0xa2>
 80044f2:	2a25      	cmp	r2, #37	; 0x25
 80044f4:	d1f9      	bne.n	80044ea <_vfiprintf_r+0x96>
 80044f6:	ebba 0b04 	subs.w	fp, sl, r4
 80044fa:	d00b      	beq.n	8004514 <_vfiprintf_r+0xc0>
 80044fc:	465b      	mov	r3, fp
 80044fe:	4622      	mov	r2, r4
 8004500:	4629      	mov	r1, r5
 8004502:	4630      	mov	r0, r6
 8004504:	f7ff ff93 	bl	800442e <__sfputs_r>
 8004508:	3001      	adds	r0, #1
 800450a:	f000 80aa 	beq.w	8004662 <_vfiprintf_r+0x20e>
 800450e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004510:	445a      	add	r2, fp
 8004512:	9209      	str	r2, [sp, #36]	; 0x24
 8004514:	f89a 3000 	ldrb.w	r3, [sl]
 8004518:	2b00      	cmp	r3, #0
 800451a:	f000 80a2 	beq.w	8004662 <_vfiprintf_r+0x20e>
 800451e:	2300      	movs	r3, #0
 8004520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004524:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004528:	f10a 0a01 	add.w	sl, sl, #1
 800452c:	9304      	str	r3, [sp, #16]
 800452e:	9307      	str	r3, [sp, #28]
 8004530:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004534:	931a      	str	r3, [sp, #104]	; 0x68
 8004536:	4654      	mov	r4, sl
 8004538:	2205      	movs	r2, #5
 800453a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800453e:	4858      	ldr	r0, [pc, #352]	; (80046a0 <_vfiprintf_r+0x24c>)
 8004540:	f000 faf8 	bl	8004b34 <memchr>
 8004544:	9a04      	ldr	r2, [sp, #16]
 8004546:	b9d8      	cbnz	r0, 8004580 <_vfiprintf_r+0x12c>
 8004548:	06d1      	lsls	r1, r2, #27
 800454a:	bf44      	itt	mi
 800454c:	2320      	movmi	r3, #32
 800454e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004552:	0713      	lsls	r3, r2, #28
 8004554:	bf44      	itt	mi
 8004556:	232b      	movmi	r3, #43	; 0x2b
 8004558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800455c:	f89a 3000 	ldrb.w	r3, [sl]
 8004560:	2b2a      	cmp	r3, #42	; 0x2a
 8004562:	d015      	beq.n	8004590 <_vfiprintf_r+0x13c>
 8004564:	4654      	mov	r4, sl
 8004566:	2000      	movs	r0, #0
 8004568:	f04f 0c0a 	mov.w	ip, #10
 800456c:	9a07      	ldr	r2, [sp, #28]
 800456e:	4621      	mov	r1, r4
 8004570:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004574:	3b30      	subs	r3, #48	; 0x30
 8004576:	2b09      	cmp	r3, #9
 8004578:	d94e      	bls.n	8004618 <_vfiprintf_r+0x1c4>
 800457a:	b1b0      	cbz	r0, 80045aa <_vfiprintf_r+0x156>
 800457c:	9207      	str	r2, [sp, #28]
 800457e:	e014      	b.n	80045aa <_vfiprintf_r+0x156>
 8004580:	eba0 0308 	sub.w	r3, r0, r8
 8004584:	fa09 f303 	lsl.w	r3, r9, r3
 8004588:	4313      	orrs	r3, r2
 800458a:	46a2      	mov	sl, r4
 800458c:	9304      	str	r3, [sp, #16]
 800458e:	e7d2      	b.n	8004536 <_vfiprintf_r+0xe2>
 8004590:	9b03      	ldr	r3, [sp, #12]
 8004592:	1d19      	adds	r1, r3, #4
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	9103      	str	r1, [sp, #12]
 8004598:	2b00      	cmp	r3, #0
 800459a:	bfbb      	ittet	lt
 800459c:	425b      	neglt	r3, r3
 800459e:	f042 0202 	orrlt.w	r2, r2, #2
 80045a2:	9307      	strge	r3, [sp, #28]
 80045a4:	9307      	strlt	r3, [sp, #28]
 80045a6:	bfb8      	it	lt
 80045a8:	9204      	strlt	r2, [sp, #16]
 80045aa:	7823      	ldrb	r3, [r4, #0]
 80045ac:	2b2e      	cmp	r3, #46	; 0x2e
 80045ae:	d10c      	bne.n	80045ca <_vfiprintf_r+0x176>
 80045b0:	7863      	ldrb	r3, [r4, #1]
 80045b2:	2b2a      	cmp	r3, #42	; 0x2a
 80045b4:	d135      	bne.n	8004622 <_vfiprintf_r+0x1ce>
 80045b6:	9b03      	ldr	r3, [sp, #12]
 80045b8:	3402      	adds	r4, #2
 80045ba:	1d1a      	adds	r2, r3, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	9203      	str	r2, [sp, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	bfb8      	it	lt
 80045c4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80045c8:	9305      	str	r3, [sp, #20]
 80045ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80046b0 <_vfiprintf_r+0x25c>
 80045ce:	2203      	movs	r2, #3
 80045d0:	4650      	mov	r0, sl
 80045d2:	7821      	ldrb	r1, [r4, #0]
 80045d4:	f000 faae 	bl	8004b34 <memchr>
 80045d8:	b140      	cbz	r0, 80045ec <_vfiprintf_r+0x198>
 80045da:	2340      	movs	r3, #64	; 0x40
 80045dc:	eba0 000a 	sub.w	r0, r0, sl
 80045e0:	fa03 f000 	lsl.w	r0, r3, r0
 80045e4:	9b04      	ldr	r3, [sp, #16]
 80045e6:	3401      	adds	r4, #1
 80045e8:	4303      	orrs	r3, r0
 80045ea:	9304      	str	r3, [sp, #16]
 80045ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f0:	2206      	movs	r2, #6
 80045f2:	482c      	ldr	r0, [pc, #176]	; (80046a4 <_vfiprintf_r+0x250>)
 80045f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80045f8:	f000 fa9c 	bl	8004b34 <memchr>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d03f      	beq.n	8004680 <_vfiprintf_r+0x22c>
 8004600:	4b29      	ldr	r3, [pc, #164]	; (80046a8 <_vfiprintf_r+0x254>)
 8004602:	bb1b      	cbnz	r3, 800464c <_vfiprintf_r+0x1f8>
 8004604:	9b03      	ldr	r3, [sp, #12]
 8004606:	3307      	adds	r3, #7
 8004608:	f023 0307 	bic.w	r3, r3, #7
 800460c:	3308      	adds	r3, #8
 800460e:	9303      	str	r3, [sp, #12]
 8004610:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004612:	443b      	add	r3, r7
 8004614:	9309      	str	r3, [sp, #36]	; 0x24
 8004616:	e767      	b.n	80044e8 <_vfiprintf_r+0x94>
 8004618:	460c      	mov	r4, r1
 800461a:	2001      	movs	r0, #1
 800461c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004620:	e7a5      	b.n	800456e <_vfiprintf_r+0x11a>
 8004622:	2300      	movs	r3, #0
 8004624:	f04f 0c0a 	mov.w	ip, #10
 8004628:	4619      	mov	r1, r3
 800462a:	3401      	adds	r4, #1
 800462c:	9305      	str	r3, [sp, #20]
 800462e:	4620      	mov	r0, r4
 8004630:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004634:	3a30      	subs	r2, #48	; 0x30
 8004636:	2a09      	cmp	r2, #9
 8004638:	d903      	bls.n	8004642 <_vfiprintf_r+0x1ee>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0c5      	beq.n	80045ca <_vfiprintf_r+0x176>
 800463e:	9105      	str	r1, [sp, #20]
 8004640:	e7c3      	b.n	80045ca <_vfiprintf_r+0x176>
 8004642:	4604      	mov	r4, r0
 8004644:	2301      	movs	r3, #1
 8004646:	fb0c 2101 	mla	r1, ip, r1, r2
 800464a:	e7f0      	b.n	800462e <_vfiprintf_r+0x1da>
 800464c:	ab03      	add	r3, sp, #12
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	462a      	mov	r2, r5
 8004652:	4630      	mov	r0, r6
 8004654:	4b15      	ldr	r3, [pc, #84]	; (80046ac <_vfiprintf_r+0x258>)
 8004656:	a904      	add	r1, sp, #16
 8004658:	f3af 8000 	nop.w
 800465c:	4607      	mov	r7, r0
 800465e:	1c78      	adds	r0, r7, #1
 8004660:	d1d6      	bne.n	8004610 <_vfiprintf_r+0x1bc>
 8004662:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004664:	07d9      	lsls	r1, r3, #31
 8004666:	d405      	bmi.n	8004674 <_vfiprintf_r+0x220>
 8004668:	89ab      	ldrh	r3, [r5, #12]
 800466a:	059a      	lsls	r2, r3, #22
 800466c:	d402      	bmi.n	8004674 <_vfiprintf_r+0x220>
 800466e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004670:	f7ff fdbd 	bl	80041ee <__retarget_lock_release_recursive>
 8004674:	89ab      	ldrh	r3, [r5, #12]
 8004676:	065b      	lsls	r3, r3, #25
 8004678:	f53f af12 	bmi.w	80044a0 <_vfiprintf_r+0x4c>
 800467c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800467e:	e711      	b.n	80044a4 <_vfiprintf_r+0x50>
 8004680:	ab03      	add	r3, sp, #12
 8004682:	9300      	str	r3, [sp, #0]
 8004684:	462a      	mov	r2, r5
 8004686:	4630      	mov	r0, r6
 8004688:	4b08      	ldr	r3, [pc, #32]	; (80046ac <_vfiprintf_r+0x258>)
 800468a:	a904      	add	r1, sp, #16
 800468c:	f000 f882 	bl	8004794 <_printf_i>
 8004690:	e7e4      	b.n	800465c <_vfiprintf_r+0x208>
 8004692:	bf00      	nop
 8004694:	08004c80 	.word	0x08004c80
 8004698:	08004ca0 	.word	0x08004ca0
 800469c:	08004c60 	.word	0x08004c60
 80046a0:	08004cc0 	.word	0x08004cc0
 80046a4:	08004cca 	.word	0x08004cca
 80046a8:	00000000 	.word	0x00000000
 80046ac:	0800442f 	.word	0x0800442f
 80046b0:	08004cc6 	.word	0x08004cc6

080046b4 <_printf_common>:
 80046b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046b8:	4616      	mov	r6, r2
 80046ba:	4699      	mov	r9, r3
 80046bc:	688a      	ldr	r2, [r1, #8]
 80046be:	690b      	ldr	r3, [r1, #16]
 80046c0:	4607      	mov	r7, r0
 80046c2:	4293      	cmp	r3, r2
 80046c4:	bfb8      	it	lt
 80046c6:	4613      	movlt	r3, r2
 80046c8:	6033      	str	r3, [r6, #0]
 80046ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80046ce:	460c      	mov	r4, r1
 80046d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80046d4:	b10a      	cbz	r2, 80046da <_printf_common+0x26>
 80046d6:	3301      	adds	r3, #1
 80046d8:	6033      	str	r3, [r6, #0]
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	0699      	lsls	r1, r3, #26
 80046de:	bf42      	ittt	mi
 80046e0:	6833      	ldrmi	r3, [r6, #0]
 80046e2:	3302      	addmi	r3, #2
 80046e4:	6033      	strmi	r3, [r6, #0]
 80046e6:	6825      	ldr	r5, [r4, #0]
 80046e8:	f015 0506 	ands.w	r5, r5, #6
 80046ec:	d106      	bne.n	80046fc <_printf_common+0x48>
 80046ee:	f104 0a19 	add.w	sl, r4, #25
 80046f2:	68e3      	ldr	r3, [r4, #12]
 80046f4:	6832      	ldr	r2, [r6, #0]
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	42ab      	cmp	r3, r5
 80046fa:	dc28      	bgt.n	800474e <_printf_common+0x9a>
 80046fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004700:	1e13      	subs	r3, r2, #0
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	bf18      	it	ne
 8004706:	2301      	movne	r3, #1
 8004708:	0692      	lsls	r2, r2, #26
 800470a:	d42d      	bmi.n	8004768 <_printf_common+0xb4>
 800470c:	4649      	mov	r1, r9
 800470e:	4638      	mov	r0, r7
 8004710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004714:	47c0      	blx	r8
 8004716:	3001      	adds	r0, #1
 8004718:	d020      	beq.n	800475c <_printf_common+0xa8>
 800471a:	6823      	ldr	r3, [r4, #0]
 800471c:	68e5      	ldr	r5, [r4, #12]
 800471e:	f003 0306 	and.w	r3, r3, #6
 8004722:	2b04      	cmp	r3, #4
 8004724:	bf18      	it	ne
 8004726:	2500      	movne	r5, #0
 8004728:	6832      	ldr	r2, [r6, #0]
 800472a:	f04f 0600 	mov.w	r6, #0
 800472e:	68a3      	ldr	r3, [r4, #8]
 8004730:	bf08      	it	eq
 8004732:	1aad      	subeq	r5, r5, r2
 8004734:	6922      	ldr	r2, [r4, #16]
 8004736:	bf08      	it	eq
 8004738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800473c:	4293      	cmp	r3, r2
 800473e:	bfc4      	itt	gt
 8004740:	1a9b      	subgt	r3, r3, r2
 8004742:	18ed      	addgt	r5, r5, r3
 8004744:	341a      	adds	r4, #26
 8004746:	42b5      	cmp	r5, r6
 8004748:	d11a      	bne.n	8004780 <_printf_common+0xcc>
 800474a:	2000      	movs	r0, #0
 800474c:	e008      	b.n	8004760 <_printf_common+0xac>
 800474e:	2301      	movs	r3, #1
 8004750:	4652      	mov	r2, sl
 8004752:	4649      	mov	r1, r9
 8004754:	4638      	mov	r0, r7
 8004756:	47c0      	blx	r8
 8004758:	3001      	adds	r0, #1
 800475a:	d103      	bne.n	8004764 <_printf_common+0xb0>
 800475c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004764:	3501      	adds	r5, #1
 8004766:	e7c4      	b.n	80046f2 <_printf_common+0x3e>
 8004768:	2030      	movs	r0, #48	; 0x30
 800476a:	18e1      	adds	r1, r4, r3
 800476c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004770:	1c5a      	adds	r2, r3, #1
 8004772:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004776:	4422      	add	r2, r4
 8004778:	3302      	adds	r3, #2
 800477a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800477e:	e7c5      	b.n	800470c <_printf_common+0x58>
 8004780:	2301      	movs	r3, #1
 8004782:	4622      	mov	r2, r4
 8004784:	4649      	mov	r1, r9
 8004786:	4638      	mov	r0, r7
 8004788:	47c0      	blx	r8
 800478a:	3001      	adds	r0, #1
 800478c:	d0e6      	beq.n	800475c <_printf_common+0xa8>
 800478e:	3601      	adds	r6, #1
 8004790:	e7d9      	b.n	8004746 <_printf_common+0x92>
	...

08004794 <_printf_i>:
 8004794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004798:	460c      	mov	r4, r1
 800479a:	7e27      	ldrb	r7, [r4, #24]
 800479c:	4691      	mov	r9, r2
 800479e:	2f78      	cmp	r7, #120	; 0x78
 80047a0:	4680      	mov	r8, r0
 80047a2:	469a      	mov	sl, r3
 80047a4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80047a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80047aa:	d807      	bhi.n	80047bc <_printf_i+0x28>
 80047ac:	2f62      	cmp	r7, #98	; 0x62
 80047ae:	d80a      	bhi.n	80047c6 <_printf_i+0x32>
 80047b0:	2f00      	cmp	r7, #0
 80047b2:	f000 80d9 	beq.w	8004968 <_printf_i+0x1d4>
 80047b6:	2f58      	cmp	r7, #88	; 0x58
 80047b8:	f000 80a4 	beq.w	8004904 <_printf_i+0x170>
 80047bc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80047c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80047c4:	e03a      	b.n	800483c <_printf_i+0xa8>
 80047c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80047ca:	2b15      	cmp	r3, #21
 80047cc:	d8f6      	bhi.n	80047bc <_printf_i+0x28>
 80047ce:	a001      	add	r0, pc, #4	; (adr r0, 80047d4 <_printf_i+0x40>)
 80047d0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80047d4:	0800482d 	.word	0x0800482d
 80047d8:	08004841 	.word	0x08004841
 80047dc:	080047bd 	.word	0x080047bd
 80047e0:	080047bd 	.word	0x080047bd
 80047e4:	080047bd 	.word	0x080047bd
 80047e8:	080047bd 	.word	0x080047bd
 80047ec:	08004841 	.word	0x08004841
 80047f0:	080047bd 	.word	0x080047bd
 80047f4:	080047bd 	.word	0x080047bd
 80047f8:	080047bd 	.word	0x080047bd
 80047fc:	080047bd 	.word	0x080047bd
 8004800:	0800494f 	.word	0x0800494f
 8004804:	08004871 	.word	0x08004871
 8004808:	08004931 	.word	0x08004931
 800480c:	080047bd 	.word	0x080047bd
 8004810:	080047bd 	.word	0x080047bd
 8004814:	08004971 	.word	0x08004971
 8004818:	080047bd 	.word	0x080047bd
 800481c:	08004871 	.word	0x08004871
 8004820:	080047bd 	.word	0x080047bd
 8004824:	080047bd 	.word	0x080047bd
 8004828:	08004939 	.word	0x08004939
 800482c:	680b      	ldr	r3, [r1, #0]
 800482e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004832:	1d1a      	adds	r2, r3, #4
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	600a      	str	r2, [r1, #0]
 8004838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800483c:	2301      	movs	r3, #1
 800483e:	e0a4      	b.n	800498a <_printf_i+0x1f6>
 8004840:	6825      	ldr	r5, [r4, #0]
 8004842:	6808      	ldr	r0, [r1, #0]
 8004844:	062e      	lsls	r6, r5, #24
 8004846:	f100 0304 	add.w	r3, r0, #4
 800484a:	d50a      	bpl.n	8004862 <_printf_i+0xce>
 800484c:	6805      	ldr	r5, [r0, #0]
 800484e:	600b      	str	r3, [r1, #0]
 8004850:	2d00      	cmp	r5, #0
 8004852:	da03      	bge.n	800485c <_printf_i+0xc8>
 8004854:	232d      	movs	r3, #45	; 0x2d
 8004856:	426d      	negs	r5, r5
 8004858:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800485c:	230a      	movs	r3, #10
 800485e:	485e      	ldr	r0, [pc, #376]	; (80049d8 <_printf_i+0x244>)
 8004860:	e019      	b.n	8004896 <_printf_i+0x102>
 8004862:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004866:	6805      	ldr	r5, [r0, #0]
 8004868:	600b      	str	r3, [r1, #0]
 800486a:	bf18      	it	ne
 800486c:	b22d      	sxthne	r5, r5
 800486e:	e7ef      	b.n	8004850 <_printf_i+0xbc>
 8004870:	680b      	ldr	r3, [r1, #0]
 8004872:	6825      	ldr	r5, [r4, #0]
 8004874:	1d18      	adds	r0, r3, #4
 8004876:	6008      	str	r0, [r1, #0]
 8004878:	0628      	lsls	r0, r5, #24
 800487a:	d501      	bpl.n	8004880 <_printf_i+0xec>
 800487c:	681d      	ldr	r5, [r3, #0]
 800487e:	e002      	b.n	8004886 <_printf_i+0xf2>
 8004880:	0669      	lsls	r1, r5, #25
 8004882:	d5fb      	bpl.n	800487c <_printf_i+0xe8>
 8004884:	881d      	ldrh	r5, [r3, #0]
 8004886:	2f6f      	cmp	r7, #111	; 0x6f
 8004888:	bf0c      	ite	eq
 800488a:	2308      	moveq	r3, #8
 800488c:	230a      	movne	r3, #10
 800488e:	4852      	ldr	r0, [pc, #328]	; (80049d8 <_printf_i+0x244>)
 8004890:	2100      	movs	r1, #0
 8004892:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004896:	6866      	ldr	r6, [r4, #4]
 8004898:	2e00      	cmp	r6, #0
 800489a:	bfa8      	it	ge
 800489c:	6821      	ldrge	r1, [r4, #0]
 800489e:	60a6      	str	r6, [r4, #8]
 80048a0:	bfa4      	itt	ge
 80048a2:	f021 0104 	bicge.w	r1, r1, #4
 80048a6:	6021      	strge	r1, [r4, #0]
 80048a8:	b90d      	cbnz	r5, 80048ae <_printf_i+0x11a>
 80048aa:	2e00      	cmp	r6, #0
 80048ac:	d04d      	beq.n	800494a <_printf_i+0x1b6>
 80048ae:	4616      	mov	r6, r2
 80048b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80048b4:	fb03 5711 	mls	r7, r3, r1, r5
 80048b8:	5dc7      	ldrb	r7, [r0, r7]
 80048ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80048be:	462f      	mov	r7, r5
 80048c0:	42bb      	cmp	r3, r7
 80048c2:	460d      	mov	r5, r1
 80048c4:	d9f4      	bls.n	80048b0 <_printf_i+0x11c>
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d10b      	bne.n	80048e2 <_printf_i+0x14e>
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	07df      	lsls	r7, r3, #31
 80048ce:	d508      	bpl.n	80048e2 <_printf_i+0x14e>
 80048d0:	6923      	ldr	r3, [r4, #16]
 80048d2:	6861      	ldr	r1, [r4, #4]
 80048d4:	4299      	cmp	r1, r3
 80048d6:	bfde      	ittt	le
 80048d8:	2330      	movle	r3, #48	; 0x30
 80048da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80048de:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80048e2:	1b92      	subs	r2, r2, r6
 80048e4:	6122      	str	r2, [r4, #16]
 80048e6:	464b      	mov	r3, r9
 80048e8:	4621      	mov	r1, r4
 80048ea:	4640      	mov	r0, r8
 80048ec:	f8cd a000 	str.w	sl, [sp]
 80048f0:	aa03      	add	r2, sp, #12
 80048f2:	f7ff fedf 	bl	80046b4 <_printf_common>
 80048f6:	3001      	adds	r0, #1
 80048f8:	d14c      	bne.n	8004994 <_printf_i+0x200>
 80048fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048fe:	b004      	add	sp, #16
 8004900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004904:	4834      	ldr	r0, [pc, #208]	; (80049d8 <_printf_i+0x244>)
 8004906:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800490a:	680e      	ldr	r6, [r1, #0]
 800490c:	6823      	ldr	r3, [r4, #0]
 800490e:	f856 5b04 	ldr.w	r5, [r6], #4
 8004912:	061f      	lsls	r7, r3, #24
 8004914:	600e      	str	r6, [r1, #0]
 8004916:	d514      	bpl.n	8004942 <_printf_i+0x1ae>
 8004918:	07d9      	lsls	r1, r3, #31
 800491a:	bf44      	itt	mi
 800491c:	f043 0320 	orrmi.w	r3, r3, #32
 8004920:	6023      	strmi	r3, [r4, #0]
 8004922:	b91d      	cbnz	r5, 800492c <_printf_i+0x198>
 8004924:	6823      	ldr	r3, [r4, #0]
 8004926:	f023 0320 	bic.w	r3, r3, #32
 800492a:	6023      	str	r3, [r4, #0]
 800492c:	2310      	movs	r3, #16
 800492e:	e7af      	b.n	8004890 <_printf_i+0xfc>
 8004930:	6823      	ldr	r3, [r4, #0]
 8004932:	f043 0320 	orr.w	r3, r3, #32
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	2378      	movs	r3, #120	; 0x78
 800493a:	4828      	ldr	r0, [pc, #160]	; (80049dc <_printf_i+0x248>)
 800493c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004940:	e7e3      	b.n	800490a <_printf_i+0x176>
 8004942:	065e      	lsls	r6, r3, #25
 8004944:	bf48      	it	mi
 8004946:	b2ad      	uxthmi	r5, r5
 8004948:	e7e6      	b.n	8004918 <_printf_i+0x184>
 800494a:	4616      	mov	r6, r2
 800494c:	e7bb      	b.n	80048c6 <_printf_i+0x132>
 800494e:	680b      	ldr	r3, [r1, #0]
 8004950:	6826      	ldr	r6, [r4, #0]
 8004952:	1d1d      	adds	r5, r3, #4
 8004954:	6960      	ldr	r0, [r4, #20]
 8004956:	600d      	str	r5, [r1, #0]
 8004958:	0635      	lsls	r5, r6, #24
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	d501      	bpl.n	8004962 <_printf_i+0x1ce>
 800495e:	6018      	str	r0, [r3, #0]
 8004960:	e002      	b.n	8004968 <_printf_i+0x1d4>
 8004962:	0671      	lsls	r1, r6, #25
 8004964:	d5fb      	bpl.n	800495e <_printf_i+0x1ca>
 8004966:	8018      	strh	r0, [r3, #0]
 8004968:	2300      	movs	r3, #0
 800496a:	4616      	mov	r6, r2
 800496c:	6123      	str	r3, [r4, #16]
 800496e:	e7ba      	b.n	80048e6 <_printf_i+0x152>
 8004970:	680b      	ldr	r3, [r1, #0]
 8004972:	1d1a      	adds	r2, r3, #4
 8004974:	600a      	str	r2, [r1, #0]
 8004976:	681e      	ldr	r6, [r3, #0]
 8004978:	2100      	movs	r1, #0
 800497a:	4630      	mov	r0, r6
 800497c:	6862      	ldr	r2, [r4, #4]
 800497e:	f000 f8d9 	bl	8004b34 <memchr>
 8004982:	b108      	cbz	r0, 8004988 <_printf_i+0x1f4>
 8004984:	1b80      	subs	r0, r0, r6
 8004986:	6060      	str	r0, [r4, #4]
 8004988:	6863      	ldr	r3, [r4, #4]
 800498a:	6123      	str	r3, [r4, #16]
 800498c:	2300      	movs	r3, #0
 800498e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004992:	e7a8      	b.n	80048e6 <_printf_i+0x152>
 8004994:	4632      	mov	r2, r6
 8004996:	4649      	mov	r1, r9
 8004998:	4640      	mov	r0, r8
 800499a:	6923      	ldr	r3, [r4, #16]
 800499c:	47d0      	blx	sl
 800499e:	3001      	adds	r0, #1
 80049a0:	d0ab      	beq.n	80048fa <_printf_i+0x166>
 80049a2:	6823      	ldr	r3, [r4, #0]
 80049a4:	079b      	lsls	r3, r3, #30
 80049a6:	d413      	bmi.n	80049d0 <_printf_i+0x23c>
 80049a8:	68e0      	ldr	r0, [r4, #12]
 80049aa:	9b03      	ldr	r3, [sp, #12]
 80049ac:	4298      	cmp	r0, r3
 80049ae:	bfb8      	it	lt
 80049b0:	4618      	movlt	r0, r3
 80049b2:	e7a4      	b.n	80048fe <_printf_i+0x16a>
 80049b4:	2301      	movs	r3, #1
 80049b6:	4632      	mov	r2, r6
 80049b8:	4649      	mov	r1, r9
 80049ba:	4640      	mov	r0, r8
 80049bc:	47d0      	blx	sl
 80049be:	3001      	adds	r0, #1
 80049c0:	d09b      	beq.n	80048fa <_printf_i+0x166>
 80049c2:	3501      	adds	r5, #1
 80049c4:	68e3      	ldr	r3, [r4, #12]
 80049c6:	9903      	ldr	r1, [sp, #12]
 80049c8:	1a5b      	subs	r3, r3, r1
 80049ca:	42ab      	cmp	r3, r5
 80049cc:	dcf2      	bgt.n	80049b4 <_printf_i+0x220>
 80049ce:	e7eb      	b.n	80049a8 <_printf_i+0x214>
 80049d0:	2500      	movs	r5, #0
 80049d2:	f104 0619 	add.w	r6, r4, #25
 80049d6:	e7f5      	b.n	80049c4 <_printf_i+0x230>
 80049d8:	08004cd1 	.word	0x08004cd1
 80049dc:	08004ce2 	.word	0x08004ce2

080049e0 <_sbrk_r>:
 80049e0:	b538      	push	{r3, r4, r5, lr}
 80049e2:	2300      	movs	r3, #0
 80049e4:	4d05      	ldr	r5, [pc, #20]	; (80049fc <_sbrk_r+0x1c>)
 80049e6:	4604      	mov	r4, r0
 80049e8:	4608      	mov	r0, r1
 80049ea:	602b      	str	r3, [r5, #0]
 80049ec:	f000 f8ce 	bl	8004b8c <_sbrk>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_sbrk_r+0x1a>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_sbrk_r+0x1a>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	20000e8c 	.word	0x20000e8c

08004a00 <__sread>:
 8004a00:	b510      	push	{r4, lr}
 8004a02:	460c      	mov	r4, r1
 8004a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a08:	f000 f8ae 	bl	8004b68 <_read_r>
 8004a0c:	2800      	cmp	r0, #0
 8004a0e:	bfab      	itete	ge
 8004a10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a12:	89a3      	ldrhlt	r3, [r4, #12]
 8004a14:	181b      	addge	r3, r3, r0
 8004a16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004a1a:	bfac      	ite	ge
 8004a1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004a1e:	81a3      	strhlt	r3, [r4, #12]
 8004a20:	bd10      	pop	{r4, pc}

08004a22 <__swrite>:
 8004a22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a26:	461f      	mov	r7, r3
 8004a28:	898b      	ldrh	r3, [r1, #12]
 8004a2a:	4605      	mov	r5, r0
 8004a2c:	05db      	lsls	r3, r3, #23
 8004a2e:	460c      	mov	r4, r1
 8004a30:	4616      	mov	r6, r2
 8004a32:	d505      	bpl.n	8004a40 <__swrite+0x1e>
 8004a34:	2302      	movs	r3, #2
 8004a36:	2200      	movs	r2, #0
 8004a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a3c:	f000 f868 	bl	8004b10 <_lseek_r>
 8004a40:	89a3      	ldrh	r3, [r4, #12]
 8004a42:	4632      	mov	r2, r6
 8004a44:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a48:	81a3      	strh	r3, [r4, #12]
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	463b      	mov	r3, r7
 8004a4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004a56:	f000 b817 	b.w	8004a88 <_write_r>

08004a5a <__sseek>:
 8004a5a:	b510      	push	{r4, lr}
 8004a5c:	460c      	mov	r4, r1
 8004a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a62:	f000 f855 	bl	8004b10 <_lseek_r>
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	bf15      	itete	ne
 8004a6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004a6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004a72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004a76:	81a3      	strheq	r3, [r4, #12]
 8004a78:	bf18      	it	ne
 8004a7a:	81a3      	strhne	r3, [r4, #12]
 8004a7c:	bd10      	pop	{r4, pc}

08004a7e <__sclose>:
 8004a7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a82:	f000 b813 	b.w	8004aac <_close_r>
	...

08004a88 <_write_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4608      	mov	r0, r1
 8004a8e:	4611      	mov	r1, r2
 8004a90:	2200      	movs	r2, #0
 8004a92:	4d05      	ldr	r5, [pc, #20]	; (8004aa8 <_write_r+0x20>)
 8004a94:	602a      	str	r2, [r5, #0]
 8004a96:	461a      	mov	r2, r3
 8004a98:	f7fb fca2 	bl	80003e0 <_write>
 8004a9c:	1c43      	adds	r3, r0, #1
 8004a9e:	d102      	bne.n	8004aa6 <_write_r+0x1e>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	b103      	cbz	r3, 8004aa6 <_write_r+0x1e>
 8004aa4:	6023      	str	r3, [r4, #0]
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}
 8004aa8:	20000e8c 	.word	0x20000e8c

08004aac <_close_r>:
 8004aac:	b538      	push	{r3, r4, r5, lr}
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4d05      	ldr	r5, [pc, #20]	; (8004ac8 <_close_r+0x1c>)
 8004ab2:	4604      	mov	r4, r0
 8004ab4:	4608      	mov	r0, r1
 8004ab6:	602b      	str	r3, [r5, #0]
 8004ab8:	f7fb fdf9 	bl	80006ae <_close>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d102      	bne.n	8004ac6 <_close_r+0x1a>
 8004ac0:	682b      	ldr	r3, [r5, #0]
 8004ac2:	b103      	cbz	r3, 8004ac6 <_close_r+0x1a>
 8004ac4:	6023      	str	r3, [r4, #0]
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	20000e8c 	.word	0x20000e8c

08004acc <_fstat_r>:
 8004acc:	b538      	push	{r3, r4, r5, lr}
 8004ace:	2300      	movs	r3, #0
 8004ad0:	4d06      	ldr	r5, [pc, #24]	; (8004aec <_fstat_r+0x20>)
 8004ad2:	4604      	mov	r4, r0
 8004ad4:	4608      	mov	r0, r1
 8004ad6:	4611      	mov	r1, r2
 8004ad8:	602b      	str	r3, [r5, #0]
 8004ada:	f7fb fdf3 	bl	80006c4 <_fstat>
 8004ade:	1c43      	adds	r3, r0, #1
 8004ae0:	d102      	bne.n	8004ae8 <_fstat_r+0x1c>
 8004ae2:	682b      	ldr	r3, [r5, #0]
 8004ae4:	b103      	cbz	r3, 8004ae8 <_fstat_r+0x1c>
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	bd38      	pop	{r3, r4, r5, pc}
 8004aea:	bf00      	nop
 8004aec:	20000e8c 	.word	0x20000e8c

08004af0 <_isatty_r>:
 8004af0:	b538      	push	{r3, r4, r5, lr}
 8004af2:	2300      	movs	r3, #0
 8004af4:	4d05      	ldr	r5, [pc, #20]	; (8004b0c <_isatty_r+0x1c>)
 8004af6:	4604      	mov	r4, r0
 8004af8:	4608      	mov	r0, r1
 8004afa:	602b      	str	r3, [r5, #0]
 8004afc:	f7fb fdf1 	bl	80006e2 <_isatty>
 8004b00:	1c43      	adds	r3, r0, #1
 8004b02:	d102      	bne.n	8004b0a <_isatty_r+0x1a>
 8004b04:	682b      	ldr	r3, [r5, #0]
 8004b06:	b103      	cbz	r3, 8004b0a <_isatty_r+0x1a>
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	bd38      	pop	{r3, r4, r5, pc}
 8004b0c:	20000e8c 	.word	0x20000e8c

08004b10 <_lseek_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4604      	mov	r4, r0
 8004b14:	4608      	mov	r0, r1
 8004b16:	4611      	mov	r1, r2
 8004b18:	2200      	movs	r2, #0
 8004b1a:	4d05      	ldr	r5, [pc, #20]	; (8004b30 <_lseek_r+0x20>)
 8004b1c:	602a      	str	r2, [r5, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f7fb fde9 	bl	80006f6 <_lseek>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d102      	bne.n	8004b2e <_lseek_r+0x1e>
 8004b28:	682b      	ldr	r3, [r5, #0]
 8004b2a:	b103      	cbz	r3, 8004b2e <_lseek_r+0x1e>
 8004b2c:	6023      	str	r3, [r4, #0]
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	20000e8c 	.word	0x20000e8c

08004b34 <memchr>:
 8004b34:	4603      	mov	r3, r0
 8004b36:	b510      	push	{r4, lr}
 8004b38:	b2c9      	uxtb	r1, r1
 8004b3a:	4402      	add	r2, r0
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	4618      	mov	r0, r3
 8004b40:	d101      	bne.n	8004b46 <memchr+0x12>
 8004b42:	2000      	movs	r0, #0
 8004b44:	e003      	b.n	8004b4e <memchr+0x1a>
 8004b46:	7804      	ldrb	r4, [r0, #0]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	428c      	cmp	r4, r1
 8004b4c:	d1f6      	bne.n	8004b3c <memchr+0x8>
 8004b4e:	bd10      	pop	{r4, pc}

08004b50 <__malloc_lock>:
 8004b50:	4801      	ldr	r0, [pc, #4]	; (8004b58 <__malloc_lock+0x8>)
 8004b52:	f7ff bb4b 	b.w	80041ec <__retarget_lock_acquire_recursive>
 8004b56:	bf00      	nop
 8004b58:	20000e84 	.word	0x20000e84

08004b5c <__malloc_unlock>:
 8004b5c:	4801      	ldr	r0, [pc, #4]	; (8004b64 <__malloc_unlock+0x8>)
 8004b5e:	f7ff bb46 	b.w	80041ee <__retarget_lock_release_recursive>
 8004b62:	bf00      	nop
 8004b64:	20000e84 	.word	0x20000e84

08004b68 <_read_r>:
 8004b68:	b538      	push	{r3, r4, r5, lr}
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	4611      	mov	r1, r2
 8004b70:	2200      	movs	r2, #0
 8004b72:	4d05      	ldr	r5, [pc, #20]	; (8004b88 <_read_r+0x20>)
 8004b74:	602a      	str	r2, [r5, #0]
 8004b76:	461a      	mov	r2, r3
 8004b78:	f7fb fd7c 	bl	8000674 <_read>
 8004b7c:	1c43      	adds	r3, r0, #1
 8004b7e:	d102      	bne.n	8004b86 <_read_r+0x1e>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	b103      	cbz	r3, 8004b86 <_read_r+0x1e>
 8004b84:	6023      	str	r3, [r4, #0]
 8004b86:	bd38      	pop	{r3, r4, r5, pc}
 8004b88:	20000e8c 	.word	0x20000e8c

08004b8c <_sbrk>:
 8004b8c:	4b04      	ldr	r3, [pc, #16]	; (8004ba0 <_sbrk+0x14>)
 8004b8e:	4602      	mov	r2, r0
 8004b90:	6819      	ldr	r1, [r3, #0]
 8004b92:	b909      	cbnz	r1, 8004b98 <_sbrk+0xc>
 8004b94:	4903      	ldr	r1, [pc, #12]	; (8004ba4 <_sbrk+0x18>)
 8004b96:	6019      	str	r1, [r3, #0]
 8004b98:	6818      	ldr	r0, [r3, #0]
 8004b9a:	4402      	add	r2, r0
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	4770      	bx	lr
 8004ba0:	20000dd4 	.word	0x20000dd4
 8004ba4:	20000e90 	.word	0x20000e90

08004ba8 <_init>:
 8004ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004baa:	bf00      	nop
 8004bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bae:	bc08      	pop	{r3}
 8004bb0:	469e      	mov	lr, r3
 8004bb2:	4770      	bx	lr

08004bb4 <_fini>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr
