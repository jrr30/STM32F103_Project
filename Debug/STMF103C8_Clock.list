
STMF103C8_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b70  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006dc4  08006dc4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08006dc4  08006dc4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006dc4  08006dc4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08006dcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b34  20000090  08006e5c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bc4  08006e5c  00021bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138cb  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003600  00000000  00000000  000339c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001340  00000000  00000000  00036fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ede  00000000  00000000  00038308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aba5  00000000  00000000  000391e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016910  00000000  00000000  00053d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096c86  00000000  00000000  0006a69b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005720  00000000  00000000  00101324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00106a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08006c68 	.word	0x08006c68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08006c68 	.word	0x08006c68

08000150 <Format_to_12>:

/*
 * Support functions
 * */
static uint8_t Format_to_12(RTC_TimeTypeDef const *RTC_Struct_Info)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b084      	sub	sp, #16
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
	uint8_t hours_local_var = RTC_Struct_Info->Hours;
 8000158:	687b      	ldr	r3, [r7, #4]
 800015a:	781b      	ldrb	r3, [r3, #0]
 800015c:	73fb      	strb	r3, [r7, #15]
	strcpy((char*)time_format,(char*)time_format_am);
 800015e:	4912      	ldr	r1, [pc, #72]	; (80001a8 <Format_to_12+0x58>)
 8000160:	4812      	ldr	r0, [pc, #72]	; (80001ac <Format_to_12+0x5c>)
 8000162:	f005 ffdf 	bl	8006124 <strcpy>
	if(RTC_Struct_Info->Hours == 0x00u)
 8000166:	687b      	ldr	r3, [r7, #4]
 8000168:	781b      	ldrb	r3, [r3, #0]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d102      	bne.n	8000174 <Format_to_12+0x24>
	{
		hours_local_var = 12;
 800016e:	230c      	movs	r3, #12
 8000170:	73fb      	strb	r3, [r7, #15]
 8000172:	e014      	b.n	800019e <Format_to_12+0x4e>
	}
	else if(RTC_Struct_Info->Hours > 12u)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	2b0c      	cmp	r3, #12
 800017a:	d908      	bls.n	800018e <Format_to_12+0x3e>
	{
		hours_local_var = RTC_Struct_Info->Hours - 12u;
 800017c:	687b      	ldr	r3, [r7, #4]
 800017e:	781b      	ldrb	r3, [r3, #0]
 8000180:	3b0c      	subs	r3, #12
 8000182:	73fb      	strb	r3, [r7, #15]
		strcpy((char*)time_format,(char*)time_format_pm);
 8000184:	490a      	ldr	r1, [pc, #40]	; (80001b0 <Format_to_12+0x60>)
 8000186:	4809      	ldr	r0, [pc, #36]	; (80001ac <Format_to_12+0x5c>)
 8000188:	f005 ffcc 	bl	8006124 <strcpy>
 800018c:	e007      	b.n	800019e <Format_to_12+0x4e>
	}
	else if(RTC_Struct_Info->Hours == 12u)
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	781b      	ldrb	r3, [r3, #0]
 8000192:	2b0c      	cmp	r3, #12
 8000194:	d103      	bne.n	800019e <Format_to_12+0x4e>
	{
		strcpy((char*)time_format,(char*)time_format_am);
 8000196:	4904      	ldr	r1, [pc, #16]	; (80001a8 <Format_to_12+0x58>)
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <Format_to_12+0x5c>)
 800019a:	f005 ffc3 	bl	8006124 <strcpy>
	}
	return hours_local_var;
 800019e:	7bfb      	ldrb	r3, [r7, #15]
}
 80001a0:	4618      	mov	r0, r3
 80001a2:	3710      	adds	r7, #16
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bd80      	pop	{r7, pc}
 80001a8:	20000004 	.word	0x20000004
 80001ac:	200000ac 	.word	0x200000ac
 80001b0:	20000008 	.word	0x20000008

080001b4 <wrapper_tx_data>:
//
//	return local_RTC;
//}

void wrapper_tx_data(Local_RTC_T const *data, TxUART * buffer_data, data_type_T conversion_type)
{
 80001b4:	b590      	push	{r4, r7, lr}
 80001b6:	b087      	sub	sp, #28
 80001b8:	af02      	add	r7, sp, #8
 80001ba:	60f8      	str	r0, [r7, #12]
 80001bc:	60b9      	str	r1, [r7, #8]
 80001be:	4613      	mov	r3, r2
 80001c0:	71fb      	strb	r3, [r7, #7]
	if(time == conversion_type)
 80001c2:	79fb      	ldrb	r3, [r7, #7]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d117      	bne.n	80001f8 <wrapper_tx_data+0x44>
	{
		buffer_data->Message_Length = sprintf((char*)buffer_data->Message_Data, "t0.txt=\"%02d:%02d:%02d %s\"",data->Local_RTC_Time.Hours, data->Local_RTC_Time.Minutes, data->Local_RTC_Time.Seconds, time_format);
 80001c8:	68bb      	ldr	r3, [r7, #8]
 80001ca:	1c98      	adds	r0, r3, #2
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	781b      	ldrb	r3, [r3, #0]
 80001d0:	4619      	mov	r1, r3
 80001d2:	68fb      	ldr	r3, [r7, #12]
 80001d4:	785b      	ldrb	r3, [r3, #1]
 80001d6:	461c      	mov	r4, r3
 80001d8:	68fb      	ldr	r3, [r7, #12]
 80001da:	789b      	ldrb	r3, [r3, #2]
 80001dc:	461a      	mov	r2, r3
 80001de:	4b12      	ldr	r3, [pc, #72]	; (8000228 <wrapper_tx_data+0x74>)
 80001e0:	9301      	str	r3, [sp, #4]
 80001e2:	9200      	str	r2, [sp, #0]
 80001e4:	4623      	mov	r3, r4
 80001e6:	460a      	mov	r2, r1
 80001e8:	4910      	ldr	r1, [pc, #64]	; (800022c <wrapper_tx_data+0x78>)
 80001ea:	f005 fe19 	bl	8005e20 <siprintf>
 80001ee:	4603      	mov	r3, r0
 80001f0:	b29a      	uxth	r2, r3
 80001f2:	68bb      	ldr	r3, [r7, #8]
 80001f4:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		buffer_data->Message_Length = sprintf((char*)buffer_data->Message_Data, "t1.txt=\"%d/%d/%d\"",data->Local_RTC_Date.Date, data->Local_RTC_Date.Month, data->Local_RTC_Date.Year);
	}
}
 80001f6:	e012      	b.n	800021e <wrapper_tx_data+0x6a>
		buffer_data->Message_Length = sprintf((char*)buffer_data->Message_Data, "t1.txt=\"%d/%d/%d\"",data->Local_RTC_Date.Date, data->Local_RTC_Date.Month, data->Local_RTC_Date.Year);
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	1c98      	adds	r0, r3, #2
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	795b      	ldrb	r3, [r3, #5]
 8000200:	461a      	mov	r2, r3
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	791b      	ldrb	r3, [r3, #4]
 8000206:	4619      	mov	r1, r3
 8000208:	68fb      	ldr	r3, [r7, #12]
 800020a:	799b      	ldrb	r3, [r3, #6]
 800020c:	9300      	str	r3, [sp, #0]
 800020e:	460b      	mov	r3, r1
 8000210:	4907      	ldr	r1, [pc, #28]	; (8000230 <wrapper_tx_data+0x7c>)
 8000212:	f005 fe05 	bl	8005e20 <siprintf>
 8000216:	4603      	mov	r3, r0
 8000218:	b29a      	uxth	r2, r3
 800021a:	68bb      	ldr	r3, [r7, #8]
 800021c:	801a      	strh	r2, [r3, #0]
}
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	bd90      	pop	{r4, r7, pc}
 8000226:	bf00      	nop
 8000228:	200000ac 	.word	0x200000ac
 800022c:	08006ca8 	.word	0x08006ca8
 8000230:	08006cc4 	.word	0x08006cc4

08000234 <Task_Generation>:

void Task_Generation(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af02      	add	r7, sp, #8
	Time_Queue_Handler = xQueueCreate(2,sizeof(TxUART));
 800023a:	2200      	movs	r2, #0
 800023c:	2118      	movs	r1, #24
 800023e:	2002      	movs	r0, #2
 8000240:	f003 fd8b 	bl	8003d5a <xQueueGenericCreate>
 8000244:	4603      	mov	r3, r0
 8000246:	4a15      	ldr	r2, [pc, #84]	; (800029c <Task_Generation+0x68>)
 8000248:	6013      	str	r3, [r2, #0]
	User_Input_Time_Date_Queue_Handler = xQueueCreate(1,sizeof(TxUART));
 800024a:	2200      	movs	r2, #0
 800024c:	2118      	movs	r1, #24
 800024e:	2001      	movs	r0, #1
 8000250:	f003 fd83 	bl	8003d5a <xQueueGenericCreate>
 8000254:	4603      	mov	r3, r0
 8000256:	4a12      	ldr	r2, [pc, #72]	; (80002a0 <Task_Generation+0x6c>)
 8000258:	6013      	str	r3, [r2, #0]

	xTaskCreate(Get_RTC_Runnable, "Get Time ", 100, NULL, 2, &Get_Time_Handler);
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <Task_Generation+0x70>)
 800025c:	9301      	str	r3, [sp, #4]
 800025e:	2302      	movs	r3, #2
 8000260:	9300      	str	r3, [sp, #0]
 8000262:	2300      	movs	r3, #0
 8000264:	2264      	movs	r2, #100	; 0x64
 8000266:	4910      	ldr	r1, [pc, #64]	; (80002a8 <Task_Generation+0x74>)
 8000268:	4810      	ldr	r0, [pc, #64]	; (80002ac <Task_Generation+0x78>)
 800026a:	f004 f881 	bl	8004370 <xTaskCreate>
	xTaskCreate(Print_Time_Runnable, "Print Time", 100, NULL, 2, &Print_Time_Handler);
 800026e:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <Task_Generation+0x7c>)
 8000270:	9301      	str	r3, [sp, #4]
 8000272:	2302      	movs	r3, #2
 8000274:	9300      	str	r3, [sp, #0]
 8000276:	2300      	movs	r3, #0
 8000278:	2264      	movs	r2, #100	; 0x64
 800027a:	490e      	ldr	r1, [pc, #56]	; (80002b4 <Task_Generation+0x80>)
 800027c:	480e      	ldr	r0, [pc, #56]	; (80002b8 <Task_Generation+0x84>)
 800027e:	f004 f877 	bl	8004370 <xTaskCreate>
	xTaskCreate(Process_UART_Data_Runnable, "UART Rx", 100, NULL, 2, &Process_Rx_Data_Handler);
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <Task_Generation+0x88>)
 8000284:	9301      	str	r3, [sp, #4]
 8000286:	2302      	movs	r3, #2
 8000288:	9300      	str	r3, [sp, #0]
 800028a:	2300      	movs	r3, #0
 800028c:	2264      	movs	r2, #100	; 0x64
 800028e:	490c      	ldr	r1, [pc, #48]	; (80002c0 <Task_Generation+0x8c>)
 8000290:	480c      	ldr	r0, [pc, #48]	; (80002c4 <Task_Generation+0x90>)
 8000292:	f004 f86d 	bl	8004370 <xTaskCreate>
}
 8000296:	bf00      	nop
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}
 800029c:	200000bc 	.word	0x200000bc
 80002a0:	200000c0 	.word	0x200000c0
 80002a4:	200000b0 	.word	0x200000b0
 80002a8:	08006cd8 	.word	0x08006cd8
 80002ac:	080002c9 	.word	0x080002c9
 80002b0:	200000b4 	.word	0x200000b4
 80002b4:	08006ce4 	.word	0x08006ce4
 80002b8:	08000379 	.word	0x08000379
 80002bc:	200000b8 	.word	0x200000b8
 80002c0:	08006cf0 	.word	0x08006cf0
 80002c4:	08000411 	.word	0x08000411

080002c8 <Get_RTC_Runnable>:

void Get_RTC_Runnable(void * parameters)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b092      	sub	sp, #72	; 0x48
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
	Local_RTC_T RTC_container;
	TxUART tx_buffer[max_buffer_tx];
	BaseType_t Queue_status = pdFALSE;
 80002d0:	2300      	movs	r3, #0
 80002d2:	647b      	str	r3, [r7, #68]	; 0x44
	for(;;)
	{
#if Debug_ITM
		printf("Getting Time Alive\n");
#endif
		printf("Getting Time Alive\n");
 80002d4:	4824      	ldr	r0, [pc, #144]	; (8000368 <Get_RTC_Runnable+0xa0>)
 80002d6:	f005 fd9b 	bl	8005e10 <puts>
		HAL_RTC_GetTime(&hrtc, &RTC_container.Local_RTC_Time, RTC_FORMAT_BIN);
 80002da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002de:	2200      	movs	r2, #0
 80002e0:	4619      	mov	r1, r3
 80002e2:	4822      	ldr	r0, [pc, #136]	; (800036c <Get_RTC_Runnable+0xa4>)
 80002e4:	f001 fe96 	bl	8002014 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RTC_container.Local_RTC_Date, RTC_FORMAT_BIN);
 80002e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002ec:	3303      	adds	r3, #3
 80002ee:	2200      	movs	r2, #0
 80002f0:	4619      	mov	r1, r3
 80002f2:	481e      	ldr	r0, [pc, #120]	; (800036c <Get_RTC_Runnable+0xa4>)
 80002f4:	f002 f81c 	bl	8002330 <HAL_RTC_GetDate>
		//Updating Hours
		RTC_container.Local_RTC_Time.Hours = Format_to_12(&RTC_container.Local_RTC_Time);
 80002f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff27 	bl	8000150 <Format_to_12>
 8000302:	4603      	mov	r3, r0
 8000304:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		wrapper_tx_data((Local_RTC_T const *)&RTC_container, &tx_buffer[time], time);
 8000308:	f107 010c 	add.w	r1, r7, #12
 800030c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000310:	2200      	movs	r2, #0
 8000312:	4618      	mov	r0, r3
 8000314:	f7ff ff4e 	bl	80001b4 <wrapper_tx_data>
		//tx_buffer[date].Message_Length = sprintf((char*)tx_buffer[date].Message_Data, "t1.txt=\"%d/%d/%d\"",RTC_container.Local_RTC_Date.WeekDay, RTC_container.Local_RTC_Date.Month, RTC_container.Local_RTC_Date.Year);
		wrapper_tx_data((Local_RTC_T const *)&RTC_container, &tx_buffer[date], date);
 8000318:	f107 030c 	add.w	r3, r7, #12
 800031c:	f103 0118 	add.w	r1, r3, #24
 8000320:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000324:	2201      	movs	r2, #1
 8000326:	4618      	mov	r0, r3
 8000328:	f7ff ff44 	bl	80001b4 <wrapper_tx_data>

#if Debug_ITM
		printf("%s\n", tx_buffer[time].Message_Data);
#endif

		Queue_status = xQueueSend(Time_Queue_Handler, &tx_buffer[time], ( TickType_t )0);
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <Get_RTC_Runnable+0xa8>)
 800032e:	6818      	ldr	r0, [r3, #0]
 8000330:	f107 010c 	add.w	r1, r7, #12
 8000334:	2300      	movs	r3, #0
 8000336:	2200      	movs	r2, #0
 8000338:	f003 fd80 	bl	8003e3c <xQueueGenericSend>
 800033c:	6478      	str	r0, [r7, #68]	; 0x44
		Queue_status = xQueueSend(Time_Queue_Handler, &tx_buffer[date], ( TickType_t )0);
 800033e:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <Get_RTC_Runnable+0xa8>)
 8000340:	6818      	ldr	r0, [r3, #0]
 8000342:	f107 030c 	add.w	r3, r7, #12
 8000346:	f103 0118 	add.w	r1, r3, #24
 800034a:	2300      	movs	r3, #0
 800034c:	2200      	movs	r2, #0
 800034e:	f003 fd75 	bl	8003e3c <xQueueGenericSend>
 8000352:	6478      	str	r0, [r7, #68]	; 0x44
		taskYIELD();
 8000354:	4b07      	ldr	r3, [pc, #28]	; (8000374 <Get_RTC_Runnable+0xac>)
 8000356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	f3bf 8f4f 	dsb	sy
 8000360:	f3bf 8f6f 	isb	sy
		printf("Getting Time Alive\n");
 8000364:	e7b6      	b.n	80002d4 <Get_RTC_Runnable+0xc>
 8000366:	bf00      	nop
 8000368:	08006cf8 	.word	0x08006cf8
 800036c:	200000c8 	.word	0x200000c8
 8000370:	200000bc 	.word	0x200000bc
 8000374:	e000ed04 	.word	0xe000ed04

08000378 <Print_Time_Runnable>:
  * @param  None
  * @retval None
  */

void Print_Time_Runnable(void * parameters)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b08e      	sub	sp, #56	; 0x38
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	TxUART tx_buffer[max_buffer_tx];
	for(;;)
	{
		printf("Print Time Alive\n");
 8000380:	481e      	ldr	r0, [pc, #120]	; (80003fc <Print_Time_Runnable+0x84>)
 8000382:	f005 fd45 	bl	8005e10 <puts>
		xQueueReceive(Time_Queue_Handler, &tx_buffer[time], ( TickType_t )0);
 8000386:	4b1e      	ldr	r3, [pc, #120]	; (8000400 <Print_Time_Runnable+0x88>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f107 0108 	add.w	r1, r7, #8
 800038e:	2200      	movs	r2, #0
 8000390:	4618      	mov	r0, r3
 8000392:	f003 fe21 	bl	8003fd8 <xQueueReceive>
		xQueueReceive(Time_Queue_Handler, &tx_buffer[date], ( TickType_t )0);
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <Print_Time_Runnable+0x88>)
 8000398:	6818      	ldr	r0, [r3, #0]
 800039a:	f107 0308 	add.w	r3, r7, #8
 800039e:	3318      	adds	r3, #24
 80003a0:	2200      	movs	r2, #0
 80003a2:	4619      	mov	r1, r3
 80003a4:	f003 fe18 	bl	8003fd8 <xQueueReceive>
#if 0
		HAL_UART_Transmit_IT(&huart1, &Buffer_time, 16);
		HAL_UART_Transmit_IT(&huart1, &fixed_end_nextion, 3);

#endif
		HAL_UART_Transmit(&huart1, tx_buffer[time].Message_Data, tx_buffer[time].Message_Length, 800);
 80003a8:	893a      	ldrh	r2, [r7, #8]
 80003aa:	f107 0308 	add.w	r3, r7, #8
 80003ae:	1c99      	adds	r1, r3, #2
 80003b0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80003b4:	4813      	ldr	r0, [pc, #76]	; (8000404 <Print_Time_Runnable+0x8c>)
 80003b6:	f002 fd4b 	bl	8002e50 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, fixed_end_nextion, 3, 300);
 80003ba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80003be:	2203      	movs	r2, #3
 80003c0:	4911      	ldr	r1, [pc, #68]	; (8000408 <Print_Time_Runnable+0x90>)
 80003c2:	4810      	ldr	r0, [pc, #64]	; (8000404 <Print_Time_Runnable+0x8c>)
 80003c4:	f002 fd44 	bl	8002e50 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, tx_buffer[date].Message_Data, tx_buffer[date].Message_Length, 800);
 80003c8:	8c3a      	ldrh	r2, [r7, #32]
 80003ca:	f107 0308 	add.w	r3, r7, #8
 80003ce:	f103 011a 	add.w	r1, r3, #26
 80003d2:	f44f 7348 	mov.w	r3, #800	; 0x320
 80003d6:	480b      	ldr	r0, [pc, #44]	; (8000404 <Print_Time_Runnable+0x8c>)
 80003d8:	f002 fd3a 	bl	8002e50 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, fixed_end_nextion, 3, 300);
 80003dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80003e0:	2203      	movs	r2, #3
 80003e2:	4909      	ldr	r1, [pc, #36]	; (8000408 <Print_Time_Runnable+0x90>)
 80003e4:	4807      	ldr	r0, [pc, #28]	; (8000404 <Print_Time_Runnable+0x8c>)
 80003e6:	f002 fd33 	bl	8002e50 <HAL_UART_Transmit>

		taskYIELD();
 80003ea:	4b08      	ldr	r3, [pc, #32]	; (800040c <Print_Time_Runnable+0x94>)
 80003ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003f0:	601a      	str	r2, [r3, #0]
 80003f2:	f3bf 8f4f 	dsb	sy
 80003f6:	f3bf 8f6f 	isb	sy
		printf("Print Time Alive\n");
 80003fa:	e7c1      	b.n	8000380 <Print_Time_Runnable+0x8>
 80003fc:	08006d0c 	.word	0x08006d0c
 8000400:	200000bc 	.word	0x200000bc
 8000404:	20000124 	.word	0x20000124
 8000408:	20000000 	.word	0x20000000
 800040c:	e000ed04 	.word	0xe000ed04

08000410 <Process_UART_Data_Runnable>:
	}
}

void Process_UART_Data_Runnable(void * parameters)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b088      	sub	sp, #32
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	RxUART rx_buffer = {0};
 8000418:	f107 030c 	add.w	r3, r7, #12
 800041c:	2200      	movs	r2, #0
 800041e:	601a      	str	r2, [r3, #0]
 8000420:	605a      	str	r2, [r3, #4]
 8000422:	811a      	strh	r2, [r3, #8]
	char * found_str = NULL;
 8000424:	2300      	movs	r3, #0
 8000426:	61bb      	str	r3, [r7, #24]
	static uint8_t f_status = 0x00;
	//BaseType_t L_Status_UART_Rx;
	for(;;)
	{
		uint8_t str_iter = 0;
 8000428:	2300      	movs	r3, #0
 800042a:	77fb      	strb	r3, [r7, #31]
		str_nextion_T menu = max_nextion_str;
 800042c:	2305      	movs	r3, #5
 800042e:	77bb      	strb	r3, [r7, #30]
		printf("UART Rx alive\n");
 8000430:	4839      	ldr	r0, [pc, #228]	; (8000518 <Process_UART_Data_Runnable+0x108>)
 8000432:	f005 fced 	bl	8005e10 <puts>
		HAL_UART_Receive(&huart1, rx_buffer.Message_Data, SIZE_RX, 900);
 8000436:	f107 030c 	add.w	r3, r7, #12
 800043a:	1c99      	adds	r1, r3, #2
 800043c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000440:	2208      	movs	r2, #8
 8000442:	4836      	ldr	r0, [pc, #216]	; (800051c <Process_UART_Data_Runnable+0x10c>)
 8000444:	f002 fd87 	bl	8002f56 <HAL_UART_Receive>

		for(str_iter = settings; str_iter < max_nextion_str; str_iter++)
 8000448:	2300      	movs	r3, #0
 800044a:	77fb      	strb	r3, [r7, #31]
 800044c:	e014      	b.n	8000478 <Process_UART_Data_Runnable+0x68>
		{
			found_str = strstr((char *)rx_buffer.Message_Data, Str_Nextion[str_iter]);
 800044e:	7ffb      	ldrb	r3, [r7, #31]
 8000450:	4a33      	ldr	r2, [pc, #204]	; (8000520 <Process_UART_Data_Runnable+0x110>)
 8000452:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000456:	f107 030c 	add.w	r3, r7, #12
 800045a:	3302      	adds	r3, #2
 800045c:	4611      	mov	r1, r2
 800045e:	4618      	mov	r0, r3
 8000460:	f005 fdde 	bl	8006020 <strstr>
 8000464:	61b8      	str	r0, [r7, #24]
			if(found_str)
 8000466:	69bb      	ldr	r3, [r7, #24]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <Process_UART_Data_Runnable+0x62>
			{
				menu = str_iter;
 800046c:	7ffb      	ldrb	r3, [r7, #31]
 800046e:	77bb      	strb	r3, [r7, #30]
				break;
 8000470:	e005      	b.n	800047e <Process_UART_Data_Runnable+0x6e>
		for(str_iter = settings; str_iter < max_nextion_str; str_iter++)
 8000472:	7ffb      	ldrb	r3, [r7, #31]
 8000474:	3301      	adds	r3, #1
 8000476:	77fb      	strb	r3, [r7, #31]
 8000478:	7ffb      	ldrb	r3, [r7, #31]
 800047a:	2b04      	cmp	r3, #4
 800047c:	d9e7      	bls.n	800044e <Process_UART_Data_Runnable+0x3e>
			}
		}

		switch(menu)
 800047e:	7fbb      	ldrb	r3, [r7, #30]
 8000480:	2b04      	cmp	r3, #4
 8000482:	d828      	bhi.n	80004d6 <Process_UART_Data_Runnable+0xc6>
 8000484:	a201      	add	r2, pc, #4	; (adr r2, 800048c <Process_UART_Data_Runnable+0x7c>)
 8000486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800048a:	bf00      	nop
 800048c:	080004a1 	.word	0x080004a1
 8000490:	080004bf 	.word	0x080004bf
 8000494:	080004c7 	.word	0x080004c7
 8000498:	080004b3 	.word	0x080004b3
 800049c:	080004cf 	.word	0x080004cf
		{
		case settings:
			vTaskSuspend(Print_Time_Handler);
 80004a0:	4b20      	ldr	r3, [pc, #128]	; (8000524 <Process_UART_Data_Runnable+0x114>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4618      	mov	r0, r3
 80004a6:	f004 f8d1 	bl	800464c <vTaskSuspend>
			printf("Suspending Print_Time\n");
 80004aa:	481f      	ldr	r0, [pc, #124]	; (8000528 <Process_UART_Data_Runnable+0x118>)
 80004ac:	f005 fcb0 	bl	8005e10 <puts>
			break;
 80004b0:	e012      	b.n	80004d8 <Process_UART_Data_Runnable+0xc8>
		case home:
			vTaskResume(Print_Time_Handler);
 80004b2:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <Process_UART_Data_Runnable+0x114>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f004 f998 	bl	80047ec <vTaskResume>
			break;
 80004bc:	e00c      	b.n	80004d8 <Process_UART_Data_Runnable+0xc8>
		case Time:
			f_status = 0x01;
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <Process_UART_Data_Runnable+0x11c>)
 80004c0:	2201      	movs	r2, #1
 80004c2:	701a      	strb	r2, [r3, #0]
			break;
 80004c4:	e008      	b.n	80004d8 <Process_UART_Data_Runnable+0xc8>
		case Date:
			f_status = 0x01;
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <Process_UART_Data_Runnable+0x11c>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	701a      	strb	r2, [r3, #0]
			break;
 80004cc:	e004      	b.n	80004d8 <Process_UART_Data_Runnable+0xc8>
		case cfg:
			f_status = 0x00;
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <Process_UART_Data_Runnable+0x11c>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	701a      	strb	r2, [r3, #0]
			break;
 80004d4:	e000      	b.n	80004d8 <Process_UART_Data_Runnable+0xc8>
		default:
			break;
 80004d6:	bf00      	nop
		}

		while(f_status)
 80004d8:	e008      	b.n	80004ec <Process_UART_Data_Runnable+0xdc>
		{
			HAL_UART_Receive(&huart1, rx_buffer.Message_Data, SIZE_RX, 900);
 80004da:	f107 030c 	add.w	r3, r7, #12
 80004de:	1c99      	adds	r1, r3, #2
 80004e0:	f44f 7361 	mov.w	r3, #900	; 0x384
 80004e4:	2208      	movs	r2, #8
 80004e6:	480d      	ldr	r0, [pc, #52]	; (800051c <Process_UART_Data_Runnable+0x10c>)
 80004e8:	f002 fd35 	bl	8002f56 <HAL_UART_Receive>
		while(f_status)
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <Process_UART_Data_Runnable+0x11c>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d1f2      	bne.n	80004da <Process_UART_Data_Runnable+0xca>
		}

		memset(rx_buffer.Message_Data, 0x00, sizeof(rx_buffer.Message_Data)); //Cleaning buffer
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	3302      	adds	r3, #2
 80004fa:	2208      	movs	r2, #8
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f005 fd86 	bl	8006010 <memset>
		taskYIELD();
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <Process_UART_Data_Runnable+0x120>)
 8000506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	f3bf 8f4f 	dsb	sy
 8000510:	f3bf 8f6f 	isb	sy
	{
 8000514:	e788      	b.n	8000428 <Process_UART_Data_Runnable+0x18>
 8000516:	bf00      	nop
 8000518:	08006d20 	.word	0x08006d20
 800051c:	20000124 	.word	0x20000124
 8000520:	2000000c 	.word	0x2000000c
 8000524:	200000b4 	.word	0x200000b4
 8000528:	08006d30 	.word	0x08006d30
 800052c:	200000c4 	.word	0x200000c4
 8000530:	e000ed04 	.word	0xe000ed04

08000534 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800053a:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <MX_GPIO_Init+0x70>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	4a19      	ldr	r2, [pc, #100]	; (80005a4 <MX_GPIO_Init+0x70>)
 8000540:	f043 0310 	orr.w	r3, r3, #16
 8000544:	6193      	str	r3, [r2, #24]
 8000546:	4b17      	ldr	r3, [pc, #92]	; (80005a4 <MX_GPIO_Init+0x70>)
 8000548:	699b      	ldr	r3, [r3, #24]
 800054a:	f003 0310 	and.w	r3, r3, #16
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000552:	4b14      	ldr	r3, [pc, #80]	; (80005a4 <MX_GPIO_Init+0x70>)
 8000554:	699b      	ldr	r3, [r3, #24]
 8000556:	4a13      	ldr	r2, [pc, #76]	; (80005a4 <MX_GPIO_Init+0x70>)
 8000558:	f043 0320 	orr.w	r3, r3, #32
 800055c:	6193      	str	r3, [r2, #24]
 800055e:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <MX_GPIO_Init+0x70>)
 8000560:	699b      	ldr	r3, [r3, #24]
 8000562:	f003 0320 	and.w	r3, r3, #32
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <MX_GPIO_Init+0x70>)
 800056c:	699b      	ldr	r3, [r3, #24]
 800056e:	4a0d      	ldr	r2, [pc, #52]	; (80005a4 <MX_GPIO_Init+0x70>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6193      	str	r3, [r2, #24]
 8000576:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <MX_GPIO_Init+0x70>)
 8000578:	699b      	ldr	r3, [r3, #24]
 800057a:	f003 0304 	and.w	r3, r3, #4
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000582:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <MX_GPIO_Init+0x70>)
 8000584:	699b      	ldr	r3, [r3, #24]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <MX_GPIO_Init+0x70>)
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	6193      	str	r3, [r2, #24]
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <MX_GPIO_Init+0x70>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	f003 0308 	and.w	r3, r3, #8
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]

}
 800059a:	bf00      	nop
 800059c:	3714      	adds	r7, #20
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000

080005a8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005b4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d013      	beq.n	80005e8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005c4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d00b      	beq.n	80005e8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005d0:	e000      	b.n	80005d4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80005d2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d0f9      	beq.n	80005d2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005de:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e8:	687b      	ldr	r3, [r7, #4]
}
 80005ea:	4618      	mov	r0, r3
 80005ec:	370c      	adds	r7, #12
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fae8 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f80b 	bl	8000616 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f7ff ff98 	bl	8000534 <MX_GPIO_Init>
  MX_RTC_Init();
 8000604:	f000 f8a2 	bl	800074c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000608:	f000 fa3c 	bl	8000a84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Task_Generation();
 800060c:	f7ff fe12 	bl	8000234 <Task_Generation>

  vTaskStartScheduler();
 8000610:	f004 f962 	bl	80048d8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000614:	e7fe      	b.n	8000614 <main+0x20>

08000616 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b094      	sub	sp, #80	; 0x50
 800061a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000620:	2228      	movs	r2, #40	; 0x28
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f005 fcf3 	bl	8006010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	601a      	str	r2, [r3, #0]
 8000640:	605a      	str	r2, [r3, #4]
 8000642:	609a      	str	r2, [r3, #8]
 8000644:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000646:	2305      	movs	r3, #5
 8000648:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800064a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000650:	2301      	movs	r3, #1
 8000652:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000654:	2300      	movs	r3, #0
 8000656:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800065c:	4618      	mov	r0, r3
 800065e:	f000 fe09 	bl	8001274 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000668:	f000 f86a 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067c:	2300      	movs	r3, #0
 800067e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f001 f876 	bl	8001778 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000692:	f000 f855 	bl	8000740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000696:	2301      	movs	r3, #1
 8000698:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800069a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069e:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fa26 	bl	8001af4 <HAL_RCCEx_PeriphCLKConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006ae:	f000 f847 	bl	8000740 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b086      	sub	sp, #24
 80006be:	af00      	add	r7, sp, #0
 80006c0:	60f8      	str	r0, [r7, #12]
 80006c2:	60b9      	str	r1, [r7, #8]
 80006c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	e009      	b.n	80006e0 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	1c5a      	adds	r2, r3, #1
 80006d0:	60ba      	str	r2, [r7, #8]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ff67 	bl	80005a8 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	3301      	adds	r3, #1
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dbf1      	blt.n	80006cc <_write+0x12>
	}
	return len;
 80006e8:	687b      	ldr	r3, [r7, #4]
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
   __NOP();// do nothing here
 80006fa:	bf00      	nop
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr

08000706 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000706:	b480      	push	{r7}
 8000708:	b083      	sub	sp, #12
 800070a:	af00      	add	r7, sp, #0
 800070c:	6078      	str	r0, [r7, #4]
	__NOP();// do nothing here
 800070e:	bf00      	nop
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	bc80      	pop	{r7}
 8000718:	4770      	bx	lr
	...

0800071c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d101      	bne.n	8000732 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800072e:	f000 fa63 	bl	8000bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40000800 	.word	0x40000800

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2100      	movs	r1, #0
 8000756:	460a      	mov	r2, r1
 8000758:	801a      	strh	r2, [r3, #0]
 800075a:	460a      	mov	r2, r1
 800075c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800075e:	2300      	movs	r3, #0
 8000760:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000762:	4b1d      	ldr	r3, [pc, #116]	; (80007d8 <MX_RTC_Init+0x8c>)
 8000764:	4a1d      	ldr	r2, [pc, #116]	; (80007dc <MX_RTC_Init+0x90>)
 8000766:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000768:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_RTC_Init+0x8c>)
 800076a:	f04f 32ff 	mov.w	r2, #4294967295
 800076e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_RTC_Init+0x8c>)
 8000772:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000776:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000778:	4817      	ldr	r0, [pc, #92]	; (80007d8 <MX_RTC_Init+0x8c>)
 800077a:	f001 fb27 	bl	8001dcc <HAL_RTC_Init>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000784:	f7ff ffdc 	bl	8000740 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000790:	2300      	movs	r3, #0
 8000792:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000794:	1d3b      	adds	r3, r7, #4
 8000796:	2200      	movs	r2, #0
 8000798:	4619      	mov	r1, r3
 800079a:	480f      	ldr	r0, [pc, #60]	; (80007d8 <MX_RTC_Init+0x8c>)
 800079c:	f001 fba2 	bl	8001ee4 <HAL_RTC_SetTime>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80007a6:	f7ff ffcb 	bl	8000740 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007aa:	2301      	movs	r3, #1
 80007ac:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80007ae:	2301      	movs	r3, #1
 80007b0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 80007b2:	2301      	movs	r3, #1
 80007b4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_RTC_Init+0x8c>)
 80007c2:	f001 fcff 	bl	80021c4 <HAL_RTC_SetDate>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80007cc:	f7ff ffb8 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000c8 	.word	0x200000c8
 80007dc:	40002800 	.word	0x40002800

080007e0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0b      	ldr	r2, [pc, #44]	; (800081c <HAL_RTC_MspInit+0x3c>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d110      	bne.n	8000814 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80007f2:	f000 fd33 	bl	800125c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80007f6:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <HAL_RTC_MspInit+0x40>)
 80007f8:	69db      	ldr	r3, [r3, #28]
 80007fa:	4a09      	ldr	r2, [pc, #36]	; (8000820 <HAL_RTC_MspInit+0x40>)
 80007fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000800:	61d3      	str	r3, [r2, #28]
 8000802:	4b07      	ldr	r3, [pc, #28]	; (8000820 <HAL_RTC_MspInit+0x40>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_RTC_MspInit+0x44>)
 8000810:	2201      	movs	r2, #1
 8000812:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000814:	bf00      	nop
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40002800 	.word	0x40002800
 8000820:	40021000 	.word	0x40021000
 8000824:	4242043c 	.word	0x4242043c

08000828 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000828:	b480      	push	{r7}
 800082a:	b085      	sub	sp, #20
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_MspInit+0x5c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	4a14      	ldr	r2, [pc, #80]	; (8000884 <HAL_MspInit+0x5c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6193      	str	r3, [r2, #24]
 800083a:	4b12      	ldr	r3, [pc, #72]	; (8000884 <HAL_MspInit+0x5c>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x5c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <HAL_MspInit+0x5c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	61d3      	str	r3, [r2, #28]
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_MspInit+0x5c>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800085e:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <HAL_MspInit+0x60>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	4a04      	ldr	r2, [pc, #16]	; (8000888 <HAL_MspInit+0x60>)
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr
 8000884:	40021000 	.word	0x40021000
 8000888:	40010000 	.word	0x40010000

0800088c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08e      	sub	sp, #56	; 0x38
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008a2:	4b34      	ldr	r3, [pc, #208]	; (8000974 <HAL_InitTick+0xe8>)
 80008a4:	69db      	ldr	r3, [r3, #28]
 80008a6:	4a33      	ldr	r2, [pc, #204]	; (8000974 <HAL_InitTick+0xe8>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	61d3      	str	r3, [r2, #28]
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <HAL_InitTick+0xe8>)
 80008b0:	69db      	ldr	r3, [r3, #28]
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008ba:	f107 0210 	add.w	r2, r7, #16
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f001 f8c7 	bl	8001a58 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008ca:	6a3b      	ldr	r3, [r7, #32]
 80008cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d103      	bne.n	80008dc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008d4:	f001 f898 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 80008d8:	6378      	str	r0, [r7, #52]	; 0x34
 80008da:	e004      	b.n	80008e6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80008dc:	f001 f894 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 80008e0:	4603      	mov	r3, r0
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008e8:	4a23      	ldr	r2, [pc, #140]	; (8000978 <HAL_InitTick+0xec>)
 80008ea:	fba2 2303 	umull	r2, r3, r2, r3
 80008ee:	0c9b      	lsrs	r3, r3, #18
 80008f0:	3b01      	subs	r3, #1
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80008f4:	4b21      	ldr	r3, [pc, #132]	; (800097c <HAL_InitTick+0xf0>)
 80008f6:	4a22      	ldr	r2, [pc, #136]	; (8000980 <HAL_InitTick+0xf4>)
 80008f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <HAL_InitTick+0xf0>)
 80008fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000900:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000902:	4a1e      	ldr	r2, [pc, #120]	; (800097c <HAL_InitTick+0xf0>)
 8000904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000906:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_InitTick+0xf0>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090e:	4b1b      	ldr	r3, [pc, #108]	; (800097c <HAL_InitTick+0xf0>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_InitTick+0xf0>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800091a:	4818      	ldr	r0, [pc, #96]	; (800097c <HAL_InitTick+0xf0>)
 800091c:	f001 fffe 	bl	800291c <HAL_TIM_Base_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000926:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800092a:	2b00      	cmp	r3, #0
 800092c:	d11b      	bne.n	8000966 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800092e:	4813      	ldr	r0, [pc, #76]	; (800097c <HAL_InitTick+0xf0>)
 8000930:	f002 f84c 	bl	80029cc <HAL_TIM_Base_Start_IT>
 8000934:	4603      	mov	r3, r0
 8000936:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800093a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800093e:	2b00      	cmp	r3, #0
 8000940:	d111      	bne.n	8000966 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000942:	201e      	movs	r0, #30
 8000944:	f000 fa45 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2b0f      	cmp	r3, #15
 800094c:	d808      	bhi.n	8000960 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800094e:	2200      	movs	r2, #0
 8000950:	6879      	ldr	r1, [r7, #4]
 8000952:	201e      	movs	r0, #30
 8000954:	f000 fa21 	bl	8000d9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000958:	4a0a      	ldr	r2, [pc, #40]	; (8000984 <HAL_InitTick+0xf8>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	6013      	str	r3, [r2, #0]
 800095e:	e002      	b.n	8000966 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000960:	2301      	movs	r3, #1
 8000962:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000966:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800096a:	4618      	mov	r0, r3
 800096c:	3738      	adds	r7, #56	; 0x38
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	431bde83 	.word	0x431bde83
 800097c:	200000dc 	.word	0x200000dc
 8000980:	40000800 	.word	0x40000800
 8000984:	20000024 	.word	0x20000024

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800098c:	e7fe      	b.n	800098c <NMI_Handler+0x4>

0800098e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000992:	e7fe      	b.n	8000992 <HardFault_Handler+0x4>

08000994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000998:	e7fe      	b.n	8000998 <MemManage_Handler+0x4>

0800099a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099e:	e7fe      	b.n	800099e <BusFault_Handler+0x4>

080009a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <UsageFault_Handler+0x4>

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
	...

080009b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009b8:	4802      	ldr	r0, [pc, #8]	; (80009c4 <TIM4_IRQHandler+0x10>)
 80009ba:	f002 f859 	bl	8002a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000dc 	.word	0x200000dc

080009c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009cc:	4802      	ldr	r0, [pc, #8]	; (80009d8 <USART1_IRQHandler+0x10>)
 80009ce:	f002 fb55 	bl	800307c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000124 	.word	0x20000124

080009dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b086      	sub	sp, #24
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e8:	2300      	movs	r3, #0
 80009ea:	617b      	str	r3, [r7, #20]
 80009ec:	e00a      	b.n	8000a04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ee:	f3af 8000 	nop.w
 80009f2:	4601      	mov	r1, r0
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	1c5a      	adds	r2, r3, #1
 80009f8:	60ba      	str	r2, [r7, #8]
 80009fa:	b2ca      	uxtb	r2, r1
 80009fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	3301      	adds	r3, #1
 8000a02:	617b      	str	r3, [r7, #20]
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbf0      	blt.n	80009ee <_read+0x12>
	}

return len;
 8000a0c:	687b      	ldr	r3, [r7, #4]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
	return -1;
 8000a1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a3c:	605a      	str	r2, [r3, #4]
	return 0;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bc80      	pop	{r7}
 8000a48:	4770      	bx	lr

08000a4a <_isatty>:

int _isatty(int file)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
	return 1;
 8000a52:	2301      	movs	r3, #1
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr

08000a5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b085      	sub	sp, #20
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
	return 0;
 8000a6a:	2300      	movs	r3, #0
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	3714      	adds	r7, #20
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bc80      	pop	{r7}
 8000a74:	4770      	bx	lr

08000a76 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
	...

08000a84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <MX_USART1_UART_Init+0x50>)
 8000a8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a96:	4b0e      	ldr	r3, [pc, #56]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa8:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	220c      	movs	r2, #12
 8000aac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000aba:	4805      	ldr	r0, [pc, #20]	; (8000ad0 <MX_USART1_UART_Init+0x4c>)
 8000abc:	f002 f978 	bl	8002db0 <HAL_UART_Init>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ac6:	f7ff fe3b 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000124 	.word	0x20000124
 8000ad4:	40013800 	.word	0x40013800

08000ad8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b088      	sub	sp, #32
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0310 	add.w	r3, r7, #16
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a20      	ldr	r2, [pc, #128]	; (8000b74 <HAL_UART_MspInit+0x9c>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d139      	bne.n	8000b6c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af8:	4b1f      	ldr	r3, [pc, #124]	; (8000b78 <HAL_UART_MspInit+0xa0>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a1e      	ldr	r2, [pc, #120]	; (8000b78 <HAL_UART_MspInit+0xa0>)
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b1c      	ldr	r3, [pc, #112]	; (8000b78 <HAL_UART_MspInit+0xa0>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_UART_MspInit+0xa0>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a18      	ldr	r2, [pc, #96]	; (8000b78 <HAL_UART_MspInit+0xa0>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <HAL_UART_MspInit+0xa0>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b2c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0310 	add.w	r3, r7, #16
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480f      	ldr	r0, [pc, #60]	; (8000b7c <HAL_UART_MspInit+0xa4>)
 8000b3e:	f000 fa09 	bl	8000f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b46:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b50:	f107 0310 	add.w	r3, r7, #16
 8000b54:	4619      	mov	r1, r3
 8000b56:	4809      	ldr	r0, [pc, #36]	; (8000b7c <HAL_UART_MspInit+0xa4>)
 8000b58:	f000 f9fc 	bl	8000f54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2106      	movs	r1, #6
 8000b60:	2025      	movs	r0, #37	; 0x25
 8000b62:	f000 f91a 	bl	8000d9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b66:	2025      	movs	r0, #37	; 0x25
 8000b68:	f000 f933 	bl	8000dd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3720      	adds	r7, #32
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40013800 	.word	0x40013800
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40010800 	.word	0x40010800

08000b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	; (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	; (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	; (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba6:	f7ff ff66 	bl	8000a76 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f005 fa95 	bl	80060d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bae:	f7ff fd21 	bl	80005f4 <main>
  bx lr
 8000bb2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000bbc:	08006dcc 	.word	0x08006dcc
  ldr r2, =_sbss
 8000bc0:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000bc4:	20001bc4 	.word	0x20001bc4

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_Init+0x28>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_Init+0x28>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f8d1 	bl	8000d84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f7ff fe52 	bl	800088c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fe1e 	bl	8000828 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000028 	.word	0x20000028
 8000c18:	2000016c 	.word	0x2000016c

08000c1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr
 8000c2c:	2000016c 	.word	0x2000016c

08000c30 <__NVIC_SetPriorityGrouping>:
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4906      	ldr	r1, [pc, #24]	; (8000cc8 <__NVIC_EnableIRQ+0x34>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100

08000ccc <__NVIC_SetPriority>:
{
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	6039      	str	r1, [r7, #0]
 8000cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	db0a      	blt.n	8000cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	490c      	ldr	r1, [pc, #48]	; (8000d18 <__NVIC_SetPriority+0x4c>)
 8000ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cea:	0112      	lsls	r2, r2, #4
 8000cec:	b2d2      	uxtb	r2, r2
 8000cee:	440b      	add	r3, r1
 8000cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cf4:	e00a      	b.n	8000d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4908      	ldr	r1, [pc, #32]	; (8000d1c <__NVIC_SetPriority+0x50>)
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	f003 030f 	and.w	r3, r3, #15
 8000d02:	3b04      	subs	r3, #4
 8000d04:	0112      	lsls	r2, r2, #4
 8000d06:	b2d2      	uxtb	r2, r2
 8000d08:	440b      	add	r3, r1
 8000d0a:	761a      	strb	r2, [r3, #24]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000e100 	.word	0xe000e100
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <NVIC_EncodePriority>:
{
 8000d20:	b480      	push	{r7}
 8000d22:	b089      	sub	sp, #36	; 0x24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d34:	69fb      	ldr	r3, [r7, #28]
 8000d36:	f1c3 0307 	rsb	r3, r3, #7
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	bf28      	it	cs
 8000d3e:	2304      	movcs	r3, #4
 8000d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d42:	69fb      	ldr	r3, [r7, #28]
 8000d44:	3304      	adds	r3, #4
 8000d46:	2b06      	cmp	r3, #6
 8000d48:	d902      	bls.n	8000d50 <NVIC_EncodePriority+0x30>
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3b03      	subs	r3, #3
 8000d4e:	e000      	b.n	8000d52 <NVIC_EncodePriority+0x32>
 8000d50:	2300      	movs	r3, #0
 8000d52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d54:	f04f 32ff 	mov.w	r2, #4294967295
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43da      	mvns	r2, r3
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	401a      	ands	r2, r3
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d68:	f04f 31ff 	mov.w	r1, #4294967295
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43d9      	mvns	r1, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d78:	4313      	orrs	r3, r2
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3724      	adds	r7, #36	; 0x24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr

08000d84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff4f 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b086      	sub	sp, #24
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	60b9      	str	r1, [r7, #8]
 8000da4:	607a      	str	r2, [r7, #4]
 8000da6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dac:	f7ff ff64 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000db0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	6978      	ldr	r0, [r7, #20]
 8000db8:	f7ff ffb2 	bl	8000d20 <NVIC_EncodePriority>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dc2:	4611      	mov	r1, r2
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff81 	bl	8000ccc <__NVIC_SetPriority>
}
 8000dca:	bf00      	nop
 8000dcc:	3718      	adds	r7, #24
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	4603      	mov	r3, r0
 8000dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff ff57 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dee:	b480      	push	{r7}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d008      	beq.n	8000e18 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2204      	movs	r2, #4
 8000e0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e14:	2301      	movs	r3, #1
 8000e16:	e020      	b.n	8000e5a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f022 020e 	bic.w	r2, r2, #14
 8000e26:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f022 0201 	bic.w	r2, r2, #1
 8000e36:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e40:	2101      	movs	r1, #1
 8000e42:	fa01 f202 	lsl.w	r2, r1, r2
 8000e46:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3714      	adds	r7, #20
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d005      	beq.n	8000e88 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2204      	movs	r2, #4
 8000e80:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	73fb      	strb	r3, [r7, #15]
 8000e86:	e051      	b.n	8000f2c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f022 020e 	bic.w	r2, r2, #14
 8000e96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0201 	bic.w	r2, r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <HAL_DMA_Abort_IT+0xd4>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d029      	beq.n	8000f06 <HAL_DMA_Abort_IT+0xa2>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a21      	ldr	r2, [pc, #132]	; (8000f3c <HAL_DMA_Abort_IT+0xd8>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d022      	beq.n	8000f02 <HAL_DMA_Abort_IT+0x9e>
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1f      	ldr	r2, [pc, #124]	; (8000f40 <HAL_DMA_Abort_IT+0xdc>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d01a      	beq.n	8000efc <HAL_DMA_Abort_IT+0x98>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <HAL_DMA_Abort_IT+0xe0>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d012      	beq.n	8000ef6 <HAL_DMA_Abort_IT+0x92>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1c      	ldr	r2, [pc, #112]	; (8000f48 <HAL_DMA_Abort_IT+0xe4>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d00a      	beq.n	8000ef0 <HAL_DMA_Abort_IT+0x8c>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <HAL_DMA_Abort_IT+0xe8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d102      	bne.n	8000eea <HAL_DMA_Abort_IT+0x86>
 8000ee4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ee8:	e00e      	b.n	8000f08 <HAL_DMA_Abort_IT+0xa4>
 8000eea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eee:	e00b      	b.n	8000f08 <HAL_DMA_Abort_IT+0xa4>
 8000ef0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ef4:	e008      	b.n	8000f08 <HAL_DMA_Abort_IT+0xa4>
 8000ef6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efa:	e005      	b.n	8000f08 <HAL_DMA_Abort_IT+0xa4>
 8000efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f00:	e002      	b.n	8000f08 <HAL_DMA_Abort_IT+0xa4>
 8000f02:	2310      	movs	r3, #16
 8000f04:	e000      	b.n	8000f08 <HAL_DMA_Abort_IT+0xa4>
 8000f06:	2301      	movs	r3, #1
 8000f08:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <HAL_DMA_Abort_IT+0xec>)
 8000f0a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d003      	beq.n	8000f2c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f28:	6878      	ldr	r0, [r7, #4]
 8000f2a:	4798      	blx	r3
    } 
  }
  return status;
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40020008 	.word	0x40020008
 8000f3c:	4002001c 	.word	0x4002001c
 8000f40:	40020030 	.word	0x40020030
 8000f44:	40020044 	.word	0x40020044
 8000f48:	40020058 	.word	0x40020058
 8000f4c:	4002006c 	.word	0x4002006c
 8000f50:	40020000 	.word	0x40020000

08000f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b08b      	sub	sp, #44	; 0x2c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
 8000f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f66:	e169      	b.n	800123c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	f040 8158 	bne.w	8001236 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	4a9a      	ldr	r2, [pc, #616]	; (80011f4 <HAL_GPIO_Init+0x2a0>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d05e      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000f90:	4a98      	ldr	r2, [pc, #608]	; (80011f4 <HAL_GPIO_Init+0x2a0>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d875      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000f96:	4a98      	ldr	r2, [pc, #608]	; (80011f8 <HAL_GPIO_Init+0x2a4>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d058      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000f9c:	4a96      	ldr	r2, [pc, #600]	; (80011f8 <HAL_GPIO_Init+0x2a4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d86f      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fa2:	4a96      	ldr	r2, [pc, #600]	; (80011fc <HAL_GPIO_Init+0x2a8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d052      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fa8:	4a94      	ldr	r2, [pc, #592]	; (80011fc <HAL_GPIO_Init+0x2a8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d869      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fae:	4a94      	ldr	r2, [pc, #592]	; (8001200 <HAL_GPIO_Init+0x2ac>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d04c      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fb4:	4a92      	ldr	r2, [pc, #584]	; (8001200 <HAL_GPIO_Init+0x2ac>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d863      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fba:	4a92      	ldr	r2, [pc, #584]	; (8001204 <HAL_GPIO_Init+0x2b0>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d046      	beq.n	800104e <HAL_GPIO_Init+0xfa>
 8000fc0:	4a90      	ldr	r2, [pc, #576]	; (8001204 <HAL_GPIO_Init+0x2b0>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d85d      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fc6:	2b12      	cmp	r3, #18
 8000fc8:	d82a      	bhi.n	8001020 <HAL_GPIO_Init+0xcc>
 8000fca:	2b12      	cmp	r3, #18
 8000fcc:	d859      	bhi.n	8001082 <HAL_GPIO_Init+0x12e>
 8000fce:	a201      	add	r2, pc, #4	; (adr r2, 8000fd4 <HAL_GPIO_Init+0x80>)
 8000fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	08001029 	.word	0x08001029
 8000fdc:	0800103b 	.word	0x0800103b
 8000fe0:	0800107d 	.word	0x0800107d
 8000fe4:	08001083 	.word	0x08001083
 8000fe8:	08001083 	.word	0x08001083
 8000fec:	08001083 	.word	0x08001083
 8000ff0:	08001083 	.word	0x08001083
 8000ff4:	08001083 	.word	0x08001083
 8000ff8:	08001083 	.word	0x08001083
 8000ffc:	08001083 	.word	0x08001083
 8001000:	08001083 	.word	0x08001083
 8001004:	08001083 	.word	0x08001083
 8001008:	08001083 	.word	0x08001083
 800100c:	08001083 	.word	0x08001083
 8001010:	08001083 	.word	0x08001083
 8001014:	08001083 	.word	0x08001083
 8001018:	08001031 	.word	0x08001031
 800101c:	08001045 	.word	0x08001045
 8001020:	4a79      	ldr	r2, [pc, #484]	; (8001208 <HAL_GPIO_Init+0x2b4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d013      	beq.n	800104e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001026:	e02c      	b.n	8001082 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	623b      	str	r3, [r7, #32]
          break;
 800102e:	e029      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	68db      	ldr	r3, [r3, #12]
 8001034:	3304      	adds	r3, #4
 8001036:	623b      	str	r3, [r7, #32]
          break;
 8001038:	e024      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	68db      	ldr	r3, [r3, #12]
 800103e:	3308      	adds	r3, #8
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e01f      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	330c      	adds	r3, #12
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e01a      	b.n	8001084 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d102      	bne.n	800105c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001056:	2304      	movs	r3, #4
 8001058:	623b      	str	r3, [r7, #32]
          break;
 800105a:	e013      	b.n	8001084 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d105      	bne.n	8001070 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001064:	2308      	movs	r3, #8
 8001066:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	69fa      	ldr	r2, [r7, #28]
 800106c:	611a      	str	r2, [r3, #16]
          break;
 800106e:	e009      	b.n	8001084 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001070:	2308      	movs	r3, #8
 8001072:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	69fa      	ldr	r2, [r7, #28]
 8001078:	615a      	str	r2, [r3, #20]
          break;
 800107a:	e003      	b.n	8001084 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800107c:	2300      	movs	r3, #0
 800107e:	623b      	str	r3, [r7, #32]
          break;
 8001080:	e000      	b.n	8001084 <HAL_GPIO_Init+0x130>
          break;
 8001082:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	2bff      	cmp	r3, #255	; 0xff
 8001088:	d801      	bhi.n	800108e <HAL_GPIO_Init+0x13a>
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	e001      	b.n	8001092 <HAL_GPIO_Init+0x13e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	3304      	adds	r3, #4
 8001092:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001094:	69bb      	ldr	r3, [r7, #24]
 8001096:	2bff      	cmp	r3, #255	; 0xff
 8001098:	d802      	bhi.n	80010a0 <HAL_GPIO_Init+0x14c>
 800109a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	e002      	b.n	80010a6 <HAL_GPIO_Init+0x152>
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	3b08      	subs	r3, #8
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	210f      	movs	r1, #15
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	fa01 f303 	lsl.w	r3, r1, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	401a      	ands	r2, r3
 80010b8:	6a39      	ldr	r1, [r7, #32]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	fa01 f303 	lsl.w	r3, r1, r3
 80010c0:	431a      	orrs	r2, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	f000 80b1 	beq.w	8001236 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010d4:	4b4d      	ldr	r3, [pc, #308]	; (800120c <HAL_GPIO_Init+0x2b8>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a4c      	ldr	r2, [pc, #304]	; (800120c <HAL_GPIO_Init+0x2b8>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b4a      	ldr	r3, [pc, #296]	; (800120c <HAL_GPIO_Init+0x2b8>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010ec:	4a48      	ldr	r2, [pc, #288]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	089b      	lsrs	r3, r3, #2
 80010f2:	3302      	adds	r3, #2
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	220f      	movs	r2, #15
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	43db      	mvns	r3, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a40      	ldr	r2, [pc, #256]	; (8001214 <HAL_GPIO_Init+0x2c0>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d013      	beq.n	8001140 <HAL_GPIO_Init+0x1ec>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a3f      	ldr	r2, [pc, #252]	; (8001218 <HAL_GPIO_Init+0x2c4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d00d      	beq.n	800113c <HAL_GPIO_Init+0x1e8>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a3e      	ldr	r2, [pc, #248]	; (800121c <HAL_GPIO_Init+0x2c8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d007      	beq.n	8001138 <HAL_GPIO_Init+0x1e4>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a3d      	ldr	r2, [pc, #244]	; (8001220 <HAL_GPIO_Init+0x2cc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d101      	bne.n	8001134 <HAL_GPIO_Init+0x1e0>
 8001130:	2303      	movs	r3, #3
 8001132:	e006      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 8001134:	2304      	movs	r3, #4
 8001136:	e004      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 8001138:	2302      	movs	r3, #2
 800113a:	e002      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <HAL_GPIO_Init+0x1ee>
 8001140:	2300      	movs	r3, #0
 8001142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001144:	f002 0203 	and.w	r2, r2, #3
 8001148:	0092      	lsls	r2, r2, #2
 800114a:	4093      	lsls	r3, r2
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001152:	492f      	ldr	r1, [pc, #188]	; (8001210 <HAL_GPIO_Init+0x2bc>)
 8001154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	3302      	adds	r3, #2
 800115a:	68fa      	ldr	r2, [r7, #12]
 800115c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800116c:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	492c      	ldr	r1, [pc, #176]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	608b      	str	r3, [r1, #8]
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 800117c:	689a      	ldr	r2, [r3, #8]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	43db      	mvns	r3, r3
 8001182:	4928      	ldr	r1, [pc, #160]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 8001184:	4013      	ands	r3, r2
 8001186:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d006      	beq.n	80011a2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 8001196:	68da      	ldr	r2, [r3, #12]
 8001198:	4922      	ldr	r1, [pc, #136]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	60cb      	str	r3, [r1, #12]
 80011a0:	e006      	b.n	80011b0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	491e      	ldr	r1, [pc, #120]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	4918      	ldr	r1, [pc, #96]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
 80011c8:	e006      	b.n	80011d8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	4914      	ldr	r1, [pc, #80]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011d4:	4013      	ands	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d021      	beq.n	8001228 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	490e      	ldr	r1, [pc, #56]	; (8001224 <HAL_GPIO_Init+0x2d0>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
 80011f0:	e021      	b.n	8001236 <HAL_GPIO_Init+0x2e2>
 80011f2:	bf00      	nop
 80011f4:	10320000 	.word	0x10320000
 80011f8:	10310000 	.word	0x10310000
 80011fc:	10220000 	.word	0x10220000
 8001200:	10210000 	.word	0x10210000
 8001204:	10120000 	.word	0x10120000
 8001208:	10110000 	.word	0x10110000
 800120c:	40021000 	.word	0x40021000
 8001210:	40010000 	.word	0x40010000
 8001214:	40010800 	.word	0x40010800
 8001218:	40010c00 	.word	0x40010c00
 800121c:	40011000 	.word	0x40011000
 8001220:	40011400 	.word	0x40011400
 8001224:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_GPIO_Init+0x304>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	43db      	mvns	r3, r3
 8001230:	4909      	ldr	r1, [pc, #36]	; (8001258 <HAL_GPIO_Init+0x304>)
 8001232:	4013      	ands	r3, r2
 8001234:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	3301      	adds	r3, #1
 800123a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001242:	fa22 f303 	lsr.w	r3, r2, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	f47f ae8e 	bne.w	8000f68 <HAL_GPIO_Init+0x14>
  }
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	372c      	adds	r7, #44	; 0x2c
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001260:	4b03      	ldr	r3, [pc, #12]	; (8001270 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	bc80      	pop	{r7}
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	420e0020 	.word	0x420e0020

08001274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e272      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8087 	beq.w	80013a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001294:	4b92      	ldr	r3, [pc, #584]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b04      	cmp	r3, #4
 800129e:	d00c      	beq.n	80012ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a0:	4b8f      	ldr	r3, [pc, #572]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d112      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5e>
 80012ac:	4b8c      	ldr	r3, [pc, #560]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d10b      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ba:	4b89      	ldr	r3, [pc, #548]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d06c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x12c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d168      	bne.n	80013a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e24c      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x76>
 80012dc:	4b80      	ldr	r3, [pc, #512]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a7f      	ldr	r2, [pc, #508]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e02e      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f2:	4b7b      	ldr	r3, [pc, #492]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7a      	ldr	r2, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b78      	ldr	r3, [pc, #480]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a77      	ldr	r2, [pc, #476]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0xbc>
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a71      	ldr	r2, [pc, #452]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b6f      	ldr	r3, [pc, #444]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6e      	ldr	r2, [pc, #440]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 8001330:	4b6b      	ldr	r3, [pc, #428]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6a      	ldr	r2, [pc, #424]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a67      	ldr	r2, [pc, #412]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fc64 	bl	8000c1c <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fc60 	bl	8000c1c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e200      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b5d      	ldr	r3, [pc, #372]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xe4>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fc50 	bl	8000c1c <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fc4c 	bl	8000c1c <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1ec      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x10c>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x18c>
 80013c6:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x176>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1c0      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4939      	ldr	r1, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <HAL_RCC_OscConfig+0x270>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fc05 	bl	8000c1c <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fc01 	bl	8000c1c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1a1      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4927      	ldr	r1, [pc, #156]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_RCC_OscConfig+0x270>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fbe4 	bl	8000c1c <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fbe0 	bl	8000c1c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e180      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d03a      	beq.n	80014f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d019      	beq.n	80014be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_RCC_OscConfig+0x274>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff fbc4 	bl	8000c1c <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fbc0 	bl	8000c1c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e160      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 fafe 	bl	8001ab8 <RCC_Delay>
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_RCC_OscConfig+0x274>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c4:	f7ff fbaa 	bl	8000c1c <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ca:	e00f      	b.n	80014ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff fba6 	bl	8000c1c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d908      	bls.n	80014ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e146      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	42420000 	.word	0x42420000
 80014e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	4b92      	ldr	r3, [pc, #584]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e9      	bne.n	80014cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80a6 	beq.w	8001652 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4b8b      	ldr	r3, [pc, #556]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10d      	bne.n	8001532 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a87      	ldr	r2, [pc, #540]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b85      	ldr	r3, [pc, #532]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	4b82      	ldr	r3, [pc, #520]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d118      	bne.n	8001570 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153e:	4b7f      	ldr	r3, [pc, #508]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a7e      	ldr	r2, [pc, #504]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154a:	f7ff fb67 	bl	8000c1c <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001552:	f7ff fb63 	bl	8000c1c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b64      	cmp	r3, #100	; 0x64
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e103      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	4b75      	ldr	r3, [pc, #468]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x312>
 8001578:	4b6f      	ldr	r3, [pc, #444]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a6e      	ldr	r2, [pc, #440]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	e02d      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x334>
 800158e:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4a69      	ldr	r2, [pc, #420]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6213      	str	r3, [r2, #32]
 800159a:	4b67      	ldr	r3, [pc, #412]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a66      	ldr	r2, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 0304 	bic.w	r3, r3, #4
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	e01c      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x356>
 80015b0:	4b61      	ldr	r3, [pc, #388]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a60      	ldr	r2, [pc, #384]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	4b5e      	ldr	r3, [pc, #376]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a5d      	ldr	r2, [pc, #372]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 80015ca:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a5a      	ldr	r2, [pc, #360]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fb17 	bl	8000c1c <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff fb13 	bl	8000c1c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0b1      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ee      	beq.n	80015f2 <HAL_RCC_OscConfig+0x37e>
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fb01 	bl	8000c1c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fafd 	bl	8000c1c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e09b      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	4b40      	ldr	r3, [pc, #256]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ee      	bne.n	800161e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d105      	bne.n	8001652 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001646:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a3b      	ldr	r2, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8087 	beq.w	800176a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d061      	beq.n	800172c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d146      	bne.n	80016fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fad1 	bl	8000c1c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff facd 	bl	8000c1c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e06d      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a4:	d108      	bne.n	80016b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	4921      	ldr	r1, [pc, #132]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a19      	ldr	r1, [r3, #32]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	430b      	orrs	r3, r1
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff faa1 	bl	8000c1c <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fa9d 	bl	8000c1c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e03d      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x46a>
 80016fc:	e035      	b.n	800176a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fa8a 	bl	8000c1c <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fa86 	bl	8000c1c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e026      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x498>
 800172a:	e01e      	b.n	800176a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e019      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
 8001738:	40021000 	.word	0x40021000
 800173c:	40007000 	.word	0x40007000
 8001740:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_OscConfig+0x500>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	429a      	cmp	r2, r3
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0d0      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d910      	bls.n	80017bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 0207 	bic.w	r2, r3, #7
 80017a2:	4965      	ldr	r1, [pc, #404]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d040      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d115      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e073      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06b      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b39      	ldr	r3, [pc, #228]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4936      	ldr	r1, [pc, #216]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff f9d8 	bl	8000c1c <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff f9d4 	bl	8000c1c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e053      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d210      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 0207 	bic.w	r2, r3, #7
 80018ae:	4922      	ldr	r1, [pc, #136]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f821 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	490a      	ldr	r1, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1cc>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1d0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7fe ffb0 	bl	800088c <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000
 800193c:	40021000 	.word	0x40021000
 8001940:	08006d50 	.word	0x08006d50
 8001944:	20000020 	.word	0x20000020
 8001948:	20000024 	.word	0x20000024

0800194c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b087      	sub	sp, #28
 8001950:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001952:	2300      	movs	r3, #0
 8001954:	60fb      	str	r3, [r7, #12]
 8001956:	2300      	movs	r3, #0
 8001958:	60bb      	str	r3, [r7, #8]
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001966:	4b1e      	ldr	r3, [pc, #120]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b04      	cmp	r3, #4
 8001974:	d002      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x30>
 8001976:	2b08      	cmp	r3, #8
 8001978:	d003      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x36>
 800197a:	e027      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800197c:	4b19      	ldr	r3, [pc, #100]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800197e:	613b      	str	r3, [r7, #16]
      break;
 8001980:	e027      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	0c9b      	lsrs	r3, r3, #18
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d010      	beq.n	80019bc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800199a:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_RCC_GetSysClockFreq+0x94>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	0c5b      	lsrs	r3, r3, #17
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	4a11      	ldr	r2, [pc, #68]	; (80019ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a0d      	ldr	r2, [pc, #52]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ae:	fb03 f202 	mul.w	r2, r3, r2
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	e004      	b.n	80019c6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a0c      	ldr	r2, [pc, #48]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	613b      	str	r3, [r7, #16]
      break;
 80019ca:	e002      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019cc:	4b05      	ldr	r3, [pc, #20]	; (80019e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ce:	613b      	str	r3, [r7, #16]
      break;
 80019d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d2:	693b      	ldr	r3, [r7, #16]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	371c      	adds	r7, #28
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000
 80019e4:	007a1200 	.word	0x007a1200
 80019e8:	08006d68 	.word	0x08006d68
 80019ec:	08006d78 	.word	0x08006d78
 80019f0:	003d0900 	.word	0x003d0900

080019f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f8:	4b02      	ldr	r3, [pc, #8]	; (8001a04 <HAL_RCC_GetHCLKFreq+0x10>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr
 8001a04:	20000020 	.word	0x20000020

08001a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a0c:	f7ff fff2 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	4903      	ldr	r1, [pc, #12]	; (8001a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	08006d60 	.word	0x08006d60

08001a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	0adb      	lsrs	r3, r3, #11
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021000 	.word	0x40021000
 8001a54:	08006d60 	.word	0x08006d60

08001a58 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	220f      	movs	r2, #15
 8001a66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a68:	4b11      	ldr	r3, [pc, #68]	; (8001ab0 <HAL_RCC_GetClockConfig+0x58>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a74:	4b0e      	ldr	r3, [pc, #56]	; (8001ab0 <HAL_RCC_GetClockConfig+0x58>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a80:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_RCC_GetClockConfig+0x58>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a8c:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <HAL_RCC_GetClockConfig+0x58>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	08db      	lsrs	r3, r3, #3
 8001a92:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a9a:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_RCC_GetClockConfig+0x5c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0207 	and.w	r2, r3, #7
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40022000 	.word	0x40022000

08001ab8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ac0:	4b0a      	ldr	r3, [pc, #40]	; (8001aec <RCC_Delay+0x34>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <RCC_Delay+0x38>)
 8001ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aca:	0a5b      	lsrs	r3, r3, #9
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	fb02 f303 	mul.w	r3, r2, r3
 8001ad2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ad4:	bf00      	nop
  }
  while (Delay --);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1e5a      	subs	r2, r3, #1
 8001ada:	60fa      	str	r2, [r7, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f9      	bne.n	8001ad4 <RCC_Delay+0x1c>
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	20000020 	.word	0x20000020
 8001af0:	10624dd3 	.word	0x10624dd3

08001af4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b086      	sub	sp, #24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d07d      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b10:	2300      	movs	r3, #0
 8001b12:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b14:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d10d      	bne.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b20:	4b4c      	ldr	r3, [pc, #304]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	4a4b      	ldr	r2, [pc, #300]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	61d3      	str	r3, [r2, #28]
 8001b2c:	4b49      	ldr	r3, [pc, #292]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	4b46      	ldr	r3, [pc, #280]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d118      	bne.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b48:	4b43      	ldr	r3, [pc, #268]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a42      	ldr	r2, [pc, #264]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b54:	f7ff f862 	bl	8000c1c <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	e008      	b.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5c:	f7ff f85e 	bl	8000c1c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e06d      	b.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6e:	4b3a      	ldr	r3, [pc, #232]	; (8001c58 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b7a:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b82:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d02e      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b92:	68fa      	ldr	r2, [r7, #12]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d027      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b98:	4b2e      	ldr	r3, [pc, #184]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b9a:	6a1b      	ldr	r3, [r3, #32]
 8001b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ba0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bae:	4a29      	ldr	r2, [pc, #164]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d014      	beq.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbe:	f7ff f82d 	bl	8000c1c <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7ff f829 	bl	8000c1c <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e036      	b.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d0ee      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001be8:	4b1a      	ldr	r3, [pc, #104]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4917      	ldr	r1, [pc, #92]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4b14      	ldr	r3, [pc, #80]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c02:	69db      	ldr	r3, [r3, #28]
 8001c04:	4a13      	ldr	r2, [pc, #76]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d008      	beq.n	8001c2a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c18:	4b0e      	ldr	r3, [pc, #56]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	490b      	ldr	r1, [pc, #44]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d008      	beq.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	4904      	ldr	r1, [pc, #16]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c44:	4313      	orrs	r3, r2
 8001c46:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	42420440 	.word	0x42420440

08001c60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	61fb      	str	r3, [r7, #28]
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d00a      	beq.n	8001c98 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b10      	cmp	r3, #16
 8001c86:	f200 808a 	bhi.w	8001d9e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d045      	beq.n	8001d1c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d075      	beq.n	8001d82 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001c96:	e082      	b.n	8001d9e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001c98:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001c9e:	4b45      	ldr	r3, [pc, #276]	; (8001db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d07b      	beq.n	8001da2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	0c9b      	lsrs	r3, r3, #18
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	4a41      	ldr	r2, [pc, #260]	; (8001db8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001cb4:	5cd3      	ldrb	r3, [r2, r3]
 8001cb6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d015      	beq.n	8001cee <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cc2:	4b3c      	ldr	r3, [pc, #240]	; (8001db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	0c5b      	lsrs	r3, r3, #17
 8001cc8:	f003 0301 	and.w	r3, r3, #1
 8001ccc:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001cce:	5cd3      	ldrb	r3, [r2, r3]
 8001cd0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00d      	beq.n	8001cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001cdc:	4a38      	ldr	r2, [pc, #224]	; (8001dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	fb02 f303 	mul.w	r3, r2, r3
 8001cea:	61fb      	str	r3, [r7, #28]
 8001cec:	e004      	b.n	8001cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	4a34      	ldr	r2, [pc, #208]	; (8001dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001cf2:	fb02 f303 	mul.w	r3, r2, r3
 8001cf6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001cf8:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d04:	d102      	bne.n	8001d0c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	61bb      	str	r3, [r7, #24]
      break;
 8001d0a:	e04a      	b.n	8001da2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	4a2d      	ldr	r2, [pc, #180]	; (8001dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	085b      	lsrs	r3, r3, #1
 8001d18:	61bb      	str	r3, [r7, #24]
      break;
 8001d1a:	e042      	b.n	8001da2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001d1c:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d2c:	d108      	bne.n	8001d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d003      	beq.n	8001d40 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d3c:	61bb      	str	r3, [r7, #24]
 8001d3e:	e01f      	b.n	8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d4a:	d109      	bne.n	8001d60 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001d58:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	e00f      	b.n	8001d80 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d6a:	d11c      	bne.n	8001da6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d016      	beq.n	8001da6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001d78:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001d7c:	61bb      	str	r3, [r7, #24]
      break;
 8001d7e:	e012      	b.n	8001da6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001d80:	e011      	b.n	8001da6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001d82:	f7ff fe55 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	0b9b      	lsrs	r3, r3, #14
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	3301      	adds	r3, #1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9a:	61bb      	str	r3, [r7, #24]
      break;
 8001d9c:	e004      	b.n	8001da8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001d9e:	bf00      	nop
 8001da0:	e002      	b.n	8001da8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001da2:	bf00      	nop
 8001da4:	e000      	b.n	8001da8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001da6:	bf00      	nop
    }
  }
  return (frequency);
 8001da8:	69bb      	ldr	r3, [r7, #24]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
 8001db8:	08006d7c 	.word	0x08006d7c
 8001dbc:	08006d8c 	.word	0x08006d8c
 8001dc0:	007a1200 	.word	0x007a1200
 8001dc4:	003d0900 	.word	0x003d0900
 8001dc8:	aaaaaaab 	.word	0xaaaaaaab

08001dcc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e07a      	b.n	8001ed8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	7c5b      	ldrb	r3, [r3, #17]
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d105      	bne.n	8001df8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2200      	movs	r2, #0
 8001df0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7fe fcf4 	bl	80007e0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 faea 	bl	80023d8 <HAL_RTC_WaitForSynchro>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d004      	beq.n	8001e14 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e061      	b.n	8001ed8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 fba3 	bl	8002560 <RTC_EnterInitMode>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d004      	beq.n	8001e2a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2204      	movs	r2, #4
 8001e24:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e056      	b.n	8001ed8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 0207 	bic.w	r2, r2, #7
 8001e38:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001e42:	4b27      	ldr	r3, [pc, #156]	; (8001ee0 <HAL_RTC_Init+0x114>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a26      	ldr	r2, [pc, #152]	; (8001ee0 <HAL_RTC_Init+0x114>)
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001e4e:	4b24      	ldr	r3, [pc, #144]	; (8001ee0 <HAL_RTC_Init+0x114>)
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	4921      	ldr	r1, [pc, #132]	; (8001ee0 <HAL_RTC_Init+0x114>)
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d003      	beq.n	8001e72 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	e00e      	b.n	8001e90 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001e72:	2001      	movs	r0, #1
 8001e74:	f7ff fef4 	bl	8001c60 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e78:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d104      	bne.n	8001e8a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2204      	movs	r2, #4
 8001e84:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e026      	b.n	8001ed8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	0c1a      	lsrs	r2, r3, #16
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f002 020f 	and.w	r2, r2, #15
 8001e9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	b292      	uxth	r2, r2
 8001ea6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 fb81 	bl	80025b0 <RTC_ExitInitMode>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d004      	beq.n	8001ebe <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00c      	b.n	8001ed8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2201      	movs	r2, #1
 8001ece:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
  }
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40006c00 	.word	0x40006c00

08001ee4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001ee4:	b590      	push	{r4, r7, lr}
 8001ee6:	b087      	sub	sp, #28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	60b9      	str	r1, [r7, #8]
 8001eee:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d002      	beq.n	8001f04 <HAL_RTC_SetTime+0x20>
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e080      	b.n	800200a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	7c1b      	ldrb	r3, [r3, #16]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_RTC_SetTime+0x30>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e07a      	b.n	800200a <HAL_RTC_SetTime+0x126>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2201      	movs	r2, #1
 8001f18:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d113      	bne.n	8001f4e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001f30:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	785b      	ldrb	r3, [r3, #1]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	1a5b      	subs	r3, r3, r1
 8001f40:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f42:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f48:	4413      	add	r3, r2
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	e01e      	b.n	8001f8c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 fb71 	bl	800263a <RTC_Bcd2ToByte>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001f60:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	785b      	ldrb	r3, [r3, #1]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fb66 	bl	800263a <RTC_Bcd2ToByte>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	461a      	mov	r2, r3
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001f7a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	789b      	ldrb	r3, [r3, #2]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 fb5a 	bl	800263a <RTC_Bcd2ToByte>
 8001f86:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001f88:	4423      	add	r3, r4
 8001f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001f8c:	6979      	ldr	r1, [r7, #20]
 8001f8e:	68f8      	ldr	r0, [r7, #12]
 8001f90:	f000 fa7f 	bl	8002492 <RTC_WriteTimeCounter>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d007      	beq.n	8001faa <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	2204      	movs	r2, #4
 8001f9e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e02f      	b.n	800200a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f022 0205 	bic.w	r2, r2, #5
 8001fb8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 fa90 	bl	80024e0 <RTC_ReadAlarmCounter>
 8001fc0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d018      	beq.n	8001ffc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d214      	bcs.n	8001ffc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001fd8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001fdc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f000 fa96 	bl	8002512 <RTC_WriteAlarmCounter>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2204      	movs	r2, #4
 8001ff0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e006      	b.n	800200a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2201      	movs	r2, #1
 8002000:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2200      	movs	r2, #0
 8002006:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002008:	2300      	movs	r3, #0
  }
}
 800200a:	4618      	mov	r0, r3
 800200c:	371c      	adds	r7, #28
 800200e:	46bd      	mov	sp, r7
 8002010:	bd90      	pop	{r4, r7, pc}
	...

08002014 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	2300      	movs	r3, #0
 800202e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <HAL_RTC_GetTime+0x28>
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d101      	bne.n	8002040 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e0b5      	b.n	80021ac <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e0ac      	b.n	80021ac <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f9ed 	bl	8002432 <RTC_ReadTimeCounter>
 8002058:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	4a55      	ldr	r2, [pc, #340]	; (80021b4 <HAL_RTC_GetTime+0x1a0>)
 800205e:	fba2 2303 	umull	r2, r3, r2, r3
 8002062:	0adb      	lsrs	r3, r3, #11
 8002064:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4b52      	ldr	r3, [pc, #328]	; (80021b4 <HAL_RTC_GetTime+0x1a0>)
 800206a:	fba3 1302 	umull	r1, r3, r3, r2
 800206e:	0adb      	lsrs	r3, r3, #11
 8002070:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002074:	fb01 f303 	mul.w	r3, r1, r3
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	4a4f      	ldr	r2, [pc, #316]	; (80021b8 <HAL_RTC_GetTime+0x1a4>)
 800207c:	fba2 2303 	umull	r2, r3, r2, r3
 8002080:	095b      	lsrs	r3, r3, #5
 8002082:	b2da      	uxtb	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	4a4a      	ldr	r2, [pc, #296]	; (80021b4 <HAL_RTC_GetTime+0x1a0>)
 800208c:	fba2 1203 	umull	r1, r2, r2, r3
 8002090:	0ad2      	lsrs	r2, r2, #11
 8002092:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8002096:	fb01 f202 	mul.w	r2, r1, r2
 800209a:	1a9a      	subs	r2, r3, r2
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <HAL_RTC_GetTime+0x1a4>)
 800209e:	fba3 1302 	umull	r1, r3, r3, r2
 80020a2:	0959      	lsrs	r1, r3, #5
 80020a4:	460b      	mov	r3, r1
 80020a6:	011b      	lsls	r3, r3, #4
 80020a8:	1a5b      	subs	r3, r3, r1
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	1ad1      	subs	r1, r2, r3
 80020ae:	b2ca      	uxtb	r2, r1
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	2b17      	cmp	r3, #23
 80020b8:	d955      	bls.n	8002166 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4a3f      	ldr	r2, [pc, #252]	; (80021bc <HAL_RTC_GetTime+0x1a8>)
 80020be:	fba2 2303 	umull	r2, r3, r2, r3
 80020c2:	091b      	lsrs	r3, r3, #4
 80020c4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 80020c6:	6939      	ldr	r1, [r7, #16]
 80020c8:	4b3c      	ldr	r3, [pc, #240]	; (80021bc <HAL_RTC_GetTime+0x1a8>)
 80020ca:	fba3 2301 	umull	r2, r3, r3, r1
 80020ce:	091a      	lsrs	r2, r3, #4
 80020d0:	4613      	mov	r3, r2
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	1aca      	subs	r2, r1, r3
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 f9fd 	bl	80024e0 <RTC_ReadAlarmCounter>
 80020e6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ee:	d008      	beq.n	8002102 <HAL_RTC_GetTime+0xee>
 80020f0:	69fa      	ldr	r2, [r7, #28]
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d904      	bls.n	8002102 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	e002      	b.n	8002108 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002102:	f04f 33ff 	mov.w	r3, #4294967295
 8002106:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	4a2d      	ldr	r2, [pc, #180]	; (80021c0 <HAL_RTC_GetTime+0x1ac>)
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f000 f9ba 	bl	8002492 <RTC_WriteTimeCounter>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d001      	beq.n	8002128 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e041      	b.n	80021ac <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212e:	d00c      	beq.n	800214a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	4413      	add	r3, r2
 8002136:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002138:	69f9      	ldr	r1, [r7, #28]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	f000 f9e9 	bl	8002512 <RTC_WriteAlarmCounter>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e030      	b.n	80021ac <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800214a:	69f9      	ldr	r1, [r7, #28]
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f000 f9e0 	bl	8002512 <RTC_WriteAlarmCounter>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e027      	b.n	80021ac <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800215c:	6979      	ldr	r1, [r7, #20]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fa88 	bl	8002674 <RTC_DateUpdate>
 8002164:	e003      	b.n	800216e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d01a      	beq.n	80021aa <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f000 fa41 	bl	8002600 <RTC_ByteToBcd2>
 800217e:	4603      	mov	r3, r0
 8002180:	461a      	mov	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	785b      	ldrb	r3, [r3, #1]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fa38 	bl	8002600 <RTC_ByteToBcd2>
 8002190:	4603      	mov	r3, r0
 8002192:	461a      	mov	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	789b      	ldrb	r3, [r3, #2]
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fa2f 	bl	8002600 <RTC_ByteToBcd2>
 80021a2:	4603      	mov	r3, r0
 80021a4:	461a      	mov	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	91a2b3c5 	.word	0x91a2b3c5
 80021b8:	88888889 	.word	0x88888889
 80021bc:	aaaaaaab 	.word	0xaaaaaaab
 80021c0:	00015180 	.word	0x00015180

080021c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b088      	sub	sp, #32
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
 80021d8:	2300      	movs	r3, #0
 80021da:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_RTC_SetDate+0x24>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e097      	b.n	800231c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	7c1b      	ldrb	r3, [r3, #16]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_RTC_SetDate+0x34>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e091      	b.n	800231c <HAL_RTC_SetDate+0x158>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2201      	movs	r2, #1
 80021fc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2202      	movs	r2, #2
 8002202:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d10c      	bne.n	8002224 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	78da      	ldrb	r2, [r3, #3]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	785a      	ldrb	r2, [r3, #1]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	789a      	ldrb	r2, [r3, #2]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	739a      	strb	r2, [r3, #14]
 8002222:	e01a      	b.n	800225a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	78db      	ldrb	r3, [r3, #3]
 8002228:	4618      	mov	r0, r3
 800222a:	f000 fa06 	bl	800263a <RTC_Bcd2ToByte>
 800222e:	4603      	mov	r3, r0
 8002230:	461a      	mov	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	785b      	ldrb	r3, [r3, #1]
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f9fd 	bl	800263a <RTC_Bcd2ToByte>
 8002240:	4603      	mov	r3, r0
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	789b      	ldrb	r3, [r3, #2]
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f9f4 	bl	800263a <RTC_Bcd2ToByte>
 8002252:	4603      	mov	r3, r0
 8002254:	461a      	mov	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	7bdb      	ldrb	r3, [r3, #15]
 800225e:	4618      	mov	r0, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	7b59      	ldrb	r1, [r3, #13]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	7b9b      	ldrb	r3, [r3, #14]
 8002268:	461a      	mov	r2, r3
 800226a:	f000 fadf 	bl	800282c <RTC_WeekDayNum>
 800226e:	4603      	mov	r3, r0
 8002270:	461a      	mov	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	7b1a      	ldrb	r2, [r3, #12]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 f8d7 	bl	8002432 <RTC_ReadTimeCounter>
 8002284:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4a26      	ldr	r2, [pc, #152]	; (8002324 <HAL_RTC_SetDate+0x160>)
 800228a:	fba2 2303 	umull	r2, r3, r2, r3
 800228e:	0adb      	lsrs	r3, r3, #11
 8002290:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	2b18      	cmp	r3, #24
 8002296:	d93a      	bls.n	800230e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	4a23      	ldr	r2, [pc, #140]	; (8002328 <HAL_RTC_SetDate+0x164>)
 800229c:	fba2 2303 	umull	r2, r3, r2, r3
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	4a22      	ldr	r2, [pc, #136]	; (800232c <HAL_RTC_SetDate+0x168>)
 80022a4:	fb02 f303 	mul.w	r3, r2, r3
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80022ae:	69f9      	ldr	r1, [r7, #28]
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	f000 f8ee 	bl	8002492 <RTC_WriteTimeCounter>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d007      	beq.n	80022cc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2204      	movs	r2, #4
 80022c0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e027      	b.n	800231c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80022cc:	68f8      	ldr	r0, [r7, #12]
 80022ce:	f000 f907 	bl	80024e0 <RTC_ReadAlarmCounter>
 80022d2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022da:	d018      	beq.n	800230e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	429a      	cmp	r2, r3
 80022e2:	d214      	bcs.n	800230e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80022ea:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80022ee:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80022f0:	69b9      	ldr	r1, [r7, #24]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 f90d 	bl	8002512 <RTC_WriteAlarmCounter>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2204      	movs	r2, #4
 8002302:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2200      	movs	r2, #0
 8002308:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e006      	b.n	800231c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3720      	adds	r7, #32
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	91a2b3c5 	.word	0x91a2b3c5
 8002328:	aaaaaaab 	.word	0xaaaaaaab
 800232c:	00015180 	.word	0x00015180

08002330 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2100      	movs	r1, #0
 8002342:	460a      	mov	r2, r1
 8002344:	801a      	strh	r2, [r3, #0]
 8002346:	460a      	mov	r2, r1
 8002348:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d002      	beq.n	8002356 <HAL_RTC_GetDate+0x26>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e03a      	b.n	80023d0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800235a:	f107 0314 	add.w	r3, r7, #20
 800235e:	2200      	movs	r2, #0
 8002360:	4619      	mov	r1, r3
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f7ff fe56 	bl	8002014 <HAL_RTC_GetTime>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e02e      	b.n	80023d0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	7b1a      	ldrb	r2, [r3, #12]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	7bda      	ldrb	r2, [r3, #15]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	7b5a      	ldrb	r2, [r3, #13]
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	7b9a      	ldrb	r2, [r3, #14]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d01a      	beq.n	80023ce <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	78db      	ldrb	r3, [r3, #3]
 800239c:	4618      	mov	r0, r3
 800239e:	f000 f92f 	bl	8002600 <RTC_ByteToBcd2>
 80023a2:	4603      	mov	r3, r0
 80023a4:	461a      	mov	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	785b      	ldrb	r3, [r3, #1]
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 f926 	bl	8002600 <RTC_ByteToBcd2>
 80023b4:	4603      	mov	r3, r0
 80023b6:	461a      	mov	r2, r3
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	789b      	ldrb	r3, [r3, #2]
 80023c0:	4618      	mov	r0, r3
 80023c2:	f000 f91d 	bl	8002600 <RTC_ByteToBcd2>
 80023c6:	4603      	mov	r3, r0
 80023c8:	461a      	mov	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80023ce:	2300      	movs	r3, #0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e01d      	b.n	800242a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0208 	bic.w	r2, r2, #8
 80023fc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80023fe:	f7fe fc0d 	bl	8000c1c <HAL_GetTick>
 8002402:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002404:	e009      	b.n	800241a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002406:	f7fe fc09 	bl	8000c1c <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002414:	d901      	bls.n	800241a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e007      	b.n	800242a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ee      	beq.n	8002406 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}

08002432 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002432:	b480      	push	{r7}
 8002434:	b087      	sub	sp, #28
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800243a:	2300      	movs	r3, #0
 800243c:	827b      	strh	r3, [r7, #18]
 800243e:	2300      	movs	r3, #0
 8002440:	823b      	strh	r3, [r7, #16]
 8002442:	2300      	movs	r3, #0
 8002444:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	69db      	ldr	r3, [r3, #28]
 8002458:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002462:	8a7a      	ldrh	r2, [r7, #18]
 8002464:	8a3b      	ldrh	r3, [r7, #16]
 8002466:	429a      	cmp	r2, r3
 8002468:	d008      	beq.n	800247c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800246a:	8a3b      	ldrh	r3, [r7, #16]
 800246c:	041a      	lsls	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	b29b      	uxth	r3, r3
 8002476:	4313      	orrs	r3, r2
 8002478:	617b      	str	r3, [r7, #20]
 800247a:	e004      	b.n	8002486 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800247c:	8a7b      	ldrh	r3, [r7, #18]
 800247e:	041a      	lsls	r2, r3, #16
 8002480:	89fb      	ldrh	r3, [r7, #14]
 8002482:	4313      	orrs	r3, r2
 8002484:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8002486:	697b      	ldr	r3, [r7, #20]
}
 8002488:	4618      	mov	r0, r3
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f85d 	bl	8002560 <RTC_EnterInitMode>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e011      	b.n	80024d6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	0c12      	lsrs	r2, r2, #16
 80024ba:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	b292      	uxth	r2, r2
 80024c4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f872 	bl	80025b0 <RTC_ExitInitMode>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80024e8:	2300      	movs	r3, #0
 80024ea:	81fb      	strh	r3, [r7, #14]
 80024ec:	2300      	movs	r3, #0
 80024ee:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8002500:	89fb      	ldrh	r3, [r7, #14]
 8002502:	041a      	lsls	r2, r3, #16
 8002504:	89bb      	ldrh	r3, [r7, #12]
 8002506:	4313      	orrs	r3, r2
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800251c:	2300      	movs	r3, #0
 800251e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f81d 	bl	8002560 <RTC_EnterInitMode>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e011      	b.n	8002556 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	0c12      	lsrs	r2, r2, #16
 800253a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	b292      	uxth	r2, r2
 8002544:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 f832 	bl	80025b0 <RTC_ExitInitMode>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800256c:	f7fe fb56 	bl	8000c1c <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002572:	e009      	b.n	8002588 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002574:	f7fe fb52 	bl	8000c1c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002582:	d901      	bls.n	8002588 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e00f      	b.n	80025a8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f003 0320 	and.w	r3, r3, #32
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0ee      	beq.n	8002574 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0210 	orr.w	r2, r2, #16
 80025a4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3710      	adds	r7, #16
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	685a      	ldr	r2, [r3, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f022 0210 	bic.w	r2, r2, #16
 80025ca:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80025cc:	f7fe fb26 	bl	8000c1c <HAL_GetTick>
 80025d0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80025d2:	e009      	b.n	80025e8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80025d4:	f7fe fb22 	bl	8000c1c <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025e2:	d901      	bls.n	80025e8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e007      	b.n	80025f8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d0ee      	beq.n	80025d4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	4603      	mov	r3, r0
 8002608:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800260e:	e005      	b.n	800261c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	3301      	adds	r3, #1
 8002614:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002616:	79fb      	ldrb	r3, [r7, #7]
 8002618:	3b0a      	subs	r3, #10
 800261a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	2b09      	cmp	r3, #9
 8002620:	d8f6      	bhi.n	8002610 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	b2da      	uxtb	r2, r3
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	4313      	orrs	r3, r2
 800262e:	b2db      	uxtb	r3, r3
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800263a:	b480      	push	{r7}
 800263c:	b085      	sub	sp, #20
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002644:	2300      	movs	r3, #0
 8002646:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002648:	79fb      	ldrb	r3, [r7, #7]
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	b2db      	uxtb	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	4613      	mov	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	f003 030f 	and.w	r3, r3, #15
 8002660:	b2da      	uxtb	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4413      	add	r3, r2
 8002668:	b2db      	uxtb	r3, r3
}
 800266a:	4618      	mov	r0, r3
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr

08002674 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	7bdb      	ldrb	r3, [r3, #15]
 8002692:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	7b5b      	ldrb	r3, [r3, #13]
 8002698:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	7b9b      	ldrb	r3, [r3, #14]
 800269e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	e06f      	b.n	8002786 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d011      	beq.n	80026d0 <RTC_DateUpdate+0x5c>
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	2b03      	cmp	r3, #3
 80026b0:	d00e      	beq.n	80026d0 <RTC_DateUpdate+0x5c>
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	2b05      	cmp	r3, #5
 80026b6:	d00b      	beq.n	80026d0 <RTC_DateUpdate+0x5c>
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	2b07      	cmp	r3, #7
 80026bc:	d008      	beq.n	80026d0 <RTC_DateUpdate+0x5c>
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d005      	beq.n	80026d0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	2b0a      	cmp	r3, #10
 80026c8:	d002      	beq.n	80026d0 <RTC_DateUpdate+0x5c>
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	2b0c      	cmp	r3, #12
 80026ce:	d117      	bne.n	8002700 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b1e      	cmp	r3, #30
 80026d4:	d803      	bhi.n	80026de <RTC_DateUpdate+0x6a>
      {
        day++;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	3301      	adds	r3, #1
 80026da:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80026dc:	e050      	b.n	8002780 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	2b0c      	cmp	r3, #12
 80026e2:	d005      	beq.n	80026f0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	3301      	adds	r3, #1
 80026e8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80026ea:	2301      	movs	r3, #1
 80026ec:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80026ee:	e047      	b.n	8002780 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80026f0:	2301      	movs	r3, #1
 80026f2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80026f4:	2301      	movs	r3, #1
 80026f6:	60fb      	str	r3, [r7, #12]
          year++;
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	3301      	adds	r3, #1
 80026fc:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80026fe:	e03f      	b.n	8002780 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b04      	cmp	r3, #4
 8002704:	d008      	beq.n	8002718 <RTC_DateUpdate+0xa4>
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b06      	cmp	r3, #6
 800270a:	d005      	beq.n	8002718 <RTC_DateUpdate+0xa4>
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b09      	cmp	r3, #9
 8002710:	d002      	beq.n	8002718 <RTC_DateUpdate+0xa4>
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	2b0b      	cmp	r3, #11
 8002716:	d10c      	bne.n	8002732 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2b1d      	cmp	r3, #29
 800271c:	d803      	bhi.n	8002726 <RTC_DateUpdate+0xb2>
      {
        day++;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002724:	e02c      	b.n	8002780 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	3301      	adds	r3, #1
 800272a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800272c:	2301      	movs	r3, #1
 800272e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002730:	e026      	b.n	8002780 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d123      	bne.n	8002780 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2b1b      	cmp	r3, #27
 800273c:	d803      	bhi.n	8002746 <RTC_DateUpdate+0xd2>
      {
        day++;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3301      	adds	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	e01c      	b.n	8002780 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b1c      	cmp	r3, #28
 800274a:	d111      	bne.n	8002770 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	b29b      	uxth	r3, r3
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f839 	bl	80027c8 <RTC_IsLeapYear>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <RTC_DateUpdate+0xf0>
        {
          day++;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	3301      	adds	r3, #1
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	e00d      	b.n	8002780 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	3301      	adds	r3, #1
 8002768:	613b      	str	r3, [r7, #16]
          day = 1U;
 800276a:	2301      	movs	r3, #1
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	e007      	b.n	8002780 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2b1d      	cmp	r3, #29
 8002774:	d104      	bne.n	8002780 <RTC_DateUpdate+0x10c>
      {
        month++;
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	3301      	adds	r3, #1
 800277a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800277c:	2301      	movs	r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	3301      	adds	r3, #1
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d38b      	bcc.n	80026a6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	b2da      	uxtb	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	b2da      	uxtb	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	4619      	mov	r1, r3
 80027b0:	6978      	ldr	r0, [r7, #20]
 80027b2:	f000 f83b 	bl	800282c <RTC_WeekDayNum>
 80027b6:	4603      	mov	r3, r0
 80027b8:	461a      	mov	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	731a      	strb	r2, [r3, #12]
}
 80027be:	bf00      	nop
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
	...

080027c8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	4603      	mov	r3, r0
 80027d0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80027d2:	88fb      	ldrh	r3, [r7, #6]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80027de:	2300      	movs	r3, #0
 80027e0:	e01d      	b.n	800281e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	4a10      	ldr	r2, [pc, #64]	; (8002828 <RTC_IsLeapYear+0x60>)
 80027e6:	fba2 1203 	umull	r1, r2, r2, r3
 80027ea:	0952      	lsrs	r2, r2, #5
 80027ec:	2164      	movs	r1, #100	; 0x64
 80027ee:	fb01 f202 	mul.w	r2, r1, r2
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d001      	beq.n	80027fe <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e00f      	b.n	800281e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80027fe:	88fb      	ldrh	r3, [r7, #6]
 8002800:	4a09      	ldr	r2, [pc, #36]	; (8002828 <RTC_IsLeapYear+0x60>)
 8002802:	fba2 1203 	umull	r1, r2, r2, r3
 8002806:	09d2      	lsrs	r2, r2, #7
 8002808:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800280c:	fb01 f202 	mul.w	r2, r1, r2
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	b29b      	uxth	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002818:	2301      	movs	r3, #1
 800281a:	e000      	b.n	800281e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800281c:	2300      	movs	r3, #0
  }
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr
 8002828:	51eb851f 	.word	0x51eb851f

0800282c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	70fb      	strb	r3, [r7, #3]
 8002838:	4613      	mov	r3, r2
 800283a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800284a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800284c:	78fb      	ldrb	r3, [r7, #3]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d82d      	bhi.n	80028ae <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	4613      	mov	r3, r2
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	4413      	add	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	4a2c      	ldr	r2, [pc, #176]	; (8002910 <RTC_WeekDayNum+0xe4>)
 8002860:	fba2 2303 	umull	r2, r3, r2, r3
 8002864:	085a      	lsrs	r2, r3, #1
 8002866:	78bb      	ldrb	r3, [r7, #2]
 8002868:	441a      	add	r2, r3
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	441a      	add	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	3b01      	subs	r3, #1
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	441a      	add	r2, r3
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	3b01      	subs	r3, #1
 800287a:	4926      	ldr	r1, [pc, #152]	; (8002914 <RTC_WeekDayNum+0xe8>)
 800287c:	fba1 1303 	umull	r1, r3, r1, r3
 8002880:	095b      	lsrs	r3, r3, #5
 8002882:	1ad2      	subs	r2, r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	3b01      	subs	r3, #1
 8002888:	4922      	ldr	r1, [pc, #136]	; (8002914 <RTC_WeekDayNum+0xe8>)
 800288a:	fba1 1303 	umull	r1, r3, r1, r3
 800288e:	09db      	lsrs	r3, r3, #7
 8002890:	4413      	add	r3, r2
 8002892:	1d1a      	adds	r2, r3, #4
 8002894:	4b20      	ldr	r3, [pc, #128]	; (8002918 <RTC_WeekDayNum+0xec>)
 8002896:	fba3 1302 	umull	r1, r3, r3, r2
 800289a:	1ad1      	subs	r1, r2, r3
 800289c:	0849      	lsrs	r1, r1, #1
 800289e:	440b      	add	r3, r1
 80028a0:	0899      	lsrs	r1, r3, #2
 80028a2:	460b      	mov	r3, r1
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	1a5b      	subs	r3, r3, r1
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	e029      	b.n	8002902 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	4a15      	ldr	r2, [pc, #84]	; (8002910 <RTC_WeekDayNum+0xe4>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	085a      	lsrs	r2, r3, #1
 80028c2:	78bb      	ldrb	r3, [r7, #2]
 80028c4:	441a      	add	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	441a      	add	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	089b      	lsrs	r3, r3, #2
 80028ce:	441a      	add	r2, r3
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	4910      	ldr	r1, [pc, #64]	; (8002914 <RTC_WeekDayNum+0xe8>)
 80028d4:	fba1 1303 	umull	r1, r3, r1, r3
 80028d8:	095b      	lsrs	r3, r3, #5
 80028da:	1ad2      	subs	r2, r2, r3
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	490d      	ldr	r1, [pc, #52]	; (8002914 <RTC_WeekDayNum+0xe8>)
 80028e0:	fba1 1303 	umull	r1, r3, r1, r3
 80028e4:	09db      	lsrs	r3, r3, #7
 80028e6:	4413      	add	r3, r2
 80028e8:	1c9a      	adds	r2, r3, #2
 80028ea:	4b0b      	ldr	r3, [pc, #44]	; (8002918 <RTC_WeekDayNum+0xec>)
 80028ec:	fba3 1302 	umull	r1, r3, r3, r2
 80028f0:	1ad1      	subs	r1, r2, r3
 80028f2:	0849      	lsrs	r1, r1, #1
 80028f4:	440b      	add	r3, r1
 80028f6:	0899      	lsrs	r1, r3, #2
 80028f8:	460b      	mov	r3, r1
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	1a5b      	subs	r3, r3, r1
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	b2db      	uxtb	r3, r3
}
 8002906:	4618      	mov	r0, r3
 8002908:	3714      	adds	r7, #20
 800290a:	46bd      	mov	sp, r7
 800290c:	bc80      	pop	{r7}
 800290e:	4770      	bx	lr
 8002910:	38e38e39 	.word	0x38e38e39
 8002914:	51eb851f 	.word	0x51eb851f
 8002918:	24924925 	.word	0x24924925

0800291c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	e041      	b.n	80029b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d106      	bne.n	8002948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f839 	bl	80029ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2202      	movs	r2, #2
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	4619      	mov	r1, r3
 800295a:	4610      	mov	r0, r2
 800295c:	f000 f9b4 	bl	8002cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2201      	movs	r2, #1
 8002964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2201      	movs	r2, #1
 800296c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr

080029cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d001      	beq.n	80029e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e03a      	b.n	8002a5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2202      	movs	r2, #2
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_TIM_Base_Start_IT+0x98>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d00e      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x58>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a0e:	d009      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x58>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d004      	beq.n	8002a24 <HAL_TIM_Base_Start_IT+0x58>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <HAL_TIM_Base_Start_IT+0xa0>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d111      	bne.n	8002a48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f003 0307 	and.w	r3, r3, #7
 8002a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b06      	cmp	r3, #6
 8002a34:	d010      	beq.n	8002a58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0201 	orr.w	r2, r2, #1
 8002a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a46:	e007      	b.n	8002a58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3714      	adds	r7, #20
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bc80      	pop	{r7}
 8002a62:	4770      	bx	lr
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40000400 	.word	0x40000400
 8002a6c:	40000800 	.word	0x40000800

08002a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d122      	bne.n	8002acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0302 	and.w	r3, r3, #2
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d11b      	bne.n	8002acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0202 	mvn.w	r2, #2
 8002a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	699b      	ldr	r3, [r3, #24]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8ed 	bl	8002c92 <HAL_TIM_IC_CaptureCallback>
 8002ab8:	e005      	b.n	8002ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8e0 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f8ef 	bl	8002ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d122      	bne.n	8002b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d11b      	bne.n	8002b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0204 	mvn.w	r2, #4
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2202      	movs	r2, #2
 8002af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8c3 	bl	8002c92 <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8b6 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f8c5 	bl	8002ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d122      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d11b      	bne.n	8002b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0208 	mvn.w	r2, #8
 8002b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2204      	movs	r2, #4
 8002b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	69db      	ldr	r3, [r3, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d003      	beq.n	8002b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f899 	bl	8002c92 <HAL_TIM_IC_CaptureCallback>
 8002b60:	e005      	b.n	8002b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f88c 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f89b 	bl	8002ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b10      	cmp	r3, #16
 8002b80:	d122      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0310 	and.w	r3, r3, #16
 8002b8c:	2b10      	cmp	r3, #16
 8002b8e:	d11b      	bne.n	8002bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f06f 0210 	mvn.w	r2, #16
 8002b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2208      	movs	r2, #8
 8002b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d003      	beq.n	8002bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f86f 	bl	8002c92 <HAL_TIM_IC_CaptureCallback>
 8002bb4:	e005      	b.n	8002bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f862 	bl	8002c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f871 	bl	8002ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d10e      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d107      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f06f 0201 	mvn.w	r2, #1
 8002bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7fd fd94 	bl	800071c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfe:	2b80      	cmp	r3, #128	; 0x80
 8002c00:	d10e      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0c:	2b80      	cmp	r3, #128	; 0x80
 8002c0e:	d107      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f8bf 	bl	8002d9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b40      	cmp	r3, #64	; 0x40
 8002c2c:	d10e      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c38:	2b40      	cmp	r3, #64	; 0x40
 8002c3a:	d107      	bne.n	8002c4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f000 f835 	bl	8002cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b20      	cmp	r3, #32
 8002c58:	d10e      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	f003 0320 	and.w	r3, r3, #32
 8002c64:	2b20      	cmp	r3, #32
 8002c66:	d107      	bne.n	8002c78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0220 	mvn.w	r2, #32
 8002c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 f88a 	bl	8002d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c78:	bf00      	nop
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bc80      	pop	{r7}
 8002c90:	4770      	bx	lr

08002c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bc80      	pop	{r7}
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	b083      	sub	sp, #12
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cbe:	bf00      	nop
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a29      	ldr	r2, [pc, #164]	; (8002d80 <TIM_Base_SetConfig+0xb8>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00b      	beq.n	8002cf8 <TIM_Base_SetConfig+0x30>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce6:	d007      	beq.n	8002cf8 <TIM_Base_SetConfig+0x30>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a26      	ldr	r2, [pc, #152]	; (8002d84 <TIM_Base_SetConfig+0xbc>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_Base_SetConfig+0x30>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a25      	ldr	r2, [pc, #148]	; (8002d88 <TIM_Base_SetConfig+0xc0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d108      	bne.n	8002d0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a1c      	ldr	r2, [pc, #112]	; (8002d80 <TIM_Base_SetConfig+0xb8>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00b      	beq.n	8002d2a <TIM_Base_SetConfig+0x62>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d18:	d007      	beq.n	8002d2a <TIM_Base_SetConfig+0x62>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a19      	ldr	r2, [pc, #100]	; (8002d84 <TIM_Base_SetConfig+0xbc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d003      	beq.n	8002d2a <TIM_Base_SetConfig+0x62>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a18      	ldr	r2, [pc, #96]	; (8002d88 <TIM_Base_SetConfig+0xc0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d108      	bne.n	8002d3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68fa      	ldr	r2, [r7, #12]
 8002d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <TIM_Base_SetConfig+0xb8>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d103      	bne.n	8002d70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	615a      	str	r2, [r3, #20]
}
 8002d76:	bf00      	nop
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	40012c00 	.word	0x40012c00
 8002d84:	40000400 	.word	0x40000400
 8002d88:	40000800 	.word	0x40000800

08002d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr

08002d9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e042      	b.n	8002e48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd fe7e 	bl	8000ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	; 0x24
 8002de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68da      	ldr	r2, [r3, #12]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f000 fdf1 	bl	80039dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	691a      	ldr	r2, [r3, #16]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695a      	ldr	r2, [r3, #20]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68da      	ldr	r2, [r3, #12]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e6a:	b2db      	uxtb	r3, r3
 8002e6c:	2b20      	cmp	r3, #32
 8002e6e:	d16d      	bne.n	8002f4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d002      	beq.n	8002e7c <HAL_UART_Transmit+0x2c>
 8002e76:	88fb      	ldrh	r3, [r7, #6]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d101      	bne.n	8002e80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e066      	b.n	8002f4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2221      	movs	r2, #33	; 0x21
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e8e:	f7fd fec5 	bl	8000c1c <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ea8:	d108      	bne.n	8002ebc <HAL_UART_Transmit+0x6c>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d104      	bne.n	8002ebc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	61bb      	str	r3, [r7, #24]
 8002eba:	e003      	b.n	8002ec4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ec4:	e02a      	b.n	8002f1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	9300      	str	r3, [sp, #0]
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 fb79 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e036      	b.n	8002f4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10b      	bne.n	8002efe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	881b      	ldrh	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	3302      	adds	r3, #2
 8002efa:	61bb      	str	r3, [r7, #24]
 8002efc:	e007      	b.n	8002f0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1cf      	bne.n	8002ec6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2140      	movs	r1, #64	; 0x40
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f000 fb49 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d001      	beq.n	8002f40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e006      	b.n	8002f4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002f4c:	2302      	movs	r3, #2
  }
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3720      	adds	r7, #32
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b08a      	sub	sp, #40	; 0x28
 8002f5a:	af02      	add	r7, sp, #8
 8002f5c:	60f8      	str	r0, [r7, #12]
 8002f5e:	60b9      	str	r1, [r7, #8]
 8002f60:	603b      	str	r3, [r7, #0]
 8002f62:	4613      	mov	r3, r2
 8002f64:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b20      	cmp	r3, #32
 8002f74:	d17c      	bne.n	8003070 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_UART_Receive+0x2c>
 8002f7c:	88fb      	ldrh	r3, [r7, #6]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d101      	bne.n	8002f86 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e075      	b.n	8003072 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	2222      	movs	r2, #34	; 0x22
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2200      	movs	r2, #0
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f9a:	f7fd fe3f 	bl	8000c1c <HAL_GetTick>
 8002f9e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	88fa      	ldrh	r2, [r7, #6]
 8002faa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	d108      	bne.n	8002fc8 <HAL_UART_Receive+0x72>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d104      	bne.n	8002fc8 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	61bb      	str	r3, [r7, #24]
 8002fc6:	e003      	b.n	8002fd0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002fd0:	e043      	b.n	800305a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	2120      	movs	r1, #32
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 faf3 	bl	80035c8 <UART_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e042      	b.n	8003072 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d10c      	bne.n	800300c <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	3302      	adds	r3, #2
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	e01f      	b.n	800304c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003014:	d007      	beq.n	8003026 <HAL_UART_Receive+0xd0>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <HAL_UART_Receive+0xde>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d106      	bne.n	8003034 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	b2da      	uxtb	r2, r3
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	701a      	strb	r2, [r3, #0]
 8003032:	e008      	b.n	8003046 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	b2db      	uxtb	r3, r3
 800303c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003040:	b2da      	uxtb	r2, r3
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3301      	adds	r3, #1
 800304a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1b6      	bne.n	8002fd2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2220      	movs	r2, #32
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	e000      	b.n	8003072 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003070:	2302      	movs	r3, #2
  }
}
 8003072:	4618      	mov	r0, r3
 8003074:	3720      	adds	r7, #32
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b0ba      	sub	sp, #232	; 0xe8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80030ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80030ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10f      	bne.n	80030e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c6:	f003 0320 	and.w	r3, r3, #32
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_UART_IRQHandler+0x66>
 80030ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fbbf 	bl	800385e <UART_Receive_IT>
      return;
 80030e0:	e25b      	b.n	800359a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80de 	beq.w	80032a8 <HAL_UART_IRQHandler+0x22c>
 80030ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d106      	bne.n	8003106 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030fc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003100:	2b00      	cmp	r3, #0
 8003102:	f000 80d1 	beq.w	80032a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_UART_IRQHandler+0xae>
 8003112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d005      	beq.n	800312a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003122:	f043 0201 	orr.w	r2, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800312a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312e:	f003 0304 	and.w	r3, r3, #4
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00b      	beq.n	800314e <HAL_UART_IRQHandler+0xd2>
 8003136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d005      	beq.n	800314e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003146:	f043 0202 	orr.w	r2, r3, #2
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800314e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003152:	f003 0302 	and.w	r3, r3, #2
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00b      	beq.n	8003172 <HAL_UART_IRQHandler+0xf6>
 800315a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	f043 0204 	orr.w	r2, r3, #4
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003176:	f003 0308 	and.w	r3, r3, #8
 800317a:	2b00      	cmp	r3, #0
 800317c:	d011      	beq.n	80031a2 <HAL_UART_IRQHandler+0x126>
 800317e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003182:	f003 0320 	and.w	r3, r3, #32
 8003186:	2b00      	cmp	r3, #0
 8003188:	d105      	bne.n	8003196 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800318a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f043 0208 	orr.w	r2, r3, #8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	f000 81f2 	beq.w	8003590 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031b0:	f003 0320 	and.w	r3, r3, #32
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d008      	beq.n	80031ca <HAL_UART_IRQHandler+0x14e>
 80031b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fb4a 	bl	800385e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	bf14      	ite	ne
 80031d8:	2301      	movne	r3, #1
 80031da:	2300      	moveq	r3, #0
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f003 0308 	and.w	r3, r3, #8
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <HAL_UART_IRQHandler+0x17a>
 80031ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04f      	beq.n	8003296 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fa54 	bl	80036a4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d041      	beq.n	800328e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3314      	adds	r3, #20
 8003210:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003218:	e853 3f00 	ldrex	r3, [r3]
 800321c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003228:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	3314      	adds	r3, #20
 8003232:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003236:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800323a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003242:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003246:	e841 2300 	strex	r3, r2, [r1]
 800324a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800324e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1d9      	bne.n	800320a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d013      	beq.n	8003286 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003262:	4a7e      	ldr	r2, [pc, #504]	; (800345c <HAL_UART_IRQHandler+0x3e0>)
 8003264:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326a:	4618      	mov	r0, r3
 800326c:	f7fd fdfa 	bl	8000e64 <HAL_DMA_Abort_IT>
 8003270:	4603      	mov	r3, r0
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800327a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003280:	4610      	mov	r0, r2
 8003282:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003284:	e00e      	b.n	80032a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f98a 	bl	80035a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	e00a      	b.n	80032a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f986 	bl	80035a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003294:	e006      	b.n	80032a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f982 	bl	80035a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80032a2:	e175      	b.n	8003590 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a4:	bf00      	nop
    return;
 80032a6:	e173      	b.n	8003590 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	f040 814f 	bne.w	8003550 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b6:	f003 0310 	and.w	r3, r3, #16
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8148 	beq.w	8003550 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80032c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8141 	beq.w	8003550 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ce:	2300      	movs	r3, #0
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60bb      	str	r3, [r7, #8]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 80b6 	beq.w	8003460 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003300:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8145 	beq.w	8003594 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800330e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003312:	429a      	cmp	r2, r3
 8003314:	f080 813e 	bcs.w	8003594 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800331e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b20      	cmp	r3, #32
 8003328:	f000 8088 	beq.w	800343c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	330c      	adds	r3, #12
 8003332:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003336:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800333a:	e853 3f00 	ldrex	r3, [r3]
 800333e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003342:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003346:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800334a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	330c      	adds	r3, #12
 8003354:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003358:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800335c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003360:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003364:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003368:	e841 2300 	strex	r3, r2, [r1]
 800336c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1d9      	bne.n	800332c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3314      	adds	r3, #20
 800337e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003388:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800338a:	f023 0301 	bic.w	r3, r3, #1
 800338e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3314      	adds	r3, #20
 8003398:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800339c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033a0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e1      	bne.n	8003378 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	3314      	adds	r3, #20
 80033ba:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033be:	e853 3f00 	ldrex	r3, [r3]
 80033c2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	3314      	adds	r3, #20
 80033d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033d8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033da:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033dc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033e0:	e841 2300 	strex	r3, r2, [r1]
 80033e4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d1e3      	bne.n	80033b4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	330c      	adds	r3, #12
 8003400:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003404:	e853 3f00 	ldrex	r3, [r3]
 8003408:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800340a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340c:	f023 0310 	bic.w	r3, r3, #16
 8003410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	330c      	adds	r3, #12
 800341a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800341e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003420:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003424:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800342c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e3      	bne.n	80033fa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003436:	4618      	mov	r0, r3
 8003438:	f7fd fcd9 	bl	8000dee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800344a:	b29b      	uxth	r3, r3
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	b29b      	uxth	r3, r3
 8003450:	4619      	mov	r1, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f8ad 	bl	80035b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003458:	e09c      	b.n	8003594 <HAL_UART_IRQHandler+0x518>
 800345a:	bf00      	nop
 800345c:	08003769 	.word	0x08003769
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003468:	b29b      	uxth	r3, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	f000 808e 	beq.w	8003598 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800347c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 8089 	beq.w	8003598 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	330c      	adds	r3, #12
 800348c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800348e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003490:	e853 3f00 	ldrex	r3, [r3]
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003498:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800349c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	330c      	adds	r3, #12
 80034a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80034aa:	647a      	str	r2, [r7, #68]	; 0x44
 80034ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034b2:	e841 2300 	strex	r3, r2, [r1]
 80034b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1e3      	bne.n	8003486 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	3314      	adds	r3, #20
 80034c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	e853 3f00 	ldrex	r3, [r3]
 80034cc:	623b      	str	r3, [r7, #32]
   return(result);
 80034ce:	6a3b      	ldr	r3, [r7, #32]
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	3314      	adds	r3, #20
 80034de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034e2:	633a      	str	r2, [r7, #48]	; 0x30
 80034e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034ea:	e841 2300 	strex	r3, r2, [r1]
 80034ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1e3      	bne.n	80034be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	330c      	adds	r3, #12
 800350a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	60fb      	str	r3, [r7, #12]
   return(result);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f023 0310 	bic.w	r3, r3, #16
 800351a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	330c      	adds	r3, #12
 8003524:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003528:	61fa      	str	r2, [r7, #28]
 800352a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352c:	69b9      	ldr	r1, [r7, #24]
 800352e:	69fa      	ldr	r2, [r7, #28]
 8003530:	e841 2300 	strex	r3, r2, [r1]
 8003534:	617b      	str	r3, [r7, #20]
   return(result);
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1e3      	bne.n	8003504 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003542:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003546:	4619      	mov	r1, r3
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f832 	bl	80035b2 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800354e:	e023      	b.n	8003598 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003558:	2b00      	cmp	r3, #0
 800355a:	d009      	beq.n	8003570 <HAL_UART_IRQHandler+0x4f4>
 800355c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003564:	2b00      	cmp	r3, #0
 8003566:	d003      	beq.n	8003570 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 f911 	bl	8003790 <UART_Transmit_IT>
    return;
 800356e:	e014      	b.n	800359a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00e      	beq.n	800359a <HAL_UART_IRQHandler+0x51e>
 800357c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f950 	bl	800382e <UART_EndTransmit_IT>
    return;
 800358e:	e004      	b.n	800359a <HAL_UART_IRQHandler+0x51e>
    return;
 8003590:	bf00      	nop
 8003592:	e002      	b.n	800359a <HAL_UART_IRQHandler+0x51e>
      return;
 8003594:	bf00      	nop
 8003596:	e000      	b.n	800359a <HAL_UART_IRQHandler+0x51e>
      return;
 8003598:	bf00      	nop
  }
}
 800359a:	37e8      	adds	r7, #232	; 0xe8
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bc80      	pop	{r7}
 80035b0:	4770      	bx	lr

080035b2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b090      	sub	sp, #64	; 0x40
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	603b      	str	r3, [r7, #0]
 80035d4:	4613      	mov	r3, r2
 80035d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d8:	e050      	b.n	800367c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d04c      	beq.n	800367c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80035e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d007      	beq.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80035e8:	f7fd fb18 	bl	8000c1c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d241      	bcs.n	800367c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330c      	adds	r3, #12
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	e853 3f00 	ldrex	r3, [r3]
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800360e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	330c      	adds	r3, #12
 8003616:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003618:	637a      	str	r2, [r7, #52]	; 0x34
 800361a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800361e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003620:	e841 2300 	strex	r3, r2, [r1]
 8003624:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1e5      	bne.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3314      	adds	r3, #20
 8003632:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	e853 3f00 	ldrex	r3, [r3]
 800363a:	613b      	str	r3, [r7, #16]
   return(result);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f023 0301 	bic.w	r3, r3, #1
 8003642:	63bb      	str	r3, [r7, #56]	; 0x38
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3314      	adds	r3, #20
 800364a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800364c:	623a      	str	r2, [r7, #32]
 800364e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003650:	69f9      	ldr	r1, [r7, #28]
 8003652:	6a3a      	ldr	r2, [r7, #32]
 8003654:	e841 2300 	strex	r3, r2, [r1]
 8003658:	61bb      	str	r3, [r7, #24]
   return(result);
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d1e5      	bne.n	800362c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e00f      	b.n	800369c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	4013      	ands	r3, r2
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	429a      	cmp	r2, r3
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	79fb      	ldrb	r3, [r7, #7]
 8003696:	429a      	cmp	r2, r3
 8003698:	d09f      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3740      	adds	r7, #64	; 0x40
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b095      	sub	sp, #84	; 0x54
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	330c      	adds	r3, #12
 80036b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b6:	e853 3f00 	ldrex	r3, [r3]
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036cc:	643a      	str	r2, [r7, #64]	; 0x40
 80036ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80036d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036d4:	e841 2300 	strex	r3, r2, [r1]
 80036d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80036da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1e5      	bne.n	80036ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	3314      	adds	r3, #20
 80036e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f023 0301 	bic.w	r3, r3, #1
 80036f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3314      	adds	r3, #20
 80036fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003700:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003702:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003706:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800370e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e5      	bne.n	80036e0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003718:	2b01      	cmp	r3, #1
 800371a:	d119      	bne.n	8003750 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	330c      	adds	r3, #12
 8003722:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	e853 3f00 	ldrex	r3, [r3]
 800372a:	60bb      	str	r3, [r7, #8]
   return(result);
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f023 0310 	bic.w	r3, r3, #16
 8003732:	647b      	str	r3, [r7, #68]	; 0x44
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	330c      	adds	r3, #12
 800373a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800373c:	61ba      	str	r2, [r7, #24]
 800373e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003740:	6979      	ldr	r1, [r7, #20]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	e841 2300 	strex	r3, r2, [r1]
 8003748:	613b      	str	r3, [r7, #16]
   return(result);
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e5      	bne.n	800371c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2220      	movs	r2, #32
 8003754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800375e:	bf00      	nop
 8003760:	3754      	adds	r7, #84	; 0x54
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr

08003768 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f7ff ff0c 	bl	80035a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003788:	bf00      	nop
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b21      	cmp	r3, #33	; 0x21
 80037a2:	d13e      	bne.n	8003822 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ac:	d114      	bne.n	80037d8 <UART_Transmit_IT+0x48>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d110      	bne.n	80037d8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	881b      	ldrh	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037ca:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	1c9a      	adds	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]
 80037d6:	e008      	b.n	80037ea <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	1c59      	adds	r1, r3, #1
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6211      	str	r1, [r2, #32]
 80037e2:	781a      	ldrb	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	3b01      	subs	r3, #1
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	687a      	ldr	r2, [r7, #4]
 80037f6:	4619      	mov	r1, r3
 80037f8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10f      	bne.n	800381e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68da      	ldr	r2, [r3, #12]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800380c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800381c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	e000      	b.n	8003824 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003822:	2302      	movs	r3, #2
  }
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	bc80      	pop	{r7}
 800382c:	4770      	bx	lr

0800382e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	68da      	ldr	r2, [r3, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003844:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fc ff4f 	bl	80006f2 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b08c      	sub	sp, #48	; 0x30
 8003862:	af00      	add	r7, sp, #0
 8003864:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b22      	cmp	r3, #34	; 0x22
 8003870:	f040 80ae 	bne.w	80039d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387c:	d117      	bne.n	80038ae <UART_Receive_IT+0x50>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d113      	bne.n	80038ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003886:	2300      	movs	r3, #0
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	b29b      	uxth	r3, r3
 8003898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800389c:	b29a      	uxth	r2, r3
 800389e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	1c9a      	adds	r2, r3, #2
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28
 80038ac:	e026      	b.n	80038fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80038b4:	2300      	movs	r3, #0
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038c0:	d007      	beq.n	80038d2 <UART_Receive_IT+0x74>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <UART_Receive_IT+0x82>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	b2da      	uxtb	r2, r3
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	e008      	b.n	80038f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	1c5a      	adds	r2, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29b      	uxth	r3, r3
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	4619      	mov	r1, r3
 800390a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800390c:	2b00      	cmp	r3, #0
 800390e:	d15d      	bne.n	80039cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0220 	bic.w	r2, r2, #32
 800391e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800392e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0201 	bic.w	r2, r2, #1
 800393e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	2b01      	cmp	r3, #1
 8003954:	d135      	bne.n	80039c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	330c      	adds	r3, #12
 8003962:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	613b      	str	r3, [r7, #16]
   return(result);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f023 0310 	bic.w	r3, r3, #16
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	330c      	adds	r3, #12
 800397a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800397c:	623a      	str	r2, [r7, #32]
 800397e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003980:	69f9      	ldr	r1, [r7, #28]
 8003982:	6a3a      	ldr	r2, [r7, #32]
 8003984:	e841 2300 	strex	r3, r2, [r1]
 8003988:	61bb      	str	r3, [r7, #24]
   return(result);
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1e5      	bne.n	800395c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0310 	and.w	r3, r3, #16
 800399a:	2b10      	cmp	r3, #16
 800399c:	d10a      	bne.n	80039b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80039b8:	4619      	mov	r1, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff fdf9 	bl	80035b2 <HAL_UARTEx_RxEventCallback>
 80039c0:	e002      	b.n	80039c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fc fe9f 	bl	8000706 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e002      	b.n	80039d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	e000      	b.n	80039d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80039d0:	2302      	movs	r3, #2
  }
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3730      	adds	r7, #48	; 0x30
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
	...

080039dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	691b      	ldr	r3, [r3, #16]
 80039ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	695b      	ldr	r3, [r3, #20]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a16:	f023 030c 	bic.w	r3, r3, #12
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	68b9      	ldr	r1, [r7, #8]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	695b      	ldr	r3, [r3, #20]
 8003a2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	430a      	orrs	r2, r1
 8003a38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2c      	ldr	r2, [pc, #176]	; (8003af0 <UART_SetConfig+0x114>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d103      	bne.n	8003a4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a44:	f7fd fff4 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	e002      	b.n	8003a52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003a4c:	f7fd ffdc 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8003a50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a52:	68fa      	ldr	r2, [r7, #12]
 8003a54:	4613      	mov	r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	009a      	lsls	r2, r3, #2
 8003a5c:	441a      	add	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	4a22      	ldr	r2, [pc, #136]	; (8003af4 <UART_SetConfig+0x118>)
 8003a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6e:	095b      	lsrs	r3, r3, #5
 8003a70:	0119      	lsls	r1, r3, #4
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	4613      	mov	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4413      	add	r3, r2
 8003a7a:	009a      	lsls	r2, r3, #2
 8003a7c:	441a      	add	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a88:	4b1a      	ldr	r3, [pc, #104]	; (8003af4 <UART_SetConfig+0x118>)
 8003a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	2064      	movs	r0, #100	; 0x64
 8003a92:	fb00 f303 	mul.w	r3, r0, r3
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	3332      	adds	r3, #50	; 0x32
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <UART_SetConfig+0x118>)
 8003a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa2:	095b      	lsrs	r3, r3, #5
 8003aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa8:	4419      	add	r1, r3
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009a      	lsls	r2, r3, #2
 8003ab4:	441a      	add	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac0:	4b0c      	ldr	r3, [pc, #48]	; (8003af4 <UART_SetConfig+0x118>)
 8003ac2:	fba3 0302 	umull	r0, r3, r3, r2
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	2064      	movs	r0, #100	; 0x64
 8003aca:	fb00 f303 	mul.w	r3, r0, r3
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	3332      	adds	r3, #50	; 0x32
 8003ad4:	4a07      	ldr	r2, [pc, #28]	; (8003af4 <UART_SetConfig+0x118>)
 8003ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	f003 020f 	and.w	r2, r3, #15
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	440a      	add	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40013800 	.word	0x40013800
 8003af4:	51eb851f 	.word	0x51eb851f

08003af8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003af8:	b480      	push	{r7}
 8003afa:	b083      	sub	sp, #12
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f103 0208 	add.w	r2, r3, #8
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003b10:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f103 0208 	add.w	r2, r3, #8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f103 0208 	add.w	r2, r3, #8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr

08003b36 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b085      	sub	sp, #20
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
 8003b56:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	601a      	str	r2, [r3, #0]
}
 8003b8a:	bf00      	nop
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bc80      	pop	{r7}
 8003b92:	4770      	bx	lr

08003b94 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003b94:	b480      	push	{r7}
 8003b96:	b085      	sub	sp, #20
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003baa:	d103      	bne.n	8003bb4 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	e00c      	b.n	8003bce <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	3308      	adds	r3, #8
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	e002      	b.n	8003bc2 <vListInsert+0x2e>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	60fb      	str	r3, [r7, #12]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d2f6      	bcs.n	8003bbc <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	601a      	str	r2, [r3, #0]
}
 8003bfa:	bf00      	nop
 8003bfc:	3714      	adds	r7, #20
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr

08003c04 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6892      	ldr	r2, [r2, #8]
 8003c1a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6852      	ldr	r2, [r2, #4]
 8003c24:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d103      	bne.n	8003c38 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	1e5a      	subs	r2, r3, #1
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3714      	adds	r7, #20
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bc80      	pop	{r7}
 8003c54:	4770      	bx	lr

08003c56 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003c56:	b580      	push	{r7, lr}
 8003c58:	b086      	sub	sp, #24
 8003c5a:	af00      	add	r7, sp, #0
 8003c5c:	6078      	str	r0, [r7, #4]
 8003c5e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003c60:	2301      	movs	r3, #1
 8003c62:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10a      	bne.n	8003c84 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003c80:	bf00      	nop
 8003c82:	e7fe      	b.n	8003c82 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d052      	beq.n	8003d30 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d04e      	beq.n	8003d30 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d000      	beq.n	8003ca6 <xQueueGenericReset+0x50>
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d141      	bne.n	8003d30 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8003cac:	f001 fcf0 	bl	8005690 <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb8:	6939      	ldr	r1, [r7, #16]
 8003cba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cbc:	fb01 f303 	mul.w	r3, r1, r3
 8003cc0:	441a      	add	r2, r3
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	6939      	ldr	r1, [r7, #16]
 8003ce0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ce2:	fb01 f303 	mul.w	r3, r1, r3
 8003ce6:	441a      	add	r2, r3
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	22ff      	movs	r2, #255	; 0xff
 8003cf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	22ff      	movs	r2, #255	; 0xff
 8003cf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d109      	bne.n	8003d16 <xQueueGenericReset+0xc0>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00f      	beq.n	8003d2a <xQueueGenericReset+0xd4>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	3310      	adds	r3, #16
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f001 f89c 	bl	8004e4c <xTaskRemoveFromEventList>
 8003d14:	e009      	b.n	8003d2a <xQueueGenericReset+0xd4>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	3310      	adds	r3, #16
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7ff feec 	bl	8003af8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	3324      	adds	r3, #36	; 0x24
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff fee7 	bl	8003af8 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8003d2a:	f001 fce1 	bl	80056f0 <vPortExitCritical>
 8003d2e:	e001      	b.n	8003d34 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10a      	bne.n	8003d50 <xQueueGenericReset+0xfa>
        __asm volatile
 8003d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d3e:	f383 8811 	msr	BASEPRI, r3
 8003d42:	f3bf 8f6f 	isb	sy
 8003d46:	f3bf 8f4f 	dsb	sy
 8003d4a:	60bb      	str	r3, [r7, #8]
    }
 8003d4c:	bf00      	nop
 8003d4e:	e7fe      	b.n	8003d4e <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003d50:	697b      	ldr	r3, [r7, #20]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b08a      	sub	sp, #40	; 0x28
 8003d5e:	af02      	add	r7, sp, #8
 8003d60:	60f8      	str	r0, [r7, #12]
 8003d62:	60b9      	str	r1, [r7, #8]
 8003d64:	4613      	mov	r3, r2
 8003d66:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d02e      	beq.n	8003dd0 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003d72:	2100      	movs	r1, #0
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	fba3 2302 	umull	r2, r3, r3, r2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d000      	beq.n	8003d82 <xQueueGenericCreate+0x28>
 8003d80:	2101      	movs	r1, #1
 8003d82:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d123      	bne.n	8003dd0 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003d90:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003d94:	d81c      	bhi.n	8003dd0 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	fb02 f303 	mul.w	r3, r2, r3
 8003d9e:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	3350      	adds	r3, #80	; 0x50
 8003da4:	4618      	mov	r0, r3
 8003da6:	f001 fd33 	bl	8005810 <pvPortMalloc>
 8003daa:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d01c      	beq.n	8003dec <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	3350      	adds	r3, #80	; 0x50
 8003dba:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dbc:	79fa      	ldrb	r2, [r7, #7]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f000 f814 	bl	8003df6 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003dce:	e00d      	b.n	8003dec <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <xQueueGenericCreate+0x92>
        __asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	613b      	str	r3, [r7, #16]
    }
 8003de8:	bf00      	nop
 8003dea:	e7fe      	b.n	8003dea <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003dec:	69fb      	ldr	r3, [r7, #28]
    }
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
 8003e02:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d103      	bne.n	8003e12 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	e002      	b.n	8003e18 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e24:	2101      	movs	r1, #1
 8003e26:	69b8      	ldr	r0, [r7, #24]
 8003e28:	f7ff ff15 	bl	8003c56 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	78fa      	ldrb	r2, [r7, #3]
 8003e30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08c      	sub	sp, #48	; 0x30
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <xQueueGenericSend+0x32>
        __asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	623b      	str	r3, [r7, #32]
    }
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <xQueueGenericSend+0x40>
 8003e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <xQueueGenericSend+0x44>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <xQueueGenericSend+0x46>
 8003e80:	2300      	movs	r3, #0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <xQueueGenericSend+0x60>
        __asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	61fb      	str	r3, [r7, #28]
    }
 8003e98:	bf00      	nop
 8003e9a:	e7fe      	b.n	8003e9a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d103      	bne.n	8003eaa <xQueueGenericSend+0x6e>
 8003ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d101      	bne.n	8003eae <xQueueGenericSend+0x72>
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e000      	b.n	8003eb0 <xQueueGenericSend+0x74>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10a      	bne.n	8003eca <xQueueGenericSend+0x8e>
        __asm volatile
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	f383 8811 	msr	BASEPRI, r3
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	61bb      	str	r3, [r7, #24]
    }
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003eca:	f001 fbe1 	bl	8005690 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d302      	bcc.n	8003ee0 <xQueueGenericSend+0xa4>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d112      	bne.n	8003f06 <xQueueGenericSend+0xca>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	68b9      	ldr	r1, [r7, #8]
 8003ee4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ee6:	f000 f933 	bl	8004150 <prvCopyDataToQueue>
 8003eea:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d004      	beq.n	8003efe <xQueueGenericSend+0xc2>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef6:	3324      	adds	r3, #36	; 0x24
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 ffa7 	bl	8004e4c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003efe:	f001 fbf7 	bl	80056f0 <vPortExitCritical>
                return pdPASS;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e062      	b.n	8003fcc <xQueueGenericSend+0x190>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d103      	bne.n	8003f14 <xQueueGenericSend+0xd8>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003f0c:	f001 fbf0 	bl	80056f0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e05b      	b.n	8003fcc <xQueueGenericSend+0x190>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <xQueueGenericSend+0xec>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003f1a:	f107 0310 	add.w	r3, r7, #16
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f001 f86a 	bl	8004ff8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003f24:	2301      	movs	r3, #1
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003f28:	f001 fbe2 	bl	80056f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003f2c:	f000 fd20 	bl	8004970 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003f30:	f001 fbae 	bl	8005690 <vPortEnterCritical>
 8003f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f3a:	b25b      	sxtb	r3, r3
 8003f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f40:	d103      	bne.n	8003f4a <xQueueGenericSend+0x10e>
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f50:	b25b      	sxtb	r3, r3
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d103      	bne.n	8003f60 <xQueueGenericSend+0x124>
 8003f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f60:	f001 fbc6 	bl	80056f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f64:	1d3a      	adds	r2, r7, #4
 8003f66:	f107 0310 	add.w	r3, r7, #16
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f001 f859 	bl	8005024 <xTaskCheckForTimeOut>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d123      	bne.n	8003fc0 <xQueueGenericSend+0x184>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f7a:	f000 f9e1 	bl	8004340 <prvIsQueueFull>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d017      	beq.n	8003fb4 <xQueueGenericSend+0x178>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	3310      	adds	r3, #16
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 ff39 	bl	8004e04 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f94:	f000 f96c 	bl	8004270 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003f98:	f000 fcf8 	bl	800498c <xTaskResumeAll>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d193      	bne.n	8003eca <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003fa2:	4b0c      	ldr	r3, [pc, #48]	; (8003fd4 <xQueueGenericSend+0x198>)
 8003fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	e78a      	b.n	8003eca <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fb6:	f000 f95b 	bl	8004270 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003fba:	f000 fce7 	bl	800498c <xTaskResumeAll>
 8003fbe:	e784      	b.n	8003eca <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fc2:	f000 f955 	bl	8004270 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003fc6:	f000 fce1 	bl	800498c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003fca:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3730      	adds	r7, #48	; 0x30
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	e000ed04 	.word	0xe000ed04

08003fd8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08c      	sub	sp, #48	; 0x30
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <xQueueReceive+0x30>
        __asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	623b      	str	r3, [r7, #32]
    }
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d103      	bne.n	8004016 <xQueueReceive+0x3e>
 800400e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <xQueueReceive+0x42>
 8004016:	2301      	movs	r3, #1
 8004018:	e000      	b.n	800401c <xQueueReceive+0x44>
 800401a:	2300      	movs	r3, #0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xQueueReceive+0x5e>
        __asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	61fb      	str	r3, [r7, #28]
    }
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004036:	f001 fb2b 	bl	8005690 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800403a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800403c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403e:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	2b00      	cmp	r3, #0
 8004044:	d014      	beq.n	8004070 <xQueueReceive+0x98>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004046:	68b9      	ldr	r1, [r7, #8]
 8004048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800404a:	f000 f8eb 	bl	8004224 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004050:	1e5a      	subs	r2, r3, #1
 8004052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004054:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004058:	691b      	ldr	r3, [r3, #16]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d004      	beq.n	8004068 <xQueueReceive+0x90>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	3310      	adds	r3, #16
 8004062:	4618      	mov	r0, r3
 8004064:	f000 fef2 	bl	8004e4c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004068:	f001 fb42 	bl	80056f0 <vPortExitCritical>
                return pdPASS;
 800406c:	2301      	movs	r3, #1
 800406e:	e069      	b.n	8004144 <xQueueReceive+0x16c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d103      	bne.n	800407e <xQueueReceive+0xa6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004076:	f001 fb3b 	bl	80056f0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800407a:	2300      	movs	r3, #0
 800407c:	e062      	b.n	8004144 <xQueueReceive+0x16c>
                }
                else if( xEntryTimeSet == pdFALSE )
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d106      	bne.n	8004092 <xQueueReceive+0xba>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	4618      	mov	r0, r3
 800408a:	f000 ffb5 	bl	8004ff8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800408e:	2301      	movs	r3, #1
 8004090:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004092:	f001 fb2d 	bl	80056f0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004096:	f000 fc6b 	bl	8004970 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800409a:	f001 faf9 	bl	8005690 <vPortEnterCritical>
 800409e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80040a4:	b25b      	sxtb	r3, r3
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	d103      	bne.n	80040b4 <xQueueReceive+0xdc>
 80040ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040ba:	b25b      	sxtb	r3, r3
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d103      	bne.n	80040ca <xQueueReceive+0xf2>
 80040c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ca:	f001 fb11 	bl	80056f0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040ce:	1d3a      	adds	r2, r7, #4
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 ffa4 	bl	8005024 <xTaskCheckForTimeOut>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d123      	bne.n	800412a <xQueueReceive+0x152>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040e4:	f000 f916 	bl	8004314 <prvIsQueueEmpty>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d017      	beq.n	800411e <xQueueReceive+0x146>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	3324      	adds	r3, #36	; 0x24
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fe84 	bl	8004e04 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80040fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040fe:	f000 f8b7 	bl	8004270 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004102:	f000 fc43 	bl	800498c <xTaskResumeAll>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d194      	bne.n	8004036 <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 800410c:	4b0f      	ldr	r3, [pc, #60]	; (800414c <xQueueReceive+0x174>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	e78b      	b.n	8004036 <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800411e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004120:	f000 f8a6 	bl	8004270 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004124:	f000 fc32 	bl	800498c <xTaskResumeAll>
 8004128:	e785      	b.n	8004036 <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800412a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800412c:	f000 f8a0 	bl	8004270 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004130:	f000 fc2c 	bl	800498c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004134:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004136:	f000 f8ed 	bl	8004314 <prvIsQueueEmpty>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	f43f af7a 	beq.w	8004036 <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004142:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004144:	4618      	mov	r0, r3
 8004146:	3730      	adds	r7, #48	; 0x30
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	e000ed04 	.word	0xe000ed04

08004150 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004164:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10d      	bne.n	800418a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d14d      	bne.n	8004212 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	4618      	mov	r0, r3
 800417c:	f001 f86e 	bl	800525c <xTaskPriorityDisinherit>
 8004180:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	609a      	str	r2, [r3, #8]
 8004188:	e043      	b.n	8004212 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d119      	bne.n	80041c4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6858      	ldr	r0, [r3, #4]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	461a      	mov	r2, r3
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	f001 ffca 	bl	8006134 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	441a      	add	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	685a      	ldr	r2, [r3, #4]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	429a      	cmp	r2, r3
 80041b8:	d32b      	bcc.n	8004212 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	605a      	str	r2, [r3, #4]
 80041c2:	e026      	b.n	8004212 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	68d8      	ldr	r0, [r3, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041cc:	461a      	mov	r2, r3
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	f001 ffb0 	bl	8006134 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041dc:	425b      	negs	r3, r3
 80041de:	441a      	add	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d207      	bcs.n	8004200 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	425b      	negs	r3, r3
 80041fa:	441a      	add	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d105      	bne.n	8004212 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	3b01      	subs	r3, #1
 8004210:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 800421a:	697b      	ldr	r3, [r7, #20]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3718      	adds	r7, #24
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	2b00      	cmp	r3, #0
 8004234:	d018      	beq.n	8004268 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423e:	441a      	add	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68da      	ldr	r2, [r3, #12]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	429a      	cmp	r2, r3
 800424e:	d303      	bcc.n	8004258 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68d9      	ldr	r1, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	461a      	mov	r2, r3
 8004262:	6838      	ldr	r0, [r7, #0]
 8004264:	f001 ff66 	bl	8006134 <memcpy>
    }
}
 8004268:	bf00      	nop
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004278:	f001 fa0a 	bl	8005690 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004282:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004284:	e011      	b.n	80042aa <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	2b00      	cmp	r3, #0
 800428c:	d012      	beq.n	80042b4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	3324      	adds	r3, #36	; 0x24
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fdda 	bl	8004e4c <xTaskRemoveFromEventList>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 800429e:	f000 ff27 	bl	80050f0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80042a2:	7bfb      	ldrb	r3, [r7, #15]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80042aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	dce9      	bgt.n	8004286 <prvUnlockQueue+0x16>
 80042b2:	e000      	b.n	80042b6 <prvUnlockQueue+0x46>
                        break;
 80042b4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	22ff      	movs	r2, #255	; 0xff
 80042ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80042be:	f001 fa17 	bl	80056f0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80042c2:	f001 f9e5 	bl	8005690 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042cc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80042ce:	e011      	b.n	80042f4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d012      	beq.n	80042fe <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3310      	adds	r3, #16
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fdb5 	bl	8004e4c <xTaskRemoveFromEventList>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80042e8:	f000 ff02 	bl	80050f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80042ec:	7bbb      	ldrb	r3, [r7, #14]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80042f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	dce9      	bgt.n	80042d0 <prvUnlockQueue+0x60>
 80042fc:	e000      	b.n	8004300 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80042fe:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	22ff      	movs	r2, #255	; 0xff
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004308:	f001 f9f2 	bl	80056f0 <vPortExitCritical>
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800431c:	f001 f9b8 	bl	8005690 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004324:	2b00      	cmp	r3, #0
 8004326:	d102      	bne.n	800432e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004328:	2301      	movs	r3, #1
 800432a:	60fb      	str	r3, [r7, #12]
 800432c:	e001      	b.n	8004332 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800432e:	2300      	movs	r3, #0
 8004330:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004332:	f001 f9dd 	bl	80056f0 <vPortExitCritical>

    return xReturn;
 8004336:	68fb      	ldr	r3, [r7, #12]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004348:	f001 f9a2 	bl	8005690 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004354:	429a      	cmp	r2, r3
 8004356:	d102      	bne.n	800435e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004358:	2301      	movs	r3, #1
 800435a:	60fb      	str	r3, [r7, #12]
 800435c:	e001      	b.n	8004362 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800435e:	2300      	movs	r3, #0
 8004360:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004362:	f001 f9c5 	bl	80056f0 <vPortExitCritical>

    return xReturn;
 8004366:	68fb      	ldr	r3, [r7, #12]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004370:	b580      	push	{r7, lr}
 8004372:	b08c      	sub	sp, #48	; 0x30
 8004374:	af04      	add	r7, sp, #16
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004380:	88fb      	ldrh	r3, [r7, #6]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4618      	mov	r0, r3
 8004386:	f001 fa43 	bl	8005810 <pvPortMalloc>
 800438a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00e      	beq.n	80043b0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004392:	2058      	movs	r0, #88	; 0x58
 8004394:	f001 fa3c 	bl	8005810 <pvPortMalloc>
 8004398:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d003      	beq.n	80043a8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
 80043a6:	e005      	b.n	80043b4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80043a8:	6978      	ldr	r0, [r7, #20]
 80043aa:	f001 fb11 	bl	80059d0 <vPortFree>
 80043ae:	e001      	b.n	80043b4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80043b0:	2300      	movs	r3, #0
 80043b2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d013      	beq.n	80043e2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043ba:	88fa      	ldrh	r2, [r7, #6]
 80043bc:	2300      	movs	r3, #0
 80043be:	9303      	str	r3, [sp, #12]
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	9302      	str	r3, [sp, #8]
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	9301      	str	r3, [sp, #4]
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f80e 	bl	80043f2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80043d6:	69f8      	ldr	r0, [r7, #28]
 80043d8:	f000 f8b0 	bl	800453c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80043dc:	2301      	movs	r3, #1
 80043de:	61bb      	str	r3, [r7, #24]
 80043e0:	e002      	b.n	80043e8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043e2:	f04f 33ff 	mov.w	r3, #4294967295
 80043e6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80043e8:	69bb      	ldr	r3, [r7, #24]
    }
 80043ea:	4618      	mov	r0, r3
 80043ec:	3720      	adds	r7, #32
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b088      	sub	sp, #32
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	60f8      	str	r0, [r7, #12]
 80043fa:	60b9      	str	r1, [r7, #8]
 80043fc:	607a      	str	r2, [r7, #4]
 80043fe:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004402:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	461a      	mov	r2, r3
 800440a:	21a5      	movs	r1, #165	; 0xa5
 800440c:	f001 fe00 	bl	8006010 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004412:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800441a:	3b01      	subs	r3, #1
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	f023 0307 	bic.w	r3, r3, #7
 8004428:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <prvInitialiseNewTask+0x58>
        __asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	617b      	str	r3, [r7, #20]
    }
 8004446:	bf00      	nop
 8004448:	e7fe      	b.n	8004448 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01f      	beq.n	8004490 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	e012      	b.n	800447c <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	4413      	add	r3, r2
 800445c:	7819      	ldrb	r1, [r3, #0]
 800445e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4413      	add	r3, r2
 8004464:	3334      	adds	r3, #52	; 0x34
 8004466:	460a      	mov	r2, r1
 8004468:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	4413      	add	r3, r2
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d006      	beq.n	8004484 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	3301      	adds	r3, #1
 800447a:	61fb      	str	r3, [r7, #28]
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b09      	cmp	r3, #9
 8004480:	d9e9      	bls.n	8004456 <prvInitialiseNewTask+0x64>
 8004482:	e000      	b.n	8004486 <prvInitialiseNewTask+0x94>
            {
                break;
 8004484:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800448e:	e003      	b.n	8004498 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8004498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449a:	2b02      	cmp	r3, #2
 800449c:	d90a      	bls.n	80044b4 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	613b      	str	r3, [r7, #16]
    }
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	2b02      	cmp	r3, #2
 80044b8:	d901      	bls.n	80044be <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044ba:	2302      	movs	r3, #2
 80044bc:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c2:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044c8:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	2200      	movs	r2, #0
 80044ce:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	3304      	adds	r3, #4
 80044d4:	4618      	mov	r0, r3
 80044d6:	f7ff fb2e 	bl	8003b36 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	3318      	adds	r3, #24
 80044de:	4618      	mov	r0, r3
 80044e0:	f7ff fb29 	bl	8003b36 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	f1c3 0203 	rsb	r2, r3, #3
 80044f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	3350      	adds	r3, #80	; 0x50
 80044fe:	2204      	movs	r2, #4
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f001 fd84 	bl	8006010 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450a:	3354      	adds	r3, #84	; 0x54
 800450c:	2201      	movs	r2, #1
 800450e:	2100      	movs	r1, #0
 8004510:	4618      	mov	r0, r3
 8004512:	f001 fd7d 	bl	8006010 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	68f9      	ldr	r1, [r7, #12]
 800451a:	69b8      	ldr	r0, [r7, #24]
 800451c:	f000 ffc2 	bl	80054a4 <pxPortInitialiseStack>
 8004520:	4602      	mov	r2, r0
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800452c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800452e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004530:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004532:	bf00      	nop
 8004534:	3720      	adds	r7, #32
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
	...

0800453c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b084      	sub	sp, #16
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004544:	f001 f8a4 	bl	8005690 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004548:	4b3a      	ldr	r3, [pc, #232]	; (8004634 <prvAddNewTaskToReadyList+0xf8>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	4a39      	ldr	r2, [pc, #228]	; (8004634 <prvAddNewTaskToReadyList+0xf8>)
 8004550:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004552:	4b39      	ldr	r3, [pc, #228]	; (8004638 <prvAddNewTaskToReadyList+0xfc>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800455a:	4a37      	ldr	r2, [pc, #220]	; (8004638 <prvAddNewTaskToReadyList+0xfc>)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004560:	4b34      	ldr	r3, [pc, #208]	; (8004634 <prvAddNewTaskToReadyList+0xf8>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b01      	cmp	r3, #1
 8004566:	d110      	bne.n	800458a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004568:	f000 fde0 	bl	800512c <prvInitialiseTaskLists>
 800456c:	e00d      	b.n	800458a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800456e:	4b33      	ldr	r3, [pc, #204]	; (800463c <prvAddNewTaskToReadyList+0x100>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d109      	bne.n	800458a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004576:	4b30      	ldr	r3, [pc, #192]	; (8004638 <prvAddNewTaskToReadyList+0xfc>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	429a      	cmp	r2, r3
 8004582:	d802      	bhi.n	800458a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004584:	4a2c      	ldr	r2, [pc, #176]	; (8004638 <prvAddNewTaskToReadyList+0xfc>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800458a:	4b2d      	ldr	r3, [pc, #180]	; (8004640 <prvAddNewTaskToReadyList+0x104>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	3301      	adds	r3, #1
 8004590:	4a2b      	ldr	r2, [pc, #172]	; (8004640 <prvAddNewTaskToReadyList+0x104>)
 8004592:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004594:	4b2a      	ldr	r3, [pc, #168]	; (8004640 <prvAddNewTaskToReadyList+0x104>)
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	2201      	movs	r2, #1
 80045a2:	409a      	lsls	r2, r3
 80045a4:	4b27      	ldr	r3, [pc, #156]	; (8004644 <prvAddNewTaskToReadyList+0x108>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	4a26      	ldr	r2, [pc, #152]	; (8004644 <prvAddNewTaskToReadyList+0x108>)
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b2:	4925      	ldr	r1, [pc, #148]	; (8004648 <prvAddNewTaskToReadyList+0x10c>)
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3304      	adds	r3, #4
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	609a      	str	r2, [r3, #8]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60da      	str	r2, [r3, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	3204      	adds	r2, #4
 80045da:	605a      	str	r2, [r3, #4]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	1d1a      	adds	r2, r3, #4
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	609a      	str	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	4613      	mov	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	4413      	add	r3, r2
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	4a15      	ldr	r2, [pc, #84]	; (8004648 <prvAddNewTaskToReadyList+0x10c>)
 80045f2:	441a      	add	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	615a      	str	r2, [r3, #20]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fc:	4912      	ldr	r1, [pc, #72]	; (8004648 <prvAddNewTaskToReadyList+0x10c>)
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	440b      	add	r3, r1
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1c59      	adds	r1, r3, #1
 800460c:	480e      	ldr	r0, [pc, #56]	; (8004648 <prvAddNewTaskToReadyList+0x10c>)
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4403      	add	r3, r0
 8004618:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800461a:	f001 f869 	bl	80056f0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800461e:	4b07      	ldr	r3, [pc, #28]	; (800463c <prvAddNewTaskToReadyList+0x100>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004626:	4b04      	ldr	r3, [pc, #16]	; (8004638 <prvAddNewTaskToReadyList+0xfc>)
 8004628:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800462a:	bf00      	nop
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	20000220 	.word	0x20000220
 8004638:	20000170 	.word	0x20000170
 800463c:	2000022c 	.word	0x2000022c
 8004640:	2000023c 	.word	0x2000023c
 8004644:	20000228 	.word	0x20000228
 8004648:	20000174 	.word	0x20000174

0800464c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8004654:	f001 f81c 	bl	8005690 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <vTaskSuspend+0x18>
 800465e:	4b43      	ldr	r3, [pc, #268]	; (800476c <vTaskSuspend+0x120>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	e000      	b.n	8004666 <vTaskSuspend+0x1a>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	3304      	adds	r3, #4
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fac9 	bl	8003c04 <uxListRemove>
 8004672:	4603      	mov	r3, r0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d115      	bne.n	80046a4 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467c:	493c      	ldr	r1, [pc, #240]	; (8004770 <vTaskSuspend+0x124>)
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <vTaskSuspend+0x58>
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004692:	2201      	movs	r2, #1
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43da      	mvns	r2, r3
 800469a:	4b36      	ldr	r3, [pc, #216]	; (8004774 <vTaskSuspend+0x128>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4013      	ands	r3, r2
 80046a0:	4a34      	ldr	r2, [pc, #208]	; (8004774 <vTaskSuspend+0x128>)
 80046a2:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d004      	beq.n	80046b6 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	3318      	adds	r3, #24
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff faa7 	bl	8003c04 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	3304      	adds	r3, #4
 80046ba:	4619      	mov	r1, r3
 80046bc:	482e      	ldr	r0, [pc, #184]	; (8004778 <vTaskSuspend+0x12c>)
 80046be:	f7ff fa46 	bl	8003b4e <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e010      	b.n	80046ea <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	4413      	add	r3, r2
 80046ce:	3354      	adds	r3, #84	; 0x54
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d105      	bne.n	80046e4 <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	4413      	add	r3, r2
 80046de:	3354      	adds	r3, #84	; 0x54
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	3301      	adds	r3, #1
 80046e8:	617b      	str	r3, [r7, #20]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	ddeb      	ble.n	80046c8 <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 80046f0:	f000 fffe 	bl	80056f0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80046f4:	4b21      	ldr	r3, [pc, #132]	; (800477c <vTaskSuspend+0x130>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d005      	beq.n	8004708 <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 80046fc:	f000 ffc8 	bl	8005690 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8004700:	f000 fd92 	bl	8005228 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8004704:	f000 fff4 	bl	80056f0 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8004708:	4b18      	ldr	r3, [pc, #96]	; (800476c <vTaskSuspend+0x120>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	429a      	cmp	r2, r3
 8004710:	d127      	bne.n	8004762 <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <vTaskSuspend+0x130>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d017      	beq.n	800474a <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 800471a:	4b19      	ldr	r3, [pc, #100]	; (8004780 <vTaskSuspend+0x134>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <vTaskSuspend+0xec>
        __asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60fb      	str	r3, [r7, #12]
    }
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 8004738:	4b12      	ldr	r3, [pc, #72]	; (8004784 <vTaskSuspend+0x138>)
 800473a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473e:	601a      	str	r2, [r3, #0]
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004748:	e00b      	b.n	8004762 <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <vTaskSuspend+0x12c>)
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <vTaskSuspend+0x13c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d103      	bne.n	800475e <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 8004756:	4b05      	ldr	r3, [pc, #20]	; (800476c <vTaskSuspend+0x120>)
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
    }
 800475c:	e001      	b.n	8004762 <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 800475e:	f000 faf7 	bl	8004d50 <vTaskSwitchContext>
    }
 8004762:	bf00      	nop
 8004764:	3718      	adds	r7, #24
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000170 	.word	0x20000170
 8004770:	20000174 	.word	0x20000174
 8004774:	20000228 	.word	0x20000228
 8004778:	2000020c 	.word	0x2000020c
 800477c:	2000022c 	.word	0x2000022c
 8004780:	20000248 	.word	0x20000248
 8004784:	e000ed04 	.word	0xe000ed04
 8004788:	20000220 	.word	0x20000220

0800478c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 800478c:	b480      	push	{r7}
 800478e:	b087      	sub	sp, #28
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d10a      	bne.n	80047b8 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 80047a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a6:	f383 8811 	msr	BASEPRI, r3
 80047aa:	f3bf 8f6f 	isb	sy
 80047ae:	f3bf 8f4f 	dsb	sy
 80047b2:	60fb      	str	r3, [r7, #12]
    }
 80047b4:	bf00      	nop
 80047b6:	e7fe      	b.n	80047b6 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <prvTaskIsTaskSuspended+0x58>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d10a      	bne.n	80047d8 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c6:	4a08      	ldr	r2, [pc, #32]	; (80047e8 <prvTaskIsTaskSuspended+0x5c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d005      	beq.n	80047d8 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80047d8:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80047da:	4618      	mov	r0, r3
 80047dc:	371c      	adds	r7, #28
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr
 80047e4:	2000020c 	.word	0x2000020c
 80047e8:	200001e0 	.word	0x200001e0

080047ec <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b086      	sub	sp, #24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d10a      	bne.n	8004814 <vTaskResume+0x28>
        __asm volatile
 80047fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004802:	f383 8811 	msr	BASEPRI, r3
 8004806:	f3bf 8f6f 	isb	sy
 800480a:	f3bf 8f4f 	dsb	sy
 800480e:	60fb      	str	r3, [r7, #12]
    }
 8004810:	bf00      	nop
 8004812:	e7fe      	b.n	8004812 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004814:	4b2d      	ldr	r3, [pc, #180]	; (80048cc <vTaskResume+0xe0>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	429a      	cmp	r2, r3
 800481c:	d052      	beq.n	80048c4 <vTaskResume+0xd8>
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d04f      	beq.n	80048c4 <vTaskResume+0xd8>
        {
            taskENTER_CRITICAL();
 8004824:	f000 ff34 	bl	8005690 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004828:	6978      	ldr	r0, [r7, #20]
 800482a:	f7ff ffaf 	bl	800478c <prvTaskIsTaskSuspended>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d045      	beq.n	80048c0 <vTaskResume+0xd4>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	3304      	adds	r3, #4
 8004838:	4618      	mov	r0, r3
 800483a:	f7ff f9e3 	bl	8003c04 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004842:	2201      	movs	r2, #1
 8004844:	409a      	lsls	r2, r3
 8004846:	4b22      	ldr	r3, [pc, #136]	; (80048d0 <vTaskResume+0xe4>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4313      	orrs	r3, r2
 800484c:	4a20      	ldr	r2, [pc, #128]	; (80048d0 <vTaskResume+0xe4>)
 800484e:	6013      	str	r3, [r2, #0]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004854:	491f      	ldr	r1, [pc, #124]	; (80048d4 <vTaskResume+0xe8>)
 8004856:	4613      	mov	r3, r2
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4413      	add	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	440b      	add	r3, r1
 8004860:	3304      	adds	r3, #4
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	693a      	ldr	r2, [r7, #16]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	60da      	str	r2, [r3, #12]
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	3204      	adds	r2, #4
 800487c:	605a      	str	r2, [r3, #4]
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	1d1a      	adds	r2, r3, #4
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	609a      	str	r2, [r3, #8]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800488a:	4613      	mov	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	4413      	add	r3, r2
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	4a10      	ldr	r2, [pc, #64]	; (80048d4 <vTaskResume+0xe8>)
 8004894:	441a      	add	r2, r3
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	615a      	str	r2, [r3, #20]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800489e:	490d      	ldr	r1, [pc, #52]	; (80048d4 <vTaskResume+0xe8>)
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	440b      	add	r3, r1
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	1c59      	adds	r1, r3, #1
 80048ae:	4809      	ldr	r0, [pc, #36]	; (80048d4 <vTaskResume+0xe8>)
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4403      	add	r3, r0
 80048ba:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048bc:	4b03      	ldr	r3, [pc, #12]	; (80048cc <vTaskResume+0xe0>)
 80048be:	681b      	ldr	r3, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80048c0:	f000 ff16 	bl	80056f0 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80048c4:	bf00      	nop
 80048c6:	3718      	adds	r7, #24
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}
 80048cc:	20000170 	.word	0x20000170
 80048d0:	20000228 	.word	0x20000228
 80048d4:	20000174 	.word	0x20000174

080048d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <vTaskStartScheduler+0x7c>)
 80048e0:	9301      	str	r3, [sp, #4]
 80048e2:	2300      	movs	r3, #0
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	2300      	movs	r3, #0
 80048e8:	2282      	movs	r2, #130	; 0x82
 80048ea:	491b      	ldr	r1, [pc, #108]	; (8004958 <vTaskStartScheduler+0x80>)
 80048ec:	481b      	ldr	r0, [pc, #108]	; (800495c <vTaskStartScheduler+0x84>)
 80048ee:	f7ff fd3f 	bl	8004370 <xTaskCreate>
 80048f2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d116      	bne.n	8004928 <vTaskStartScheduler+0x50>
        __asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	60bb      	str	r3, [r7, #8]
    }
 800490c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <vTaskStartScheduler+0x88>)
 8004910:	f04f 32ff 	mov.w	r2, #4294967295
 8004914:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004916:	4b13      	ldr	r3, [pc, #76]	; (8004964 <vTaskStartScheduler+0x8c>)
 8004918:	2201      	movs	r2, #1
 800491a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800491c:	4b12      	ldr	r3, [pc, #72]	; (8004968 <vTaskStartScheduler+0x90>)
 800491e:	2200      	movs	r2, #0
 8004920:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004922:	f000 fe43 	bl	80055ac <xPortStartScheduler>
 8004926:	e00e      	b.n	8004946 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492e:	d10a      	bne.n	8004946 <vTaskStartScheduler+0x6e>
        __asm volatile
 8004930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004934:	f383 8811 	msr	BASEPRI, r3
 8004938:	f3bf 8f6f 	isb	sy
 800493c:	f3bf 8f4f 	dsb	sy
 8004940:	607b      	str	r3, [r7, #4]
    }
 8004942:	bf00      	nop
 8004944:	e7fe      	b.n	8004944 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004946:	4b09      	ldr	r3, [pc, #36]	; (800496c <vTaskStartScheduler+0x94>)
 8004948:	681b      	ldr	r3, [r3, #0]
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	20000244 	.word	0x20000244
 8004958:	08006d48 	.word	0x08006d48
 800495c:	08005109 	.word	0x08005109
 8004960:	20000240 	.word	0x20000240
 8004964:	2000022c 	.word	0x2000022c
 8004968:	20000224 	.word	0x20000224
 800496c:	2000002c 	.word	0x2000002c

08004970 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004974:	4b04      	ldr	r3, [pc, #16]	; (8004988 <vTaskSuspendAll+0x18>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	3301      	adds	r3, #1
 800497a:	4a03      	ldr	r2, [pc, #12]	; (8004988 <vTaskSuspendAll+0x18>)
 800497c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800497e:	bf00      	nop
 8004980:	46bd      	mov	sp, r7
 8004982:	bc80      	pop	{r7}
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	20000248 	.word	0x20000248

0800498c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004992:	2300      	movs	r3, #0
 8004994:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004996:	2300      	movs	r3, #0
 8004998:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800499a:	4b6b      	ldr	r3, [pc, #428]	; (8004b48 <xTaskResumeAll+0x1bc>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10a      	bne.n	80049b8 <xTaskResumeAll+0x2c>
        __asm volatile
 80049a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a6:	f383 8811 	msr	BASEPRI, r3
 80049aa:	f3bf 8f6f 	isb	sy
 80049ae:	f3bf 8f4f 	dsb	sy
 80049b2:	607b      	str	r3, [r7, #4]
    }
 80049b4:	bf00      	nop
 80049b6:	e7fe      	b.n	80049b6 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80049b8:	f000 fe6a 	bl	8005690 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80049bc:	4b62      	ldr	r3, [pc, #392]	; (8004b48 <xTaskResumeAll+0x1bc>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	3b01      	subs	r3, #1
 80049c2:	4a61      	ldr	r2, [pc, #388]	; (8004b48 <xTaskResumeAll+0x1bc>)
 80049c4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c6:	4b60      	ldr	r3, [pc, #384]	; (8004b48 <xTaskResumeAll+0x1bc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 80b4 	bne.w	8004b38 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049d0:	4b5e      	ldr	r3, [pc, #376]	; (8004b4c <xTaskResumeAll+0x1c0>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80af 	beq.w	8004b38 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049da:	e08a      	b.n	8004af2 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049dc:	4b5c      	ldr	r3, [pc, #368]	; (8004b50 <xTaskResumeAll+0x1c4>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e8:	613b      	str	r3, [r7, #16]
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	69fa      	ldr	r2, [r7, #28]
 80049f0:	6a12      	ldr	r2, [r2, #32]
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	69fa      	ldr	r2, [r7, #28]
 80049fa:	69d2      	ldr	r2, [r2, #28]
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	685a      	ldr	r2, [r3, #4]
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	3318      	adds	r3, #24
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d103      	bne.n	8004a12 <xTaskResumeAll+0x86>
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	6a1a      	ldr	r2, [r3, #32]
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	2200      	movs	r2, #0
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	1e5a      	subs	r2, r3, #1
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	60fb      	str	r3, [r7, #12]
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	69fa      	ldr	r2, [r7, #28]
 8004a2e:	68d2      	ldr	r2, [r2, #12]
 8004a30:	609a      	str	r2, [r3, #8]
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	69fa      	ldr	r2, [r7, #28]
 8004a38:	6892      	ldr	r2, [r2, #8]
 8004a3a:	605a      	str	r2, [r3, #4]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	685a      	ldr	r2, [r3, #4]
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	3304      	adds	r3, #4
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d103      	bne.n	8004a50 <xTaskResumeAll+0xc4>
 8004a48:	69fb      	ldr	r3, [r7, #28]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	605a      	str	r2, [r3, #4]
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2200      	movs	r2, #0
 8004a54:	615a      	str	r2, [r3, #20]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	1e5a      	subs	r2, r3, #1
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	2201      	movs	r2, #1
 8004a66:	409a      	lsls	r2, r3
 8004a68:	4b3a      	ldr	r3, [pc, #232]	; (8004b54 <xTaskResumeAll+0x1c8>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	4a39      	ldr	r2, [pc, #228]	; (8004b54 <xTaskResumeAll+0x1c8>)
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a76:	4938      	ldr	r1, [pc, #224]	; (8004b58 <xTaskResumeAll+0x1cc>)
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	3304      	adds	r3, #4
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	69fb      	ldr	r3, [r7, #28]
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	609a      	str	r2, [r3, #8]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	60da      	str	r2, [r3, #12]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	69fa      	ldr	r2, [r7, #28]
 8004a9c:	3204      	adds	r2, #4
 8004a9e:	605a      	str	r2, [r3, #4]
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	1d1a      	adds	r2, r3, #4
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	609a      	str	r2, [r3, #8]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	4a28      	ldr	r2, [pc, #160]	; (8004b58 <xTaskResumeAll+0x1cc>)
 8004ab6:	441a      	add	r2, r3
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	615a      	str	r2, [r3, #20]
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac0:	4925      	ldr	r1, [pc, #148]	; (8004b58 <xTaskResumeAll+0x1cc>)
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	440b      	add	r3, r1
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	1c59      	adds	r1, r3, #1
 8004ad0:	4821      	ldr	r0, [pc, #132]	; (8004b58 <xTaskResumeAll+0x1cc>)
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	4413      	add	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4403      	add	r3, r0
 8004adc:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	4b1e      	ldr	r3, [pc, #120]	; (8004b5c <xTaskResumeAll+0x1d0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d302      	bcc.n	8004af2 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8004aec:	4b1c      	ldr	r3, [pc, #112]	; (8004b60 <xTaskResumeAll+0x1d4>)
 8004aee:	2201      	movs	r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004af2:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <xTaskResumeAll+0x1c4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f47f af70 	bne.w	80049dc <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d001      	beq.n	8004b06 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004b02:	f000 fb91 	bl	8005228 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004b06:	4b17      	ldr	r3, [pc, #92]	; (8004b64 <xTaskResumeAll+0x1d8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d010      	beq.n	8004b34 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004b12:	f000 f829 	bl	8004b68 <xTaskIncrementTick>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8004b1c:	4b10      	ldr	r3, [pc, #64]	; (8004b60 <xTaskResumeAll+0x1d4>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f1      	bne.n	8004b12 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	; (8004b64 <xTaskResumeAll+0x1d8>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004b34:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <xTaskResumeAll+0x1d4>)
 8004b36:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004b38:	f000 fdda 	bl	80056f0 <vPortExitCritical>

    return xAlreadyYielded;
 8004b3c:	697b      	ldr	r3, [r7, #20]
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3720      	adds	r7, #32
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	20000248 	.word	0x20000248
 8004b4c:	20000220 	.word	0x20000220
 8004b50:	200001e0 	.word	0x200001e0
 8004b54:	20000228 	.word	0x20000228
 8004b58:	20000174 	.word	0x20000174
 8004b5c:	20000170 	.word	0x20000170
 8004b60:	20000234 	.word	0x20000234
 8004b64:	20000230 	.word	0x20000230

08004b68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08a      	sub	sp, #40	; 0x28
 8004b6c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b72:	4b6e      	ldr	r3, [pc, #440]	; (8004d2c <xTaskIncrementTick+0x1c4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	f040 80cd 	bne.w	8004d16 <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b7c:	4b6c      	ldr	r3, [pc, #432]	; (8004d30 <xTaskIncrementTick+0x1c8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004b84:	4a6a      	ldr	r2, [pc, #424]	; (8004d30 <xTaskIncrementTick+0x1c8>)
 8004b86:	6a3b      	ldr	r3, [r7, #32]
 8004b88:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d120      	bne.n	8004bd2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004b90:	4b68      	ldr	r3, [pc, #416]	; (8004d34 <xTaskIncrementTick+0x1cc>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <xTaskIncrementTick+0x48>
        __asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	607b      	str	r3, [r7, #4]
    }
 8004bac:	bf00      	nop
 8004bae:	e7fe      	b.n	8004bae <xTaskIncrementTick+0x46>
 8004bb0:	4b60      	ldr	r3, [pc, #384]	; (8004d34 <xTaskIncrementTick+0x1cc>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	4b60      	ldr	r3, [pc, #384]	; (8004d38 <xTaskIncrementTick+0x1d0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a5e      	ldr	r2, [pc, #376]	; (8004d34 <xTaskIncrementTick+0x1cc>)
 8004bbc:	6013      	str	r3, [r2, #0]
 8004bbe:	4a5e      	ldr	r2, [pc, #376]	; (8004d38 <xTaskIncrementTick+0x1d0>)
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	4b5d      	ldr	r3, [pc, #372]	; (8004d3c <xTaskIncrementTick+0x1d4>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	4a5c      	ldr	r2, [pc, #368]	; (8004d3c <xTaskIncrementTick+0x1d4>)
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	f000 fb2b 	bl	8005228 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004bd2:	4b5b      	ldr	r3, [pc, #364]	; (8004d40 <xTaskIncrementTick+0x1d8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	6a3a      	ldr	r2, [r7, #32]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	f0c0 80a1 	bcc.w	8004d20 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bde:	4b55      	ldr	r3, [pc, #340]	; (8004d34 <xTaskIncrementTick+0x1cc>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d104      	bne.n	8004bf2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be8:	4b55      	ldr	r3, [pc, #340]	; (8004d40 <xTaskIncrementTick+0x1d8>)
 8004bea:	f04f 32ff 	mov.w	r2, #4294967295
 8004bee:	601a      	str	r2, [r3, #0]
                    break;
 8004bf0:	e096      	b.n	8004d20 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bf2:	4b50      	ldr	r3, [pc, #320]	; (8004d34 <xTaskIncrementTick+0x1cc>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004c02:	6a3a      	ldr	r2, [r7, #32]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d203      	bcs.n	8004c12 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004c0a:	4a4d      	ldr	r2, [pc, #308]	; (8004d40 <xTaskIncrementTick+0x1d8>)
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004c10:	e086      	b.n	8004d20 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	68d2      	ldr	r2, [r2, #12]
 8004c20:	609a      	str	r2, [r3, #8]
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	6892      	ldr	r2, [r2, #8]
 8004c2a:	605a      	str	r2, [r3, #4]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	685a      	ldr	r2, [r3, #4]
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	3304      	adds	r3, #4
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d103      	bne.n	8004c40 <xTaskIncrementTick+0xd8>
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	68da      	ldr	r2, [r3, #12]
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	605a      	str	r2, [r3, #4]
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	2200      	movs	r2, #0
 8004c44:	615a      	str	r2, [r3, #20]
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	1e5a      	subs	r2, r3, #1
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c50:	69bb      	ldr	r3, [r7, #24]
 8004c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01e      	beq.n	8004c96 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004c58:	69bb      	ldr	r3, [r7, #24]
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	6a12      	ldr	r2, [r2, #32]
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	69d2      	ldr	r2, [r2, #28]
 8004c70:	605a      	str	r2, [r3, #4]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	3318      	adds	r3, #24
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d103      	bne.n	8004c86 <xTaskIncrementTick+0x11e>
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	6a1a      	ldr	r2, [r3, #32]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	629a      	str	r2, [r3, #40]	; 0x28
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	1e5a      	subs	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	409a      	lsls	r2, r3
 8004c9e:	4b29      	ldr	r3, [pc, #164]	; (8004d44 <xTaskIncrementTick+0x1dc>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	4a27      	ldr	r2, [pc, #156]	; (8004d44 <xTaskIncrementTick+0x1dc>)
 8004ca6:	6013      	str	r3, [r2, #0]
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cac:	4926      	ldr	r1, [pc, #152]	; (8004d48 <xTaskIncrementTick+0x1e0>)
 8004cae:	4613      	mov	r3, r2
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	3304      	adds	r3, #4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	60bb      	str	r3, [r7, #8]
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	609a      	str	r2, [r3, #8]
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	689a      	ldr	r2, [r3, #8]
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	60da      	str	r2, [r3, #12]
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	3204      	adds	r2, #4
 8004cd4:	605a      	str	r2, [r3, #4]
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	1d1a      	adds	r2, r3, #4
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	609a      	str	r2, [r3, #8]
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	4a17      	ldr	r2, [pc, #92]	; (8004d48 <xTaskIncrementTick+0x1e0>)
 8004cec:	441a      	add	r2, r3
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	615a      	str	r2, [r3, #20]
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cf6:	4914      	ldr	r1, [pc, #80]	; (8004d48 <xTaskIncrementTick+0x1e0>)
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	1c59      	adds	r1, r3, #1
 8004d06:	4810      	ldr	r0, [pc, #64]	; (8004d48 <xTaskIncrementTick+0x1e0>)
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4403      	add	r3, r0
 8004d12:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d14:	e763      	b.n	8004bde <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004d16:	4b0d      	ldr	r3, [pc, #52]	; (8004d4c <xTaskIncrementTick+0x1e4>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	4a0b      	ldr	r2, [pc, #44]	; (8004d4c <xTaskIncrementTick+0x1e4>)
 8004d1e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3728      	adds	r7, #40	; 0x28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000248 	.word	0x20000248
 8004d30:	20000224 	.word	0x20000224
 8004d34:	200001d8 	.word	0x200001d8
 8004d38:	200001dc 	.word	0x200001dc
 8004d3c:	20000238 	.word	0x20000238
 8004d40:	20000240 	.word	0x20000240
 8004d44:	20000228 	.word	0x20000228
 8004d48:	20000174 	.word	0x20000174
 8004d4c:	20000230 	.word	0x20000230

08004d50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d50:	b480      	push	{r7}
 8004d52:	b087      	sub	sp, #28
 8004d54:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d56:	4b26      	ldr	r3, [pc, #152]	; (8004df0 <vTaskSwitchContext+0xa0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004d5e:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <vTaskSwitchContext+0xa4>)
 8004d60:	2201      	movs	r2, #1
 8004d62:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004d64:	e03f      	b.n	8004de6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004d66:	4b23      	ldr	r3, [pc, #140]	; (8004df4 <vTaskSwitchContext+0xa4>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d6c:	4b22      	ldr	r3, [pc, #136]	; (8004df8 <vTaskSwitchContext+0xa8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	fab3 f383 	clz	r3, r3
 8004d78:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004d7a:	7afb      	ldrb	r3, [r7, #11]
 8004d7c:	f1c3 031f 	rsb	r3, r3, #31
 8004d80:	617b      	str	r3, [r7, #20]
 8004d82:	491e      	ldr	r1, [pc, #120]	; (8004dfc <vTaskSwitchContext+0xac>)
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10a      	bne.n	8004dac <vTaskSwitchContext+0x5c>
        __asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	607b      	str	r3, [r7, #4]
    }
 8004da8:	bf00      	nop
 8004daa:	e7fe      	b.n	8004daa <vTaskSwitchContext+0x5a>
 8004dac:	697a      	ldr	r2, [r7, #20]
 8004dae:	4613      	mov	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	4a11      	ldr	r2, [pc, #68]	; (8004dfc <vTaskSwitchContext+0xac>)
 8004db8:	4413      	add	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	605a      	str	r2, [r3, #4]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	3308      	adds	r3, #8
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d104      	bne.n	8004ddc <vTaskSwitchContext+0x8c>
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	605a      	str	r2, [r3, #4]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	4a07      	ldr	r2, [pc, #28]	; (8004e00 <vTaskSwitchContext+0xb0>)
 8004de4:	6013      	str	r3, [r2, #0]
}
 8004de6:	bf00      	nop
 8004de8:	371c      	adds	r7, #28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr
 8004df0:	20000248 	.word	0x20000248
 8004df4:	20000234 	.word	0x20000234
 8004df8:	20000228 	.word	0x20000228
 8004dfc:	20000174 	.word	0x20000174
 8004e00:	20000170 	.word	0x20000170

08004e04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	60fb      	str	r3, [r7, #12]
    }
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e2a:	4b07      	ldr	r3, [pc, #28]	; (8004e48 <vTaskPlaceOnEventList+0x44>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3318      	adds	r3, #24
 8004e30:	4619      	mov	r1, r3
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7fe feae 	bl	8003b94 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e38:	2101      	movs	r1, #1
 8004e3a:	6838      	ldr	r0, [r7, #0]
 8004e3c:	f000 fab2 	bl	80053a4 <prvAddCurrentTaskToDelayedList>
}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	20000170 	.word	0x20000170

08004e4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b08b      	sub	sp, #44	; 0x2c
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60fb      	str	r3, [r7, #12]
    }
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	6a3b      	ldr	r3, [r7, #32]
 8004e80:	69db      	ldr	r3, [r3, #28]
 8004e82:	6a3a      	ldr	r2, [r7, #32]
 8004e84:	6a12      	ldr	r2, [r2, #32]
 8004e86:	609a      	str	r2, [r3, #8]
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	6a1b      	ldr	r3, [r3, #32]
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	69d2      	ldr	r2, [r2, #28]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	3318      	adds	r3, #24
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d103      	bne.n	8004ea6 <xTaskRemoveFromEventList+0x5a>
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	6a1a      	ldr	r2, [r3, #32]
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	605a      	str	r2, [r3, #4]
 8004ea6:	6a3b      	ldr	r3, [r7, #32]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	629a      	str	r2, [r3, #40]	; 0x28
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	1e5a      	subs	r2, r3, #1
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eb6:	4b4a      	ldr	r3, [pc, #296]	; (8004fe0 <xTaskRemoveFromEventList+0x194>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d15e      	bne.n	8004f7c <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	695b      	ldr	r3, [r3, #20]
 8004ec2:	617b      	str	r3, [r7, #20]
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	6a3a      	ldr	r2, [r7, #32]
 8004eca:	68d2      	ldr	r2, [r2, #12]
 8004ecc:	609a      	str	r2, [r3, #8]
 8004ece:	6a3b      	ldr	r3, [r7, #32]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	6a3a      	ldr	r2, [r7, #32]
 8004ed4:	6892      	ldr	r2, [r2, #8]
 8004ed6:	605a      	str	r2, [r3, #4]
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	685a      	ldr	r2, [r3, #4]
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d103      	bne.n	8004eec <xTaskRemoveFromEventList+0xa0>
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	605a      	str	r2, [r3, #4]
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	615a      	str	r2, [r3, #20]
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1e5a      	subs	r2, r3, #1
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f00:	2201      	movs	r2, #1
 8004f02:	409a      	lsls	r2, r3
 8004f04:	4b37      	ldr	r3, [pc, #220]	; (8004fe4 <xTaskRemoveFromEventList+0x198>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	4a36      	ldr	r2, [pc, #216]	; (8004fe4 <xTaskRemoveFromEventList+0x198>)
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	6a3b      	ldr	r3, [r7, #32]
 8004f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f12:	4935      	ldr	r1, [pc, #212]	; (8004fe8 <xTaskRemoveFromEventList+0x19c>)
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	3304      	adds	r3, #4
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	6a3b      	ldr	r3, [r7, #32]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	609a      	str	r2, [r3, #8]
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	689a      	ldr	r2, [r3, #8]
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	60da      	str	r2, [r3, #12]
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	6a3a      	ldr	r2, [r7, #32]
 8004f38:	3204      	adds	r2, #4
 8004f3a:	605a      	str	r2, [r3, #4]
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	1d1a      	adds	r2, r3, #4
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	609a      	str	r2, [r3, #8]
 8004f44:	6a3b      	ldr	r3, [r7, #32]
 8004f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4a25      	ldr	r2, [pc, #148]	; (8004fe8 <xTaskRemoveFromEventList+0x19c>)
 8004f52:	441a      	add	r2, r3
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	615a      	str	r2, [r3, #20]
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5c:	4922      	ldr	r1, [pc, #136]	; (8004fe8 <xTaskRemoveFromEventList+0x19c>)
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	1c59      	adds	r1, r3, #1
 8004f6c:	481e      	ldr	r0, [pc, #120]	; (8004fe8 <xTaskRemoveFromEventList+0x19c>)
 8004f6e:	4613      	mov	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4403      	add	r3, r0
 8004f78:	6019      	str	r1, [r3, #0]
 8004f7a:	e01b      	b.n	8004fb4 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f7c:	4b1b      	ldr	r3, [pc, #108]	; (8004fec <xTaskRemoveFromEventList+0x1a0>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	61da      	str	r2, [r3, #28]
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	689a      	ldr	r2, [r3, #8]
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	621a      	str	r2, [r3, #32]
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	6a3a      	ldr	r2, [r7, #32]
 8004f96:	3218      	adds	r2, #24
 8004f98:	605a      	str	r2, [r3, #4]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	f103 0218 	add.w	r2, r3, #24
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	609a      	str	r2, [r3, #8]
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	4a11      	ldr	r2, [pc, #68]	; (8004fec <xTaskRemoveFromEventList+0x1a0>)
 8004fa8:	629a      	str	r2, [r3, #40]	; 0x28
 8004faa:	4b10      	ldr	r3, [pc, #64]	; (8004fec <xTaskRemoveFromEventList+0x1a0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	4a0e      	ldr	r2, [pc, #56]	; (8004fec <xTaskRemoveFromEventList+0x1a0>)
 8004fb2:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fb8:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <xTaskRemoveFromEventList+0x1a4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d905      	bls.n	8004fce <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004fc6:	4b0b      	ldr	r3, [pc, #44]	; (8004ff4 <xTaskRemoveFromEventList+0x1a8>)
 8004fc8:	2201      	movs	r2, #1
 8004fca:	601a      	str	r2, [r3, #0]
 8004fcc:	e001      	b.n	8004fd2 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	372c      	adds	r7, #44	; 0x2c
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bc80      	pop	{r7}
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	20000248 	.word	0x20000248
 8004fe4:	20000228 	.word	0x20000228
 8004fe8:	20000174 	.word	0x20000174
 8004fec:	200001e0 	.word	0x200001e0
 8004ff0:	20000170 	.word	0x20000170
 8004ff4:	20000234 	.word	0x20000234

08004ff8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <vTaskInternalSetTimeOutState+0x24>)
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005008:	4b05      	ldr	r3, [pc, #20]	; (8005020 <vTaskInternalSetTimeOutState+0x28>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	605a      	str	r2, [r3, #4]
}
 8005010:	bf00      	nop
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	bc80      	pop	{r7}
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000238 	.word	0x20000238
 8005020:	20000224 	.word	0x20000224

08005024 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d10a      	bne.n	800504a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	613b      	str	r3, [r7, #16]
    }
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	60fb      	str	r3, [r7, #12]
    }
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8005066:	f000 fb13 	bl	8005690 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800506a:	4b1f      	ldr	r3, [pc, #124]	; (80050e8 <xTaskCheckForTimeOut+0xc4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005082:	d102      	bne.n	800508a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8005084:	2300      	movs	r3, #0
 8005086:	61fb      	str	r3, [r7, #28]
 8005088:	e026      	b.n	80050d8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	4b17      	ldr	r3, [pc, #92]	; (80050ec <xTaskCheckForTimeOut+0xc8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d00a      	beq.n	80050ac <xTaskCheckForTimeOut+0x88>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	429a      	cmp	r2, r3
 800509e:	d305      	bcc.n	80050ac <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80050a0:	2301      	movs	r3, #1
 80050a2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	e015      	b.n	80050d8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	697a      	ldr	r2, [r7, #20]
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d20b      	bcs.n	80050ce <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	1ad2      	subs	r2, r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f7ff ff98 	bl	8004ff8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61fb      	str	r3, [r7, #28]
 80050cc:	e004      	b.n	80050d8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80050d4:	2301      	movs	r3, #1
 80050d6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80050d8:	f000 fb0a 	bl	80056f0 <vPortExitCritical>

    return xReturn;
 80050dc:	69fb      	ldr	r3, [r7, #28]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	20000224 	.word	0x20000224
 80050ec:	20000238 	.word	0x20000238

080050f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050f0:	b480      	push	{r7}
 80050f2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80050f4:	4b03      	ldr	r3, [pc, #12]	; (8005104 <vTaskMissedYield+0x14>)
 80050f6:	2201      	movs	r2, #1
 80050f8:	601a      	str	r2, [r3, #0]
}
 80050fa:	bf00      	nop
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bc80      	pop	{r7}
 8005100:	4770      	bx	lr
 8005102:	bf00      	nop
 8005104:	20000234 	.word	0x20000234

08005108 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005110:	f000 f84c 	bl	80051ac <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8005114:	4b04      	ldr	r3, [pc, #16]	; (8005128 <prvIdleTask+0x20>)
 8005116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005124:	e7f4      	b.n	8005110 <prvIdleTask+0x8>
 8005126:	bf00      	nop
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005132:	2300      	movs	r3, #0
 8005134:	607b      	str	r3, [r7, #4]
 8005136:	e00c      	b.n	8005152 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <prvInitialiseTaskLists+0x60>)
 8005144:	4413      	add	r3, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f7fe fcd6 	bl	8003af8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	3301      	adds	r3, #1
 8005150:	607b      	str	r3, [r7, #4]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b02      	cmp	r3, #2
 8005156:	d9ef      	bls.n	8005138 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005158:	480d      	ldr	r0, [pc, #52]	; (8005190 <prvInitialiseTaskLists+0x64>)
 800515a:	f7fe fccd 	bl	8003af8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800515e:	480d      	ldr	r0, [pc, #52]	; (8005194 <prvInitialiseTaskLists+0x68>)
 8005160:	f7fe fcca 	bl	8003af8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005164:	480c      	ldr	r0, [pc, #48]	; (8005198 <prvInitialiseTaskLists+0x6c>)
 8005166:	f7fe fcc7 	bl	8003af8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800516a:	480c      	ldr	r0, [pc, #48]	; (800519c <prvInitialiseTaskLists+0x70>)
 800516c:	f7fe fcc4 	bl	8003af8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005170:	480b      	ldr	r0, [pc, #44]	; (80051a0 <prvInitialiseTaskLists+0x74>)
 8005172:	f7fe fcc1 	bl	8003af8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005176:	4b0b      	ldr	r3, [pc, #44]	; (80051a4 <prvInitialiseTaskLists+0x78>)
 8005178:	4a05      	ldr	r2, [pc, #20]	; (8005190 <prvInitialiseTaskLists+0x64>)
 800517a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800517c:	4b0a      	ldr	r3, [pc, #40]	; (80051a8 <prvInitialiseTaskLists+0x7c>)
 800517e:	4a05      	ldr	r2, [pc, #20]	; (8005194 <prvInitialiseTaskLists+0x68>)
 8005180:	601a      	str	r2, [r3, #0]
}
 8005182:	bf00      	nop
 8005184:	3708      	adds	r7, #8
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000174 	.word	0x20000174
 8005190:	200001b0 	.word	0x200001b0
 8005194:	200001c4 	.word	0x200001c4
 8005198:	200001e0 	.word	0x200001e0
 800519c:	200001f4 	.word	0x200001f4
 80051a0:	2000020c 	.word	0x2000020c
 80051a4:	200001d8 	.word	0x200001d8
 80051a8:	200001dc 	.word	0x200001dc

080051ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b082      	sub	sp, #8
 80051b0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051b2:	e019      	b.n	80051e8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80051b4:	f000 fa6c 	bl	8005690 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b8:	4b10      	ldr	r3, [pc, #64]	; (80051fc <prvCheckTasksWaitingTermination+0x50>)
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3304      	adds	r3, #4
 80051c4:	4618      	mov	r0, r3
 80051c6:	f7fe fd1d 	bl	8003c04 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80051ca:	4b0d      	ldr	r3, [pc, #52]	; (8005200 <prvCheckTasksWaitingTermination+0x54>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3b01      	subs	r3, #1
 80051d0:	4a0b      	ldr	r2, [pc, #44]	; (8005200 <prvCheckTasksWaitingTermination+0x54>)
 80051d2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80051d4:	4b0b      	ldr	r3, [pc, #44]	; (8005204 <prvCheckTasksWaitingTermination+0x58>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3b01      	subs	r3, #1
 80051da:	4a0a      	ldr	r2, [pc, #40]	; (8005204 <prvCheckTasksWaitingTermination+0x58>)
 80051dc:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80051de:	f000 fa87 	bl	80056f0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f810 	bl	8005208 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051e8:	4b06      	ldr	r3, [pc, #24]	; (8005204 <prvCheckTasksWaitingTermination+0x58>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e1      	bne.n	80051b4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80051f0:	bf00      	nop
 80051f2:	bf00      	nop
 80051f4:	3708      	adds	r7, #8
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	200001f4 	.word	0x200001f4
 8005200:	20000220 	.word	0x20000220
 8005204:	20000208 	.word	0x20000208

08005208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005214:	4618      	mov	r0, r3
 8005216:	f000 fbdb 	bl	80059d0 <vPortFree>
                vPortFree( pxTCB );
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fbd8 	bl	80059d0 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005228:	b480      	push	{r7}
 800522a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800522c:	4b09      	ldr	r3, [pc, #36]	; (8005254 <prvResetNextTaskUnblockTime+0x2c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d104      	bne.n	8005240 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005236:	4b08      	ldr	r3, [pc, #32]	; (8005258 <prvResetNextTaskUnblockTime+0x30>)
 8005238:	f04f 32ff 	mov.w	r2, #4294967295
 800523c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800523e:	e005      	b.n	800524c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005240:	4b04      	ldr	r3, [pc, #16]	; (8005254 <prvResetNextTaskUnblockTime+0x2c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a03      	ldr	r2, [pc, #12]	; (8005258 <prvResetNextTaskUnblockTime+0x30>)
 800524a:	6013      	str	r3, [r2, #0]
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	bc80      	pop	{r7}
 8005252:	4770      	bx	lr
 8005254:	200001d8 	.word	0x200001d8
 8005258:	20000240 	.word	0x20000240

0800525c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800525c:	b580      	push	{r7, lr}
 800525e:	b088      	sub	sp, #32
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005268:	2300      	movs	r3, #0
 800526a:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 808c 	beq.w	800538c <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005274:	4b48      	ldr	r3, [pc, #288]	; (8005398 <xTaskPriorityDisinherit+0x13c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	69ba      	ldr	r2, [r7, #24]
 800527a:	429a      	cmp	r2, r3
 800527c:	d00a      	beq.n	8005294 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	613b      	str	r3, [r7, #16]
    }
 8005290:	bf00      	nop
 8005292:	e7fe      	b.n	8005292 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d10a      	bne.n	80052b2 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 800529c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a0:	f383 8811 	msr	BASEPRI, r3
 80052a4:	f3bf 8f6f 	isb	sy
 80052a8:	f3bf 8f4f 	dsb	sy
 80052ac:	60fb      	str	r3, [r7, #12]
    }
 80052ae:	bf00      	nop
 80052b0:	e7fe      	b.n	80052b0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052b6:	1e5a      	subs	r2, r3, #1
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d061      	beq.n	800538c <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d15d      	bne.n	800538c <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	3304      	adds	r3, #4
 80052d4:	4618      	mov	r0, r3
 80052d6:	f7fe fc95 	bl	8003c04 <uxListRemove>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	2201      	movs	r2, #1
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43da      	mvns	r2, r3
 80052ec:	4b2b      	ldr	r3, [pc, #172]	; (800539c <xTaskPriorityDisinherit+0x140>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4013      	ands	r3, r2
 80052f2:	4a2a      	ldr	r2, [pc, #168]	; (800539c <xTaskPriorityDisinherit+0x140>)
 80052f4:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005302:	f1c3 0203 	rsb	r2, r3, #3
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800530a:	69bb      	ldr	r3, [r7, #24]
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	2201      	movs	r2, #1
 8005310:	409a      	lsls	r2, r3
 8005312:	4b22      	ldr	r3, [pc, #136]	; (800539c <xTaskPriorityDisinherit+0x140>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4313      	orrs	r3, r2
 8005318:	4a20      	ldr	r2, [pc, #128]	; (800539c <xTaskPriorityDisinherit+0x140>)
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005320:	491f      	ldr	r1, [pc, #124]	; (80053a0 <xTaskPriorityDisinherit+0x144>)
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3304      	adds	r3, #4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	609a      	str	r2, [r3, #8]
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	60da      	str	r2, [r3, #12]
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	3204      	adds	r2, #4
 8005348:	605a      	str	r2, [r3, #4]
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1d1a      	adds	r2, r3, #4
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	609a      	str	r2, [r3, #8]
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4a10      	ldr	r2, [pc, #64]	; (80053a0 <xTaskPriorityDisinherit+0x144>)
 8005360:	441a      	add	r2, r3
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	615a      	str	r2, [r3, #20]
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536a:	490d      	ldr	r1, [pc, #52]	; (80053a0 <xTaskPriorityDisinherit+0x144>)
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	1c59      	adds	r1, r3, #1
 800537a:	4809      	ldr	r0, [pc, #36]	; (80053a0 <xTaskPriorityDisinherit+0x144>)
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4403      	add	r3, r0
 8005386:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005388:	2301      	movs	r3, #1
 800538a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800538c:	69fb      	ldr	r3, [r7, #28]
    }
 800538e:	4618      	mov	r0, r3
 8005390:	3720      	adds	r7, #32
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000170 	.word	0x20000170
 800539c:	20000228 	.word	0x20000228
 80053a0:	20000174 	.word	0x20000174

080053a4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80053ae:	4b36      	ldr	r3, [pc, #216]	; (8005488 <prvAddCurrentTaskToDelayedList+0xe4>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053b4:	4b35      	ldr	r3, [pc, #212]	; (800548c <prvAddCurrentTaskToDelayedList+0xe8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3304      	adds	r3, #4
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fe fc22 	bl	8003c04 <uxListRemove>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10b      	bne.n	80053de <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80053c6:	4b31      	ldr	r3, [pc, #196]	; (800548c <prvAddCurrentTaskToDelayedList+0xe8>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	2201      	movs	r2, #1
 80053ce:	fa02 f303 	lsl.w	r3, r2, r3
 80053d2:	43da      	mvns	r2, r3
 80053d4:	4b2e      	ldr	r3, [pc, #184]	; (8005490 <prvAddCurrentTaskToDelayedList+0xec>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4013      	ands	r3, r2
 80053da:	4a2d      	ldr	r2, [pc, #180]	; (8005490 <prvAddCurrentTaskToDelayedList+0xec>)
 80053dc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e4:	d124      	bne.n	8005430 <prvAddCurrentTaskToDelayedList+0x8c>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d021      	beq.n	8005430 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053ec:	4b29      	ldr	r3, [pc, #164]	; (8005494 <prvAddCurrentTaskToDelayedList+0xf0>)
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	4b26      	ldr	r3, [pc, #152]	; (800548c <prvAddCurrentTaskToDelayedList+0xe8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	609a      	str	r2, [r3, #8]
 80053fa:	4b24      	ldr	r3, [pc, #144]	; (800548c <prvAddCurrentTaskToDelayedList+0xe8>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	6892      	ldr	r2, [r2, #8]
 8005402:	60da      	str	r2, [r3, #12]
 8005404:	4b21      	ldr	r3, [pc, #132]	; (800548c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	3204      	adds	r2, #4
 800540e:	605a      	str	r2, [r3, #4]
 8005410:	4b1e      	ldr	r3, [pc, #120]	; (800548c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	1d1a      	adds	r2, r3, #4
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	609a      	str	r2, [r3, #8]
 800541a:	4b1c      	ldr	r3, [pc, #112]	; (800548c <prvAddCurrentTaskToDelayedList+0xe8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1d      	ldr	r2, [pc, #116]	; (8005494 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005420:	615a      	str	r2, [r3, #20]
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <prvAddCurrentTaskToDelayedList+0xf0>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3301      	adds	r3, #1
 8005428:	4a1a      	ldr	r2, [pc, #104]	; (8005494 <prvAddCurrentTaskToDelayedList+0xf0>)
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800542e:	e026      	b.n	800547e <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4413      	add	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005438:	4b14      	ldr	r3, [pc, #80]	; (800548c <prvAddCurrentTaskToDelayedList+0xe8>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	429a      	cmp	r2, r3
 8005446:	d209      	bcs.n	800545c <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005448:	4b13      	ldr	r3, [pc, #76]	; (8005498 <prvAddCurrentTaskToDelayedList+0xf4>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	4b0f      	ldr	r3, [pc, #60]	; (800548c <prvAddCurrentTaskToDelayedList+0xe8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f7fe fb9d 	bl	8003b94 <vListInsert>
}
 800545a:	e010      	b.n	800547e <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800545c:	4b0f      	ldr	r3, [pc, #60]	; (800549c <prvAddCurrentTaskToDelayedList+0xf8>)
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	4b0a      	ldr	r3, [pc, #40]	; (800548c <prvAddCurrentTaskToDelayedList+0xe8>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	3304      	adds	r3, #4
 8005466:	4619      	mov	r1, r3
 8005468:	4610      	mov	r0, r2
 800546a:	f7fe fb93 	bl	8003b94 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800546e:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	429a      	cmp	r2, r3
 8005476:	d202      	bcs.n	800547e <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 8005478:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <prvAddCurrentTaskToDelayedList+0xfc>)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6013      	str	r3, [r2, #0]
}
 800547e:	bf00      	nop
 8005480:	3718      	adds	r7, #24
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000224 	.word	0x20000224
 800548c:	20000170 	.word	0x20000170
 8005490:	20000228 	.word	0x20000228
 8005494:	2000020c 	.word	0x2000020c
 8005498:	200001dc 	.word	0x200001dc
 800549c:	200001d8 	.word	0x200001d8
 80054a0:	20000240 	.word	0x20000240

080054a4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	3b04      	subs	r3, #4
 80054b4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054bc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3b04      	subs	r3, #4
 80054c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	f023 0201 	bic.w	r2, r3, #1
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3b04      	subs	r3, #4
 80054d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80054d4:	4a08      	ldr	r2, [pc, #32]	; (80054f8 <pxPortInitialiseStack+0x54>)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	3b14      	subs	r3, #20
 80054de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80054e0:	687a      	ldr	r2, [r7, #4]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3b20      	subs	r3, #32
 80054ea:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80054ec:	68fb      	ldr	r3, [r7, #12]
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr
 80054f8:	080054fd 	.word	0x080054fd

080054fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80054fc:	b480      	push	{r7}
 80054fe:	b085      	sub	sp, #20
 8005500:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8005502:	2300      	movs	r3, #0
 8005504:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <prvTaskExitError+0x54>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800550e:	d00a      	beq.n	8005526 <prvTaskExitError+0x2a>
        __asm volatile
 8005510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005514:	f383 8811 	msr	BASEPRI, r3
 8005518:	f3bf 8f6f 	isb	sy
 800551c:	f3bf 8f4f 	dsb	sy
 8005520:	60fb      	str	r3, [r7, #12]
    }
 8005522:	bf00      	nop
 8005524:	e7fe      	b.n	8005524 <prvTaskExitError+0x28>
        __asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	60bb      	str	r3, [r7, #8]
    }
 8005538:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800553a:	bf00      	nop
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0fc      	beq.n	800553c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005542:	bf00      	nop
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	bc80      	pop	{r7}
 800554c:	4770      	bx	lr
 800554e:	bf00      	nop
 8005550:	20000030 	.word	0x20000030
	...

08005560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005560:	4b07      	ldr	r3, [pc, #28]	; (8005580 <pxCurrentTCBConst2>)
 8005562:	6819      	ldr	r1, [r3, #0]
 8005564:	6808      	ldr	r0, [r1, #0]
 8005566:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800556a:	f380 8809 	msr	PSP, r0
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f04f 0000 	mov.w	r0, #0
 8005576:	f380 8811 	msr	BASEPRI, r0
 800557a:	f04e 0e0d 	orr.w	lr, lr, #13
 800557e:	4770      	bx	lr

08005580 <pxCurrentTCBConst2>:
 8005580:	20000170 	.word	0x20000170
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop

08005588 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8005588:	4806      	ldr	r0, [pc, #24]	; (80055a4 <prvPortStartFirstTask+0x1c>)
 800558a:	6800      	ldr	r0, [r0, #0]
 800558c:	6800      	ldr	r0, [r0, #0]
 800558e:	f380 8808 	msr	MSP, r0
 8005592:	b662      	cpsie	i
 8005594:	b661      	cpsie	f
 8005596:	f3bf 8f4f 	dsb	sy
 800559a:	f3bf 8f6f 	isb	sy
 800559e:	df00      	svc	0
 80055a0:	bf00      	nop
 80055a2:	0000      	.short	0x0000
 80055a4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80055a8:	bf00      	nop
 80055aa:	bf00      	nop

080055ac <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80055b2:	4b32      	ldr	r3, [pc, #200]	; (800567c <xPortStartScheduler+0xd0>)
 80055b4:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	22ff      	movs	r2, #255	; 0xff
 80055c2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80055cc:	78fb      	ldrb	r3, [r7, #3]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055d4:	b2da      	uxtb	r2, r3
 80055d6:	4b2a      	ldr	r3, [pc, #168]	; (8005680 <xPortStartScheduler+0xd4>)
 80055d8:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055da:	4b2a      	ldr	r3, [pc, #168]	; (8005684 <xPortStartScheduler+0xd8>)
 80055dc:	2207      	movs	r2, #7
 80055de:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055e0:	e009      	b.n	80055f6 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80055e2:	4b28      	ldr	r3, [pc, #160]	; (8005684 <xPortStartScheduler+0xd8>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	4a26      	ldr	r2, [pc, #152]	; (8005684 <xPortStartScheduler+0xd8>)
 80055ea:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055ec:	78fb      	ldrb	r3, [r7, #3]
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055f6:	78fb      	ldrb	r3, [r7, #3]
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fe:	2b80      	cmp	r3, #128	; 0x80
 8005600:	d0ef      	beq.n	80055e2 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005602:	4b20      	ldr	r3, [pc, #128]	; (8005684 <xPortStartScheduler+0xd8>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f1c3 0307 	rsb	r3, r3, #7
 800560a:	2b04      	cmp	r3, #4
 800560c:	d00a      	beq.n	8005624 <xPortStartScheduler+0x78>
        __asm volatile
 800560e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	60bb      	str	r3, [r7, #8]
    }
 8005620:	bf00      	nop
 8005622:	e7fe      	b.n	8005622 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005624:	4b17      	ldr	r3, [pc, #92]	; (8005684 <xPortStartScheduler+0xd8>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	021b      	lsls	r3, r3, #8
 800562a:	4a16      	ldr	r2, [pc, #88]	; (8005684 <xPortStartScheduler+0xd8>)
 800562c:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800562e:	4b15      	ldr	r3, [pc, #84]	; (8005684 <xPortStartScheduler+0xd8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005636:	4a13      	ldr	r2, [pc, #76]	; (8005684 <xPortStartScheduler+0xd8>)
 8005638:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	b2da      	uxtb	r2, r3
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005642:	4b11      	ldr	r3, [pc, #68]	; (8005688 <xPortStartScheduler+0xdc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a10      	ldr	r2, [pc, #64]	; (8005688 <xPortStartScheduler+0xdc>)
 8005648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800564c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800564e:	4b0e      	ldr	r3, [pc, #56]	; (8005688 <xPortStartScheduler+0xdc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a0d      	ldr	r2, [pc, #52]	; (8005688 <xPortStartScheduler+0xdc>)
 8005654:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005658:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800565a:	f000 f8b7 	bl	80057cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800565e:	4b0b      	ldr	r3, [pc, #44]	; (800568c <xPortStartScheduler+0xe0>)
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005664:	f7ff ff90 	bl	8005588 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005668:	f7ff fb72 	bl	8004d50 <vTaskSwitchContext>
    prvTaskExitError();
 800566c:	f7ff ff46 	bl	80054fc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005670:	2300      	movs	r3, #0
}
 8005672:	4618      	mov	r0, r3
 8005674:	3710      	adds	r7, #16
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}
 800567a:	bf00      	nop
 800567c:	e000e400 	.word	0xe000e400
 8005680:	2000024c 	.word	0x2000024c
 8005684:	20000250 	.word	0x20000250
 8005688:	e000ed20 	.word	0xe000ed20
 800568c:	20000030 	.word	0x20000030

08005690 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
        __asm volatile
 8005696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569a:	f383 8811 	msr	BASEPRI, r3
 800569e:	f3bf 8f6f 	isb	sy
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	607b      	str	r3, [r7, #4]
    }
 80056a8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80056aa:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <vPortEnterCritical+0x58>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3301      	adds	r3, #1
 80056b0:	4a0d      	ldr	r2, [pc, #52]	; (80056e8 <vPortEnterCritical+0x58>)
 80056b2:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <vPortEnterCritical+0x58>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d10f      	bne.n	80056dc <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056bc:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <vPortEnterCritical+0x5c>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <vPortEnterCritical+0x4c>
        __asm volatile
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	603b      	str	r3, [r7, #0]
    }
 80056d8:	bf00      	nop
 80056da:	e7fe      	b.n	80056da <vPortEnterCritical+0x4a>
    }
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	20000030 	.word	0x20000030
 80056ec:	e000ed04 	.word	0xe000ed04

080056f0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <vPortExitCritical+0x4c>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <vPortExitCritical+0x24>
        __asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	607b      	str	r3, [r7, #4]
    }
 8005710:	bf00      	nop
 8005712:	e7fe      	b.n	8005712 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <vPortExitCritical+0x4c>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3b01      	subs	r3, #1
 800571a:	4a08      	ldr	r2, [pc, #32]	; (800573c <vPortExitCritical+0x4c>)
 800571c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800571e:	4b07      	ldr	r3, [pc, #28]	; (800573c <vPortExitCritical+0x4c>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d105      	bne.n	8005732 <vPortExitCritical+0x42>
 8005726:	2300      	movs	r3, #0
 8005728:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005730:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005732:	bf00      	nop
 8005734:	370c      	adds	r7, #12
 8005736:	46bd      	mov	sp, r7
 8005738:	bc80      	pop	{r7}
 800573a:	4770      	bx	lr
 800573c:	20000030 	.word	0x20000030

08005740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005740:	f3ef 8009 	mrs	r0, PSP
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	4b0d      	ldr	r3, [pc, #52]	; (8005780 <pxCurrentTCBConst>)
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005750:	6010      	str	r0, [r2, #0]
 8005752:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005756:	f04f 0050 	mov.w	r0, #80	; 0x50
 800575a:	f380 8811 	msr	BASEPRI, r0
 800575e:	f7ff faf7 	bl	8004d50 <vTaskSwitchContext>
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f380 8811 	msr	BASEPRI, r0
 800576a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800576e:	6819      	ldr	r1, [r3, #0]
 8005770:	6808      	ldr	r0, [r1, #0]
 8005772:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005776:	f380 8809 	msr	PSP, r0
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	4770      	bx	lr

08005780 <pxCurrentTCBConst>:
 8005780:	20000170 	.word	0x20000170
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005784:	bf00      	nop
 8005786:	bf00      	nop

08005788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
        __asm volatile
 800578e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005792:	f383 8811 	msr	BASEPRI, r3
 8005796:	f3bf 8f6f 	isb	sy
 800579a:	f3bf 8f4f 	dsb	sy
 800579e:	607b      	str	r3, [r7, #4]
    }
 80057a0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80057a2:	f7ff f9e1 	bl	8004b68 <xTaskIncrementTick>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d003      	beq.n	80057b4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057ac:	4b06      	ldr	r3, [pc, #24]	; (80057c8 <SysTick_Handler+0x40>)
 80057ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b2:	601a      	str	r2, [r3, #0]
 80057b4:	2300      	movs	r3, #0
 80057b6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	f383 8811 	msr	BASEPRI, r3
    }
 80057be:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80057c0:	bf00      	nop
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057d0:	4b0a      	ldr	r3, [pc, #40]	; (80057fc <vPortSetupTimerInterrupt+0x30>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057d6:	4b0a      	ldr	r3, [pc, #40]	; (8005800 <vPortSetupTimerInterrupt+0x34>)
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <vPortSetupTimerInterrupt+0x38>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a09      	ldr	r2, [pc, #36]	; (8005808 <vPortSetupTimerInterrupt+0x3c>)
 80057e2:	fba2 2303 	umull	r2, r3, r2, r3
 80057e6:	095b      	lsrs	r3, r3, #5
 80057e8:	4a08      	ldr	r2, [pc, #32]	; (800580c <vPortSetupTimerInterrupt+0x40>)
 80057ea:	3b01      	subs	r3, #1
 80057ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057ee:	4b03      	ldr	r3, [pc, #12]	; (80057fc <vPortSetupTimerInterrupt+0x30>)
 80057f0:	2207      	movs	r2, #7
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	bf00      	nop
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr
 80057fc:	e000e010 	.word	0xe000e010
 8005800:	e000e018 	.word	0xe000e018
 8005804:	20000020 	.word	0x20000020
 8005808:	10624dd3 	.word	0x10624dd3
 800580c:	e000e014 	.word	0xe000e014

08005810 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b08a      	sub	sp, #40	; 0x28
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005818:	2300      	movs	r3, #0
 800581a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800581c:	f7ff f8a8 	bl	8004970 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005820:	4b65      	ldr	r3, [pc, #404]	; (80059b8 <pvPortMalloc+0x1a8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005828:	f000 f934 	bl	8005a94 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800582c:	4b63      	ldr	r3, [pc, #396]	; (80059bc <pvPortMalloc+0x1ac>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4013      	ands	r3, r2
 8005834:	2b00      	cmp	r3, #0
 8005836:	f040 80a7 	bne.w	8005988 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d02d      	beq.n	800589c <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005840:	2208      	movs	r2, #8
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	429a      	cmp	r2, r3
 800584a:	d227      	bcs.n	800589c <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800584c:	2208      	movs	r2, #8
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4413      	add	r3, r2
 8005852:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f003 0307 	and.w	r3, r3, #7
 800585a:	2b00      	cmp	r3, #0
 800585c:	d021      	beq.n	80058a2 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f023 0307 	bic.w	r3, r3, #7
 8005864:	3308      	adds	r3, #8
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	429a      	cmp	r2, r3
 800586a:	d214      	bcs.n	8005896 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f023 0307 	bic.w	r3, r3, #7
 8005872:	3308      	adds	r3, #8
 8005874:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	2b00      	cmp	r3, #0
 800587e:	d010      	beq.n	80058a2 <pvPortMalloc+0x92>
        __asm volatile
 8005880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005884:	f383 8811 	msr	BASEPRI, r3
 8005888:	f3bf 8f6f 	isb	sy
 800588c:	f3bf 8f4f 	dsb	sy
 8005890:	617b      	str	r3, [r7, #20]
    }
 8005892:	bf00      	nop
 8005894:	e7fe      	b.n	8005894 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800589a:	e002      	b.n	80058a2 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	607b      	str	r3, [r7, #4]
 80058a0:	e000      	b.n	80058a4 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058a2:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d06e      	beq.n	8005988 <pvPortMalloc+0x178>
 80058aa:	4b45      	ldr	r3, [pc, #276]	; (80059c0 <pvPortMalloc+0x1b0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d869      	bhi.n	8005988 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80058b4:	4b43      	ldr	r3, [pc, #268]	; (80059c4 <pvPortMalloc+0x1b4>)
 80058b6:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80058b8:	4b42      	ldr	r3, [pc, #264]	; (80059c4 <pvPortMalloc+0x1b4>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058be:	e004      	b.n	80058ca <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80058c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c2:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80058c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	687a      	ldr	r2, [r7, #4]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d903      	bls.n	80058dc <pvPortMalloc+0xcc>
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1f1      	bne.n	80058c0 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80058dc:	4b36      	ldr	r3, [pc, #216]	; (80059b8 <pvPortMalloc+0x1a8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d050      	beq.n	8005988 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2208      	movs	r2, #8
 80058ec:	4413      	add	r3, r2
 80058ee:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	2308      	movs	r3, #8
 8005902:	005b      	lsls	r3, r3, #1
 8005904:	429a      	cmp	r2, r3
 8005906:	d91f      	bls.n	8005948 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4413      	add	r3, r2
 800590e:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f003 0307 	and.w	r3, r3, #7
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <pvPortMalloc+0x120>
        __asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	613b      	str	r3, [r7, #16]
    }
 800592c:	bf00      	nop
 800592e:	e7fe      	b.n	800592e <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	1ad2      	subs	r2, r2, r3
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005942:	69b8      	ldr	r0, [r7, #24]
 8005944:	f000 f908 	bl	8005b58 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005948:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <pvPortMalloc+0x1b0>)
 800594a:	681a      	ldr	r2, [r3, #0]
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	4a1b      	ldr	r2, [pc, #108]	; (80059c0 <pvPortMalloc+0x1b0>)
 8005954:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005956:	4b1a      	ldr	r3, [pc, #104]	; (80059c0 <pvPortMalloc+0x1b0>)
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	4b1b      	ldr	r3, [pc, #108]	; (80059c8 <pvPortMalloc+0x1b8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	429a      	cmp	r2, r3
 8005960:	d203      	bcs.n	800596a <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005962:	4b17      	ldr	r3, [pc, #92]	; (80059c0 <pvPortMalloc+0x1b0>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <pvPortMalloc+0x1b8>)
 8005968:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800596a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596c:	685a      	ldr	r2, [r3, #4]
 800596e:	4b13      	ldr	r3, [pc, #76]	; (80059bc <pvPortMalloc+0x1ac>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	431a      	orrs	r2, r3
 8005974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005976:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	2200      	movs	r2, #0
 800597c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800597e:	4b13      	ldr	r3, [pc, #76]	; (80059cc <pvPortMalloc+0x1bc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3301      	adds	r3, #1
 8005984:	4a11      	ldr	r2, [pc, #68]	; (80059cc <pvPortMalloc+0x1bc>)
 8005986:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005988:	f7ff f800 	bl	800498c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	f003 0307 	and.w	r3, r3, #7
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <pvPortMalloc+0x19c>
        __asm volatile
 8005996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599a:	f383 8811 	msr	BASEPRI, r3
 800599e:	f3bf 8f6f 	isb	sy
 80059a2:	f3bf 8f4f 	dsb	sy
 80059a6:	60fb      	str	r3, [r7, #12]
    }
 80059a8:	bf00      	nop
 80059aa:	e7fe      	b.n	80059aa <pvPortMalloc+0x19a>
    return pvReturn;
 80059ac:	69fb      	ldr	r3, [r7, #28]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3728      	adds	r7, #40	; 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20001a5c 	.word	0x20001a5c
 80059bc:	20001a70 	.word	0x20001a70
 80059c0:	20001a60 	.word	0x20001a60
 80059c4:	20001a54 	.word	0x20001a54
 80059c8:	20001a64 	.word	0x20001a64
 80059cc:	20001a68 	.word	0x20001a68

080059d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b086      	sub	sp, #24
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d04d      	beq.n	8005a7e <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80059e2:	2308      	movs	r3, #8
 80059e4:	425b      	negs	r3, r3
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	4413      	add	r3, r2
 80059ea:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <vPortFree+0xb8>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4013      	ands	r3, r2
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d10a      	bne.n	8005a14 <vPortFree+0x44>
        __asm volatile
 80059fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a02:	f383 8811 	msr	BASEPRI, r3
 8005a06:	f3bf 8f6f 	isb	sy
 8005a0a:	f3bf 8f4f 	dsb	sy
 8005a0e:	60fb      	str	r3, [r7, #12]
    }
 8005a10:	bf00      	nop
 8005a12:	e7fe      	b.n	8005a12 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <vPortFree+0x62>
        __asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	60bb      	str	r3, [r7, #8]
    }
 8005a2e:	bf00      	nop
 8005a30:	e7fe      	b.n	8005a30 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	685a      	ldr	r2, [r3, #4]
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <vPortFree+0xb8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d01e      	beq.n	8005a7e <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d11a      	bne.n	8005a7e <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	685a      	ldr	r2, [r3, #4]
 8005a4c:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <vPortFree+0xb8>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	43db      	mvns	r3, r3
 8005a52:	401a      	ands	r2, r3
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005a58:	f7fe ff8a 	bl	8004970 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	4b0a      	ldr	r3, [pc, #40]	; (8005a8c <vPortFree+0xbc>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4413      	add	r3, r2
 8005a66:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <vPortFree+0xbc>)
 8005a68:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a6a:	6938      	ldr	r0, [r7, #16]
 8005a6c:	f000 f874 	bl	8005b58 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005a70:	4b07      	ldr	r3, [pc, #28]	; (8005a90 <vPortFree+0xc0>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3301      	adds	r3, #1
 8005a76:	4a06      	ldr	r2, [pc, #24]	; (8005a90 <vPortFree+0xc0>)
 8005a78:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005a7a:	f7fe ff87 	bl	800498c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005a7e:	bf00      	nop
 8005a80:	3718      	adds	r7, #24
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20001a70 	.word	0x20001a70
 8005a8c:	20001a60 	.word	0x20001a60
 8005a90:	20001a6c 	.word	0x20001a6c

08005a94 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005a9e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005aa0:	4b27      	ldr	r3, [pc, #156]	; (8005b40 <prvHeapInit+0xac>)
 8005aa2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3307      	adds	r3, #7
 8005ab2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0307 	bic.w	r3, r3, #7
 8005aba:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	4a1f      	ldr	r2, [pc, #124]	; (8005b40 <prvHeapInit+0xac>)
 8005ac4:	4413      	add	r3, r2
 8005ac6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005acc:	4a1d      	ldr	r2, [pc, #116]	; (8005b44 <prvHeapInit+0xb0>)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005ad2:	4b1c      	ldr	r3, [pc, #112]	; (8005b44 <prvHeapInit+0xb0>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68ba      	ldr	r2, [r7, #8]
 8005adc:	4413      	add	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005ae0:	2208      	movs	r2, #8
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f023 0307 	bic.w	r3, r3, #7
 8005aee:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	4a15      	ldr	r2, [pc, #84]	; (8005b48 <prvHeapInit+0xb4>)
 8005af4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005af6:	4b14      	ldr	r3, [pc, #80]	; (8005b48 <prvHeapInit+0xb4>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	2200      	movs	r2, #0
 8005afc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005afe:	4b12      	ldr	r3, [pc, #72]	; (8005b48 <prvHeapInit+0xb4>)
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2200      	movs	r2, #0
 8005b04:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b14:	4b0c      	ldr	r3, [pc, #48]	; (8005b48 <prvHeapInit+0xb4>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <prvHeapInit+0xb8>)
 8005b22:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4a09      	ldr	r2, [pc, #36]	; (8005b50 <prvHeapInit+0xbc>)
 8005b2a:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b2c:	4b09      	ldr	r3, [pc, #36]	; (8005b54 <prvHeapInit+0xc0>)
 8005b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b32:	601a      	str	r2, [r3, #0]
}
 8005b34:	bf00      	nop
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bc80      	pop	{r7}
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	20000254 	.word	0x20000254
 8005b44:	20001a54 	.word	0x20001a54
 8005b48:	20001a5c 	.word	0x20001a5c
 8005b4c:	20001a64 	.word	0x20001a64
 8005b50:	20001a60 	.word	0x20001a60
 8005b54:	20001a70 	.word	0x20001a70

08005b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b60:	4b27      	ldr	r3, [pc, #156]	; (8005c00 <prvInsertBlockIntoFreeList+0xa8>)
 8005b62:	60fb      	str	r3, [r7, #12]
 8005b64:	e002      	b.n	8005b6c <prvInsertBlockIntoFreeList+0x14>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	60fb      	str	r3, [r7, #12]
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d8f7      	bhi.n	8005b66 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	4413      	add	r3, r2
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d108      	bne.n	8005b9a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	441a      	add	r2, r3
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d118      	bne.n	8005be0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	4b14      	ldr	r3, [pc, #80]	; (8005c04 <prvInsertBlockIntoFreeList+0xac>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d00d      	beq.n	8005bd6 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	441a      	add	r2, r3
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	601a      	str	r2, [r3, #0]
 8005bd4:	e008      	b.n	8005be8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	; (8005c04 <prvInsertBlockIntoFreeList+0xac>)
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e003      	b.n	8005be8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d002      	beq.n	8005bf6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005bf6:	bf00      	nop
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bc80      	pop	{r7}
 8005bfe:	4770      	bx	lr
 8005c00:	20001a54 	.word	0x20001a54
 8005c04:	20001a5c 	.word	0x20001a5c

08005c08 <std>:
 8005c08:	2300      	movs	r3, #0
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	4604      	mov	r4, r0
 8005c0e:	e9c0 3300 	strd	r3, r3, [r0]
 8005c12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c16:	6083      	str	r3, [r0, #8]
 8005c18:	8181      	strh	r1, [r0, #12]
 8005c1a:	6643      	str	r3, [r0, #100]	; 0x64
 8005c1c:	81c2      	strh	r2, [r0, #14]
 8005c1e:	6183      	str	r3, [r0, #24]
 8005c20:	4619      	mov	r1, r3
 8005c22:	2208      	movs	r2, #8
 8005c24:	305c      	adds	r0, #92	; 0x5c
 8005c26:	f000 f9f3 	bl	8006010 <memset>
 8005c2a:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <std+0x38>)
 8005c2c:	6224      	str	r4, [r4, #32]
 8005c2e:	6263      	str	r3, [r4, #36]	; 0x24
 8005c30:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <std+0x3c>)
 8005c32:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c34:	4b04      	ldr	r3, [pc, #16]	; (8005c48 <std+0x40>)
 8005c36:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c38:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <std+0x44>)
 8005c3a:	6323      	str	r3, [r4, #48]	; 0x30
 8005c3c:	bd10      	pop	{r4, pc}
 8005c3e:	bf00      	nop
 8005c40:	08005e61 	.word	0x08005e61
 8005c44:	08005e83 	.word	0x08005e83
 8005c48:	08005ebb 	.word	0x08005ebb
 8005c4c:	08005edf 	.word	0x08005edf

08005c50 <stdio_exit_handler>:
 8005c50:	4a02      	ldr	r2, [pc, #8]	; (8005c5c <stdio_exit_handler+0xc>)
 8005c52:	4903      	ldr	r1, [pc, #12]	; (8005c60 <stdio_exit_handler+0x10>)
 8005c54:	4803      	ldr	r0, [pc, #12]	; (8005c64 <stdio_exit_handler+0x14>)
 8005c56:	f000 b869 	b.w	8005d2c <_fwalk_sglue>
 8005c5a:	bf00      	nop
 8005c5c:	20000034 	.word	0x20000034
 8005c60:	08006a15 	.word	0x08006a15
 8005c64:	20000040 	.word	0x20000040

08005c68 <cleanup_stdio>:
 8005c68:	6841      	ldr	r1, [r0, #4]
 8005c6a:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <cleanup_stdio+0x34>)
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	4299      	cmp	r1, r3
 8005c70:	4604      	mov	r4, r0
 8005c72:	d001      	beq.n	8005c78 <cleanup_stdio+0x10>
 8005c74:	f000 fece 	bl	8006a14 <_fflush_r>
 8005c78:	68a1      	ldr	r1, [r4, #8]
 8005c7a:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <cleanup_stdio+0x38>)
 8005c7c:	4299      	cmp	r1, r3
 8005c7e:	d002      	beq.n	8005c86 <cleanup_stdio+0x1e>
 8005c80:	4620      	mov	r0, r4
 8005c82:	f000 fec7 	bl	8006a14 <_fflush_r>
 8005c86:	68e1      	ldr	r1, [r4, #12]
 8005c88:	4b06      	ldr	r3, [pc, #24]	; (8005ca4 <cleanup_stdio+0x3c>)
 8005c8a:	4299      	cmp	r1, r3
 8005c8c:	d004      	beq.n	8005c98 <cleanup_stdio+0x30>
 8005c8e:	4620      	mov	r0, r4
 8005c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c94:	f000 bebe 	b.w	8006a14 <_fflush_r>
 8005c98:	bd10      	pop	{r4, pc}
 8005c9a:	bf00      	nop
 8005c9c:	20001a74 	.word	0x20001a74
 8005ca0:	20001adc 	.word	0x20001adc
 8005ca4:	20001b44 	.word	0x20001b44

08005ca8 <global_stdio_init.part.0>:
 8005ca8:	b510      	push	{r4, lr}
 8005caa:	4b0b      	ldr	r3, [pc, #44]	; (8005cd8 <global_stdio_init.part.0+0x30>)
 8005cac:	4c0b      	ldr	r4, [pc, #44]	; (8005cdc <global_stdio_init.part.0+0x34>)
 8005cae:	4a0c      	ldr	r2, [pc, #48]	; (8005ce0 <global_stdio_init.part.0+0x38>)
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	601a      	str	r2, [r3, #0]
 8005cb4:	2104      	movs	r1, #4
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	f7ff ffa6 	bl	8005c08 <std>
 8005cbc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	2109      	movs	r1, #9
 8005cc4:	f7ff ffa0 	bl	8005c08 <std>
 8005cc8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005ccc:	2202      	movs	r2, #2
 8005cce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cd2:	2112      	movs	r1, #18
 8005cd4:	f7ff bf98 	b.w	8005c08 <std>
 8005cd8:	20001bac 	.word	0x20001bac
 8005cdc:	20001a74 	.word	0x20001a74
 8005ce0:	08005c51 	.word	0x08005c51

08005ce4 <__sfp_lock_acquire>:
 8005ce4:	4801      	ldr	r0, [pc, #4]	; (8005cec <__sfp_lock_acquire+0x8>)
 8005ce6:	f000 ba1b 	b.w	8006120 <__retarget_lock_acquire_recursive>
 8005cea:	bf00      	nop
 8005cec:	20001bb5 	.word	0x20001bb5

08005cf0 <__sfp_lock_release>:
 8005cf0:	4801      	ldr	r0, [pc, #4]	; (8005cf8 <__sfp_lock_release+0x8>)
 8005cf2:	f000 ba16 	b.w	8006122 <__retarget_lock_release_recursive>
 8005cf6:	bf00      	nop
 8005cf8:	20001bb5 	.word	0x20001bb5

08005cfc <__sinit>:
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	4604      	mov	r4, r0
 8005d00:	f7ff fff0 	bl	8005ce4 <__sfp_lock_acquire>
 8005d04:	6a23      	ldr	r3, [r4, #32]
 8005d06:	b11b      	cbz	r3, 8005d10 <__sinit+0x14>
 8005d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d0c:	f7ff bff0 	b.w	8005cf0 <__sfp_lock_release>
 8005d10:	4b04      	ldr	r3, [pc, #16]	; (8005d24 <__sinit+0x28>)
 8005d12:	6223      	str	r3, [r4, #32]
 8005d14:	4b04      	ldr	r3, [pc, #16]	; (8005d28 <__sinit+0x2c>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d1f5      	bne.n	8005d08 <__sinit+0xc>
 8005d1c:	f7ff ffc4 	bl	8005ca8 <global_stdio_init.part.0>
 8005d20:	e7f2      	b.n	8005d08 <__sinit+0xc>
 8005d22:	bf00      	nop
 8005d24:	08005c69 	.word	0x08005c69
 8005d28:	20001bac 	.word	0x20001bac

08005d2c <_fwalk_sglue>:
 8005d2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d30:	4607      	mov	r7, r0
 8005d32:	4688      	mov	r8, r1
 8005d34:	4614      	mov	r4, r2
 8005d36:	2600      	movs	r6, #0
 8005d38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d3c:	f1b9 0901 	subs.w	r9, r9, #1
 8005d40:	d505      	bpl.n	8005d4e <_fwalk_sglue+0x22>
 8005d42:	6824      	ldr	r4, [r4, #0]
 8005d44:	2c00      	cmp	r4, #0
 8005d46:	d1f7      	bne.n	8005d38 <_fwalk_sglue+0xc>
 8005d48:	4630      	mov	r0, r6
 8005d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d4e:	89ab      	ldrh	r3, [r5, #12]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d907      	bls.n	8005d64 <_fwalk_sglue+0x38>
 8005d54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	d003      	beq.n	8005d64 <_fwalk_sglue+0x38>
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	4638      	mov	r0, r7
 8005d60:	47c0      	blx	r8
 8005d62:	4306      	orrs	r6, r0
 8005d64:	3568      	adds	r5, #104	; 0x68
 8005d66:	e7e9      	b.n	8005d3c <_fwalk_sglue+0x10>

08005d68 <_puts_r>:
 8005d68:	6a03      	ldr	r3, [r0, #32]
 8005d6a:	b570      	push	{r4, r5, r6, lr}
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	460e      	mov	r6, r1
 8005d70:	6884      	ldr	r4, [r0, #8]
 8005d72:	b90b      	cbnz	r3, 8005d78 <_puts_r+0x10>
 8005d74:	f7ff ffc2 	bl	8005cfc <__sinit>
 8005d78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d7a:	07db      	lsls	r3, r3, #31
 8005d7c:	d405      	bmi.n	8005d8a <_puts_r+0x22>
 8005d7e:	89a3      	ldrh	r3, [r4, #12]
 8005d80:	0598      	lsls	r0, r3, #22
 8005d82:	d402      	bmi.n	8005d8a <_puts_r+0x22>
 8005d84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d86:	f000 f9cb 	bl	8006120 <__retarget_lock_acquire_recursive>
 8005d8a:	89a3      	ldrh	r3, [r4, #12]
 8005d8c:	0719      	lsls	r1, r3, #28
 8005d8e:	d513      	bpl.n	8005db8 <_puts_r+0x50>
 8005d90:	6923      	ldr	r3, [r4, #16]
 8005d92:	b18b      	cbz	r3, 8005db8 <_puts_r+0x50>
 8005d94:	3e01      	subs	r6, #1
 8005d96:	68a3      	ldr	r3, [r4, #8]
 8005d98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005d9c:	3b01      	subs	r3, #1
 8005d9e:	60a3      	str	r3, [r4, #8]
 8005da0:	b9e9      	cbnz	r1, 8005dde <_puts_r+0x76>
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	da2e      	bge.n	8005e04 <_puts_r+0x9c>
 8005da6:	4622      	mov	r2, r4
 8005da8:	210a      	movs	r1, #10
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 f89b 	bl	8005ee6 <__swbuf_r>
 8005db0:	3001      	adds	r0, #1
 8005db2:	d007      	beq.n	8005dc4 <_puts_r+0x5c>
 8005db4:	250a      	movs	r5, #10
 8005db6:	e007      	b.n	8005dc8 <_puts_r+0x60>
 8005db8:	4621      	mov	r1, r4
 8005dba:	4628      	mov	r0, r5
 8005dbc:	f000 f8d0 	bl	8005f60 <__swsetup_r>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d0e7      	beq.n	8005d94 <_puts_r+0x2c>
 8005dc4:	f04f 35ff 	mov.w	r5, #4294967295
 8005dc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005dca:	07da      	lsls	r2, r3, #31
 8005dcc:	d405      	bmi.n	8005dda <_puts_r+0x72>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	059b      	lsls	r3, r3, #22
 8005dd2:	d402      	bmi.n	8005dda <_puts_r+0x72>
 8005dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dd6:	f000 f9a4 	bl	8006122 <__retarget_lock_release_recursive>
 8005dda:	4628      	mov	r0, r5
 8005ddc:	bd70      	pop	{r4, r5, r6, pc}
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	da04      	bge.n	8005dec <_puts_r+0x84>
 8005de2:	69a2      	ldr	r2, [r4, #24]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	dc06      	bgt.n	8005df6 <_puts_r+0x8e>
 8005de8:	290a      	cmp	r1, #10
 8005dea:	d004      	beq.n	8005df6 <_puts_r+0x8e>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	6022      	str	r2, [r4, #0]
 8005df2:	7019      	strb	r1, [r3, #0]
 8005df4:	e7cf      	b.n	8005d96 <_puts_r+0x2e>
 8005df6:	4622      	mov	r2, r4
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f000 f874 	bl	8005ee6 <__swbuf_r>
 8005dfe:	3001      	adds	r0, #1
 8005e00:	d1c9      	bne.n	8005d96 <_puts_r+0x2e>
 8005e02:	e7df      	b.n	8005dc4 <_puts_r+0x5c>
 8005e04:	250a      	movs	r5, #10
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	1c5a      	adds	r2, r3, #1
 8005e0a:	6022      	str	r2, [r4, #0]
 8005e0c:	701d      	strb	r5, [r3, #0]
 8005e0e:	e7db      	b.n	8005dc8 <_puts_r+0x60>

08005e10 <puts>:
 8005e10:	4b02      	ldr	r3, [pc, #8]	; (8005e1c <puts+0xc>)
 8005e12:	4601      	mov	r1, r0
 8005e14:	6818      	ldr	r0, [r3, #0]
 8005e16:	f7ff bfa7 	b.w	8005d68 <_puts_r>
 8005e1a:	bf00      	nop
 8005e1c:	2000008c 	.word	0x2000008c

08005e20 <siprintf>:
 8005e20:	b40e      	push	{r1, r2, r3}
 8005e22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e26:	b500      	push	{lr}
 8005e28:	b09c      	sub	sp, #112	; 0x70
 8005e2a:	ab1d      	add	r3, sp, #116	; 0x74
 8005e2c:	9002      	str	r0, [sp, #8]
 8005e2e:	9006      	str	r0, [sp, #24]
 8005e30:	9107      	str	r1, [sp, #28]
 8005e32:	9104      	str	r1, [sp, #16]
 8005e34:	4808      	ldr	r0, [pc, #32]	; (8005e58 <siprintf+0x38>)
 8005e36:	4909      	ldr	r1, [pc, #36]	; (8005e5c <siprintf+0x3c>)
 8005e38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e3c:	9105      	str	r1, [sp, #20]
 8005e3e:	6800      	ldr	r0, [r0, #0]
 8005e40:	a902      	add	r1, sp, #8
 8005e42:	9301      	str	r3, [sp, #4]
 8005e44:	f000 fad2 	bl	80063ec <_svfiprintf_r>
 8005e48:	2200      	movs	r2, #0
 8005e4a:	9b02      	ldr	r3, [sp, #8]
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	b01c      	add	sp, #112	; 0x70
 8005e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e54:	b003      	add	sp, #12
 8005e56:	4770      	bx	lr
 8005e58:	2000008c 	.word	0x2000008c
 8005e5c:	ffff0208 	.word	0xffff0208

08005e60 <__sread>:
 8005e60:	b510      	push	{r4, lr}
 8005e62:	460c      	mov	r4, r1
 8005e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e68:	f000 f912 	bl	8006090 <_read_r>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	bfab      	itete	ge
 8005e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e72:	89a3      	ldrhlt	r3, [r4, #12]
 8005e74:	181b      	addge	r3, r3, r0
 8005e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e7a:	bfac      	ite	ge
 8005e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e7e:	81a3      	strhlt	r3, [r4, #12]
 8005e80:	bd10      	pop	{r4, pc}

08005e82 <__swrite>:
 8005e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e86:	461f      	mov	r7, r3
 8005e88:	898b      	ldrh	r3, [r1, #12]
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	05db      	lsls	r3, r3, #23
 8005e8e:	460c      	mov	r4, r1
 8005e90:	4616      	mov	r6, r2
 8005e92:	d505      	bpl.n	8005ea0 <__swrite+0x1e>
 8005e94:	2302      	movs	r3, #2
 8005e96:	2200      	movs	r2, #0
 8005e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e9c:	f000 f8e6 	bl	800606c <_lseek_r>
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	4632      	mov	r2, r6
 8005ea4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea8:	81a3      	strh	r3, [r4, #12]
 8005eaa:	4628      	mov	r0, r5
 8005eac:	463b      	mov	r3, r7
 8005eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eb6:	f000 b8fd 	b.w	80060b4 <_write_r>

08005eba <__sseek>:
 8005eba:	b510      	push	{r4, lr}
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec2:	f000 f8d3 	bl	800606c <_lseek_r>
 8005ec6:	1c43      	adds	r3, r0, #1
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	bf15      	itete	ne
 8005ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8005ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005ed6:	81a3      	strheq	r3, [r4, #12]
 8005ed8:	bf18      	it	ne
 8005eda:	81a3      	strhne	r3, [r4, #12]
 8005edc:	bd10      	pop	{r4, pc}

08005ede <__sclose>:
 8005ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ee2:	f000 b8b3 	b.w	800604c <_close_r>

08005ee6 <__swbuf_r>:
 8005ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ee8:	460e      	mov	r6, r1
 8005eea:	4614      	mov	r4, r2
 8005eec:	4605      	mov	r5, r0
 8005eee:	b118      	cbz	r0, 8005ef8 <__swbuf_r+0x12>
 8005ef0:	6a03      	ldr	r3, [r0, #32]
 8005ef2:	b90b      	cbnz	r3, 8005ef8 <__swbuf_r+0x12>
 8005ef4:	f7ff ff02 	bl	8005cfc <__sinit>
 8005ef8:	69a3      	ldr	r3, [r4, #24]
 8005efa:	60a3      	str	r3, [r4, #8]
 8005efc:	89a3      	ldrh	r3, [r4, #12]
 8005efe:	071a      	lsls	r2, r3, #28
 8005f00:	d525      	bpl.n	8005f4e <__swbuf_r+0x68>
 8005f02:	6923      	ldr	r3, [r4, #16]
 8005f04:	b31b      	cbz	r3, 8005f4e <__swbuf_r+0x68>
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	6922      	ldr	r2, [r4, #16]
 8005f0a:	b2f6      	uxtb	r6, r6
 8005f0c:	1a98      	subs	r0, r3, r2
 8005f0e:	6963      	ldr	r3, [r4, #20]
 8005f10:	4637      	mov	r7, r6
 8005f12:	4283      	cmp	r3, r0
 8005f14:	dc04      	bgt.n	8005f20 <__swbuf_r+0x3a>
 8005f16:	4621      	mov	r1, r4
 8005f18:	4628      	mov	r0, r5
 8005f1a:	f000 fd7b 	bl	8006a14 <_fflush_r>
 8005f1e:	b9e0      	cbnz	r0, 8005f5a <__swbuf_r+0x74>
 8005f20:	68a3      	ldr	r3, [r4, #8]
 8005f22:	3b01      	subs	r3, #1
 8005f24:	60a3      	str	r3, [r4, #8]
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	6022      	str	r2, [r4, #0]
 8005f2c:	701e      	strb	r6, [r3, #0]
 8005f2e:	6962      	ldr	r2, [r4, #20]
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d004      	beq.n	8005f40 <__swbuf_r+0x5a>
 8005f36:	89a3      	ldrh	r3, [r4, #12]
 8005f38:	07db      	lsls	r3, r3, #31
 8005f3a:	d506      	bpl.n	8005f4a <__swbuf_r+0x64>
 8005f3c:	2e0a      	cmp	r6, #10
 8005f3e:	d104      	bne.n	8005f4a <__swbuf_r+0x64>
 8005f40:	4621      	mov	r1, r4
 8005f42:	4628      	mov	r0, r5
 8005f44:	f000 fd66 	bl	8006a14 <_fflush_r>
 8005f48:	b938      	cbnz	r0, 8005f5a <__swbuf_r+0x74>
 8005f4a:	4638      	mov	r0, r7
 8005f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f4e:	4621      	mov	r1, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	f000 f805 	bl	8005f60 <__swsetup_r>
 8005f56:	2800      	cmp	r0, #0
 8005f58:	d0d5      	beq.n	8005f06 <__swbuf_r+0x20>
 8005f5a:	f04f 37ff 	mov.w	r7, #4294967295
 8005f5e:	e7f4      	b.n	8005f4a <__swbuf_r+0x64>

08005f60 <__swsetup_r>:
 8005f60:	b538      	push	{r3, r4, r5, lr}
 8005f62:	4b2a      	ldr	r3, [pc, #168]	; (800600c <__swsetup_r+0xac>)
 8005f64:	4605      	mov	r5, r0
 8005f66:	6818      	ldr	r0, [r3, #0]
 8005f68:	460c      	mov	r4, r1
 8005f6a:	b118      	cbz	r0, 8005f74 <__swsetup_r+0x14>
 8005f6c:	6a03      	ldr	r3, [r0, #32]
 8005f6e:	b90b      	cbnz	r3, 8005f74 <__swsetup_r+0x14>
 8005f70:	f7ff fec4 	bl	8005cfc <__sinit>
 8005f74:	89a3      	ldrh	r3, [r4, #12]
 8005f76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f7a:	0718      	lsls	r0, r3, #28
 8005f7c:	d422      	bmi.n	8005fc4 <__swsetup_r+0x64>
 8005f7e:	06d9      	lsls	r1, r3, #27
 8005f80:	d407      	bmi.n	8005f92 <__swsetup_r+0x32>
 8005f82:	2309      	movs	r3, #9
 8005f84:	602b      	str	r3, [r5, #0]
 8005f86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8e:	81a3      	strh	r3, [r4, #12]
 8005f90:	e034      	b.n	8005ffc <__swsetup_r+0x9c>
 8005f92:	0758      	lsls	r0, r3, #29
 8005f94:	d512      	bpl.n	8005fbc <__swsetup_r+0x5c>
 8005f96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f98:	b141      	cbz	r1, 8005fac <__swsetup_r+0x4c>
 8005f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f9e:	4299      	cmp	r1, r3
 8005fa0:	d002      	beq.n	8005fa8 <__swsetup_r+0x48>
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f000 f8d4 	bl	8006150 <_free_r>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	6363      	str	r3, [r4, #52]	; 0x34
 8005fac:	89a3      	ldrh	r3, [r4, #12]
 8005fae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fb2:	81a3      	strh	r3, [r4, #12]
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	6063      	str	r3, [r4, #4]
 8005fb8:	6923      	ldr	r3, [r4, #16]
 8005fba:	6023      	str	r3, [r4, #0]
 8005fbc:	89a3      	ldrh	r3, [r4, #12]
 8005fbe:	f043 0308 	orr.w	r3, r3, #8
 8005fc2:	81a3      	strh	r3, [r4, #12]
 8005fc4:	6923      	ldr	r3, [r4, #16]
 8005fc6:	b94b      	cbnz	r3, 8005fdc <__swsetup_r+0x7c>
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fd2:	d003      	beq.n	8005fdc <__swsetup_r+0x7c>
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4628      	mov	r0, r5
 8005fd8:	f000 fd69 	bl	8006aae <__smakebuf_r>
 8005fdc:	89a0      	ldrh	r0, [r4, #12]
 8005fde:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fe2:	f010 0301 	ands.w	r3, r0, #1
 8005fe6:	d00a      	beq.n	8005ffe <__swsetup_r+0x9e>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	60a3      	str	r3, [r4, #8]
 8005fec:	6963      	ldr	r3, [r4, #20]
 8005fee:	425b      	negs	r3, r3
 8005ff0:	61a3      	str	r3, [r4, #24]
 8005ff2:	6923      	ldr	r3, [r4, #16]
 8005ff4:	b943      	cbnz	r3, 8006008 <__swsetup_r+0xa8>
 8005ff6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ffa:	d1c4      	bne.n	8005f86 <__swsetup_r+0x26>
 8005ffc:	bd38      	pop	{r3, r4, r5, pc}
 8005ffe:	0781      	lsls	r1, r0, #30
 8006000:	bf58      	it	pl
 8006002:	6963      	ldrpl	r3, [r4, #20]
 8006004:	60a3      	str	r3, [r4, #8]
 8006006:	e7f4      	b.n	8005ff2 <__swsetup_r+0x92>
 8006008:	2000      	movs	r0, #0
 800600a:	e7f7      	b.n	8005ffc <__swsetup_r+0x9c>
 800600c:	2000008c 	.word	0x2000008c

08006010 <memset>:
 8006010:	4603      	mov	r3, r0
 8006012:	4402      	add	r2, r0
 8006014:	4293      	cmp	r3, r2
 8006016:	d100      	bne.n	800601a <memset+0xa>
 8006018:	4770      	bx	lr
 800601a:	f803 1b01 	strb.w	r1, [r3], #1
 800601e:	e7f9      	b.n	8006014 <memset+0x4>

08006020 <strstr>:
 8006020:	780a      	ldrb	r2, [r1, #0]
 8006022:	b570      	push	{r4, r5, r6, lr}
 8006024:	b96a      	cbnz	r2, 8006042 <strstr+0x22>
 8006026:	bd70      	pop	{r4, r5, r6, pc}
 8006028:	429a      	cmp	r2, r3
 800602a:	d109      	bne.n	8006040 <strstr+0x20>
 800602c:	460c      	mov	r4, r1
 800602e:	4605      	mov	r5, r0
 8006030:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8006034:	2b00      	cmp	r3, #0
 8006036:	d0f6      	beq.n	8006026 <strstr+0x6>
 8006038:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800603c:	429e      	cmp	r6, r3
 800603e:	d0f7      	beq.n	8006030 <strstr+0x10>
 8006040:	3001      	adds	r0, #1
 8006042:	7803      	ldrb	r3, [r0, #0]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d1ef      	bne.n	8006028 <strstr+0x8>
 8006048:	4618      	mov	r0, r3
 800604a:	e7ec      	b.n	8006026 <strstr+0x6>

0800604c <_close_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	2300      	movs	r3, #0
 8006050:	4d05      	ldr	r5, [pc, #20]	; (8006068 <_close_r+0x1c>)
 8006052:	4604      	mov	r4, r0
 8006054:	4608      	mov	r0, r1
 8006056:	602b      	str	r3, [r5, #0]
 8006058:	f7fa fcdd 	bl	8000a16 <_close>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_close_r+0x1a>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_close_r+0x1a>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	20001bb0 	.word	0x20001bb0

0800606c <_lseek_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4604      	mov	r4, r0
 8006070:	4608      	mov	r0, r1
 8006072:	4611      	mov	r1, r2
 8006074:	2200      	movs	r2, #0
 8006076:	4d05      	ldr	r5, [pc, #20]	; (800608c <_lseek_r+0x20>)
 8006078:	602a      	str	r2, [r5, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	f7fa fcef 	bl	8000a5e <_lseek>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d102      	bne.n	800608a <_lseek_r+0x1e>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	b103      	cbz	r3, 800608a <_lseek_r+0x1e>
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	bd38      	pop	{r3, r4, r5, pc}
 800608c:	20001bb0 	.word	0x20001bb0

08006090 <_read_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	4611      	mov	r1, r2
 8006098:	2200      	movs	r2, #0
 800609a:	4d05      	ldr	r5, [pc, #20]	; (80060b0 <_read_r+0x20>)
 800609c:	602a      	str	r2, [r5, #0]
 800609e:	461a      	mov	r2, r3
 80060a0:	f7fa fc9c 	bl	80009dc <_read>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d102      	bne.n	80060ae <_read_r+0x1e>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	b103      	cbz	r3, 80060ae <_read_r+0x1e>
 80060ac:	6023      	str	r3, [r4, #0]
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	20001bb0 	.word	0x20001bb0

080060b4 <_write_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	4611      	mov	r1, r2
 80060bc:	2200      	movs	r2, #0
 80060be:	4d05      	ldr	r5, [pc, #20]	; (80060d4 <_write_r+0x20>)
 80060c0:	602a      	str	r2, [r5, #0]
 80060c2:	461a      	mov	r2, r3
 80060c4:	f7fa faf9 	bl	80006ba <_write>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_write_r+0x1e>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_write_r+0x1e>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	20001bb0 	.word	0x20001bb0

080060d8 <__libc_init_array>:
 80060d8:	b570      	push	{r4, r5, r6, lr}
 80060da:	2600      	movs	r6, #0
 80060dc:	4d0c      	ldr	r5, [pc, #48]	; (8006110 <__libc_init_array+0x38>)
 80060de:	4c0d      	ldr	r4, [pc, #52]	; (8006114 <__libc_init_array+0x3c>)
 80060e0:	1b64      	subs	r4, r4, r5
 80060e2:	10a4      	asrs	r4, r4, #2
 80060e4:	42a6      	cmp	r6, r4
 80060e6:	d109      	bne.n	80060fc <__libc_init_array+0x24>
 80060e8:	f000 fdbe 	bl	8006c68 <_init>
 80060ec:	2600      	movs	r6, #0
 80060ee:	4d0a      	ldr	r5, [pc, #40]	; (8006118 <__libc_init_array+0x40>)
 80060f0:	4c0a      	ldr	r4, [pc, #40]	; (800611c <__libc_init_array+0x44>)
 80060f2:	1b64      	subs	r4, r4, r5
 80060f4:	10a4      	asrs	r4, r4, #2
 80060f6:	42a6      	cmp	r6, r4
 80060f8:	d105      	bne.n	8006106 <__libc_init_array+0x2e>
 80060fa:	bd70      	pop	{r4, r5, r6, pc}
 80060fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006100:	4798      	blx	r3
 8006102:	3601      	adds	r6, #1
 8006104:	e7ee      	b.n	80060e4 <__libc_init_array+0xc>
 8006106:	f855 3b04 	ldr.w	r3, [r5], #4
 800610a:	4798      	blx	r3
 800610c:	3601      	adds	r6, #1
 800610e:	e7f2      	b.n	80060f6 <__libc_init_array+0x1e>
 8006110:	08006dc4 	.word	0x08006dc4
 8006114:	08006dc4 	.word	0x08006dc4
 8006118:	08006dc4 	.word	0x08006dc4
 800611c:	08006dc8 	.word	0x08006dc8

08006120 <__retarget_lock_acquire_recursive>:
 8006120:	4770      	bx	lr

08006122 <__retarget_lock_release_recursive>:
 8006122:	4770      	bx	lr

08006124 <strcpy>:
 8006124:	4603      	mov	r3, r0
 8006126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800612a:	f803 2b01 	strb.w	r2, [r3], #1
 800612e:	2a00      	cmp	r2, #0
 8006130:	d1f9      	bne.n	8006126 <strcpy+0x2>
 8006132:	4770      	bx	lr

08006134 <memcpy>:
 8006134:	440a      	add	r2, r1
 8006136:	4291      	cmp	r1, r2
 8006138:	f100 33ff 	add.w	r3, r0, #4294967295
 800613c:	d100      	bne.n	8006140 <memcpy+0xc>
 800613e:	4770      	bx	lr
 8006140:	b510      	push	{r4, lr}
 8006142:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006146:	4291      	cmp	r1, r2
 8006148:	f803 4f01 	strb.w	r4, [r3, #1]!
 800614c:	d1f9      	bne.n	8006142 <memcpy+0xe>
 800614e:	bd10      	pop	{r4, pc}

08006150 <_free_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4605      	mov	r5, r0
 8006154:	2900      	cmp	r1, #0
 8006156:	d040      	beq.n	80061da <_free_r+0x8a>
 8006158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800615c:	1f0c      	subs	r4, r1, #4
 800615e:	2b00      	cmp	r3, #0
 8006160:	bfb8      	it	lt
 8006162:	18e4      	addlt	r4, r4, r3
 8006164:	f000 f8dc 	bl	8006320 <__malloc_lock>
 8006168:	4a1c      	ldr	r2, [pc, #112]	; (80061dc <_free_r+0x8c>)
 800616a:	6813      	ldr	r3, [r2, #0]
 800616c:	b933      	cbnz	r3, 800617c <_free_r+0x2c>
 800616e:	6063      	str	r3, [r4, #4]
 8006170:	6014      	str	r4, [r2, #0]
 8006172:	4628      	mov	r0, r5
 8006174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006178:	f000 b8d8 	b.w	800632c <__malloc_unlock>
 800617c:	42a3      	cmp	r3, r4
 800617e:	d908      	bls.n	8006192 <_free_r+0x42>
 8006180:	6820      	ldr	r0, [r4, #0]
 8006182:	1821      	adds	r1, r4, r0
 8006184:	428b      	cmp	r3, r1
 8006186:	bf01      	itttt	eq
 8006188:	6819      	ldreq	r1, [r3, #0]
 800618a:	685b      	ldreq	r3, [r3, #4]
 800618c:	1809      	addeq	r1, r1, r0
 800618e:	6021      	streq	r1, [r4, #0]
 8006190:	e7ed      	b.n	800616e <_free_r+0x1e>
 8006192:	461a      	mov	r2, r3
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	b10b      	cbz	r3, 800619c <_free_r+0x4c>
 8006198:	42a3      	cmp	r3, r4
 800619a:	d9fa      	bls.n	8006192 <_free_r+0x42>
 800619c:	6811      	ldr	r1, [r2, #0]
 800619e:	1850      	adds	r0, r2, r1
 80061a0:	42a0      	cmp	r0, r4
 80061a2:	d10b      	bne.n	80061bc <_free_r+0x6c>
 80061a4:	6820      	ldr	r0, [r4, #0]
 80061a6:	4401      	add	r1, r0
 80061a8:	1850      	adds	r0, r2, r1
 80061aa:	4283      	cmp	r3, r0
 80061ac:	6011      	str	r1, [r2, #0]
 80061ae:	d1e0      	bne.n	8006172 <_free_r+0x22>
 80061b0:	6818      	ldr	r0, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	4408      	add	r0, r1
 80061b6:	6010      	str	r0, [r2, #0]
 80061b8:	6053      	str	r3, [r2, #4]
 80061ba:	e7da      	b.n	8006172 <_free_r+0x22>
 80061bc:	d902      	bls.n	80061c4 <_free_r+0x74>
 80061be:	230c      	movs	r3, #12
 80061c0:	602b      	str	r3, [r5, #0]
 80061c2:	e7d6      	b.n	8006172 <_free_r+0x22>
 80061c4:	6820      	ldr	r0, [r4, #0]
 80061c6:	1821      	adds	r1, r4, r0
 80061c8:	428b      	cmp	r3, r1
 80061ca:	bf01      	itttt	eq
 80061cc:	6819      	ldreq	r1, [r3, #0]
 80061ce:	685b      	ldreq	r3, [r3, #4]
 80061d0:	1809      	addeq	r1, r1, r0
 80061d2:	6021      	streq	r1, [r4, #0]
 80061d4:	6063      	str	r3, [r4, #4]
 80061d6:	6054      	str	r4, [r2, #4]
 80061d8:	e7cb      	b.n	8006172 <_free_r+0x22>
 80061da:	bd38      	pop	{r3, r4, r5, pc}
 80061dc:	20001bb8 	.word	0x20001bb8

080061e0 <sbrk_aligned>:
 80061e0:	b570      	push	{r4, r5, r6, lr}
 80061e2:	4e0e      	ldr	r6, [pc, #56]	; (800621c <sbrk_aligned+0x3c>)
 80061e4:	460c      	mov	r4, r1
 80061e6:	6831      	ldr	r1, [r6, #0]
 80061e8:	4605      	mov	r5, r0
 80061ea:	b911      	cbnz	r1, 80061f2 <sbrk_aligned+0x12>
 80061ec:	f000 fcd8 	bl	8006ba0 <_sbrk_r>
 80061f0:	6030      	str	r0, [r6, #0]
 80061f2:	4621      	mov	r1, r4
 80061f4:	4628      	mov	r0, r5
 80061f6:	f000 fcd3 	bl	8006ba0 <_sbrk_r>
 80061fa:	1c43      	adds	r3, r0, #1
 80061fc:	d00a      	beq.n	8006214 <sbrk_aligned+0x34>
 80061fe:	1cc4      	adds	r4, r0, #3
 8006200:	f024 0403 	bic.w	r4, r4, #3
 8006204:	42a0      	cmp	r0, r4
 8006206:	d007      	beq.n	8006218 <sbrk_aligned+0x38>
 8006208:	1a21      	subs	r1, r4, r0
 800620a:	4628      	mov	r0, r5
 800620c:	f000 fcc8 	bl	8006ba0 <_sbrk_r>
 8006210:	3001      	adds	r0, #1
 8006212:	d101      	bne.n	8006218 <sbrk_aligned+0x38>
 8006214:	f04f 34ff 	mov.w	r4, #4294967295
 8006218:	4620      	mov	r0, r4
 800621a:	bd70      	pop	{r4, r5, r6, pc}
 800621c:	20001bbc 	.word	0x20001bbc

08006220 <_malloc_r>:
 8006220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006224:	1ccd      	adds	r5, r1, #3
 8006226:	f025 0503 	bic.w	r5, r5, #3
 800622a:	3508      	adds	r5, #8
 800622c:	2d0c      	cmp	r5, #12
 800622e:	bf38      	it	cc
 8006230:	250c      	movcc	r5, #12
 8006232:	2d00      	cmp	r5, #0
 8006234:	4607      	mov	r7, r0
 8006236:	db01      	blt.n	800623c <_malloc_r+0x1c>
 8006238:	42a9      	cmp	r1, r5
 800623a:	d905      	bls.n	8006248 <_malloc_r+0x28>
 800623c:	230c      	movs	r3, #12
 800623e:	2600      	movs	r6, #0
 8006240:	603b      	str	r3, [r7, #0]
 8006242:	4630      	mov	r0, r6
 8006244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006248:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800631c <_malloc_r+0xfc>
 800624c:	f000 f868 	bl	8006320 <__malloc_lock>
 8006250:	f8d8 3000 	ldr.w	r3, [r8]
 8006254:	461c      	mov	r4, r3
 8006256:	bb5c      	cbnz	r4, 80062b0 <_malloc_r+0x90>
 8006258:	4629      	mov	r1, r5
 800625a:	4638      	mov	r0, r7
 800625c:	f7ff ffc0 	bl	80061e0 <sbrk_aligned>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	4604      	mov	r4, r0
 8006264:	d155      	bne.n	8006312 <_malloc_r+0xf2>
 8006266:	f8d8 4000 	ldr.w	r4, [r8]
 800626a:	4626      	mov	r6, r4
 800626c:	2e00      	cmp	r6, #0
 800626e:	d145      	bne.n	80062fc <_malloc_r+0xdc>
 8006270:	2c00      	cmp	r4, #0
 8006272:	d048      	beq.n	8006306 <_malloc_r+0xe6>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	4631      	mov	r1, r6
 8006278:	4638      	mov	r0, r7
 800627a:	eb04 0903 	add.w	r9, r4, r3
 800627e:	f000 fc8f 	bl	8006ba0 <_sbrk_r>
 8006282:	4581      	cmp	r9, r0
 8006284:	d13f      	bne.n	8006306 <_malloc_r+0xe6>
 8006286:	6821      	ldr	r1, [r4, #0]
 8006288:	4638      	mov	r0, r7
 800628a:	1a6d      	subs	r5, r5, r1
 800628c:	4629      	mov	r1, r5
 800628e:	f7ff ffa7 	bl	80061e0 <sbrk_aligned>
 8006292:	3001      	adds	r0, #1
 8006294:	d037      	beq.n	8006306 <_malloc_r+0xe6>
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	442b      	add	r3, r5
 800629a:	6023      	str	r3, [r4, #0]
 800629c:	f8d8 3000 	ldr.w	r3, [r8]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d038      	beq.n	8006316 <_malloc_r+0xf6>
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	42a2      	cmp	r2, r4
 80062a8:	d12b      	bne.n	8006302 <_malloc_r+0xe2>
 80062aa:	2200      	movs	r2, #0
 80062ac:	605a      	str	r2, [r3, #4]
 80062ae:	e00f      	b.n	80062d0 <_malloc_r+0xb0>
 80062b0:	6822      	ldr	r2, [r4, #0]
 80062b2:	1b52      	subs	r2, r2, r5
 80062b4:	d41f      	bmi.n	80062f6 <_malloc_r+0xd6>
 80062b6:	2a0b      	cmp	r2, #11
 80062b8:	d917      	bls.n	80062ea <_malloc_r+0xca>
 80062ba:	1961      	adds	r1, r4, r5
 80062bc:	42a3      	cmp	r3, r4
 80062be:	6025      	str	r5, [r4, #0]
 80062c0:	bf18      	it	ne
 80062c2:	6059      	strne	r1, [r3, #4]
 80062c4:	6863      	ldr	r3, [r4, #4]
 80062c6:	bf08      	it	eq
 80062c8:	f8c8 1000 	streq.w	r1, [r8]
 80062cc:	5162      	str	r2, [r4, r5]
 80062ce:	604b      	str	r3, [r1, #4]
 80062d0:	4638      	mov	r0, r7
 80062d2:	f104 060b 	add.w	r6, r4, #11
 80062d6:	f000 f829 	bl	800632c <__malloc_unlock>
 80062da:	f026 0607 	bic.w	r6, r6, #7
 80062de:	1d23      	adds	r3, r4, #4
 80062e0:	1af2      	subs	r2, r6, r3
 80062e2:	d0ae      	beq.n	8006242 <_malloc_r+0x22>
 80062e4:	1b9b      	subs	r3, r3, r6
 80062e6:	50a3      	str	r3, [r4, r2]
 80062e8:	e7ab      	b.n	8006242 <_malloc_r+0x22>
 80062ea:	42a3      	cmp	r3, r4
 80062ec:	6862      	ldr	r2, [r4, #4]
 80062ee:	d1dd      	bne.n	80062ac <_malloc_r+0x8c>
 80062f0:	f8c8 2000 	str.w	r2, [r8]
 80062f4:	e7ec      	b.n	80062d0 <_malloc_r+0xb0>
 80062f6:	4623      	mov	r3, r4
 80062f8:	6864      	ldr	r4, [r4, #4]
 80062fa:	e7ac      	b.n	8006256 <_malloc_r+0x36>
 80062fc:	4634      	mov	r4, r6
 80062fe:	6876      	ldr	r6, [r6, #4]
 8006300:	e7b4      	b.n	800626c <_malloc_r+0x4c>
 8006302:	4613      	mov	r3, r2
 8006304:	e7cc      	b.n	80062a0 <_malloc_r+0x80>
 8006306:	230c      	movs	r3, #12
 8006308:	4638      	mov	r0, r7
 800630a:	603b      	str	r3, [r7, #0]
 800630c:	f000 f80e 	bl	800632c <__malloc_unlock>
 8006310:	e797      	b.n	8006242 <_malloc_r+0x22>
 8006312:	6025      	str	r5, [r4, #0]
 8006314:	e7dc      	b.n	80062d0 <_malloc_r+0xb0>
 8006316:	605b      	str	r3, [r3, #4]
 8006318:	deff      	udf	#255	; 0xff
 800631a:	bf00      	nop
 800631c:	20001bb8 	.word	0x20001bb8

08006320 <__malloc_lock>:
 8006320:	4801      	ldr	r0, [pc, #4]	; (8006328 <__malloc_lock+0x8>)
 8006322:	f7ff befd 	b.w	8006120 <__retarget_lock_acquire_recursive>
 8006326:	bf00      	nop
 8006328:	20001bb4 	.word	0x20001bb4

0800632c <__malloc_unlock>:
 800632c:	4801      	ldr	r0, [pc, #4]	; (8006334 <__malloc_unlock+0x8>)
 800632e:	f7ff bef8 	b.w	8006122 <__retarget_lock_release_recursive>
 8006332:	bf00      	nop
 8006334:	20001bb4 	.word	0x20001bb4

08006338 <__ssputs_r>:
 8006338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800633c:	461f      	mov	r7, r3
 800633e:	688e      	ldr	r6, [r1, #8]
 8006340:	4682      	mov	sl, r0
 8006342:	42be      	cmp	r6, r7
 8006344:	460c      	mov	r4, r1
 8006346:	4690      	mov	r8, r2
 8006348:	680b      	ldr	r3, [r1, #0]
 800634a:	d82c      	bhi.n	80063a6 <__ssputs_r+0x6e>
 800634c:	898a      	ldrh	r2, [r1, #12]
 800634e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006352:	d026      	beq.n	80063a2 <__ssputs_r+0x6a>
 8006354:	6965      	ldr	r5, [r4, #20]
 8006356:	6909      	ldr	r1, [r1, #16]
 8006358:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800635c:	eba3 0901 	sub.w	r9, r3, r1
 8006360:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006364:	1c7b      	adds	r3, r7, #1
 8006366:	444b      	add	r3, r9
 8006368:	106d      	asrs	r5, r5, #1
 800636a:	429d      	cmp	r5, r3
 800636c:	bf38      	it	cc
 800636e:	461d      	movcc	r5, r3
 8006370:	0553      	lsls	r3, r2, #21
 8006372:	d527      	bpl.n	80063c4 <__ssputs_r+0x8c>
 8006374:	4629      	mov	r1, r5
 8006376:	f7ff ff53 	bl	8006220 <_malloc_r>
 800637a:	4606      	mov	r6, r0
 800637c:	b360      	cbz	r0, 80063d8 <__ssputs_r+0xa0>
 800637e:	464a      	mov	r2, r9
 8006380:	6921      	ldr	r1, [r4, #16]
 8006382:	f7ff fed7 	bl	8006134 <memcpy>
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800638c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006390:	81a3      	strh	r3, [r4, #12]
 8006392:	6126      	str	r6, [r4, #16]
 8006394:	444e      	add	r6, r9
 8006396:	6026      	str	r6, [r4, #0]
 8006398:	463e      	mov	r6, r7
 800639a:	6165      	str	r5, [r4, #20]
 800639c:	eba5 0509 	sub.w	r5, r5, r9
 80063a0:	60a5      	str	r5, [r4, #8]
 80063a2:	42be      	cmp	r6, r7
 80063a4:	d900      	bls.n	80063a8 <__ssputs_r+0x70>
 80063a6:	463e      	mov	r6, r7
 80063a8:	4632      	mov	r2, r6
 80063aa:	4641      	mov	r1, r8
 80063ac:	6820      	ldr	r0, [r4, #0]
 80063ae:	f000 fbba 	bl	8006b26 <memmove>
 80063b2:	2000      	movs	r0, #0
 80063b4:	68a3      	ldr	r3, [r4, #8]
 80063b6:	1b9b      	subs	r3, r3, r6
 80063b8:	60a3      	str	r3, [r4, #8]
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	4433      	add	r3, r6
 80063be:	6023      	str	r3, [r4, #0]
 80063c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063c4:	462a      	mov	r2, r5
 80063c6:	f000 fc09 	bl	8006bdc <_realloc_r>
 80063ca:	4606      	mov	r6, r0
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d1e0      	bne.n	8006392 <__ssputs_r+0x5a>
 80063d0:	4650      	mov	r0, sl
 80063d2:	6921      	ldr	r1, [r4, #16]
 80063d4:	f7ff febc 	bl	8006150 <_free_r>
 80063d8:	230c      	movs	r3, #12
 80063da:	f8ca 3000 	str.w	r3, [sl]
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f04f 30ff 	mov.w	r0, #4294967295
 80063e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e8:	81a3      	strh	r3, [r4, #12]
 80063ea:	e7e9      	b.n	80063c0 <__ssputs_r+0x88>

080063ec <_svfiprintf_r>:
 80063ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f0:	4698      	mov	r8, r3
 80063f2:	898b      	ldrh	r3, [r1, #12]
 80063f4:	4607      	mov	r7, r0
 80063f6:	061b      	lsls	r3, r3, #24
 80063f8:	460d      	mov	r5, r1
 80063fa:	4614      	mov	r4, r2
 80063fc:	b09d      	sub	sp, #116	; 0x74
 80063fe:	d50e      	bpl.n	800641e <_svfiprintf_r+0x32>
 8006400:	690b      	ldr	r3, [r1, #16]
 8006402:	b963      	cbnz	r3, 800641e <_svfiprintf_r+0x32>
 8006404:	2140      	movs	r1, #64	; 0x40
 8006406:	f7ff ff0b 	bl	8006220 <_malloc_r>
 800640a:	6028      	str	r0, [r5, #0]
 800640c:	6128      	str	r0, [r5, #16]
 800640e:	b920      	cbnz	r0, 800641a <_svfiprintf_r+0x2e>
 8006410:	230c      	movs	r3, #12
 8006412:	603b      	str	r3, [r7, #0]
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	e0d0      	b.n	80065bc <_svfiprintf_r+0x1d0>
 800641a:	2340      	movs	r3, #64	; 0x40
 800641c:	616b      	str	r3, [r5, #20]
 800641e:	2300      	movs	r3, #0
 8006420:	9309      	str	r3, [sp, #36]	; 0x24
 8006422:	2320      	movs	r3, #32
 8006424:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006428:	2330      	movs	r3, #48	; 0x30
 800642a:	f04f 0901 	mov.w	r9, #1
 800642e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006432:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80065d4 <_svfiprintf_r+0x1e8>
 8006436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800643a:	4623      	mov	r3, r4
 800643c:	469a      	mov	sl, r3
 800643e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006442:	b10a      	cbz	r2, 8006448 <_svfiprintf_r+0x5c>
 8006444:	2a25      	cmp	r2, #37	; 0x25
 8006446:	d1f9      	bne.n	800643c <_svfiprintf_r+0x50>
 8006448:	ebba 0b04 	subs.w	fp, sl, r4
 800644c:	d00b      	beq.n	8006466 <_svfiprintf_r+0x7a>
 800644e:	465b      	mov	r3, fp
 8006450:	4622      	mov	r2, r4
 8006452:	4629      	mov	r1, r5
 8006454:	4638      	mov	r0, r7
 8006456:	f7ff ff6f 	bl	8006338 <__ssputs_r>
 800645a:	3001      	adds	r0, #1
 800645c:	f000 80a9 	beq.w	80065b2 <_svfiprintf_r+0x1c6>
 8006460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006462:	445a      	add	r2, fp
 8006464:	9209      	str	r2, [sp, #36]	; 0x24
 8006466:	f89a 3000 	ldrb.w	r3, [sl]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 80a1 	beq.w	80065b2 <_svfiprintf_r+0x1c6>
 8006470:	2300      	movs	r3, #0
 8006472:	f04f 32ff 	mov.w	r2, #4294967295
 8006476:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800647a:	f10a 0a01 	add.w	sl, sl, #1
 800647e:	9304      	str	r3, [sp, #16]
 8006480:	9307      	str	r3, [sp, #28]
 8006482:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006486:	931a      	str	r3, [sp, #104]	; 0x68
 8006488:	4654      	mov	r4, sl
 800648a:	2205      	movs	r2, #5
 800648c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006490:	4850      	ldr	r0, [pc, #320]	; (80065d4 <_svfiprintf_r+0x1e8>)
 8006492:	f000 fb95 	bl	8006bc0 <memchr>
 8006496:	9a04      	ldr	r2, [sp, #16]
 8006498:	b9d8      	cbnz	r0, 80064d2 <_svfiprintf_r+0xe6>
 800649a:	06d0      	lsls	r0, r2, #27
 800649c:	bf44      	itt	mi
 800649e:	2320      	movmi	r3, #32
 80064a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064a4:	0711      	lsls	r1, r2, #28
 80064a6:	bf44      	itt	mi
 80064a8:	232b      	movmi	r3, #43	; 0x2b
 80064aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064ae:	f89a 3000 	ldrb.w	r3, [sl]
 80064b2:	2b2a      	cmp	r3, #42	; 0x2a
 80064b4:	d015      	beq.n	80064e2 <_svfiprintf_r+0xf6>
 80064b6:	4654      	mov	r4, sl
 80064b8:	2000      	movs	r0, #0
 80064ba:	f04f 0c0a 	mov.w	ip, #10
 80064be:	9a07      	ldr	r2, [sp, #28]
 80064c0:	4621      	mov	r1, r4
 80064c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064c6:	3b30      	subs	r3, #48	; 0x30
 80064c8:	2b09      	cmp	r3, #9
 80064ca:	d94d      	bls.n	8006568 <_svfiprintf_r+0x17c>
 80064cc:	b1b0      	cbz	r0, 80064fc <_svfiprintf_r+0x110>
 80064ce:	9207      	str	r2, [sp, #28]
 80064d0:	e014      	b.n	80064fc <_svfiprintf_r+0x110>
 80064d2:	eba0 0308 	sub.w	r3, r0, r8
 80064d6:	fa09 f303 	lsl.w	r3, r9, r3
 80064da:	4313      	orrs	r3, r2
 80064dc:	46a2      	mov	sl, r4
 80064de:	9304      	str	r3, [sp, #16]
 80064e0:	e7d2      	b.n	8006488 <_svfiprintf_r+0x9c>
 80064e2:	9b03      	ldr	r3, [sp, #12]
 80064e4:	1d19      	adds	r1, r3, #4
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	9103      	str	r1, [sp, #12]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	bfbb      	ittet	lt
 80064ee:	425b      	neglt	r3, r3
 80064f0:	f042 0202 	orrlt.w	r2, r2, #2
 80064f4:	9307      	strge	r3, [sp, #28]
 80064f6:	9307      	strlt	r3, [sp, #28]
 80064f8:	bfb8      	it	lt
 80064fa:	9204      	strlt	r2, [sp, #16]
 80064fc:	7823      	ldrb	r3, [r4, #0]
 80064fe:	2b2e      	cmp	r3, #46	; 0x2e
 8006500:	d10c      	bne.n	800651c <_svfiprintf_r+0x130>
 8006502:	7863      	ldrb	r3, [r4, #1]
 8006504:	2b2a      	cmp	r3, #42	; 0x2a
 8006506:	d134      	bne.n	8006572 <_svfiprintf_r+0x186>
 8006508:	9b03      	ldr	r3, [sp, #12]
 800650a:	3402      	adds	r4, #2
 800650c:	1d1a      	adds	r2, r3, #4
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	9203      	str	r2, [sp, #12]
 8006512:	2b00      	cmp	r3, #0
 8006514:	bfb8      	it	lt
 8006516:	f04f 33ff 	movlt.w	r3, #4294967295
 800651a:	9305      	str	r3, [sp, #20]
 800651c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80065d8 <_svfiprintf_r+0x1ec>
 8006520:	2203      	movs	r2, #3
 8006522:	4650      	mov	r0, sl
 8006524:	7821      	ldrb	r1, [r4, #0]
 8006526:	f000 fb4b 	bl	8006bc0 <memchr>
 800652a:	b138      	cbz	r0, 800653c <_svfiprintf_r+0x150>
 800652c:	2240      	movs	r2, #64	; 0x40
 800652e:	9b04      	ldr	r3, [sp, #16]
 8006530:	eba0 000a 	sub.w	r0, r0, sl
 8006534:	4082      	lsls	r2, r0
 8006536:	4313      	orrs	r3, r2
 8006538:	3401      	adds	r4, #1
 800653a:	9304      	str	r3, [sp, #16]
 800653c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006540:	2206      	movs	r2, #6
 8006542:	4826      	ldr	r0, [pc, #152]	; (80065dc <_svfiprintf_r+0x1f0>)
 8006544:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006548:	f000 fb3a 	bl	8006bc0 <memchr>
 800654c:	2800      	cmp	r0, #0
 800654e:	d038      	beq.n	80065c2 <_svfiprintf_r+0x1d6>
 8006550:	4b23      	ldr	r3, [pc, #140]	; (80065e0 <_svfiprintf_r+0x1f4>)
 8006552:	bb1b      	cbnz	r3, 800659c <_svfiprintf_r+0x1b0>
 8006554:	9b03      	ldr	r3, [sp, #12]
 8006556:	3307      	adds	r3, #7
 8006558:	f023 0307 	bic.w	r3, r3, #7
 800655c:	3308      	adds	r3, #8
 800655e:	9303      	str	r3, [sp, #12]
 8006560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006562:	4433      	add	r3, r6
 8006564:	9309      	str	r3, [sp, #36]	; 0x24
 8006566:	e768      	b.n	800643a <_svfiprintf_r+0x4e>
 8006568:	460c      	mov	r4, r1
 800656a:	2001      	movs	r0, #1
 800656c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006570:	e7a6      	b.n	80064c0 <_svfiprintf_r+0xd4>
 8006572:	2300      	movs	r3, #0
 8006574:	f04f 0c0a 	mov.w	ip, #10
 8006578:	4619      	mov	r1, r3
 800657a:	3401      	adds	r4, #1
 800657c:	9305      	str	r3, [sp, #20]
 800657e:	4620      	mov	r0, r4
 8006580:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006584:	3a30      	subs	r2, #48	; 0x30
 8006586:	2a09      	cmp	r2, #9
 8006588:	d903      	bls.n	8006592 <_svfiprintf_r+0x1a6>
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0c6      	beq.n	800651c <_svfiprintf_r+0x130>
 800658e:	9105      	str	r1, [sp, #20]
 8006590:	e7c4      	b.n	800651c <_svfiprintf_r+0x130>
 8006592:	4604      	mov	r4, r0
 8006594:	2301      	movs	r3, #1
 8006596:	fb0c 2101 	mla	r1, ip, r1, r2
 800659a:	e7f0      	b.n	800657e <_svfiprintf_r+0x192>
 800659c:	ab03      	add	r3, sp, #12
 800659e:	9300      	str	r3, [sp, #0]
 80065a0:	462a      	mov	r2, r5
 80065a2:	4638      	mov	r0, r7
 80065a4:	4b0f      	ldr	r3, [pc, #60]	; (80065e4 <_svfiprintf_r+0x1f8>)
 80065a6:	a904      	add	r1, sp, #16
 80065a8:	f3af 8000 	nop.w
 80065ac:	1c42      	adds	r2, r0, #1
 80065ae:	4606      	mov	r6, r0
 80065b0:	d1d6      	bne.n	8006560 <_svfiprintf_r+0x174>
 80065b2:	89ab      	ldrh	r3, [r5, #12]
 80065b4:	065b      	lsls	r3, r3, #25
 80065b6:	f53f af2d 	bmi.w	8006414 <_svfiprintf_r+0x28>
 80065ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065bc:	b01d      	add	sp, #116	; 0x74
 80065be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c2:	ab03      	add	r3, sp, #12
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	462a      	mov	r2, r5
 80065c8:	4638      	mov	r0, r7
 80065ca:	4b06      	ldr	r3, [pc, #24]	; (80065e4 <_svfiprintf_r+0x1f8>)
 80065cc:	a904      	add	r1, sp, #16
 80065ce:	f000 f87d 	bl	80066cc <_printf_i>
 80065d2:	e7eb      	b.n	80065ac <_svfiprintf_r+0x1c0>
 80065d4:	08006d8e 	.word	0x08006d8e
 80065d8:	08006d94 	.word	0x08006d94
 80065dc:	08006d98 	.word	0x08006d98
 80065e0:	00000000 	.word	0x00000000
 80065e4:	08006339 	.word	0x08006339

080065e8 <_printf_common>:
 80065e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ec:	4616      	mov	r6, r2
 80065ee:	4699      	mov	r9, r3
 80065f0:	688a      	ldr	r2, [r1, #8]
 80065f2:	690b      	ldr	r3, [r1, #16]
 80065f4:	4607      	mov	r7, r0
 80065f6:	4293      	cmp	r3, r2
 80065f8:	bfb8      	it	lt
 80065fa:	4613      	movlt	r3, r2
 80065fc:	6033      	str	r3, [r6, #0]
 80065fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006602:	460c      	mov	r4, r1
 8006604:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006608:	b10a      	cbz	r2, 800660e <_printf_common+0x26>
 800660a:	3301      	adds	r3, #1
 800660c:	6033      	str	r3, [r6, #0]
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	0699      	lsls	r1, r3, #26
 8006612:	bf42      	ittt	mi
 8006614:	6833      	ldrmi	r3, [r6, #0]
 8006616:	3302      	addmi	r3, #2
 8006618:	6033      	strmi	r3, [r6, #0]
 800661a:	6825      	ldr	r5, [r4, #0]
 800661c:	f015 0506 	ands.w	r5, r5, #6
 8006620:	d106      	bne.n	8006630 <_printf_common+0x48>
 8006622:	f104 0a19 	add.w	sl, r4, #25
 8006626:	68e3      	ldr	r3, [r4, #12]
 8006628:	6832      	ldr	r2, [r6, #0]
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	42ab      	cmp	r3, r5
 800662e:	dc2b      	bgt.n	8006688 <_printf_common+0xa0>
 8006630:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006634:	1e13      	subs	r3, r2, #0
 8006636:	6822      	ldr	r2, [r4, #0]
 8006638:	bf18      	it	ne
 800663a:	2301      	movne	r3, #1
 800663c:	0692      	lsls	r2, r2, #26
 800663e:	d430      	bmi.n	80066a2 <_printf_common+0xba>
 8006640:	4649      	mov	r1, r9
 8006642:	4638      	mov	r0, r7
 8006644:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006648:	47c0      	blx	r8
 800664a:	3001      	adds	r0, #1
 800664c:	d023      	beq.n	8006696 <_printf_common+0xae>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	6922      	ldr	r2, [r4, #16]
 8006652:	f003 0306 	and.w	r3, r3, #6
 8006656:	2b04      	cmp	r3, #4
 8006658:	bf14      	ite	ne
 800665a:	2500      	movne	r5, #0
 800665c:	6833      	ldreq	r3, [r6, #0]
 800665e:	f04f 0600 	mov.w	r6, #0
 8006662:	bf08      	it	eq
 8006664:	68e5      	ldreq	r5, [r4, #12]
 8006666:	f104 041a 	add.w	r4, r4, #26
 800666a:	bf08      	it	eq
 800666c:	1aed      	subeq	r5, r5, r3
 800666e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006672:	bf08      	it	eq
 8006674:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006678:	4293      	cmp	r3, r2
 800667a:	bfc4      	itt	gt
 800667c:	1a9b      	subgt	r3, r3, r2
 800667e:	18ed      	addgt	r5, r5, r3
 8006680:	42b5      	cmp	r5, r6
 8006682:	d11a      	bne.n	80066ba <_printf_common+0xd2>
 8006684:	2000      	movs	r0, #0
 8006686:	e008      	b.n	800669a <_printf_common+0xb2>
 8006688:	2301      	movs	r3, #1
 800668a:	4652      	mov	r2, sl
 800668c:	4649      	mov	r1, r9
 800668e:	4638      	mov	r0, r7
 8006690:	47c0      	blx	r8
 8006692:	3001      	adds	r0, #1
 8006694:	d103      	bne.n	800669e <_printf_common+0xb6>
 8006696:	f04f 30ff 	mov.w	r0, #4294967295
 800669a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800669e:	3501      	adds	r5, #1
 80066a0:	e7c1      	b.n	8006626 <_printf_common+0x3e>
 80066a2:	2030      	movs	r0, #48	; 0x30
 80066a4:	18e1      	adds	r1, r4, r3
 80066a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80066aa:	1c5a      	adds	r2, r3, #1
 80066ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80066b0:	4422      	add	r2, r4
 80066b2:	3302      	adds	r3, #2
 80066b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80066b8:	e7c2      	b.n	8006640 <_printf_common+0x58>
 80066ba:	2301      	movs	r3, #1
 80066bc:	4622      	mov	r2, r4
 80066be:	4649      	mov	r1, r9
 80066c0:	4638      	mov	r0, r7
 80066c2:	47c0      	blx	r8
 80066c4:	3001      	adds	r0, #1
 80066c6:	d0e6      	beq.n	8006696 <_printf_common+0xae>
 80066c8:	3601      	adds	r6, #1
 80066ca:	e7d9      	b.n	8006680 <_printf_common+0x98>

080066cc <_printf_i>:
 80066cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066d0:	7e0f      	ldrb	r7, [r1, #24]
 80066d2:	4691      	mov	r9, r2
 80066d4:	2f78      	cmp	r7, #120	; 0x78
 80066d6:	4680      	mov	r8, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	469a      	mov	sl, r3
 80066dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80066de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80066e2:	d807      	bhi.n	80066f4 <_printf_i+0x28>
 80066e4:	2f62      	cmp	r7, #98	; 0x62
 80066e6:	d80a      	bhi.n	80066fe <_printf_i+0x32>
 80066e8:	2f00      	cmp	r7, #0
 80066ea:	f000 80d5 	beq.w	8006898 <_printf_i+0x1cc>
 80066ee:	2f58      	cmp	r7, #88	; 0x58
 80066f0:	f000 80c1 	beq.w	8006876 <_printf_i+0x1aa>
 80066f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80066fc:	e03a      	b.n	8006774 <_printf_i+0xa8>
 80066fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006702:	2b15      	cmp	r3, #21
 8006704:	d8f6      	bhi.n	80066f4 <_printf_i+0x28>
 8006706:	a101      	add	r1, pc, #4	; (adr r1, 800670c <_printf_i+0x40>)
 8006708:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800670c:	08006765 	.word	0x08006765
 8006710:	08006779 	.word	0x08006779
 8006714:	080066f5 	.word	0x080066f5
 8006718:	080066f5 	.word	0x080066f5
 800671c:	080066f5 	.word	0x080066f5
 8006720:	080066f5 	.word	0x080066f5
 8006724:	08006779 	.word	0x08006779
 8006728:	080066f5 	.word	0x080066f5
 800672c:	080066f5 	.word	0x080066f5
 8006730:	080066f5 	.word	0x080066f5
 8006734:	080066f5 	.word	0x080066f5
 8006738:	0800687f 	.word	0x0800687f
 800673c:	080067a5 	.word	0x080067a5
 8006740:	08006839 	.word	0x08006839
 8006744:	080066f5 	.word	0x080066f5
 8006748:	080066f5 	.word	0x080066f5
 800674c:	080068a1 	.word	0x080068a1
 8006750:	080066f5 	.word	0x080066f5
 8006754:	080067a5 	.word	0x080067a5
 8006758:	080066f5 	.word	0x080066f5
 800675c:	080066f5 	.word	0x080066f5
 8006760:	08006841 	.word	0x08006841
 8006764:	682b      	ldr	r3, [r5, #0]
 8006766:	1d1a      	adds	r2, r3, #4
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	602a      	str	r2, [r5, #0]
 800676c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006770:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006774:	2301      	movs	r3, #1
 8006776:	e0a0      	b.n	80068ba <_printf_i+0x1ee>
 8006778:	6820      	ldr	r0, [r4, #0]
 800677a:	682b      	ldr	r3, [r5, #0]
 800677c:	0607      	lsls	r7, r0, #24
 800677e:	f103 0104 	add.w	r1, r3, #4
 8006782:	6029      	str	r1, [r5, #0]
 8006784:	d501      	bpl.n	800678a <_printf_i+0xbe>
 8006786:	681e      	ldr	r6, [r3, #0]
 8006788:	e003      	b.n	8006792 <_printf_i+0xc6>
 800678a:	0646      	lsls	r6, r0, #25
 800678c:	d5fb      	bpl.n	8006786 <_printf_i+0xba>
 800678e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006792:	2e00      	cmp	r6, #0
 8006794:	da03      	bge.n	800679e <_printf_i+0xd2>
 8006796:	232d      	movs	r3, #45	; 0x2d
 8006798:	4276      	negs	r6, r6
 800679a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800679e:	230a      	movs	r3, #10
 80067a0:	4859      	ldr	r0, [pc, #356]	; (8006908 <_printf_i+0x23c>)
 80067a2:	e012      	b.n	80067ca <_printf_i+0xfe>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	6820      	ldr	r0, [r4, #0]
 80067a8:	1d19      	adds	r1, r3, #4
 80067aa:	6029      	str	r1, [r5, #0]
 80067ac:	0605      	lsls	r5, r0, #24
 80067ae:	d501      	bpl.n	80067b4 <_printf_i+0xe8>
 80067b0:	681e      	ldr	r6, [r3, #0]
 80067b2:	e002      	b.n	80067ba <_printf_i+0xee>
 80067b4:	0641      	lsls	r1, r0, #25
 80067b6:	d5fb      	bpl.n	80067b0 <_printf_i+0xe4>
 80067b8:	881e      	ldrh	r6, [r3, #0]
 80067ba:	2f6f      	cmp	r7, #111	; 0x6f
 80067bc:	bf0c      	ite	eq
 80067be:	2308      	moveq	r3, #8
 80067c0:	230a      	movne	r3, #10
 80067c2:	4851      	ldr	r0, [pc, #324]	; (8006908 <_printf_i+0x23c>)
 80067c4:	2100      	movs	r1, #0
 80067c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80067ca:	6865      	ldr	r5, [r4, #4]
 80067cc:	2d00      	cmp	r5, #0
 80067ce:	bfa8      	it	ge
 80067d0:	6821      	ldrge	r1, [r4, #0]
 80067d2:	60a5      	str	r5, [r4, #8]
 80067d4:	bfa4      	itt	ge
 80067d6:	f021 0104 	bicge.w	r1, r1, #4
 80067da:	6021      	strge	r1, [r4, #0]
 80067dc:	b90e      	cbnz	r6, 80067e2 <_printf_i+0x116>
 80067de:	2d00      	cmp	r5, #0
 80067e0:	d04b      	beq.n	800687a <_printf_i+0x1ae>
 80067e2:	4615      	mov	r5, r2
 80067e4:	fbb6 f1f3 	udiv	r1, r6, r3
 80067e8:	fb03 6711 	mls	r7, r3, r1, r6
 80067ec:	5dc7      	ldrb	r7, [r0, r7]
 80067ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80067f2:	4637      	mov	r7, r6
 80067f4:	42bb      	cmp	r3, r7
 80067f6:	460e      	mov	r6, r1
 80067f8:	d9f4      	bls.n	80067e4 <_printf_i+0x118>
 80067fa:	2b08      	cmp	r3, #8
 80067fc:	d10b      	bne.n	8006816 <_printf_i+0x14a>
 80067fe:	6823      	ldr	r3, [r4, #0]
 8006800:	07de      	lsls	r6, r3, #31
 8006802:	d508      	bpl.n	8006816 <_printf_i+0x14a>
 8006804:	6923      	ldr	r3, [r4, #16]
 8006806:	6861      	ldr	r1, [r4, #4]
 8006808:	4299      	cmp	r1, r3
 800680a:	bfde      	ittt	le
 800680c:	2330      	movle	r3, #48	; 0x30
 800680e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006812:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006816:	1b52      	subs	r2, r2, r5
 8006818:	6122      	str	r2, [r4, #16]
 800681a:	464b      	mov	r3, r9
 800681c:	4621      	mov	r1, r4
 800681e:	4640      	mov	r0, r8
 8006820:	f8cd a000 	str.w	sl, [sp]
 8006824:	aa03      	add	r2, sp, #12
 8006826:	f7ff fedf 	bl	80065e8 <_printf_common>
 800682a:	3001      	adds	r0, #1
 800682c:	d14a      	bne.n	80068c4 <_printf_i+0x1f8>
 800682e:	f04f 30ff 	mov.w	r0, #4294967295
 8006832:	b004      	add	sp, #16
 8006834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	f043 0320 	orr.w	r3, r3, #32
 800683e:	6023      	str	r3, [r4, #0]
 8006840:	2778      	movs	r7, #120	; 0x78
 8006842:	4832      	ldr	r0, [pc, #200]	; (800690c <_printf_i+0x240>)
 8006844:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	6829      	ldr	r1, [r5, #0]
 800684c:	061f      	lsls	r7, r3, #24
 800684e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006852:	d402      	bmi.n	800685a <_printf_i+0x18e>
 8006854:	065f      	lsls	r7, r3, #25
 8006856:	bf48      	it	mi
 8006858:	b2b6      	uxthmi	r6, r6
 800685a:	07df      	lsls	r7, r3, #31
 800685c:	bf48      	it	mi
 800685e:	f043 0320 	orrmi.w	r3, r3, #32
 8006862:	6029      	str	r1, [r5, #0]
 8006864:	bf48      	it	mi
 8006866:	6023      	strmi	r3, [r4, #0]
 8006868:	b91e      	cbnz	r6, 8006872 <_printf_i+0x1a6>
 800686a:	6823      	ldr	r3, [r4, #0]
 800686c:	f023 0320 	bic.w	r3, r3, #32
 8006870:	6023      	str	r3, [r4, #0]
 8006872:	2310      	movs	r3, #16
 8006874:	e7a6      	b.n	80067c4 <_printf_i+0xf8>
 8006876:	4824      	ldr	r0, [pc, #144]	; (8006908 <_printf_i+0x23c>)
 8006878:	e7e4      	b.n	8006844 <_printf_i+0x178>
 800687a:	4615      	mov	r5, r2
 800687c:	e7bd      	b.n	80067fa <_printf_i+0x12e>
 800687e:	682b      	ldr	r3, [r5, #0]
 8006880:	6826      	ldr	r6, [r4, #0]
 8006882:	1d18      	adds	r0, r3, #4
 8006884:	6961      	ldr	r1, [r4, #20]
 8006886:	6028      	str	r0, [r5, #0]
 8006888:	0635      	lsls	r5, r6, #24
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	d501      	bpl.n	8006892 <_printf_i+0x1c6>
 800688e:	6019      	str	r1, [r3, #0]
 8006890:	e002      	b.n	8006898 <_printf_i+0x1cc>
 8006892:	0670      	lsls	r0, r6, #25
 8006894:	d5fb      	bpl.n	800688e <_printf_i+0x1c2>
 8006896:	8019      	strh	r1, [r3, #0]
 8006898:	2300      	movs	r3, #0
 800689a:	4615      	mov	r5, r2
 800689c:	6123      	str	r3, [r4, #16]
 800689e:	e7bc      	b.n	800681a <_printf_i+0x14e>
 80068a0:	682b      	ldr	r3, [r5, #0]
 80068a2:	2100      	movs	r1, #0
 80068a4:	1d1a      	adds	r2, r3, #4
 80068a6:	602a      	str	r2, [r5, #0]
 80068a8:	681d      	ldr	r5, [r3, #0]
 80068aa:	6862      	ldr	r2, [r4, #4]
 80068ac:	4628      	mov	r0, r5
 80068ae:	f000 f987 	bl	8006bc0 <memchr>
 80068b2:	b108      	cbz	r0, 80068b8 <_printf_i+0x1ec>
 80068b4:	1b40      	subs	r0, r0, r5
 80068b6:	6060      	str	r0, [r4, #4]
 80068b8:	6863      	ldr	r3, [r4, #4]
 80068ba:	6123      	str	r3, [r4, #16]
 80068bc:	2300      	movs	r3, #0
 80068be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068c2:	e7aa      	b.n	800681a <_printf_i+0x14e>
 80068c4:	462a      	mov	r2, r5
 80068c6:	4649      	mov	r1, r9
 80068c8:	4640      	mov	r0, r8
 80068ca:	6923      	ldr	r3, [r4, #16]
 80068cc:	47d0      	blx	sl
 80068ce:	3001      	adds	r0, #1
 80068d0:	d0ad      	beq.n	800682e <_printf_i+0x162>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	079b      	lsls	r3, r3, #30
 80068d6:	d413      	bmi.n	8006900 <_printf_i+0x234>
 80068d8:	68e0      	ldr	r0, [r4, #12]
 80068da:	9b03      	ldr	r3, [sp, #12]
 80068dc:	4298      	cmp	r0, r3
 80068de:	bfb8      	it	lt
 80068e0:	4618      	movlt	r0, r3
 80068e2:	e7a6      	b.n	8006832 <_printf_i+0x166>
 80068e4:	2301      	movs	r3, #1
 80068e6:	4632      	mov	r2, r6
 80068e8:	4649      	mov	r1, r9
 80068ea:	4640      	mov	r0, r8
 80068ec:	47d0      	blx	sl
 80068ee:	3001      	adds	r0, #1
 80068f0:	d09d      	beq.n	800682e <_printf_i+0x162>
 80068f2:	3501      	adds	r5, #1
 80068f4:	68e3      	ldr	r3, [r4, #12]
 80068f6:	9903      	ldr	r1, [sp, #12]
 80068f8:	1a5b      	subs	r3, r3, r1
 80068fa:	42ab      	cmp	r3, r5
 80068fc:	dcf2      	bgt.n	80068e4 <_printf_i+0x218>
 80068fe:	e7eb      	b.n	80068d8 <_printf_i+0x20c>
 8006900:	2500      	movs	r5, #0
 8006902:	f104 0619 	add.w	r6, r4, #25
 8006906:	e7f5      	b.n	80068f4 <_printf_i+0x228>
 8006908:	08006d9f 	.word	0x08006d9f
 800690c:	08006db0 	.word	0x08006db0

08006910 <__sflush_r>:
 8006910:	898a      	ldrh	r2, [r1, #12]
 8006912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006914:	4605      	mov	r5, r0
 8006916:	0710      	lsls	r0, r2, #28
 8006918:	460c      	mov	r4, r1
 800691a:	d457      	bmi.n	80069cc <__sflush_r+0xbc>
 800691c:	684b      	ldr	r3, [r1, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	dc04      	bgt.n	800692c <__sflush_r+0x1c>
 8006922:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006924:	2b00      	cmp	r3, #0
 8006926:	dc01      	bgt.n	800692c <__sflush_r+0x1c>
 8006928:	2000      	movs	r0, #0
 800692a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800692c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800692e:	2e00      	cmp	r6, #0
 8006930:	d0fa      	beq.n	8006928 <__sflush_r+0x18>
 8006932:	2300      	movs	r3, #0
 8006934:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006938:	682f      	ldr	r7, [r5, #0]
 800693a:	6a21      	ldr	r1, [r4, #32]
 800693c:	602b      	str	r3, [r5, #0]
 800693e:	d032      	beq.n	80069a6 <__sflush_r+0x96>
 8006940:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006942:	89a3      	ldrh	r3, [r4, #12]
 8006944:	075a      	lsls	r2, r3, #29
 8006946:	d505      	bpl.n	8006954 <__sflush_r+0x44>
 8006948:	6863      	ldr	r3, [r4, #4]
 800694a:	1ac0      	subs	r0, r0, r3
 800694c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800694e:	b10b      	cbz	r3, 8006954 <__sflush_r+0x44>
 8006950:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006952:	1ac0      	subs	r0, r0, r3
 8006954:	2300      	movs	r3, #0
 8006956:	4602      	mov	r2, r0
 8006958:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800695a:	4628      	mov	r0, r5
 800695c:	6a21      	ldr	r1, [r4, #32]
 800695e:	47b0      	blx	r6
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	89a3      	ldrh	r3, [r4, #12]
 8006964:	d106      	bne.n	8006974 <__sflush_r+0x64>
 8006966:	6829      	ldr	r1, [r5, #0]
 8006968:	291d      	cmp	r1, #29
 800696a:	d82b      	bhi.n	80069c4 <__sflush_r+0xb4>
 800696c:	4a28      	ldr	r2, [pc, #160]	; (8006a10 <__sflush_r+0x100>)
 800696e:	410a      	asrs	r2, r1
 8006970:	07d6      	lsls	r6, r2, #31
 8006972:	d427      	bmi.n	80069c4 <__sflush_r+0xb4>
 8006974:	2200      	movs	r2, #0
 8006976:	6062      	str	r2, [r4, #4]
 8006978:	6922      	ldr	r2, [r4, #16]
 800697a:	04d9      	lsls	r1, r3, #19
 800697c:	6022      	str	r2, [r4, #0]
 800697e:	d504      	bpl.n	800698a <__sflush_r+0x7a>
 8006980:	1c42      	adds	r2, r0, #1
 8006982:	d101      	bne.n	8006988 <__sflush_r+0x78>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	b903      	cbnz	r3, 800698a <__sflush_r+0x7a>
 8006988:	6560      	str	r0, [r4, #84]	; 0x54
 800698a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800698c:	602f      	str	r7, [r5, #0]
 800698e:	2900      	cmp	r1, #0
 8006990:	d0ca      	beq.n	8006928 <__sflush_r+0x18>
 8006992:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006996:	4299      	cmp	r1, r3
 8006998:	d002      	beq.n	80069a0 <__sflush_r+0x90>
 800699a:	4628      	mov	r0, r5
 800699c:	f7ff fbd8 	bl	8006150 <_free_r>
 80069a0:	2000      	movs	r0, #0
 80069a2:	6360      	str	r0, [r4, #52]	; 0x34
 80069a4:	e7c1      	b.n	800692a <__sflush_r+0x1a>
 80069a6:	2301      	movs	r3, #1
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b0      	blx	r6
 80069ac:	1c41      	adds	r1, r0, #1
 80069ae:	d1c8      	bne.n	8006942 <__sflush_r+0x32>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d0c5      	beq.n	8006942 <__sflush_r+0x32>
 80069b6:	2b1d      	cmp	r3, #29
 80069b8:	d001      	beq.n	80069be <__sflush_r+0xae>
 80069ba:	2b16      	cmp	r3, #22
 80069bc:	d101      	bne.n	80069c2 <__sflush_r+0xb2>
 80069be:	602f      	str	r7, [r5, #0]
 80069c0:	e7b2      	b.n	8006928 <__sflush_r+0x18>
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c8:	81a3      	strh	r3, [r4, #12]
 80069ca:	e7ae      	b.n	800692a <__sflush_r+0x1a>
 80069cc:	690f      	ldr	r7, [r1, #16]
 80069ce:	2f00      	cmp	r7, #0
 80069d0:	d0aa      	beq.n	8006928 <__sflush_r+0x18>
 80069d2:	0793      	lsls	r3, r2, #30
 80069d4:	bf18      	it	ne
 80069d6:	2300      	movne	r3, #0
 80069d8:	680e      	ldr	r6, [r1, #0]
 80069da:	bf08      	it	eq
 80069dc:	694b      	ldreq	r3, [r1, #20]
 80069de:	1bf6      	subs	r6, r6, r7
 80069e0:	600f      	str	r7, [r1, #0]
 80069e2:	608b      	str	r3, [r1, #8]
 80069e4:	2e00      	cmp	r6, #0
 80069e6:	dd9f      	ble.n	8006928 <__sflush_r+0x18>
 80069e8:	4633      	mov	r3, r6
 80069ea:	463a      	mov	r2, r7
 80069ec:	4628      	mov	r0, r5
 80069ee:	6a21      	ldr	r1, [r4, #32]
 80069f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80069f4:	47e0      	blx	ip
 80069f6:	2800      	cmp	r0, #0
 80069f8:	dc06      	bgt.n	8006a08 <__sflush_r+0xf8>
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006a00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	e790      	b.n	800692a <__sflush_r+0x1a>
 8006a08:	4407      	add	r7, r0
 8006a0a:	1a36      	subs	r6, r6, r0
 8006a0c:	e7ea      	b.n	80069e4 <__sflush_r+0xd4>
 8006a0e:	bf00      	nop
 8006a10:	dfbffffe 	.word	0xdfbffffe

08006a14 <_fflush_r>:
 8006a14:	b538      	push	{r3, r4, r5, lr}
 8006a16:	690b      	ldr	r3, [r1, #16]
 8006a18:	4605      	mov	r5, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	b913      	cbnz	r3, 8006a24 <_fflush_r+0x10>
 8006a1e:	2500      	movs	r5, #0
 8006a20:	4628      	mov	r0, r5
 8006a22:	bd38      	pop	{r3, r4, r5, pc}
 8006a24:	b118      	cbz	r0, 8006a2e <_fflush_r+0x1a>
 8006a26:	6a03      	ldr	r3, [r0, #32]
 8006a28:	b90b      	cbnz	r3, 8006a2e <_fflush_r+0x1a>
 8006a2a:	f7ff f967 	bl	8005cfc <__sinit>
 8006a2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d0f3      	beq.n	8006a1e <_fflush_r+0xa>
 8006a36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a38:	07d0      	lsls	r0, r2, #31
 8006a3a:	d404      	bmi.n	8006a46 <_fflush_r+0x32>
 8006a3c:	0599      	lsls	r1, r3, #22
 8006a3e:	d402      	bmi.n	8006a46 <_fflush_r+0x32>
 8006a40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a42:	f7ff fb6d 	bl	8006120 <__retarget_lock_acquire_recursive>
 8006a46:	4628      	mov	r0, r5
 8006a48:	4621      	mov	r1, r4
 8006a4a:	f7ff ff61 	bl	8006910 <__sflush_r>
 8006a4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a50:	4605      	mov	r5, r0
 8006a52:	07da      	lsls	r2, r3, #31
 8006a54:	d4e4      	bmi.n	8006a20 <_fflush_r+0xc>
 8006a56:	89a3      	ldrh	r3, [r4, #12]
 8006a58:	059b      	lsls	r3, r3, #22
 8006a5a:	d4e1      	bmi.n	8006a20 <_fflush_r+0xc>
 8006a5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a5e:	f7ff fb60 	bl	8006122 <__retarget_lock_release_recursive>
 8006a62:	e7dd      	b.n	8006a20 <_fflush_r+0xc>

08006a64 <__swhatbuf_r>:
 8006a64:	b570      	push	{r4, r5, r6, lr}
 8006a66:	460c      	mov	r4, r1
 8006a68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a6c:	4615      	mov	r5, r2
 8006a6e:	2900      	cmp	r1, #0
 8006a70:	461e      	mov	r6, r3
 8006a72:	b096      	sub	sp, #88	; 0x58
 8006a74:	da0c      	bge.n	8006a90 <__swhatbuf_r+0x2c>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	2100      	movs	r1, #0
 8006a7a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a7e:	bf0c      	ite	eq
 8006a80:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a84:	2340      	movne	r3, #64	; 0x40
 8006a86:	2000      	movs	r0, #0
 8006a88:	6031      	str	r1, [r6, #0]
 8006a8a:	602b      	str	r3, [r5, #0]
 8006a8c:	b016      	add	sp, #88	; 0x58
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	466a      	mov	r2, sp
 8006a92:	f000 f863 	bl	8006b5c <_fstat_r>
 8006a96:	2800      	cmp	r0, #0
 8006a98:	dbed      	blt.n	8006a76 <__swhatbuf_r+0x12>
 8006a9a:	9901      	ldr	r1, [sp, #4]
 8006a9c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006aa0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006aa4:	4259      	negs	r1, r3
 8006aa6:	4159      	adcs	r1, r3
 8006aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aac:	e7eb      	b.n	8006a86 <__swhatbuf_r+0x22>

08006aae <__smakebuf_r>:
 8006aae:	898b      	ldrh	r3, [r1, #12]
 8006ab0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ab2:	079d      	lsls	r5, r3, #30
 8006ab4:	4606      	mov	r6, r0
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	d507      	bpl.n	8006aca <__smakebuf_r+0x1c>
 8006aba:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	6123      	str	r3, [r4, #16]
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	6163      	str	r3, [r4, #20]
 8006ac6:	b002      	add	sp, #8
 8006ac8:	bd70      	pop	{r4, r5, r6, pc}
 8006aca:	466a      	mov	r2, sp
 8006acc:	ab01      	add	r3, sp, #4
 8006ace:	f7ff ffc9 	bl	8006a64 <__swhatbuf_r>
 8006ad2:	9900      	ldr	r1, [sp, #0]
 8006ad4:	4605      	mov	r5, r0
 8006ad6:	4630      	mov	r0, r6
 8006ad8:	f7ff fba2 	bl	8006220 <_malloc_r>
 8006adc:	b948      	cbnz	r0, 8006af2 <__smakebuf_r+0x44>
 8006ade:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ae2:	059a      	lsls	r2, r3, #22
 8006ae4:	d4ef      	bmi.n	8006ac6 <__smakebuf_r+0x18>
 8006ae6:	f023 0303 	bic.w	r3, r3, #3
 8006aea:	f043 0302 	orr.w	r3, r3, #2
 8006aee:	81a3      	strh	r3, [r4, #12]
 8006af0:	e7e3      	b.n	8006aba <__smakebuf_r+0xc>
 8006af2:	89a3      	ldrh	r3, [r4, #12]
 8006af4:	6020      	str	r0, [r4, #0]
 8006af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006afa:	81a3      	strh	r3, [r4, #12]
 8006afc:	9b00      	ldr	r3, [sp, #0]
 8006afe:	6120      	str	r0, [r4, #16]
 8006b00:	6163      	str	r3, [r4, #20]
 8006b02:	9b01      	ldr	r3, [sp, #4]
 8006b04:	b15b      	cbz	r3, 8006b1e <__smakebuf_r+0x70>
 8006b06:	4630      	mov	r0, r6
 8006b08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b0c:	f000 f838 	bl	8006b80 <_isatty_r>
 8006b10:	b128      	cbz	r0, 8006b1e <__smakebuf_r+0x70>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f023 0303 	bic.w	r3, r3, #3
 8006b18:	f043 0301 	orr.w	r3, r3, #1
 8006b1c:	81a3      	strh	r3, [r4, #12]
 8006b1e:	89a3      	ldrh	r3, [r4, #12]
 8006b20:	431d      	orrs	r5, r3
 8006b22:	81a5      	strh	r5, [r4, #12]
 8006b24:	e7cf      	b.n	8006ac6 <__smakebuf_r+0x18>

08006b26 <memmove>:
 8006b26:	4288      	cmp	r0, r1
 8006b28:	b510      	push	{r4, lr}
 8006b2a:	eb01 0402 	add.w	r4, r1, r2
 8006b2e:	d902      	bls.n	8006b36 <memmove+0x10>
 8006b30:	4284      	cmp	r4, r0
 8006b32:	4623      	mov	r3, r4
 8006b34:	d807      	bhi.n	8006b46 <memmove+0x20>
 8006b36:	1e43      	subs	r3, r0, #1
 8006b38:	42a1      	cmp	r1, r4
 8006b3a:	d008      	beq.n	8006b4e <memmove+0x28>
 8006b3c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b40:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b44:	e7f8      	b.n	8006b38 <memmove+0x12>
 8006b46:	4601      	mov	r1, r0
 8006b48:	4402      	add	r2, r0
 8006b4a:	428a      	cmp	r2, r1
 8006b4c:	d100      	bne.n	8006b50 <memmove+0x2a>
 8006b4e:	bd10      	pop	{r4, pc}
 8006b50:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b54:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b58:	e7f7      	b.n	8006b4a <memmove+0x24>
	...

08006b5c <_fstat_r>:
 8006b5c:	b538      	push	{r3, r4, r5, lr}
 8006b5e:	2300      	movs	r3, #0
 8006b60:	4d06      	ldr	r5, [pc, #24]	; (8006b7c <_fstat_r+0x20>)
 8006b62:	4604      	mov	r4, r0
 8006b64:	4608      	mov	r0, r1
 8006b66:	4611      	mov	r1, r2
 8006b68:	602b      	str	r3, [r5, #0]
 8006b6a:	f7f9 ff5f 	bl	8000a2c <_fstat>
 8006b6e:	1c43      	adds	r3, r0, #1
 8006b70:	d102      	bne.n	8006b78 <_fstat_r+0x1c>
 8006b72:	682b      	ldr	r3, [r5, #0]
 8006b74:	b103      	cbz	r3, 8006b78 <_fstat_r+0x1c>
 8006b76:	6023      	str	r3, [r4, #0]
 8006b78:	bd38      	pop	{r3, r4, r5, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20001bb0 	.word	0x20001bb0

08006b80 <_isatty_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	2300      	movs	r3, #0
 8006b84:	4d05      	ldr	r5, [pc, #20]	; (8006b9c <_isatty_r+0x1c>)
 8006b86:	4604      	mov	r4, r0
 8006b88:	4608      	mov	r0, r1
 8006b8a:	602b      	str	r3, [r5, #0]
 8006b8c:	f7f9 ff5d 	bl	8000a4a <_isatty>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	d102      	bne.n	8006b9a <_isatty_r+0x1a>
 8006b94:	682b      	ldr	r3, [r5, #0]
 8006b96:	b103      	cbz	r3, 8006b9a <_isatty_r+0x1a>
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	bd38      	pop	{r3, r4, r5, pc}
 8006b9c:	20001bb0 	.word	0x20001bb0

08006ba0 <_sbrk_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	4d05      	ldr	r5, [pc, #20]	; (8006bbc <_sbrk_r+0x1c>)
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	602b      	str	r3, [r5, #0]
 8006bac:	f000 f84e 	bl	8006c4c <_sbrk>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_sbrk_r+0x1a>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_sbrk_r+0x1a>
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	20001bb0 	.word	0x20001bb0

08006bc0 <memchr>:
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	b510      	push	{r4, lr}
 8006bc4:	b2c9      	uxtb	r1, r1
 8006bc6:	4402      	add	r2, r0
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	d101      	bne.n	8006bd2 <memchr+0x12>
 8006bce:	2000      	movs	r0, #0
 8006bd0:	e003      	b.n	8006bda <memchr+0x1a>
 8006bd2:	7804      	ldrb	r4, [r0, #0]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	428c      	cmp	r4, r1
 8006bd8:	d1f6      	bne.n	8006bc8 <memchr+0x8>
 8006bda:	bd10      	pop	{r4, pc}

08006bdc <_realloc_r>:
 8006bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006be0:	4680      	mov	r8, r0
 8006be2:	4614      	mov	r4, r2
 8006be4:	460e      	mov	r6, r1
 8006be6:	b921      	cbnz	r1, 8006bf2 <_realloc_r+0x16>
 8006be8:	4611      	mov	r1, r2
 8006bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bee:	f7ff bb17 	b.w	8006220 <_malloc_r>
 8006bf2:	b92a      	cbnz	r2, 8006c00 <_realloc_r+0x24>
 8006bf4:	f7ff faac 	bl	8006150 <_free_r>
 8006bf8:	4625      	mov	r5, r4
 8006bfa:	4628      	mov	r0, r5
 8006bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c00:	f000 f81b 	bl	8006c3a <_malloc_usable_size_r>
 8006c04:	4284      	cmp	r4, r0
 8006c06:	4607      	mov	r7, r0
 8006c08:	d802      	bhi.n	8006c10 <_realloc_r+0x34>
 8006c0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c0e:	d812      	bhi.n	8006c36 <_realloc_r+0x5a>
 8006c10:	4621      	mov	r1, r4
 8006c12:	4640      	mov	r0, r8
 8006c14:	f7ff fb04 	bl	8006220 <_malloc_r>
 8006c18:	4605      	mov	r5, r0
 8006c1a:	2800      	cmp	r0, #0
 8006c1c:	d0ed      	beq.n	8006bfa <_realloc_r+0x1e>
 8006c1e:	42bc      	cmp	r4, r7
 8006c20:	4622      	mov	r2, r4
 8006c22:	4631      	mov	r1, r6
 8006c24:	bf28      	it	cs
 8006c26:	463a      	movcs	r2, r7
 8006c28:	f7ff fa84 	bl	8006134 <memcpy>
 8006c2c:	4631      	mov	r1, r6
 8006c2e:	4640      	mov	r0, r8
 8006c30:	f7ff fa8e 	bl	8006150 <_free_r>
 8006c34:	e7e1      	b.n	8006bfa <_realloc_r+0x1e>
 8006c36:	4635      	mov	r5, r6
 8006c38:	e7df      	b.n	8006bfa <_realloc_r+0x1e>

08006c3a <_malloc_usable_size_r>:
 8006c3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c3e:	1f18      	subs	r0, r3, #4
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bfbc      	itt	lt
 8006c44:	580b      	ldrlt	r3, [r1, r0]
 8006c46:	18c0      	addlt	r0, r0, r3
 8006c48:	4770      	bx	lr
	...

08006c4c <_sbrk>:
 8006c4c:	4a04      	ldr	r2, [pc, #16]	; (8006c60 <_sbrk+0x14>)
 8006c4e:	4603      	mov	r3, r0
 8006c50:	6811      	ldr	r1, [r2, #0]
 8006c52:	b909      	cbnz	r1, 8006c58 <_sbrk+0xc>
 8006c54:	4903      	ldr	r1, [pc, #12]	; (8006c64 <_sbrk+0x18>)
 8006c56:	6011      	str	r1, [r2, #0]
 8006c58:	6810      	ldr	r0, [r2, #0]
 8006c5a:	4403      	add	r3, r0
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	4770      	bx	lr
 8006c60:	20001bc0 	.word	0x20001bc0
 8006c64:	20001bc8 	.word	0x20001bc8

08006c68 <_init>:
 8006c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c6a:	bf00      	nop
 8006c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c6e:	bc08      	pop	{r3}
 8006c70:	469e      	mov	lr, r3
 8006c72:	4770      	bx	lr

08006c74 <_fini>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr
