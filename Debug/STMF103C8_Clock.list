
STMF103C8_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008ef4  08008ef4  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08008ef4  08008ef4  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008ef4  08008ef4  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef4  08008ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ef8  08008ef8  00018ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000029ac  20000090  08008f8c  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002a3c  08008f8c  00022a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY
 13 .debug_info   000198d2  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f28  00000000  00000000  000399ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  0003d8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001288  00000000  00000000  0003f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c2a5  00000000  00000000  00040390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bf1c  00000000  00000000  0005c635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d4cb  00000000  00000000  00078551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006b84  00000000  00000000  00115a1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000099  00000000  00000000  0011c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08008cb8 	.word	0x08008cb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08008cb8 	.word	0x08008cb8

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20001a74 	.word	0x20001a74

080001dc <Format_to_12>:

/*
 * Support functions
 * */
static uint8_t Format_to_12(RTC_TimeTypeDef const *RTC_Struct_Info)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b084      	sub	sp, #16
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	uint8_t hours_local_var = RTC_Struct_Info->Hours;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	73fb      	strb	r3, [r7, #15]
	strcpy((char*)time_format,(char*)time_format_am);
 80001ea:	4912      	ldr	r1, [pc, #72]	; (8000234 <Format_to_12+0x58>)
 80001ec:	4812      	ldr	r0, [pc, #72]	; (8000238 <Format_to_12+0x5c>)
 80001ee:	f007 ffc1 	bl	8008174 <strcpy>
	if(RTC_Struct_Info->Hours == 0x00u)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d102      	bne.n	8000200 <Format_to_12+0x24>
	{
		hours_local_var = 12;
 80001fa:	230c      	movs	r3, #12
 80001fc:	73fb      	strb	r3, [r7, #15]
 80001fe:	e014      	b.n	800022a <Format_to_12+0x4e>
	}
	else if(RTC_Struct_Info->Hours > 12u)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	2b0c      	cmp	r3, #12
 8000206:	d908      	bls.n	800021a <Format_to_12+0x3e>
	{
		hours_local_var = RTC_Struct_Info->Hours - 12u;
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	781b      	ldrb	r3, [r3, #0]
 800020c:	3b0c      	subs	r3, #12
 800020e:	73fb      	strb	r3, [r7, #15]
		strcpy((char*)time_format,(char*)time_format_pm);
 8000210:	490a      	ldr	r1, [pc, #40]	; (800023c <Format_to_12+0x60>)
 8000212:	4809      	ldr	r0, [pc, #36]	; (8000238 <Format_to_12+0x5c>)
 8000214:	f007 ffae 	bl	8008174 <strcpy>
 8000218:	e007      	b.n	800022a <Format_to_12+0x4e>
	}
	else if(RTC_Struct_Info->Hours == 12u)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	781b      	ldrb	r3, [r3, #0]
 800021e:	2b0c      	cmp	r3, #12
 8000220:	d103      	bne.n	800022a <Format_to_12+0x4e>
	{
		strcpy((char*)time_format,(char*)time_format_am);
 8000222:	4904      	ldr	r1, [pc, #16]	; (8000234 <Format_to_12+0x58>)
 8000224:	4804      	ldr	r0, [pc, #16]	; (8000238 <Format_to_12+0x5c>)
 8000226:	f007 ffa5 	bl	8008174 <strcpy>
	}
	return hours_local_var;
 800022a:	7bfb      	ldrb	r3, [r7, #15]
}
 800022c:	4618      	mov	r0, r3
 800022e:	3710      	adds	r7, #16
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	20000004 	.word	0x20000004
 8000238:	200000ac 	.word	0x200000ac
 800023c:	20000008 	.word	0x20000008

08000240 <wrapper_tx_data>:
//
//	return local_RTC;
//}

void wrapper_tx_data(Local_RTC_T const *data, TxUART * buffer_data, data_type_T conversion_type)
{
 8000240:	b590      	push	{r4, r7, lr}
 8000242:	b087      	sub	sp, #28
 8000244:	af02      	add	r7, sp, #8
 8000246:	60f8      	str	r0, [r7, #12]
 8000248:	60b9      	str	r1, [r7, #8]
 800024a:	4613      	mov	r3, r2
 800024c:	71fb      	strb	r3, [r7, #7]
	if(time == conversion_type)
 800024e:	79fb      	ldrb	r3, [r7, #7]
 8000250:	2b00      	cmp	r3, #0
 8000252:	d117      	bne.n	8000284 <wrapper_tx_data+0x44>
	{
		buffer_data->Message_Length = sprintf((char*)buffer_data->Message_Data, "t0.txt=\"%02d:%02d:%02d %s\"",data->Local_RTC_Time.Hours, data->Local_RTC_Time.Minutes, data->Local_RTC_Time.Seconds, time_format);
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	1c98      	adds	r0, r3, #2
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	4619      	mov	r1, r3
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	785b      	ldrb	r3, [r3, #1]
 8000262:	461c      	mov	r4, r3
 8000264:	68fb      	ldr	r3, [r7, #12]
 8000266:	789b      	ldrb	r3, [r3, #2]
 8000268:	461a      	mov	r2, r3
 800026a:	4b12      	ldr	r3, [pc, #72]	; (80002b4 <wrapper_tx_data+0x74>)
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	9200      	str	r2, [sp, #0]
 8000270:	4623      	mov	r3, r4
 8000272:	460a      	mov	r2, r1
 8000274:	4910      	ldr	r1, [pc, #64]	; (80002b8 <wrapper_tx_data+0x78>)
 8000276:	f007 fdfd 	bl	8007e74 <siprintf>
 800027a:	4603      	mov	r3, r0
 800027c:	b29a      	uxth	r2, r3
 800027e:	68bb      	ldr	r3, [r7, #8]
 8000280:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		buffer_data->Message_Length = sprintf((char*)buffer_data->Message_Data, "t1.txt=\"%d/%d/%d\"",data->Local_RTC_Date.Date, data->Local_RTC_Date.Month, data->Local_RTC_Date.Year);
	}
}
 8000282:	e012      	b.n	80002aa <wrapper_tx_data+0x6a>
		buffer_data->Message_Length = sprintf((char*)buffer_data->Message_Data, "t1.txt=\"%d/%d/%d\"",data->Local_RTC_Date.Date, data->Local_RTC_Date.Month, data->Local_RTC_Date.Year);
 8000284:	68bb      	ldr	r3, [r7, #8]
 8000286:	1c98      	adds	r0, r3, #2
 8000288:	68fb      	ldr	r3, [r7, #12]
 800028a:	795b      	ldrb	r3, [r3, #5]
 800028c:	461a      	mov	r2, r3
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	791b      	ldrb	r3, [r3, #4]
 8000292:	4619      	mov	r1, r3
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	799b      	ldrb	r3, [r3, #6]
 8000298:	9300      	str	r3, [sp, #0]
 800029a:	460b      	mov	r3, r1
 800029c:	4907      	ldr	r1, [pc, #28]	; (80002bc <wrapper_tx_data+0x7c>)
 800029e:	f007 fde9 	bl	8007e74 <siprintf>
 80002a2:	4603      	mov	r3, r0
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	801a      	strh	r2, [r3, #0]
}
 80002aa:	bf00      	nop
 80002ac:	3714      	adds	r7, #20
 80002ae:	46bd      	mov	sp, r7
 80002b0:	bd90      	pop	{r4, r7, pc}
 80002b2:	bf00      	nop
 80002b4:	200000ac 	.word	0x200000ac
 80002b8:	08008cf8 	.word	0x08008cf8
 80002bc:	08008d14 	.word	0x08008d14

080002c0 <Task_Generation>:

void Task_Generation(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af02      	add	r7, sp, #8
	Time_Queue_Handler = xQueueCreate(2,sizeof(TxUART));
 80002c6:	2200      	movs	r2, #0
 80002c8:	2118      	movs	r1, #24
 80002ca:	2002      	movs	r0, #2
 80002cc:	f003 fd73 	bl	8003db6 <xQueueGenericCreate>
 80002d0:	4603      	mov	r3, r0
 80002d2:	4a15      	ldr	r2, [pc, #84]	; (8000328 <Task_Generation+0x68>)
 80002d4:	6013      	str	r3, [r2, #0]
	User_Input_Time_Date_Queue_Handler = xQueueCreate(1,sizeof(TxUART));
 80002d6:	2200      	movs	r2, #0
 80002d8:	2118      	movs	r1, #24
 80002da:	2001      	movs	r0, #1
 80002dc:	f003 fd6b 	bl	8003db6 <xQueueGenericCreate>
 80002e0:	4603      	mov	r3, r0
 80002e2:	4a12      	ldr	r2, [pc, #72]	; (800032c <Task_Generation+0x6c>)
 80002e4:	6013      	str	r3, [r2, #0]

	xTaskCreate(Get_RTC_Runnable, "Get Time ", 100, NULL, 2, &Get_Time_Handler);
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <Task_Generation+0x70>)
 80002e8:	9301      	str	r3, [sp, #4]
 80002ea:	2302      	movs	r3, #2
 80002ec:	9300      	str	r3, [sp, #0]
 80002ee:	2300      	movs	r3, #0
 80002f0:	2264      	movs	r2, #100	; 0x64
 80002f2:	4910      	ldr	r1, [pc, #64]	; (8000334 <Task_Generation+0x74>)
 80002f4:	4810      	ldr	r0, [pc, #64]	; (8000338 <Task_Generation+0x78>)
 80002f6:	f004 f8c9 	bl	800448c <xTaskCreate>
	xTaskCreate(Print_Time_Runnable, "Print Time", 100, NULL, 2, &Print_Time_Handler);
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <Task_Generation+0x7c>)
 80002fc:	9301      	str	r3, [sp, #4]
 80002fe:	2302      	movs	r3, #2
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2300      	movs	r3, #0
 8000304:	2264      	movs	r2, #100	; 0x64
 8000306:	490e      	ldr	r1, [pc, #56]	; (8000340 <Task_Generation+0x80>)
 8000308:	480e      	ldr	r0, [pc, #56]	; (8000344 <Task_Generation+0x84>)
 800030a:	f004 f8bf 	bl	800448c <xTaskCreate>
	xTaskCreate(Process_UART_Data_Runnable, "UART Rx", 100, NULL, 2, &Process_Rx_Data_Handler);
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <Task_Generation+0x88>)
 8000310:	9301      	str	r3, [sp, #4]
 8000312:	2302      	movs	r3, #2
 8000314:	9300      	str	r3, [sp, #0]
 8000316:	2300      	movs	r3, #0
 8000318:	2264      	movs	r2, #100	; 0x64
 800031a:	490c      	ldr	r1, [pc, #48]	; (800034c <Task_Generation+0x8c>)
 800031c:	480c      	ldr	r0, [pc, #48]	; (8000350 <Task_Generation+0x90>)
 800031e:	f004 f8b5 	bl	800448c <xTaskCreate>
}
 8000322:	bf00      	nop
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	200000bc 	.word	0x200000bc
 800032c:	200000c0 	.word	0x200000c0
 8000330:	200000b0 	.word	0x200000b0
 8000334:	08008d28 	.word	0x08008d28
 8000338:	08000355 	.word	0x08000355
 800033c:	200000b4 	.word	0x200000b4
 8000340:	08008d34 	.word	0x08008d34
 8000344:	08000405 	.word	0x08000405
 8000348:	200000b8 	.word	0x200000b8
 800034c:	08008d40 	.word	0x08008d40
 8000350:	0800049d 	.word	0x0800049d

08000354 <Get_RTC_Runnable>:

void Get_RTC_Runnable(void * parameters)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b092      	sub	sp, #72	; 0x48
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
	Local_RTC_T RTC_container;
	TxUART tx_buffer[max_buffer_tx];
	BaseType_t Queue_status = pdFALSE;
 800035c:	2300      	movs	r3, #0
 800035e:	647b      	str	r3, [r7, #68]	; 0x44
	for(;;)
	{
#if Debug_ITM
		printf("Getting Time Alive\n");
#endif
		printf("Getting Time Alive\n");
 8000360:	4824      	ldr	r0, [pc, #144]	; (80003f4 <Get_RTC_Runnable+0xa0>)
 8000362:	f007 fd7f 	bl	8007e64 <puts>
		HAL_RTC_GetTime(&hrtc, &RTC_container.Local_RTC_Time, RTC_FORMAT_BIN);
 8000366:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800036a:	2200      	movs	r2, #0
 800036c:	4619      	mov	r1, r3
 800036e:	4822      	ldr	r0, [pc, #136]	; (80003f8 <Get_RTC_Runnable+0xa4>)
 8000370:	f001 fe7e 	bl	8002070 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RTC_container.Local_RTC_Date, RTC_FORMAT_BIN);
 8000374:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000378:	3303      	adds	r3, #3
 800037a:	2200      	movs	r2, #0
 800037c:	4619      	mov	r1, r3
 800037e:	481e      	ldr	r0, [pc, #120]	; (80003f8 <Get_RTC_Runnable+0xa4>)
 8000380:	f002 f804 	bl	800238c <HAL_RTC_GetDate>
		//Updating Hours
		RTC_container.Local_RTC_Time.Hours = Format_to_12(&RTC_container.Local_RTC_Time);
 8000384:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000388:	4618      	mov	r0, r3
 800038a:	f7ff ff27 	bl	80001dc <Format_to_12>
 800038e:	4603      	mov	r3, r0
 8000390:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		wrapper_tx_data((Local_RTC_T const *)&RTC_container, &tx_buffer[time], time);
 8000394:	f107 010c 	add.w	r1, r7, #12
 8000398:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800039c:	2200      	movs	r2, #0
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ff4e 	bl	8000240 <wrapper_tx_data>
		//tx_buffer[date].Message_Length = sprintf((char*)tx_buffer[date].Message_Data, "t1.txt=\"%d/%d/%d\"",RTC_container.Local_RTC_Date.WeekDay, RTC_container.Local_RTC_Date.Month, RTC_container.Local_RTC_Date.Year);
		wrapper_tx_data((Local_RTC_T const *)&RTC_container, &tx_buffer[date], date);
 80003a4:	f107 030c 	add.w	r3, r7, #12
 80003a8:	f103 0118 	add.w	r1, r3, #24
 80003ac:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80003b0:	2201      	movs	r2, #1
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff44 	bl	8000240 <wrapper_tx_data>

#if Debug_ITM
		printf("%s\n", tx_buffer[time].Message_Data);
#endif

		Queue_status = xQueueSend(Time_Queue_Handler, &tx_buffer[time], ( TickType_t )0);
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <Get_RTC_Runnable+0xa8>)
 80003ba:	6818      	ldr	r0, [r3, #0]
 80003bc:	f107 010c 	add.w	r1, r7, #12
 80003c0:	2300      	movs	r3, #0
 80003c2:	2200      	movs	r2, #0
 80003c4:	f003 fd6e 	bl	8003ea4 <xQueueGenericSend>
 80003c8:	6478      	str	r0, [r7, #68]	; 0x44
		Queue_status = xQueueSend(Time_Queue_Handler, &tx_buffer[date], ( TickType_t )0);
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <Get_RTC_Runnable+0xa8>)
 80003cc:	6818      	ldr	r0, [r3, #0]
 80003ce:	f107 030c 	add.w	r3, r7, #12
 80003d2:	f103 0118 	add.w	r1, r3, #24
 80003d6:	2300      	movs	r3, #0
 80003d8:	2200      	movs	r2, #0
 80003da:	f003 fd63 	bl	8003ea4 <xQueueGenericSend>
 80003de:	6478      	str	r0, [r7, #68]	; 0x44
		taskYIELD();
 80003e0:	4b07      	ldr	r3, [pc, #28]	; (8000400 <Get_RTC_Runnable+0xac>)
 80003e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	f3bf 8f4f 	dsb	sy
 80003ec:	f3bf 8f6f 	isb	sy
		printf("Getting Time Alive\n");
 80003f0:	e7b6      	b.n	8000360 <Get_RTC_Runnable+0xc>
 80003f2:	bf00      	nop
 80003f4:	08008d48 	.word	0x08008d48
 80003f8:	200000c8 	.word	0x200000c8
 80003fc:	200000bc 	.word	0x200000bc
 8000400:	e000ed04 	.word	0xe000ed04

08000404 <Print_Time_Runnable>:
  * @param  None
  * @retval None
  */

void Print_Time_Runnable(void * parameters)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08e      	sub	sp, #56	; 0x38
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	TxUART tx_buffer[max_buffer_tx];
	for(;;)
	{
		printf("Print Time Alive\n");
 800040c:	481e      	ldr	r0, [pc, #120]	; (8000488 <Print_Time_Runnable+0x84>)
 800040e:	f007 fd29 	bl	8007e64 <puts>
		xQueueReceive(Time_Queue_Handler, &tx_buffer[time], ( TickType_t )0);
 8000412:	4b1e      	ldr	r3, [pc, #120]	; (800048c <Print_Time_Runnable+0x88>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	f107 0108 	add.w	r1, r7, #8
 800041a:	2200      	movs	r2, #0
 800041c:	4618      	mov	r0, r3
 800041e:	f003 fe37 	bl	8004090 <xQueueReceive>
		xQueueReceive(Time_Queue_Handler, &tx_buffer[date], ( TickType_t )0);
 8000422:	4b1a      	ldr	r3, [pc, #104]	; (800048c <Print_Time_Runnable+0x88>)
 8000424:	6818      	ldr	r0, [r3, #0]
 8000426:	f107 0308 	add.w	r3, r7, #8
 800042a:	3318      	adds	r3, #24
 800042c:	2200      	movs	r2, #0
 800042e:	4619      	mov	r1, r3
 8000430:	f003 fe2e 	bl	8004090 <xQueueReceive>
#if 0
		HAL_UART_Transmit_IT(&huart1, &Buffer_time, 16);
		HAL_UART_Transmit_IT(&huart1, &fixed_end_nextion, 3);

#endif
		HAL_UART_Transmit(&huart1, tx_buffer[time].Message_Data, tx_buffer[time].Message_Length, 800);
 8000434:	893a      	ldrh	r2, [r7, #8]
 8000436:	f107 0308 	add.w	r3, r7, #8
 800043a:	1c99      	adds	r1, r3, #2
 800043c:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000440:	4813      	ldr	r0, [pc, #76]	; (8000490 <Print_Time_Runnable+0x8c>)
 8000442:	f002 fd33 	bl	8002eac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, fixed_end_nextion, 3, 300);
 8000446:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800044a:	2203      	movs	r2, #3
 800044c:	4911      	ldr	r1, [pc, #68]	; (8000494 <Print_Time_Runnable+0x90>)
 800044e:	4810      	ldr	r0, [pc, #64]	; (8000490 <Print_Time_Runnable+0x8c>)
 8000450:	f002 fd2c 	bl	8002eac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, tx_buffer[date].Message_Data, tx_buffer[date].Message_Length, 800);
 8000454:	8c3a      	ldrh	r2, [r7, #32]
 8000456:	f107 0308 	add.w	r3, r7, #8
 800045a:	f103 011a 	add.w	r1, r3, #26
 800045e:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000462:	480b      	ldr	r0, [pc, #44]	; (8000490 <Print_Time_Runnable+0x8c>)
 8000464:	f002 fd22 	bl	8002eac <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, fixed_end_nextion, 3, 300);
 8000468:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800046c:	2203      	movs	r2, #3
 800046e:	4909      	ldr	r1, [pc, #36]	; (8000494 <Print_Time_Runnable+0x90>)
 8000470:	4807      	ldr	r0, [pc, #28]	; (8000490 <Print_Time_Runnable+0x8c>)
 8000472:	f002 fd1b 	bl	8002eac <HAL_UART_Transmit>

		taskYIELD();
 8000476:	4b08      	ldr	r3, [pc, #32]	; (8000498 <Print_Time_Runnable+0x94>)
 8000478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800047c:	601a      	str	r2, [r3, #0]
 800047e:	f3bf 8f4f 	dsb	sy
 8000482:	f3bf 8f6f 	isb	sy
		printf("Print Time Alive\n");
 8000486:	e7c1      	b.n	800040c <Print_Time_Runnable+0x8>
 8000488:	08008d5c 	.word	0x08008d5c
 800048c:	200000bc 	.word	0x200000bc
 8000490:	20000124 	.word	0x20000124
 8000494:	20000000 	.word	0x20000000
 8000498:	e000ed04 	.word	0xe000ed04

0800049c <Process_UART_Data_Runnable>:
	}
}

void Process_UART_Data_Runnable(void * parameters)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	RxUART rx_buffer = {0};
 80004a4:	f107 030c 	add.w	r3, r7, #12
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	811a      	strh	r2, [r3, #8]
	char * found_str = NULL;
 80004b0:	2300      	movs	r3, #0
 80004b2:	61bb      	str	r3, [r7, #24]
	static uint8_t f_status = 0x00;
	//BaseType_t L_Status_UART_Rx;
	for(;;)
	{
		uint8_t str_iter = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	77fb      	strb	r3, [r7, #31]
		str_nextion_T menu = max_nextion_str;
 80004b8:	2305      	movs	r3, #5
 80004ba:	77bb      	strb	r3, [r7, #30]
		printf("UART Rx alive\n");
 80004bc:	4839      	ldr	r0, [pc, #228]	; (80005a4 <Process_UART_Data_Runnable+0x108>)
 80004be:	f007 fcd1 	bl	8007e64 <puts>
		HAL_UART_Receive(&huart1, rx_buffer.Message_Data, SIZE_RX, 900);
 80004c2:	f107 030c 	add.w	r3, r7, #12
 80004c6:	1c99      	adds	r1, r3, #2
 80004c8:	f44f 7361 	mov.w	r3, #900	; 0x384
 80004cc:	2208      	movs	r2, #8
 80004ce:	4836      	ldr	r0, [pc, #216]	; (80005a8 <Process_UART_Data_Runnable+0x10c>)
 80004d0:	f002 fd6f 	bl	8002fb2 <HAL_UART_Receive>

		for(str_iter = settings; str_iter < max_nextion_str; str_iter++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	77fb      	strb	r3, [r7, #31]
 80004d8:	e014      	b.n	8000504 <Process_UART_Data_Runnable+0x68>
		{
			found_str = strstr((char *)rx_buffer.Message_Data, Str_Nextion[str_iter]);
 80004da:	7ffb      	ldrb	r3, [r7, #31]
 80004dc:	4a33      	ldr	r2, [pc, #204]	; (80005ac <Process_UART_Data_Runnable+0x110>)
 80004de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	3302      	adds	r3, #2
 80004e8:	4611      	mov	r1, r2
 80004ea:	4618      	mov	r0, r3
 80004ec:	f007 fdd2 	bl	8008094 <strstr>
 80004f0:	61b8      	str	r0, [r7, #24]
			if(found_str)
 80004f2:	69bb      	ldr	r3, [r7, #24]
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d002      	beq.n	80004fe <Process_UART_Data_Runnable+0x62>
			{
				menu = str_iter;
 80004f8:	7ffb      	ldrb	r3, [r7, #31]
 80004fa:	77bb      	strb	r3, [r7, #30]
				break;
 80004fc:	e005      	b.n	800050a <Process_UART_Data_Runnable+0x6e>
		for(str_iter = settings; str_iter < max_nextion_str; str_iter++)
 80004fe:	7ffb      	ldrb	r3, [r7, #31]
 8000500:	3301      	adds	r3, #1
 8000502:	77fb      	strb	r3, [r7, #31]
 8000504:	7ffb      	ldrb	r3, [r7, #31]
 8000506:	2b04      	cmp	r3, #4
 8000508:	d9e7      	bls.n	80004da <Process_UART_Data_Runnable+0x3e>
			}
		}

		switch(menu)
 800050a:	7fbb      	ldrb	r3, [r7, #30]
 800050c:	2b04      	cmp	r3, #4
 800050e:	d828      	bhi.n	8000562 <Process_UART_Data_Runnable+0xc6>
 8000510:	a201      	add	r2, pc, #4	; (adr r2, 8000518 <Process_UART_Data_Runnable+0x7c>)
 8000512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000516:	bf00      	nop
 8000518:	0800052d 	.word	0x0800052d
 800051c:	0800054b 	.word	0x0800054b
 8000520:	08000553 	.word	0x08000553
 8000524:	0800053f 	.word	0x0800053f
 8000528:	0800055b 	.word	0x0800055b
		{
		case settings:
			vTaskSuspend(Print_Time_Handler);
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <Process_UART_Data_Runnable+0x114>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4618      	mov	r0, r3
 8000532:	f004 f937 	bl	80047a4 <vTaskSuspend>
			printf("Suspending Print_Time\n");
 8000536:	481f      	ldr	r0, [pc, #124]	; (80005b4 <Process_UART_Data_Runnable+0x118>)
 8000538:	f007 fc94 	bl	8007e64 <puts>
			break;
 800053c:	e012      	b.n	8000564 <Process_UART_Data_Runnable+0xc8>
		case home:
			vTaskResume(Print_Time_Handler);
 800053e:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <Process_UART_Data_Runnable+0x114>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	4618      	mov	r0, r3
 8000544:	f004 fa0c 	bl	8004960 <vTaskResume>
			break;
 8000548:	e00c      	b.n	8000564 <Process_UART_Data_Runnable+0xc8>
		case Time:
			f_status = 0x01;
 800054a:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <Process_UART_Data_Runnable+0x11c>)
 800054c:	2201      	movs	r2, #1
 800054e:	701a      	strb	r2, [r3, #0]
			break;
 8000550:	e008      	b.n	8000564 <Process_UART_Data_Runnable+0xc8>
		case Date:
			f_status = 0x01;
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <Process_UART_Data_Runnable+0x11c>)
 8000554:	2201      	movs	r2, #1
 8000556:	701a      	strb	r2, [r3, #0]
			break;
 8000558:	e004      	b.n	8000564 <Process_UART_Data_Runnable+0xc8>
		case cfg:
			f_status = 0x00;
 800055a:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <Process_UART_Data_Runnable+0x11c>)
 800055c:	2200      	movs	r2, #0
 800055e:	701a      	strb	r2, [r3, #0]
			break;
 8000560:	e000      	b.n	8000564 <Process_UART_Data_Runnable+0xc8>
		default:
			break;
 8000562:	bf00      	nop
		}

		while(f_status)
 8000564:	e008      	b.n	8000578 <Process_UART_Data_Runnable+0xdc>
		{
			HAL_UART_Receive(&huart1, rx_buffer.Message_Data, SIZE_RX, 900);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	1c99      	adds	r1, r3, #2
 800056c:	f44f 7361 	mov.w	r3, #900	; 0x384
 8000570:	2208      	movs	r2, #8
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <Process_UART_Data_Runnable+0x10c>)
 8000574:	f002 fd1d 	bl	8002fb2 <HAL_UART_Receive>
		while(f_status)
 8000578:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <Process_UART_Data_Runnable+0x11c>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d1f2      	bne.n	8000566 <Process_UART_Data_Runnable+0xca>
		}

		memset(rx_buffer.Message_Data, 0x00, sizeof(rx_buffer.Message_Data)); //Cleaning buffer
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	3302      	adds	r3, #2
 8000586:	2208      	movs	r2, #8
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f007 fd7a 	bl	8008084 <memset>
		taskYIELD();
 8000590:	4b0a      	ldr	r3, [pc, #40]	; (80005bc <Process_UART_Data_Runnable+0x120>)
 8000592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000596:	601a      	str	r2, [r3, #0]
 8000598:	f3bf 8f4f 	dsb	sy
 800059c:	f3bf 8f6f 	isb	sy
	{
 80005a0:	e788      	b.n	80004b4 <Process_UART_Data_Runnable+0x18>
 80005a2:	bf00      	nop
 80005a4:	08008d70 	.word	0x08008d70
 80005a8:	20000124 	.word	0x20000124
 80005ac:	2000000c 	.word	0x2000000c
 80005b0:	200000b4 	.word	0x200000b4
 80005b4:	08008d80 	.word	0x08008d80
 80005b8:	200000c4 	.word	0x200000c4
 80005bc:	e000ed04 	.word	0xe000ed04

080005c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	4b1a      	ldr	r3, [pc, #104]	; (8000630 <MX_GPIO_Init+0x70>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	4a19      	ldr	r2, [pc, #100]	; (8000630 <MX_GPIO_Init+0x70>)
 80005cc:	f043 0310 	orr.w	r3, r3, #16
 80005d0:	6193      	str	r3, [r2, #24]
 80005d2:	4b17      	ldr	r3, [pc, #92]	; (8000630 <MX_GPIO_Init+0x70>)
 80005d4:	699b      	ldr	r3, [r3, #24]
 80005d6:	f003 0310 	and.w	r3, r3, #16
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <MX_GPIO_Init+0x70>)
 80005e0:	699b      	ldr	r3, [r3, #24]
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_GPIO_Init+0x70>)
 80005e4:	f043 0320 	orr.w	r3, r3, #32
 80005e8:	6193      	str	r3, [r2, #24]
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <MX_GPIO_Init+0x70>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	f003 0320 	and.w	r3, r3, #32
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <MX_GPIO_Init+0x70>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <MX_GPIO_Init+0x70>)
 80005fc:	f043 0304 	orr.w	r3, r3, #4
 8000600:	6193      	str	r3, [r2, #24]
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <MX_GPIO_Init+0x70>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	f003 0304 	and.w	r3, r3, #4
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b08      	ldr	r3, [pc, #32]	; (8000630 <MX_GPIO_Init+0x70>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	4a07      	ldr	r2, [pc, #28]	; (8000630 <MX_GPIO_Init+0x70>)
 8000614:	f043 0308 	orr.w	r3, r3, #8
 8000618:	6193      	str	r3, [r2, #24]
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <MX_GPIO_Init+0x70>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	f003 0308 	and.w	r3, r3, #8
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

}
 8000626:	bf00      	nop
 8000628:	3714      	adds	r7, #20
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	40021000 	.word	0x40021000

08000634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000638:	f000 faf6 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063c:	f000 f80f 	bl	800065e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000640:	f7ff ffbe 	bl	80005c0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000644:	f000 f88a 	bl	800075c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000648:	f000 fa4a 	bl	8000ae0 <MX_USART1_UART_Init>
  SEGGER_SYSVIEW_Conf();
 800064c:	f005 fc48 	bl	8005ee0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000650:	f006 fbfc 	bl	8006e4c <SEGGER_SYSVIEW_Start>

  /* USER CODE BEGIN 2 */
  Task_Generation();
 8000654:	f7ff fe34 	bl	80002c0 <Task_Generation>

  vTaskStartScheduler();
 8000658:	f004 fa06 	bl	8004a68 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x28>

0800065e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065e:	b580      	push	{r7, lr}
 8000660:	b094      	sub	sp, #80	; 0x50
 8000662:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000664:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000668:	2228      	movs	r2, #40	; 0x28
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f007 fd09 	bl	8008084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800068e:	2305      	movs	r3, #5
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000692:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000696:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000698:	2301      	movs	r3, #1
 800069a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800069c:	2300      	movs	r3, #0
 800069e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fe13 	bl	80012d0 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80006b0:	f000 f84e 	bl	8000750 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80006b8:	2301      	movs	r3, #1
 80006ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006c8:	f107 0314 	add.w	r3, r7, #20
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 f880 	bl	80017d4 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006da:	f000 f839 	bl	8000750 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006de:	2301      	movs	r3, #1
 80006e0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e6:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fa30 	bl	8001b50 <HAL_RCCEx_PeriphCLKConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006f6:	f000 f82b 	bl	8000750 <Error_Handler>
  }
}
 80006fa:	bf00      	nop
 80006fc:	3750      	adds	r7, #80	; 0x50
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <HAL_UART_TxCpltCallback>:
	return len;
}
#endif

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000702:	b480      	push	{r7}
 8000704:	b083      	sub	sp, #12
 8000706:	af00      	add	r7, sp, #0
 8000708:	6078      	str	r0, [r7, #4]
   __NOP();// do nothing here
 800070a:	bf00      	nop
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
	__NOP();// do nothing here
 800071e:	bf00      	nop
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
	...

0800072c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d101      	bne.n	8000742 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800073e:	f000 fa89 	bl	8000c54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40000800 	.word	0x40000800

08000750 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000754:	b672      	cpsid	i
}
 8000756:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000758:	e7fe      	b.n	8000758 <Error_Handler+0x8>
	...

0800075c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2100      	movs	r1, #0
 8000766:	460a      	mov	r2, r1
 8000768:	801a      	strh	r2, [r3, #0]
 800076a:	460a      	mov	r2, r1
 800076c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800076e:	2300      	movs	r3, #0
 8000770:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_RTC_Init+0x8c>)
 8000774:	4a1d      	ldr	r2, [pc, #116]	; (80007ec <MX_RTC_Init+0x90>)
 8000776:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000778:	4b1b      	ldr	r3, [pc, #108]	; (80007e8 <MX_RTC_Init+0x8c>)
 800077a:	f04f 32ff 	mov.w	r2, #4294967295
 800077e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_RTC_Init+0x8c>)
 8000782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000786:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000788:	4817      	ldr	r0, [pc, #92]	; (80007e8 <MX_RTC_Init+0x8c>)
 800078a:	f001 fb4d 	bl	8001e28 <HAL_RTC_Init>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000794:	f7ff ffdc 	bl	8000750 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800079c:	2300      	movs	r3, #0
 800079e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	2200      	movs	r2, #0
 80007a8:	4619      	mov	r1, r3
 80007aa:	480f      	ldr	r0, [pc, #60]	; (80007e8 <MX_RTC_Init+0x8c>)
 80007ac:	f001 fbc8 	bl	8001f40 <HAL_RTC_SetTime>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80007b6:	f7ff ffcb 	bl	8000750 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007ba:	2301      	movs	r3, #1
 80007bc:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80007be:	2301      	movs	r3, #1
 80007c0:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 80007c2:	2301      	movs	r3, #1
 80007c4:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	4619      	mov	r1, r3
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <MX_RTC_Init+0x8c>)
 80007d2:	f001 fd25 	bl	8002220 <HAL_RTC_SetDate>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80007dc:	f7ff ffb8 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007e0:	bf00      	nop
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	200000c8 	.word	0x200000c8
 80007ec:	40002800 	.word	0x40002800

080007f0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a0b      	ldr	r2, [pc, #44]	; (800082c <HAL_RTC_MspInit+0x3c>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d110      	bne.n	8000824 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000802:	f000 fd59 	bl	80012b8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_RTC_MspInit+0x40>)
 8000808:	69db      	ldr	r3, [r3, #28]
 800080a:	4a09      	ldr	r2, [pc, #36]	; (8000830 <HAL_RTC_MspInit+0x40>)
 800080c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000810:	61d3      	str	r3, [r2, #28]
 8000812:	4b07      	ldr	r3, [pc, #28]	; (8000830 <HAL_RTC_MspInit+0x40>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <HAL_RTC_MspInit+0x44>)
 8000820:	2201      	movs	r2, #1
 8000822:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40002800 	.word	0x40002800
 8000830:	40021000 	.word	0x40021000
 8000834:	4242043c 	.word	0x4242043c

08000838 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000838:	b480      	push	{r7}
 800083a:	b085      	sub	sp, #20
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084e:	68ba      	ldr	r2, [r7, #8]
 8000850:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000854:	4013      	ands	r3, r2
 8000856:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000860:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000864:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000868:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800086a:	4a04      	ldr	r2, [pc, #16]	; (800087c <__NVIC_SetPriorityGrouping+0x44>)
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	60d3      	str	r3, [r2, #12]
}
 8000870:	bf00      	nop
 8000872:	3714      	adds	r7, #20
 8000874:	46bd      	mov	sp, r7
 8000876:	bc80      	pop	{r7}
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop
 800087c:	e000ed00 	.word	0xe000ed00

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b084      	sub	sp, #16
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <HAL_MspInit+0x60>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4a15      	ldr	r2, [pc, #84]	; (80008e0 <HAL_MspInit+0x60>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6193      	str	r3, [r2, #24]
 8000892:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <HAL_MspInit+0x60>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <HAL_MspInit+0x60>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a0f      	ldr	r2, [pc, #60]	; (80008e0 <HAL_MspInit+0x60>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <HAL_MspInit+0x60>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_MspInit+0x64>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	4a05      	ldr	r2, [pc, #20]	; (80008e4 <HAL_MspInit+0x64>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
  NVIC_SetPriorityGrouping( 0 );
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff ffb0 	bl	8000838 <__NVIC_SetPriorityGrouping>
  /* USER CODE END MspInit 1 */
}
 80008d8:	bf00      	nop
 80008da:	3710      	adds	r7, #16
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000
 80008e4:	40010000 	.word	0x40010000

080008e8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08e      	sub	sp, #56	; 0x38
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008f0:	2300      	movs	r3, #0
 80008f2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008fe:	4b34      	ldr	r3, [pc, #208]	; (80009d0 <HAL_InitTick+0xe8>)
 8000900:	69db      	ldr	r3, [r3, #28]
 8000902:	4a33      	ldr	r2, [pc, #204]	; (80009d0 <HAL_InitTick+0xe8>)
 8000904:	f043 0304 	orr.w	r3, r3, #4
 8000908:	61d3      	str	r3, [r2, #28]
 800090a:	4b31      	ldr	r3, [pc, #196]	; (80009d0 <HAL_InitTick+0xe8>)
 800090c:	69db      	ldr	r3, [r3, #28]
 800090e:	f003 0304 	and.w	r3, r3, #4
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000916:	f107 0210 	add.w	r2, r7, #16
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f001 f8c7 	bl	8001ab4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000926:	6a3b      	ldr	r3, [r7, #32]
 8000928:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800092a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800092c:	2b00      	cmp	r3, #0
 800092e:	d103      	bne.n	8000938 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000930:	f001 f898 	bl	8001a64 <HAL_RCC_GetPCLK1Freq>
 8000934:	6378      	str	r0, [r7, #52]	; 0x34
 8000936:	e004      	b.n	8000942 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000938:	f001 f894 	bl	8001a64 <HAL_RCC_GetPCLK1Freq>
 800093c:	4603      	mov	r3, r0
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000944:	4a23      	ldr	r2, [pc, #140]	; (80009d4 <HAL_InitTick+0xec>)
 8000946:	fba2 2303 	umull	r2, r3, r2, r3
 800094a:	0c9b      	lsrs	r3, r3, #18
 800094c:	3b01      	subs	r3, #1
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000950:	4b21      	ldr	r3, [pc, #132]	; (80009d8 <HAL_InitTick+0xf0>)
 8000952:	4a22      	ldr	r2, [pc, #136]	; (80009dc <HAL_InitTick+0xf4>)
 8000954:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000956:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <HAL_InitTick+0xf0>)
 8000958:	f240 32e7 	movw	r2, #999	; 0x3e7
 800095c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <HAL_InitTick+0xf0>)
 8000960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000962:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000964:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <HAL_InitTick+0xf0>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <HAL_InitTick+0xf0>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <HAL_InitTick+0xf0>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8000976:	4818      	ldr	r0, [pc, #96]	; (80009d8 <HAL_InitTick+0xf0>)
 8000978:	f001 fffe 	bl	8002978 <HAL_TIM_Base_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000982:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000986:	2b00      	cmp	r3, #0
 8000988:	d11b      	bne.n	80009c2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800098a:	4813      	ldr	r0, [pc, #76]	; (80009d8 <HAL_InitTick+0xf0>)
 800098c:	f002 f84c 	bl	8002a28 <HAL_TIM_Base_Start_IT>
 8000990:	4603      	mov	r3, r0
 8000992:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000996:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800099a:	2b00      	cmp	r3, #0
 800099c:	d111      	bne.n	80009c2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800099e:	201e      	movs	r0, #30
 80009a0:	f000 fa45 	bl	8000e2e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	2b0f      	cmp	r3, #15
 80009a8:	d808      	bhi.n	80009bc <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80009aa:	2200      	movs	r2, #0
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	201e      	movs	r0, #30
 80009b0:	f000 fa21 	bl	8000df6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009b4:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <HAL_InitTick+0xf8>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
 80009ba:	e002      	b.n	80009c2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009c6:	4618      	mov	r0, r3
 80009c8:	3738      	adds	r7, #56	; 0x38
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40021000 	.word	0x40021000
 80009d4:	431bde83 	.word	0x431bde83
 80009d8:	200000dc 	.word	0x200000dc
 80009dc:	40000800 	.word	0x40000800
 80009e0:	20000024 	.word	0x20000024

080009e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <NMI_Handler+0x4>

080009ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ee:	e7fe      	b.n	80009ee <HardFault_Handler+0x4>

080009f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <MemManage_Handler+0x4>

080009f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009fa:	e7fe      	b.n	80009fa <BusFault_Handler+0x4>

080009fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <UsageFault_Handler+0x4>

08000a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bc80      	pop	{r7}
 8000a0c:	4770      	bx	lr
	...

08000a10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM4_IRQHandler+0x10>)
 8000a16:	f002 f859 	bl	8002acc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200000dc 	.word	0x200000dc

08000a24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <USART1_IRQHandler+0x10>)
 8000a2a:	f002 fb55 	bl	80030d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000124 	.word	0x20000124

08000a38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	e00a      	b.n	8000a60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a4a:	f3af 8000 	nop.w
 8000a4e:	4601      	mov	r1, r0
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	1c5a      	adds	r2, r3, #1
 8000a54:	60ba      	str	r2, [r7, #8]
 8000a56:	b2ca      	uxtb	r2, r1
 8000a58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	697a      	ldr	r2, [r7, #20]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	429a      	cmp	r2, r3
 8000a66:	dbf0      	blt.n	8000a4a <_read+0x12>
	}

return len;
 8000a68:	687b      	ldr	r3, [r7, #4]
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
	return -1;
 8000a7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bc80      	pop	{r7}
 8000a86:	4770      	bx	lr

08000a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a98:	605a      	str	r2, [r3, #4]
	return 0;
 8000a9a:	2300      	movs	r3, #0
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <_isatty>:

int _isatty(int file)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	return 1;
 8000aae:	2301      	movs	r3, #1
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr

08000aba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b085      	sub	sp, #20
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	60f8      	str	r0, [r7, #12]
 8000ac2:	60b9      	str	r1, [r7, #8]
 8000ac4:	607a      	str	r2, [r7, #4]
	return 0;
 8000ac6:	2300      	movs	r3, #0
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr

08000ad2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
	...

08000ae0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ae4:	4b11      	ldr	r3, [pc, #68]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000ae6:	4a12      	ldr	r2, [pc, #72]	; (8000b30 <MX_USART1_UART_Init+0x50>)
 8000ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000aea:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000aec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000af8:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000afe:	4b0b      	ldr	r3, [pc, #44]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b06:	220c      	movs	r2, #12
 8000b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0a:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b16:	4805      	ldr	r0, [pc, #20]	; (8000b2c <MX_USART1_UART_Init+0x4c>)
 8000b18:	f002 f978 	bl	8002e0c <HAL_UART_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b22:	f7ff fe15 	bl	8000750 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000124 	.word	0x20000124
 8000b30:	40013800 	.word	0x40013800

08000b34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b088      	sub	sp, #32
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 0310 	add.w	r3, r7, #16
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a20      	ldr	r2, [pc, #128]	; (8000bd0 <HAL_UART_MspInit+0x9c>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d139      	bne.n	8000bc8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <HAL_UART_MspInit+0xa0>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a1e      	ldr	r2, [pc, #120]	; (8000bd4 <HAL_UART_MspInit+0xa0>)
 8000b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <HAL_UART_MspInit+0xa0>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6c:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <HAL_UART_MspInit+0xa0>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	4a18      	ldr	r2, [pc, #96]	; (8000bd4 <HAL_UART_MspInit+0xa0>)
 8000b72:	f043 0304 	orr.w	r3, r3, #4
 8000b76:	6193      	str	r3, [r2, #24]
 8000b78:	4b16      	ldr	r3, [pc, #88]	; (8000bd4 <HAL_UART_MspInit+0xa0>)
 8000b7a:	699b      	ldr	r3, [r3, #24]
 8000b7c:	f003 0304 	and.w	r3, r3, #4
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b8e:	2303      	movs	r3, #3
 8000b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0310 	add.w	r3, r7, #16
 8000b96:	4619      	mov	r1, r3
 8000b98:	480f      	ldr	r0, [pc, #60]	; (8000bd8 <HAL_UART_MspInit+0xa4>)
 8000b9a:	f000 fa09 	bl	8000fb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <HAL_UART_MspInit+0xa4>)
 8000bb4:	f000 f9fc 	bl	8000fb0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2106      	movs	r1, #6
 8000bbc:	2025      	movs	r0, #37	; 0x25
 8000bbe:	f000 f91a 	bl	8000df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bc2:	2025      	movs	r0, #37	; 0x25
 8000bc4:	f000 f933 	bl	8000e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000bc8:	bf00      	nop
 8000bca:	3720      	adds	r7, #32
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	40013800 	.word	0x40013800
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010800 	.word	0x40010800

08000bdc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bdc:	480c      	ldr	r0, [pc, #48]	; (8000c10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bde:	490d      	ldr	r1, [pc, #52]	; (8000c14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be0:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000be4:	e002      	b.n	8000bec <LoopCopyDataInit>

08000be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bea:	3304      	adds	r3, #4

08000bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf0:	d3f9      	bcc.n	8000be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bf2:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bf4:	4c0a      	ldr	r4, [pc, #40]	; (8000c20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bf8:	e001      	b.n	8000bfe <LoopFillZerobss>

08000bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bfc:	3204      	adds	r2, #4

08000bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c00:	d3fb      	bcc.n	8000bfa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c02:	f7ff ff66 	bl	8000ad2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c06:	f007 fa8f 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c0a:	f7ff fd13 	bl	8000634 <main>
  bx lr
 8000c0e:	4770      	bx	lr
  ldr r0, =_sdata
 8000c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c14:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000c18:	08008efc 	.word	0x08008efc
  ldr r2, =_sbss
 8000c1c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000c20:	20002a3c 	.word	0x20002a3c

08000c24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c24:	e7fe      	b.n	8000c24 <ADC1_2_IRQHandler>
	...

08000c28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x28>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x28>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 f8d1 	bl	8000de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f7ff fe52 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff fe1c 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <HAL_IncTick+0x1c>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <HAL_IncTick+0x20>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <HAL_IncTick+0x20>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	20000028 	.word	0x20000028
 8000c74:	2000016c 	.word	0x2000016c

08000c78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c7c:	4b02      	ldr	r3, [pc, #8]	; (8000c88 <HAL_GetTick+0x10>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr
 8000c88:	2000016c 	.word	0x2000016c

08000c8c <__NVIC_SetPriorityGrouping>:
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b085      	sub	sp, #20
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0307 	and.w	r3, r3, #7
 8000c9a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca2:	68ba      	ldr	r2, [r7, #8]
 8000ca4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ca8:	4013      	ands	r3, r2
 8000caa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cbe:	4a04      	ldr	r2, [pc, #16]	; (8000cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60d3      	str	r3, [r2, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	3714      	adds	r7, #20
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <__NVIC_GetPriorityGrouping+0x18>)
 8000cda:	68db      	ldr	r3, [r3, #12]
 8000cdc:	0a1b      	lsrs	r3, r3, #8
 8000cde:	f003 0307 	and.w	r3, r3, #7
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc80      	pop	{r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	db0b      	blt.n	8000d1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d02:	79fb      	ldrb	r3, [r7, #7]
 8000d04:	f003 021f 	and.w	r2, r3, #31
 8000d08:	4906      	ldr	r1, [pc, #24]	; (8000d24 <__NVIC_EnableIRQ+0x34>)
 8000d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0e:	095b      	lsrs	r3, r3, #5
 8000d10:	2001      	movs	r0, #1
 8000d12:	fa00 f202 	lsl.w	r2, r0, r2
 8000d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr
 8000d24:	e000e100 	.word	0xe000e100

08000d28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b083      	sub	sp, #12
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	6039      	str	r1, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	db0a      	blt.n	8000d52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	b2da      	uxtb	r2, r3
 8000d40:	490c      	ldr	r1, [pc, #48]	; (8000d74 <__NVIC_SetPriority+0x4c>)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	0112      	lsls	r2, r2, #4
 8000d48:	b2d2      	uxtb	r2, r2
 8000d4a:	440b      	add	r3, r1
 8000d4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d50:	e00a      	b.n	8000d68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <__NVIC_SetPriority+0x50>)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	f003 030f 	and.w	r3, r3, #15
 8000d5e:	3b04      	subs	r3, #4
 8000d60:	0112      	lsls	r2, r2, #4
 8000d62:	b2d2      	uxtb	r2, r2
 8000d64:	440b      	add	r3, r1
 8000d66:	761a      	strb	r2, [r3, #24]
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bc80      	pop	{r7}
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	e000e100 	.word	0xe000e100
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	; 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	f1c3 0307 	rsb	r3, r3, #7
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	bf28      	it	cs
 8000d9a:	2304      	movcs	r3, #4
 8000d9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3304      	adds	r3, #4
 8000da2:	2b06      	cmp	r3, #6
 8000da4:	d902      	bls.n	8000dac <NVIC_EncodePriority+0x30>
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	3b03      	subs	r3, #3
 8000daa:	e000      	b.n	8000dae <NVIC_EncodePriority+0x32>
 8000dac:	2300      	movs	r3, #0
 8000dae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	f04f 32ff 	mov.w	r2, #4294967295
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43da      	mvns	r2, r3
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa01 f303 	lsl.w	r3, r1, r3
 8000dce:	43d9      	mvns	r1, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	4313      	orrs	r3, r2
         );
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff4f 	bl	8000c8c <__NVIC_SetPriorityGrouping>
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
 8000e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e04:	2300      	movs	r3, #0
 8000e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e08:	f7ff ff64 	bl	8000cd4 <__NVIC_GetPriorityGrouping>
 8000e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	68b9      	ldr	r1, [r7, #8]
 8000e12:	6978      	ldr	r0, [r7, #20]
 8000e14:	f7ff ffb2 	bl	8000d7c <NVIC_EncodePriority>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e1e:	4611      	mov	r1, r2
 8000e20:	4618      	mov	r0, r3
 8000e22:	f7ff ff81 	bl	8000d28 <__NVIC_SetPriority>
}
 8000e26:	bf00      	nop
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b082      	sub	sp, #8
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	4603      	mov	r3, r0
 8000e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff57 	bl	8000cf0 <__NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	b085      	sub	sp, #20
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d008      	beq.n	8000e74 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2204      	movs	r2, #4
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e70:	2301      	movs	r3, #1
 8000e72:	e020      	b.n	8000eb6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f022 020e 	bic.w	r2, r2, #14
 8000e82:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f022 0201 	bic.w	r2, r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3714      	adds	r7, #20
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ed2:	b2db      	uxtb	r3, r3
 8000ed4:	2b02      	cmp	r3, #2
 8000ed6:	d005      	beq.n	8000ee4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2204      	movs	r2, #4
 8000edc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e051      	b.n	8000f88 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 020e 	bic.w	r2, r2, #14
 8000ef2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 0201 	bic.w	r2, r2, #1
 8000f02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <HAL_DMA_Abort_IT+0xd4>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d029      	beq.n	8000f62 <HAL_DMA_Abort_IT+0xa2>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <HAL_DMA_Abort_IT+0xd8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d022      	beq.n	8000f5e <HAL_DMA_Abort_IT+0x9e>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a1f      	ldr	r2, [pc, #124]	; (8000f9c <HAL_DMA_Abort_IT+0xdc>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d01a      	beq.n	8000f58 <HAL_DMA_Abort_IT+0x98>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1e      	ldr	r2, [pc, #120]	; (8000fa0 <HAL_DMA_Abort_IT+0xe0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d012      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x92>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1c      	ldr	r2, [pc, #112]	; (8000fa4 <HAL_DMA_Abort_IT+0xe4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00a      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x8c>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <HAL_DMA_Abort_IT+0xe8>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d102      	bne.n	8000f46 <HAL_DMA_Abort_IT+0x86>
 8000f40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f44:	e00e      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f4a:	e00b      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f50:	e008      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f56:	e005      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5c:	e002      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f5e:	2310      	movs	r3, #16
 8000f60:	e000      	b.n	8000f64 <HAL_DMA_Abort_IT+0xa4>
 8000f62:	2301      	movs	r3, #1
 8000f64:	4a11      	ldr	r2, [pc, #68]	; (8000fac <HAL_DMA_Abort_IT+0xec>)
 8000f66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	4798      	blx	r3
    } 
  }
  return status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40020008 	.word	0x40020008
 8000f98:	4002001c 	.word	0x4002001c
 8000f9c:	40020030 	.word	0x40020030
 8000fa0:	40020044 	.word	0x40020044
 8000fa4:	40020058 	.word	0x40020058
 8000fa8:	4002006c 	.word	0x4002006c
 8000fac:	40020000 	.word	0x40020000

08000fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b08b      	sub	sp, #44	; 0x2c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc2:	e169      	b.n	8001298 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	69fa      	ldr	r2, [r7, #28]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	f040 8158 	bne.w	8001292 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	4a9a      	ldr	r2, [pc, #616]	; (8001250 <HAL_GPIO_Init+0x2a0>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d05e      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8000fec:	4a98      	ldr	r2, [pc, #608]	; (8001250 <HAL_GPIO_Init+0x2a0>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d875      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8000ff2:	4a98      	ldr	r2, [pc, #608]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d058      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8000ff8:	4a96      	ldr	r2, [pc, #600]	; (8001254 <HAL_GPIO_Init+0x2a4>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d86f      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8000ffe:	4a96      	ldr	r2, [pc, #600]	; (8001258 <HAL_GPIO_Init+0x2a8>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d052      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8001004:	4a94      	ldr	r2, [pc, #592]	; (8001258 <HAL_GPIO_Init+0x2a8>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d869      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 800100a:	4a94      	ldr	r2, [pc, #592]	; (800125c <HAL_GPIO_Init+0x2ac>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d04c      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 8001010:	4a92      	ldr	r2, [pc, #584]	; (800125c <HAL_GPIO_Init+0x2ac>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d863      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8001016:	4a92      	ldr	r2, [pc, #584]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d046      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
 800101c:	4a90      	ldr	r2, [pc, #576]	; (8001260 <HAL_GPIO_Init+0x2b0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d85d      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 8001022:	2b12      	cmp	r3, #18
 8001024:	d82a      	bhi.n	800107c <HAL_GPIO_Init+0xcc>
 8001026:	2b12      	cmp	r3, #18
 8001028:	d859      	bhi.n	80010de <HAL_GPIO_Init+0x12e>
 800102a:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <HAL_GPIO_Init+0x80>)
 800102c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001030:	080010ab 	.word	0x080010ab
 8001034:	08001085 	.word	0x08001085
 8001038:	08001097 	.word	0x08001097
 800103c:	080010d9 	.word	0x080010d9
 8001040:	080010df 	.word	0x080010df
 8001044:	080010df 	.word	0x080010df
 8001048:	080010df 	.word	0x080010df
 800104c:	080010df 	.word	0x080010df
 8001050:	080010df 	.word	0x080010df
 8001054:	080010df 	.word	0x080010df
 8001058:	080010df 	.word	0x080010df
 800105c:	080010df 	.word	0x080010df
 8001060:	080010df 	.word	0x080010df
 8001064:	080010df 	.word	0x080010df
 8001068:	080010df 	.word	0x080010df
 800106c:	080010df 	.word	0x080010df
 8001070:	080010df 	.word	0x080010df
 8001074:	0800108d 	.word	0x0800108d
 8001078:	080010a1 	.word	0x080010a1
 800107c:	4a79      	ldr	r2, [pc, #484]	; (8001264 <HAL_GPIO_Init+0x2b4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d013      	beq.n	80010aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001082:	e02c      	b.n	80010de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	623b      	str	r3, [r7, #32]
          break;
 800108a:	e029      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	3304      	adds	r3, #4
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	e024      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	3308      	adds	r3, #8
 800109c:	623b      	str	r3, [r7, #32]
          break;
 800109e:	e01f      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	330c      	adds	r3, #12
 80010a6:	623b      	str	r3, [r7, #32]
          break;
 80010a8:	e01a      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d102      	bne.n	80010b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010b2:	2304      	movs	r3, #4
 80010b4:	623b      	str	r3, [r7, #32]
          break;
 80010b6:	e013      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d105      	bne.n	80010cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c0:	2308      	movs	r3, #8
 80010c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69fa      	ldr	r2, [r7, #28]
 80010c8:	611a      	str	r2, [r3, #16]
          break;
 80010ca:	e009      	b.n	80010e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010cc:	2308      	movs	r3, #8
 80010ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	615a      	str	r2, [r3, #20]
          break;
 80010d6:	e003      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010d8:	2300      	movs	r3, #0
 80010da:	623b      	str	r3, [r7, #32]
          break;
 80010dc:	e000      	b.n	80010e0 <HAL_GPIO_Init+0x130>
          break;
 80010de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	2bff      	cmp	r3, #255	; 0xff
 80010e4:	d801      	bhi.n	80010ea <HAL_GPIO_Init+0x13a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	e001      	b.n	80010ee <HAL_GPIO_Init+0x13e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	3304      	adds	r3, #4
 80010ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	2bff      	cmp	r3, #255	; 0xff
 80010f4:	d802      	bhi.n	80010fc <HAL_GPIO_Init+0x14c>
 80010f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	e002      	b.n	8001102 <HAL_GPIO_Init+0x152>
 80010fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010fe:	3b08      	subs	r3, #8
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	210f      	movs	r1, #15
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	fa01 f303 	lsl.w	r3, r1, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	401a      	ands	r2, r3
 8001114:	6a39      	ldr	r1, [r7, #32]
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	431a      	orrs	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	f000 80b1 	beq.w	8001292 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001130:	4b4d      	ldr	r3, [pc, #308]	; (8001268 <HAL_GPIO_Init+0x2b8>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a4c      	ldr	r2, [pc, #304]	; (8001268 <HAL_GPIO_Init+0x2b8>)
 8001136:	f043 0301 	orr.w	r3, r3, #1
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <HAL_GPIO_Init+0x2b8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0301 	and.w	r3, r3, #1
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001148:	4a48      	ldr	r2, [pc, #288]	; (800126c <HAL_GPIO_Init+0x2bc>)
 800114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114c:	089b      	lsrs	r3, r3, #2
 800114e:	3302      	adds	r3, #2
 8001150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001154:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	f003 0303 	and.w	r3, r3, #3
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	220f      	movs	r2, #15
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	43db      	mvns	r3, r3
 8001166:	68fa      	ldr	r2, [r7, #12]
 8001168:	4013      	ands	r3, r2
 800116a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a40      	ldr	r2, [pc, #256]	; (8001270 <HAL_GPIO_Init+0x2c0>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d013      	beq.n	800119c <HAL_GPIO_Init+0x1ec>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a3f      	ldr	r2, [pc, #252]	; (8001274 <HAL_GPIO_Init+0x2c4>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d00d      	beq.n	8001198 <HAL_GPIO_Init+0x1e8>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a3e      	ldr	r2, [pc, #248]	; (8001278 <HAL_GPIO_Init+0x2c8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d007      	beq.n	8001194 <HAL_GPIO_Init+0x1e4>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a3d      	ldr	r2, [pc, #244]	; (800127c <HAL_GPIO_Init+0x2cc>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d101      	bne.n	8001190 <HAL_GPIO_Init+0x1e0>
 800118c:	2303      	movs	r3, #3
 800118e:	e006      	b.n	800119e <HAL_GPIO_Init+0x1ee>
 8001190:	2304      	movs	r3, #4
 8001192:	e004      	b.n	800119e <HAL_GPIO_Init+0x1ee>
 8001194:	2302      	movs	r3, #2
 8001196:	e002      	b.n	800119e <HAL_GPIO_Init+0x1ee>
 8001198:	2301      	movs	r3, #1
 800119a:	e000      	b.n	800119e <HAL_GPIO_Init+0x1ee>
 800119c:	2300      	movs	r3, #0
 800119e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011a0:	f002 0203 	and.w	r2, r2, #3
 80011a4:	0092      	lsls	r2, r2, #2
 80011a6:	4093      	lsls	r3, r2
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011ae:	492f      	ldr	r1, [pc, #188]	; (800126c <HAL_GPIO_Init+0x2bc>)
 80011b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b2:	089b      	lsrs	r3, r3, #2
 80011b4:	3302      	adds	r3, #2
 80011b6:	68fa      	ldr	r2, [r7, #12]
 80011b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d006      	beq.n	80011d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011c8:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	492c      	ldr	r1, [pc, #176]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	608b      	str	r3, [r1, #8]
 80011d4:	e006      	b.n	80011e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011d6:	4b2a      	ldr	r3, [pc, #168]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	43db      	mvns	r3, r3
 80011de:	4928      	ldr	r1, [pc, #160]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d006      	beq.n	80011fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f0:	4b23      	ldr	r3, [pc, #140]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 80011f2:	68da      	ldr	r2, [r3, #12]
 80011f4:	4922      	ldr	r1, [pc, #136]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 80011f6:	69bb      	ldr	r3, [r7, #24]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60cb      	str	r3, [r1, #12]
 80011fc:	e006      	b.n	800120c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011fe:	4b20      	ldr	r3, [pc, #128]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 8001200:	68da      	ldr	r2, [r3, #12]
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	43db      	mvns	r3, r3
 8001206:	491e      	ldr	r1, [pc, #120]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 8001208:	4013      	ands	r3, r2
 800120a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d006      	beq.n	8001226 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	4918      	ldr	r1, [pc, #96]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	4313      	orrs	r3, r2
 8001222:	604b      	str	r3, [r1, #4]
 8001224:	e006      	b.n	8001234 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	43db      	mvns	r3, r3
 800122e:	4914      	ldr	r1, [pc, #80]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 8001230:	4013      	ands	r3, r2
 8001232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d021      	beq.n	8001284 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001240:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	490e      	ldr	r1, [pc, #56]	; (8001280 <HAL_GPIO_Init+0x2d0>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	600b      	str	r3, [r1, #0]
 800124c:	e021      	b.n	8001292 <HAL_GPIO_Init+0x2e2>
 800124e:	bf00      	nop
 8001250:	10320000 	.word	0x10320000
 8001254:	10310000 	.word	0x10310000
 8001258:	10220000 	.word	0x10220000
 800125c:	10210000 	.word	0x10210000
 8001260:	10120000 	.word	0x10120000
 8001264:	10110000 	.word	0x10110000
 8001268:	40021000 	.word	0x40021000
 800126c:	40010000 	.word	0x40010000
 8001270:	40010800 	.word	0x40010800
 8001274:	40010c00 	.word	0x40010c00
 8001278:	40011000 	.word	0x40011000
 800127c:	40011400 	.word	0x40011400
 8001280:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001284:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <HAL_GPIO_Init+0x304>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	43db      	mvns	r3, r3
 800128c:	4909      	ldr	r1, [pc, #36]	; (80012b4 <HAL_GPIO_Init+0x304>)
 800128e:	4013      	ands	r3, r2
 8001290:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	3301      	adds	r3, #1
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	fa22 f303 	lsr.w	r3, r2, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	f47f ae8e 	bne.w	8000fc4 <HAL_GPIO_Init+0x14>
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	372c      	adds	r7, #44	; 0x2c
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	40010400 	.word	0x40010400

080012b8 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <HAL_PWR_EnableBkUpAccess+0x14>)
 80012be:	2201      	movs	r2, #1
 80012c0:	601a      	str	r2, [r3, #0]
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bc80      	pop	{r7}
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	420e0020 	.word	0x420e0020

080012d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e272      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 8087 	beq.w	80013fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f0:	4b92      	ldr	r3, [pc, #584]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	f003 030c 	and.w	r3, r3, #12
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d00c      	beq.n	8001316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012fc:	4b8f      	ldr	r3, [pc, #572]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 030c 	and.w	r3, r3, #12
 8001304:	2b08      	cmp	r3, #8
 8001306:	d112      	bne.n	800132e <HAL_RCC_OscConfig+0x5e>
 8001308:	4b8c      	ldr	r3, [pc, #560]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001314:	d10b      	bne.n	800132e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001316:	4b89      	ldr	r3, [pc, #548]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d06c      	beq.n	80013fc <HAL_RCC_OscConfig+0x12c>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d168      	bne.n	80013fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	e24c      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001336:	d106      	bne.n	8001346 <HAL_RCC_OscConfig+0x76>
 8001338:	4b80      	ldr	r3, [pc, #512]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a7f      	ldr	r2, [pc, #508]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800133e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001342:	6013      	str	r3, [r2, #0]
 8001344:	e02e      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0x98>
 800134e:	4b7b      	ldr	r3, [pc, #492]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a7a      	ldr	r2, [pc, #488]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001354:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b78      	ldr	r3, [pc, #480]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a77      	ldr	r2, [pc, #476]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001360:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e01d      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0xbc>
 8001372:	4b72      	ldr	r3, [pc, #456]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a71      	ldr	r2, [pc, #452]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b6f      	ldr	r3, [pc, #444]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a6e      	ldr	r2, [pc, #440]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e00b      	b.n	80013a4 <HAL_RCC_OscConfig+0xd4>
 800138c:	4b6b      	ldr	r3, [pc, #428]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a6a      	ldr	r2, [pc, #424]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b68      	ldr	r3, [pc, #416]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a67      	ldr	r2, [pc, #412]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800139e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d013      	beq.n	80013d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ac:	f7ff fc64 	bl	8000c78 <HAL_GetTick>
 80013b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013b2:	e008      	b.n	80013c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b4:	f7ff fc60 	bl	8000c78 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	2b64      	cmp	r3, #100	; 0x64
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e200      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013c6:	4b5d      	ldr	r3, [pc, #372]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0f0      	beq.n	80013b4 <HAL_RCC_OscConfig+0xe4>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7ff fc50 	bl	8000c78 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013da:	e008      	b.n	80013ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013dc:	f7ff fc4c 	bl	8000c78 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	2b64      	cmp	r3, #100	; 0x64
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e1ec      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ee:	4b53      	ldr	r3, [pc, #332]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <HAL_RCC_OscConfig+0x10c>
 80013fa:	e000      	b.n	80013fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d063      	beq.n	80014d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800140a:	4b4c      	ldr	r3, [pc, #304]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b00      	cmp	r3, #0
 8001414:	d00b      	beq.n	800142e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001416:	4b49      	ldr	r3, [pc, #292]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	2b08      	cmp	r3, #8
 8001420:	d11c      	bne.n	800145c <HAL_RCC_OscConfig+0x18c>
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142e:	4b43      	ldr	r3, [pc, #268]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d005      	beq.n	8001446 <HAL_RCC_OscConfig+0x176>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d001      	beq.n	8001446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e1c0      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4939      	ldr	r1, [pc, #228]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001456:	4313      	orrs	r3, r2
 8001458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800145a:	e03a      	b.n	80014d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d020      	beq.n	80014a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001464:	4b36      	ldr	r3, [pc, #216]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146a:	f7ff fc05 	bl	8000c78 <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	e008      	b.n	8001484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001472:	f7ff fc01 	bl	8000c78 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e1a1      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0f0      	beq.n	8001472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	4b2a      	ldr	r3, [pc, #168]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	695b      	ldr	r3, [r3, #20]
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	4927      	ldr	r1, [pc, #156]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
 80014a4:	e015      	b.n	80014d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <HAL_RCC_OscConfig+0x270>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fbe4 	bl	8000c78 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b4:	f7ff fbe0 	bl	8000c78 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e180      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d03a      	beq.n	8001554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	699b      	ldr	r3, [r3, #24]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d019      	beq.n	800151a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e6:	4b17      	ldr	r3, [pc, #92]	; (8001544 <HAL_RCC_OscConfig+0x274>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ec:	f7ff fbc4 	bl	8000c78 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f4:	f7ff fbc0 	bl	8000c78 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e160      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_RCC_OscConfig+0x26c>)
 8001508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150a:	f003 0302 	and.w	r3, r3, #2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001512:	2001      	movs	r0, #1
 8001514:	f000 fafe 	bl	8001b14 <RCC_Delay>
 8001518:	e01c      	b.n	8001554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <HAL_RCC_OscConfig+0x274>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001520:	f7ff fbaa 	bl	8000c78 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001526:	e00f      	b.n	8001548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001528:	f7ff fba6 	bl	8000c78 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d908      	bls.n	8001548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e146      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
 800153a:	bf00      	nop
 800153c:	40021000 	.word	0x40021000
 8001540:	42420000 	.word	0x42420000
 8001544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001548:	4b92      	ldr	r3, [pc, #584]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1e9      	bne.n	8001528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 80a6 	beq.w	80016ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001566:	4b8b      	ldr	r3, [pc, #556]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10d      	bne.n	800158e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b88      	ldr	r3, [pc, #544]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a87      	ldr	r2, [pc, #540]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b85      	ldr	r3, [pc, #532]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800158a:	2301      	movs	r3, #1
 800158c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800158e:	4b82      	ldr	r3, [pc, #520]	; (8001798 <HAL_RCC_OscConfig+0x4c8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001596:	2b00      	cmp	r3, #0
 8001598:	d118      	bne.n	80015cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800159a:	4b7f      	ldr	r3, [pc, #508]	; (8001798 <HAL_RCC_OscConfig+0x4c8>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a7e      	ldr	r2, [pc, #504]	; (8001798 <HAL_RCC_OscConfig+0x4c8>)
 80015a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015a6:	f7ff fb67 	bl	8000c78 <HAL_GetTick>
 80015aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	e008      	b.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015ae:	f7ff fb63 	bl	8000c78 <HAL_GetTick>
 80015b2:	4602      	mov	r2, r0
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	2b64      	cmp	r3, #100	; 0x64
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e103      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c0:	4b75      	ldr	r3, [pc, #468]	; (8001798 <HAL_RCC_OscConfig+0x4c8>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0f0      	beq.n	80015ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d106      	bne.n	80015e2 <HAL_RCC_OscConfig+0x312>
 80015d4:	4b6f      	ldr	r3, [pc, #444]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015d6:	6a1b      	ldr	r3, [r3, #32]
 80015d8:	4a6e      	ldr	r2, [pc, #440]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	e02d      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d10c      	bne.n	8001604 <HAL_RCC_OscConfig+0x334>
 80015ea:	4b6a      	ldr	r3, [pc, #424]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	6a1b      	ldr	r3, [r3, #32]
 80015ee:	4a69      	ldr	r2, [pc, #420]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6213      	str	r3, [r2, #32]
 80015f6:	4b67      	ldr	r3, [pc, #412]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a66      	ldr	r2, [pc, #408]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	f023 0304 	bic.w	r3, r3, #4
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	e01c      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	68db      	ldr	r3, [r3, #12]
 8001608:	2b05      	cmp	r3, #5
 800160a:	d10c      	bne.n	8001626 <HAL_RCC_OscConfig+0x356>
 800160c:	4b61      	ldr	r3, [pc, #388]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	4a60      	ldr	r2, [pc, #384]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001612:	f043 0304 	orr.w	r3, r3, #4
 8001616:	6213      	str	r3, [r2, #32]
 8001618:	4b5e      	ldr	r3, [pc, #376]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4a5d      	ldr	r2, [pc, #372]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800161e:	f043 0301 	orr.w	r3, r3, #1
 8001622:	6213      	str	r3, [r2, #32]
 8001624:	e00b      	b.n	800163e <HAL_RCC_OscConfig+0x36e>
 8001626:	4b5b      	ldr	r3, [pc, #364]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4a5a      	ldr	r2, [pc, #360]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800162c:	f023 0301 	bic.w	r3, r3, #1
 8001630:	6213      	str	r3, [r2, #32]
 8001632:	4b58      	ldr	r3, [pc, #352]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a57      	ldr	r2, [pc, #348]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	f023 0304 	bic.w	r3, r3, #4
 800163c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d015      	beq.n	8001672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001646:	f7ff fb17 	bl	8000c78 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800164c:	e00a      	b.n	8001664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164e:	f7ff fb13 	bl	8000c78 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	f241 3288 	movw	r2, #5000	; 0x1388
 800165c:	4293      	cmp	r3, r2
 800165e:	d901      	bls.n	8001664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001660:	2303      	movs	r3, #3
 8001662:	e0b1      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001664:	4b4b      	ldr	r3, [pc, #300]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	f003 0302 	and.w	r3, r3, #2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0ee      	beq.n	800164e <HAL_RCC_OscConfig+0x37e>
 8001670:	e014      	b.n	800169c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001672:	f7ff fb01 	bl	8000c78 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001678:	e00a      	b.n	8001690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800167a:	f7ff fafd 	bl	8000c78 <HAL_GetTick>
 800167e:	4602      	mov	r2, r0
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	f241 3288 	movw	r2, #5000	; 0x1388
 8001688:	4293      	cmp	r3, r2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e09b      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001690:	4b40      	ldr	r3, [pc, #256]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1ee      	bne.n	800167a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d105      	bne.n	80016ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a2:	4b3c      	ldr	r3, [pc, #240]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016a4:	69db      	ldr	r3, [r3, #28]
 80016a6:	4a3b      	ldr	r2, [pc, #236]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f000 8087 	beq.w	80017c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016b8:	4b36      	ldr	r3, [pc, #216]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f003 030c 	and.w	r3, r3, #12
 80016c0:	2b08      	cmp	r3, #8
 80016c2:	d061      	beq.n	8001788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d146      	bne.n	800175a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016cc:	4b33      	ldr	r3, [pc, #204]	; (800179c <HAL_RCC_OscConfig+0x4cc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d2:	f7ff fad1 	bl	8000c78 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d8:	e008      	b.n	80016ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016da:	f7ff facd 	bl	8000c78 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d901      	bls.n	80016ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016e8:	2303      	movs	r3, #3
 80016ea:	e06d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ec:	4b29      	ldr	r3, [pc, #164]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f0      	bne.n	80016da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001700:	d108      	bne.n	8001714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	4921      	ldr	r1, [pc, #132]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a19      	ldr	r1, [r3, #32]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001724:	430b      	orrs	r3, r1
 8001726:	491b      	ldr	r1, [pc, #108]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_RCC_OscConfig+0x4cc>)
 800172e:	2201      	movs	r2, #1
 8001730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001732:	f7ff faa1 	bl	8000c78 <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001738:	e008      	b.n	800174c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800173a:	f7ff fa9d 	bl	8000c78 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e03d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800174c:	4b11      	ldr	r3, [pc, #68]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0f0      	beq.n	800173a <HAL_RCC_OscConfig+0x46a>
 8001758:	e035      	b.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <HAL_RCC_OscConfig+0x4cc>)
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fa8a 	bl	8000c78 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001766:	e008      	b.n	800177a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001768:	f7ff fa86 	bl	8000c78 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	2b02      	cmp	r3, #2
 8001774:	d901      	bls.n	800177a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001776:	2303      	movs	r3, #3
 8001778:	e026      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800177a:	4b06      	ldr	r3, [pc, #24]	; (8001794 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f0      	bne.n	8001768 <HAL_RCC_OscConfig+0x498>
 8001786:	e01e      	b.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d107      	bne.n	80017a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e019      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
 8001794:	40021000 	.word	0x40021000
 8001798:	40007000 	.word	0x40007000
 800179c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_OscConfig+0x500>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d106      	bne.n	80017c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d001      	beq.n	80017c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e000      	b.n	80017c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3718      	adds	r7, #24
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000

080017d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0d0      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b6a      	ldr	r3, [pc, #424]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d910      	bls.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b67      	ldr	r3, [pc, #412]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 0207 	bic.w	r2, r3, #7
 80017fe:	4965      	ldr	r1, [pc, #404]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b63      	ldr	r3, [pc, #396]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e0b8      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d020      	beq.n	8001866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b00      	cmp	r3, #0
 800182e:	d005      	beq.n	800183c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001830:	4b59      	ldr	r3, [pc, #356]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	4a58      	ldr	r2, [pc, #352]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800183a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a52      	ldr	r2, [pc, #328]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001854:	4b50      	ldr	r3, [pc, #320]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	494d      	ldr	r1, [pc, #308]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	4313      	orrs	r3, r2
 8001864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b00      	cmp	r3, #0
 8001870:	d040      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d107      	bne.n	800188a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187a:	4b47      	ldr	r3, [pc, #284]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d115      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e07f      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	2b02      	cmp	r3, #2
 8001890:	d107      	bne.n	80018a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001892:	4b41      	ldr	r3, [pc, #260]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d109      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e073      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d101      	bne.n	80018b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e06b      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b2:	4b39      	ldr	r3, [pc, #228]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f023 0203 	bic.w	r2, r3, #3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4936      	ldr	r1, [pc, #216]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c4:	f7ff f9d8 	bl	8000c78 <HAL_GetTick>
 80018c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018cc:	f7ff f9d4 	bl	8000c78 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e053      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f003 020c 	and.w	r2, r3, #12
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d1eb      	bne.n	80018cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018f4:	4b27      	ldr	r3, [pc, #156]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	429a      	cmp	r2, r3
 8001900:	d210      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001902:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f023 0207 	bic.w	r2, r3, #7
 800190a:	4922      	ldr	r1, [pc, #136]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001912:	4b20      	ldr	r3, [pc, #128]	; (8001994 <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	429a      	cmp	r2, r3
 800191e:	d001      	beq.n	8001924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e032      	b.n	800198a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0304 	and.w	r3, r3, #4
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	4916      	ldr	r1, [pc, #88]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800193e:	4313      	orrs	r3, r2
 8001940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0308 	and.w	r3, r3, #8
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800194e:	4b12      	ldr	r3, [pc, #72]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	490e      	ldr	r1, [pc, #56]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800195e:	4313      	orrs	r3, r2
 8001960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001962:	f000 f821 	bl	80019a8 <HAL_RCC_GetSysClockFreq>
 8001966:	4602      	mov	r2, r0
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <HAL_RCC_ClockConfig+0x1c4>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	490a      	ldr	r1, [pc, #40]	; (800199c <HAL_RCC_ClockConfig+0x1c8>)
 8001974:	5ccb      	ldrb	r3, [r1, r3]
 8001976:	fa22 f303 	lsr.w	r3, r2, r3
 800197a:	4a09      	ldr	r2, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1cc>)
 800197c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f7fe ffb0 	bl	80008e8 <HAL_InitTick>

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	40022000 	.word	0x40022000
 8001998:	40021000 	.word	0x40021000
 800199c:	08008e58 	.word	0x08008e58
 80019a0:	20000020 	.word	0x20000020
 80019a4:	20000024 	.word	0x20000024

080019a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	2300      	movs	r3, #0
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019c2:	4b1e      	ldr	r3, [pc, #120]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b04      	cmp	r3, #4
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x30>
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x36>
 80019d6:	e027      	b.n	8001a28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80019da:	613b      	str	r3, [r7, #16]
      break;
 80019dc:	e027      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	0c9b      	lsrs	r3, r3, #18
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	4a17      	ldr	r2, [pc, #92]	; (8001a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019e8:	5cd3      	ldrb	r3, [r2, r3]
 80019ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d010      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	0c5b      	lsrs	r3, r3, #17
 80019fc:	f003 0301 	and.w	r3, r3, #1
 8001a00:	4a11      	ldr	r2, [pc, #68]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a02:	5cd3      	ldrb	r3, [r2, r3]
 8001a04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a0a:	fb03 f202 	mul.w	r2, r3, r2
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e004      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a1c:	fb02 f303 	mul.w	r3, r2, r3
 8001a20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	613b      	str	r3, [r7, #16]
      break;
 8001a26:	e002      	b.n	8001a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a2a:	613b      	str	r3, [r7, #16]
      break;
 8001a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a2e:	693b      	ldr	r3, [r7, #16]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bc80      	pop	{r7}
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	007a1200 	.word	0x007a1200
 8001a44:	08008e70 	.word	0x08008e70
 8001a48:	08008e80 	.word	0x08008e80
 8001a4c:	003d0900 	.word	0x003d0900

08001a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	20000020 	.word	0x20000020

08001a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a68:	f7ff fff2 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	4903      	ldr	r1, [pc, #12]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7a:	5ccb      	ldrb	r3, [r1, r3]
 8001a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	08008e68 	.word	0x08008e68

08001a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a94:	4602      	mov	r2, r0
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	0adb      	lsrs	r3, r3, #11
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	4903      	ldr	r1, [pc, #12]	; (8001ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa2:	5ccb      	ldrb	r3, [r1, r3]
 8001aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	08008e68 	.word	0x08008e68

08001ab4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_RCC_GetClockConfig+0x58>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0203 	and.w	r2, r3, #3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ad0:	4b0e      	ldr	r3, [pc, #56]	; (8001b0c <HAL_RCC_GetClockConfig+0x58>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001adc:	4b0b      	ldr	r3, [pc, #44]	; (8001b0c <HAL_RCC_GetClockConfig+0x58>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <HAL_RCC_GetClockConfig+0x58>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	08db      	lsrs	r3, r3, #3
 8001aee:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001af6:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <HAL_RCC_GetClockConfig+0x5c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0207 	and.w	r2, r3, #7
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	40022000 	.word	0x40022000

08001b14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b085      	sub	sp, #20
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b1c:	4b0a      	ldr	r3, [pc, #40]	; (8001b48 <RCC_Delay+0x34>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <RCC_Delay+0x38>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	0a5b      	lsrs	r3, r3, #9
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	fb02 f303 	mul.w	r3, r2, r3
 8001b2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b30:	bf00      	nop
  }
  while (Delay --);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	1e5a      	subs	r2, r3, #1
 8001b36:	60fa      	str	r2, [r7, #12]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1f9      	bne.n	8001b30 <RCC_Delay+0x1c>
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	20000020 	.word	0x20000020
 8001b4c:	10624dd3 	.word	0x10624dd3

08001b50 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	613b      	str	r3, [r7, #16]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d07d      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b70:	4b4f      	ldr	r3, [pc, #316]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d10d      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b7c:	4b4c      	ldr	r3, [pc, #304]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b7e:	69db      	ldr	r3, [r3, #28]
 8001b80:	4a4b      	ldr	r2, [pc, #300]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b86:	61d3      	str	r3, [r2, #28]
 8001b88:	4b49      	ldr	r3, [pc, #292]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b8a:	69db      	ldr	r3, [r3, #28]
 8001b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b90:	60bb      	str	r3, [r7, #8]
 8001b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b94:	2301      	movs	r3, #1
 8001b96:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b98:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d118      	bne.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba4:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a42      	ldr	r2, [pc, #264]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f862 	bl	8000c78 <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb6:	e008      	b.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb8:	f7ff f85e 	bl	8000c78 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b64      	cmp	r3, #100	; 0x64
 8001bc4:	d901      	bls.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e06d      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bd6:	4b36      	ldr	r3, [pc, #216]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bde:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d02e      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d027      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bf4:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bfc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bfe:	4b2e      	ldr	r3, [pc, #184]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c04:	4b2c      	ldr	r3, [pc, #176]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c0a:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d014      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f82d 	bl	8000c78 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c20:	e00a      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c22:	f7ff f829 	bl	8000c78 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e036      	b.n	8001ca6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c38:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ee      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	4917      	ldr	r1, [pc, #92]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d105      	bne.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	4a13      	ldr	r2, [pc, #76]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c66:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d008      	beq.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c74:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	490b      	ldr	r1, [pc, #44]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d008      	beq.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c92:	4b07      	ldr	r3, [pc, #28]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	4904      	ldr	r1, [pc, #16]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	40007000 	.word	0x40007000
 8001cb8:	42420440 	.word	0x42420440

08001cbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b088      	sub	sp, #32
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	2300      	movs	r3, #0
 8001cce:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b10      	cmp	r3, #16
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2b10      	cmp	r3, #16
 8001ce2:	f200 808a 	bhi.w	8001dfa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d045      	beq.n	8001d78 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d075      	beq.n	8001dde <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001cf2:	e082      	b.n	8001dfa <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8001cf4:	4b46      	ldr	r3, [pc, #280]	; (8001e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001cfa:	4b45      	ldr	r3, [pc, #276]	; (8001e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d07b      	beq.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	0c9b      	lsrs	r3, r3, #18
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	4a41      	ldr	r2, [pc, #260]	; (8001e14 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8001d10:	5cd3      	ldrb	r3, [r2, r3]
 8001d12:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d015      	beq.n	8001d4a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d1e:	4b3c      	ldr	r3, [pc, #240]	; (8001e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	0c5b      	lsrs	r3, r3, #17
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	4a3b      	ldr	r2, [pc, #236]	; (8001e18 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8001d2a:	5cd3      	ldrb	r3, [r2, r3]
 8001d2c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00d      	beq.n	8001d54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001d38:	4a38      	ldr	r2, [pc, #224]	; (8001e1c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	e004      	b.n	8001d54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	4a34      	ldr	r2, [pc, #208]	; (8001e20 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8001d4e:	fb02 f303 	mul.w	r3, r2, r3
 8001d52:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001d54:	4b2e      	ldr	r3, [pc, #184]	; (8001e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d60:	d102      	bne.n	8001d68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	61bb      	str	r3, [r7, #24]
      break;
 8001d66:	e04a      	b.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	4a2d      	ldr	r2, [pc, #180]	; (8001e24 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	085b      	lsrs	r3, r3, #1
 8001d74:	61bb      	str	r3, [r7, #24]
      break;
 8001d76:	e042      	b.n	8001dfe <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8001d78:	4b25      	ldr	r3, [pc, #148]	; (8001e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001d7a:	6a1b      	ldr	r3, [r3, #32]
 8001d7c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d88:	d108      	bne.n	8001d9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8001d94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d98:	61bb      	str	r3, [r7, #24]
 8001d9a:	e01f      	b.n	8001ddc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001da6:	d109      	bne.n	8001dbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001da8:	4b19      	ldr	r3, [pc, #100]	; (8001e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d003      	beq.n	8001dbc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8001db4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	e00f      	b.n	8001ddc <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001dc6:	d11c      	bne.n	8001e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001dc8:	4b11      	ldr	r3, [pc, #68]	; (8001e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d016      	beq.n	8001e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8001dd4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001dd8:	61bb      	str	r3, [r7, #24]
      break;
 8001dda:	e012      	b.n	8001e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8001ddc:	e011      	b.n	8001e02 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001dde:	f7ff fe55 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8001de2:	4602      	mov	r2, r0
 8001de4:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	0b9b      	lsrs	r3, r3, #14
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	3301      	adds	r3, #1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df6:	61bb      	str	r3, [r7, #24]
      break;
 8001df8:	e004      	b.n	8001e04 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001dfa:	bf00      	nop
 8001dfc:	e002      	b.n	8001e04 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001dfe:	bf00      	nop
 8001e00:	e000      	b.n	8001e04 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8001e02:	bf00      	nop
    }
  }
  return (frequency);
 8001e04:	69bb      	ldr	r3, [r7, #24]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3720      	adds	r7, #32
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08008e84 	.word	0x08008e84
 8001e18:	08008e94 	.word	0x08008e94
 8001e1c:	007a1200 	.word	0x007a1200
 8001e20:	003d0900 	.word	0x003d0900
 8001e24:	aaaaaaab 	.word	0xaaaaaaab

08001e28 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d101      	bne.n	8001e3e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e07a      	b.n	8001f34 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	7c5b      	ldrb	r3, [r3, #17]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d105      	bne.n	8001e54 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f7fe fcce 	bl	80007f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 faea 	bl	8002434 <HAL_RTC_WaitForSynchro>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d004      	beq.n	8001e70 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2204      	movs	r2, #4
 8001e6a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e061      	b.n	8001f34 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fba3 	bl	80025bc <RTC_EnterInitMode>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2204      	movs	r2, #4
 8001e80:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e056      	b.n	8001f34 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	685a      	ldr	r2, [r3, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0207 	bic.w	r2, r2, #7
 8001e94:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d005      	beq.n	8001eaa <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001e9e:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_RTC_Init+0x114>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <HAL_RTC_Init+0x114>)
 8001ea4:	f023 0301 	bic.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RTC_Init+0x114>)
 8001eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eae:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4921      	ldr	r1, [pc, #132]	; (8001f3c <HAL_RTC_Init+0x114>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d003      	beq.n	8001ece <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	e00e      	b.n	8001eec <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f7ff fef4 	bl	8001cbc <HAL_RCCEx_GetPeriphCLKFreq>
 8001ed4:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d104      	bne.n	8001ee6 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e026      	b.n	8001f34 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3b01      	subs	r3, #1
 8001eea:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	0c1a      	lsrs	r2, r3, #16
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f002 020f 	and.w	r2, r2, #15
 8001ef8:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	b292      	uxth	r2, r2
 8001f02:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 fb81 	bl	800260c <RTC_ExitInitMode>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d004      	beq.n	8001f1a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2204      	movs	r2, #4
 8001f14:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00c      	b.n	8001f34 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
  }
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40006c00 	.word	0x40006c00

08001f40 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f40:	b590      	push	{r4, r7, lr}
 8001f42:	b087      	sub	sp, #28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
 8001f50:	2300      	movs	r3, #0
 8001f52:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <HAL_RTC_SetTime+0x20>
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e080      	b.n	8002066 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	7c1b      	ldrb	r3, [r3, #16]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d101      	bne.n	8001f70 <HAL_RTC_SetTime+0x30>
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	e07a      	b.n	8002066 <HAL_RTC_SetTime+0x126>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2201      	movs	r2, #1
 8001f74:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d113      	bne.n	8001faa <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001f8c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	785b      	ldrb	r3, [r3, #1]
 8001f94:	4619      	mov	r1, r3
 8001f96:	460b      	mov	r3, r1
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	1a5b      	subs	r3, r3, r1
 8001f9c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f9e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001fa4:	4413      	add	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
 8001fa8:	e01e      	b.n	8001fe8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fb71 	bl	8002696 <RTC_Bcd2ToByte>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001fbc:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	785b      	ldrb	r3, [r3, #1]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f000 fb66 	bl	8002696 <RTC_Bcd2ToByte>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4613      	mov	r3, r2
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	1a9b      	subs	r3, r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001fd6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	789b      	ldrb	r3, [r3, #2]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 fb5a 	bl	8002696 <RTC_Bcd2ToByte>
 8001fe2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001fe4:	4423      	add	r3, r4
 8001fe6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001fe8:	6979      	ldr	r1, [r7, #20]
 8001fea:	68f8      	ldr	r0, [r7, #12]
 8001fec:	f000 fa7f 	bl	80024ee <RTC_WriteTimeCounter>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2204      	movs	r2, #4
 8001ffa:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e02f      	b.n	8002066 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0205 	bic.w	r2, r2, #5
 8002014:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002016:	68f8      	ldr	r0, [r7, #12]
 8002018:	f000 fa90 	bl	800253c <RTC_ReadAlarmCounter>
 800201c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002024:	d018      	beq.n	8002058 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	429a      	cmp	r2, r3
 800202c:	d214      	bcs.n	8002058 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002034:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002038:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800203a:	6939      	ldr	r1, [r7, #16]
 800203c:	68f8      	ldr	r0, [r7, #12]
 800203e:	f000 fa96 	bl	800256e <RTC_WriteAlarmCounter>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d007      	beq.n	8002058 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2204      	movs	r2, #4
 800204c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e006      	b.n	8002066 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2201      	movs	r2, #1
 800205c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	2200      	movs	r2, #0
 8002062:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002064:	2300      	movs	r3, #0
  }
}
 8002066:	4618      	mov	r0, r3
 8002068:	371c      	adds	r7, #28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd90      	pop	{r4, r7, pc}
	...

08002070 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	2300      	movs	r3, #0
 800208a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <HAL_RTC_GetTime+0x28>
 8002092:	68bb      	ldr	r3, [r7, #8]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d101      	bne.n	800209c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e0b5      	b.n	8002208 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0304 	and.w	r3, r3, #4
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e0ac      	b.n	8002208 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f9ed 	bl	800248e <RTC_ReadTimeCounter>
 80020b4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	4a55      	ldr	r2, [pc, #340]	; (8002210 <HAL_RTC_GetTime+0x1a0>)
 80020ba:	fba2 2303 	umull	r2, r3, r2, r3
 80020be:	0adb      	lsrs	r3, r3, #11
 80020c0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80020c2:	69ba      	ldr	r2, [r7, #24]
 80020c4:	4b52      	ldr	r3, [pc, #328]	; (8002210 <HAL_RTC_GetTime+0x1a0>)
 80020c6:	fba3 1302 	umull	r1, r3, r3, r2
 80020ca:	0adb      	lsrs	r3, r3, #11
 80020cc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	4a4f      	ldr	r2, [pc, #316]	; (8002214 <HAL_RTC_GetTime+0x1a4>)
 80020d8:	fba2 2303 	umull	r2, r3, r2, r3
 80020dc:	095b      	lsrs	r3, r3, #5
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <HAL_RTC_GetTime+0x1a0>)
 80020e8:	fba2 1203 	umull	r1, r2, r2, r3
 80020ec:	0ad2      	lsrs	r2, r2, #11
 80020ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80020f2:	fb01 f202 	mul.w	r2, r1, r2
 80020f6:	1a9a      	subs	r2, r3, r2
 80020f8:	4b46      	ldr	r3, [pc, #280]	; (8002214 <HAL_RTC_GetTime+0x1a4>)
 80020fa:	fba3 1302 	umull	r1, r3, r3, r2
 80020fe:	0959      	lsrs	r1, r3, #5
 8002100:	460b      	mov	r3, r1
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a5b      	subs	r3, r3, r1
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	1ad1      	subs	r1, r2, r3
 800210a:	b2ca      	uxtb	r2, r1
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	2b17      	cmp	r3, #23
 8002114:	d955      	bls.n	80021c2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4a3f      	ldr	r2, [pc, #252]	; (8002218 <HAL_RTC_GetTime+0x1a8>)
 800211a:	fba2 2303 	umull	r2, r3, r2, r3
 800211e:	091b      	lsrs	r3, r3, #4
 8002120:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002122:	6939      	ldr	r1, [r7, #16]
 8002124:	4b3c      	ldr	r3, [pc, #240]	; (8002218 <HAL_RTC_GetTime+0x1a8>)
 8002126:	fba3 2301 	umull	r2, r3, r3, r1
 800212a:	091a      	lsrs	r2, r3, #4
 800212c:	4613      	mov	r3, r2
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4413      	add	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	1aca      	subs	r2, r1, r3
 8002136:	b2d2      	uxtb	r2, r2
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f000 f9fd 	bl	800253c <RTC_ReadAlarmCounter>
 8002142:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800214a:	d008      	beq.n	800215e <HAL_RTC_GetTime+0xee>
 800214c:	69fa      	ldr	r2, [r7, #28]
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	429a      	cmp	r2, r3
 8002152:	d904      	bls.n	800215e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	e002      	b.n	8002164 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
 8002162:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	4a2d      	ldr	r2, [pc, #180]	; (800221c <HAL_RTC_GetTime+0x1ac>)
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002172:	69b9      	ldr	r1, [r7, #24]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f000 f9ba 	bl	80024ee <RTC_WriteTimeCounter>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e041      	b.n	8002208 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800218a:	d00c      	beq.n	80021a6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	4413      	add	r3, r2
 8002192:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002194:	69f9      	ldr	r1, [r7, #28]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f9e9 	bl	800256e <RTC_WriteAlarmCounter>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00a      	beq.n	80021b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e030      	b.n	8002208 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80021a6:	69f9      	ldr	r1, [r7, #28]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 f9e0 	bl	800256e <RTC_WriteAlarmCounter>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80021b4:	2301      	movs	r3, #1
 80021b6:	e027      	b.n	8002208 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 80021b8:	6979      	ldr	r1, [r7, #20]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fa88 	bl	80026d0 <RTC_DateUpdate>
 80021c0:	e003      	b.n	80021ca <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01a      	beq.n	8002206 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 fa41 	bl	800265c <RTC_ByteToBcd2>
 80021da:	4603      	mov	r3, r0
 80021dc:	461a      	mov	r2, r3
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	785b      	ldrb	r3, [r3, #1]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 fa38 	bl	800265c <RTC_ByteToBcd2>
 80021ec:	4603      	mov	r3, r0
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	789b      	ldrb	r3, [r3, #2]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f000 fa2f 	bl	800265c <RTC_ByteToBcd2>
 80021fe:	4603      	mov	r3, r0
 8002200:	461a      	mov	r2, r3
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3720      	adds	r7, #32
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	91a2b3c5 	.word	0x91a2b3c5
 8002214:	88888889 	.word	0x88888889
 8002218:	aaaaaaab 	.word	0xaaaaaaab
 800221c:	00015180 	.word	0x00015180

08002220 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800222c:	2300      	movs	r3, #0
 800222e:	61fb      	str	r3, [r7, #28]
 8002230:	2300      	movs	r3, #0
 8002232:	61bb      	str	r3, [r7, #24]
 8002234:	2300      	movs	r3, #0
 8002236:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d002      	beq.n	8002244 <HAL_RTC_SetDate+0x24>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d101      	bne.n	8002248 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e097      	b.n	8002378 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	7c1b      	ldrb	r3, [r3, #16]
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_RTC_SetDate+0x34>
 8002250:	2302      	movs	r3, #2
 8002252:	e091      	b.n	8002378 <HAL_RTC_SetDate+0x158>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2202      	movs	r2, #2
 800225e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10c      	bne.n	8002280 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	78da      	ldrb	r2, [r3, #3]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	785a      	ldrb	r2, [r3, #1]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	789a      	ldrb	r2, [r3, #2]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	739a      	strb	r2, [r3, #14]
 800227e:	e01a      	b.n	80022b6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	78db      	ldrb	r3, [r3, #3]
 8002284:	4618      	mov	r0, r3
 8002286:	f000 fa06 	bl	8002696 <RTC_Bcd2ToByte>
 800228a:	4603      	mov	r3, r0
 800228c:	461a      	mov	r2, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	785b      	ldrb	r3, [r3, #1]
 8002296:	4618      	mov	r0, r3
 8002298:	f000 f9fd 	bl	8002696 <RTC_Bcd2ToByte>
 800229c:	4603      	mov	r3, r0
 800229e:	461a      	mov	r2, r3
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	789b      	ldrb	r3, [r3, #2]
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 f9f4 	bl	8002696 <RTC_Bcd2ToByte>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	7bdb      	ldrb	r3, [r3, #15]
 80022ba:	4618      	mov	r0, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	7b59      	ldrb	r1, [r3, #13]
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	7b9b      	ldrb	r3, [r3, #14]
 80022c4:	461a      	mov	r2, r3
 80022c6:	f000 fadf 	bl	8002888 <RTC_WeekDayNum>
 80022ca:	4603      	mov	r3, r0
 80022cc:	461a      	mov	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	7b1a      	ldrb	r2, [r3, #12]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f8d7 	bl	800248e <RTC_ReadTimeCounter>
 80022e0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	4a26      	ldr	r2, [pc, #152]	; (8002380 <HAL_RTC_SetDate+0x160>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0adb      	lsrs	r3, r3, #11
 80022ec:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	2b18      	cmp	r3, #24
 80022f2:	d93a      	bls.n	800236a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	4a23      	ldr	r2, [pc, #140]	; (8002384 <HAL_RTC_SetDate+0x164>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	4a22      	ldr	r2, [pc, #136]	; (8002388 <HAL_RTC_SetDate+0x168>)
 8002300:	fb02 f303 	mul.w	r3, r2, r3
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800230a:	69f9      	ldr	r1, [r7, #28]
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f8ee 	bl	80024ee <RTC_WriteTimeCounter>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d007      	beq.n	8002328 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2204      	movs	r2, #4
 800231c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e027      	b.n	8002378 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f907 	bl	800253c <RTC_ReadAlarmCounter>
 800232e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002336:	d018      	beq.n	800236a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	429a      	cmp	r2, r3
 800233e:	d214      	bcs.n	800236a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002346:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800234a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800234c:	69b9      	ldr	r1, [r7, #24]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f90d 	bl	800256e <RTC_WriteAlarmCounter>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2204      	movs	r2, #4
 800235e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e006      	b.n	8002378 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2201      	movs	r2, #1
 800236e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	91a2b3c5 	.word	0x91a2b3c5
 8002384:	aaaaaaab 	.word	0xaaaaaaab
 8002388:	00015180 	.word	0x00015180

0800238c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002398:	f107 0314 	add.w	r3, r7, #20
 800239c:	2100      	movs	r1, #0
 800239e:	460a      	mov	r2, r1
 80023a0:	801a      	strh	r2, [r3, #0]
 80023a2:	460a      	mov	r2, r1
 80023a4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <HAL_RTC_GetDate+0x26>
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e03a      	b.n	800242c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	2200      	movs	r2, #0
 80023bc:	4619      	mov	r1, r3
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7ff fe56 	bl	8002070 <HAL_RTC_GetTime>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d001      	beq.n	80023ce <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e02e      	b.n	800242c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	7b1a      	ldrb	r2, [r3, #12]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	7bda      	ldrb	r2, [r3, #15]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	7b5a      	ldrb	r2, [r3, #13]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	7b9a      	ldrb	r2, [r3, #14]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d01a      	beq.n	800242a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	78db      	ldrb	r3, [r3, #3]
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 f92f 	bl	800265c <RTC_ByteToBcd2>
 80023fe:	4603      	mov	r3, r0
 8002400:	461a      	mov	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	4618      	mov	r0, r3
 800240c:	f000 f926 	bl	800265c <RTC_ByteToBcd2>
 8002410:	4603      	mov	r3, r0
 8002412:	461a      	mov	r2, r3
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	789b      	ldrb	r3, [r3, #2]
 800241c:	4618      	mov	r0, r3
 800241e:	f000 f91d 	bl	800265c <RTC_ByteToBcd2>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800242a:	2300      	movs	r3, #0
}
 800242c:	4618      	mov	r0, r3
 800242e:	3718      	adds	r7, #24
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e01d      	b.n	8002486 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	685a      	ldr	r2, [r3, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0208 	bic.w	r2, r2, #8
 8002458:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800245a:	f7fe fc0d 	bl	8000c78 <HAL_GetTick>
 800245e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002460:	e009      	b.n	8002476 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002462:	f7fe fc09 	bl	8000c78 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002470:	d901      	bls.n	8002476 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e007      	b.n	8002486 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ee      	beq.n	8002462 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800248e:	b480      	push	{r7}
 8002490:	b087      	sub	sp, #28
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002496:	2300      	movs	r3, #0
 8002498:	827b      	strh	r3, [r7, #18]
 800249a:	2300      	movs	r3, #0
 800249c:	823b      	strh	r3, [r7, #16]
 800249e:	2300      	movs	r3, #0
 80024a0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	699b      	ldr	r3, [r3, #24]
 80024ac:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	699b      	ldr	r3, [r3, #24]
 80024bc:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80024be:	8a7a      	ldrh	r2, [r7, #18]
 80024c0:	8a3b      	ldrh	r3, [r7, #16]
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d008      	beq.n	80024d8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80024c6:	8a3b      	ldrh	r3, [r7, #16]
 80024c8:	041a      	lsls	r2, r3, #16
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
 80024d6:	e004      	b.n	80024e2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80024d8:	8a7b      	ldrh	r3, [r7, #18]
 80024da:	041a      	lsls	r2, r3, #16
 80024dc:	89fb      	ldrh	r3, [r7, #14]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80024e2:	697b      	ldr	r3, [r7, #20]
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80024ee:	b580      	push	{r7, lr}
 80024f0:	b084      	sub	sp, #16
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f85d 	bl	80025bc <RTC_EnterInitMode>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d002      	beq.n	800250e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	73fb      	strb	r3, [r7, #15]
 800250c:	e011      	b.n	8002532 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	0c12      	lsrs	r2, r2, #16
 8002516:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	b292      	uxth	r2, r2
 8002520:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f872 	bl	800260c <RTC_ExitInitMode>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002532:	7bfb      	ldrb	r3, [r7, #15]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3710      	adds	r7, #16
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}

0800253c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	81fb      	strh	r3, [r7, #14]
 8002548:	2300      	movs	r3, #0
 800254a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800255c:	89fb      	ldrh	r3, [r7, #14]
 800255e:	041a      	lsls	r2, r3, #16
 8002560:	89bb      	ldrh	r3, [r7, #12]
 8002562:	4313      	orrs	r3, r2
}
 8002564:	4618      	mov	r0, r3
 8002566:	3714      	adds	r7, #20
 8002568:	46bd      	mov	sp, r7
 800256a:	bc80      	pop	{r7}
 800256c:	4770      	bx	lr

0800256e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800256e:	b580      	push	{r7, lr}
 8002570:	b084      	sub	sp, #16
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002578:	2300      	movs	r3, #0
 800257a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	f000 f81d 	bl	80025bc <RTC_EnterInitMode>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	e011      	b.n	80025b2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	0c12      	lsrs	r2, r2, #16
 8002596:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	b292      	uxth	r2, r2
 80025a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 f832 	bl	800260c <RTC_ExitInitMode>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80025c8:	f7fe fb56 	bl	8000c78 <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80025ce:	e009      	b.n	80025e4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80025d0:	f7fe fb52 	bl	8000c78 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025de:	d901      	bls.n	80025e4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e00f      	b.n	8002604 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f003 0320 	and.w	r3, r3, #32
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0ee      	beq.n	80025d0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	685a      	ldr	r2, [r3, #4]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f042 0210 	orr.w	r2, r2, #16
 8002600:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0210 	bic.w	r2, r2, #16
 8002626:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002628:	f7fe fb26 	bl	8000c78 <HAL_GetTick>
 800262c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800262e:	e009      	b.n	8002644 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002630:	f7fe fb22 	bl	8000c78 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800263e:	d901      	bls.n	8002644 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e007      	b.n	8002654 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0320 	and.w	r3, r3, #32
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ee      	beq.n	8002630 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800266a:	e005      	b.n	8002678 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	3301      	adds	r3, #1
 8002670:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	3b0a      	subs	r3, #10
 8002676:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	2b09      	cmp	r3, #9
 800267c:	d8f6      	bhi.n	800266c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	b2db      	uxtb	r3, r3
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	b2da      	uxtb	r2, r3
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	4313      	orrs	r3, r2
 800268a:	b2db      	uxtb	r3, r3
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	bc80      	pop	{r7}
 8002694:	4770      	bx	lr

08002696 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002696:	b480      	push	{r7}
 8002698:	b085      	sub	sp, #20
 800269a:	af00      	add	r7, sp, #0
 800269c:	4603      	mov	r3, r0
 800269e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	f003 030f 	and.w	r3, r3, #15
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	b2db      	uxtb	r3, r3
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3714      	adds	r7, #20
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bc80      	pop	{r7}
 80026ce:	4770      	bx	lr

080026d0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80026da:	2300      	movs	r3, #0
 80026dc:	617b      	str	r3, [r7, #20]
 80026de:	2300      	movs	r3, #0
 80026e0:	613b      	str	r3, [r7, #16]
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	7bdb      	ldrb	r3, [r3, #15]
 80026ee:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	7b5b      	ldrb	r3, [r3, #13]
 80026f4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	7b9b      	ldrb	r3, [r3, #14]
 80026fa:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	e06f      	b.n	80027e2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d011      	beq.n	800272c <RTC_DateUpdate+0x5c>
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d00e      	beq.n	800272c <RTC_DateUpdate+0x5c>
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	2b05      	cmp	r3, #5
 8002712:	d00b      	beq.n	800272c <RTC_DateUpdate+0x5c>
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b07      	cmp	r3, #7
 8002718:	d008      	beq.n	800272c <RTC_DateUpdate+0x5c>
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b08      	cmp	r3, #8
 800271e:	d005      	beq.n	800272c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	2b0a      	cmp	r3, #10
 8002724:	d002      	beq.n	800272c <RTC_DateUpdate+0x5c>
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b0c      	cmp	r3, #12
 800272a:	d117      	bne.n	800275c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b1e      	cmp	r3, #30
 8002730:	d803      	bhi.n	800273a <RTC_DateUpdate+0x6a>
      {
        day++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	3301      	adds	r3, #1
 8002736:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002738:	e050      	b.n	80027dc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b0c      	cmp	r3, #12
 800273e:	d005      	beq.n	800274c <RTC_DateUpdate+0x7c>
        {
          month++;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	3301      	adds	r3, #1
 8002744:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002746:	2301      	movs	r3, #1
 8002748:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800274a:	e047      	b.n	80027dc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800274c:	2301      	movs	r3, #1
 800274e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002750:	2301      	movs	r3, #1
 8002752:	60fb      	str	r3, [r7, #12]
          year++;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3301      	adds	r3, #1
 8002758:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800275a:	e03f      	b.n	80027dc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	2b04      	cmp	r3, #4
 8002760:	d008      	beq.n	8002774 <RTC_DateUpdate+0xa4>
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b06      	cmp	r3, #6
 8002766:	d005      	beq.n	8002774 <RTC_DateUpdate+0xa4>
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b09      	cmp	r3, #9
 800276c:	d002      	beq.n	8002774 <RTC_DateUpdate+0xa4>
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b0b      	cmp	r3, #11
 8002772:	d10c      	bne.n	800278e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b1d      	cmp	r3, #29
 8002778:	d803      	bhi.n	8002782 <RTC_DateUpdate+0xb2>
      {
        day++;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3301      	adds	r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002780:	e02c      	b.n	80027dc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	3301      	adds	r3, #1
 8002786:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002788:	2301      	movs	r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800278c:	e026      	b.n	80027dc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d123      	bne.n	80027dc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2b1b      	cmp	r3, #27
 8002798:	d803      	bhi.n	80027a2 <RTC_DateUpdate+0xd2>
      {
        day++;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3301      	adds	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	e01c      	b.n	80027dc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2b1c      	cmp	r3, #28
 80027a6:	d111      	bne.n	80027cc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	b29b      	uxth	r3, r3
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f839 	bl	8002824 <RTC_IsLeapYear>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <RTC_DateUpdate+0xf0>
        {
          day++;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3301      	adds	r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	e00d      	b.n	80027dc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	3301      	adds	r3, #1
 80027c4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80027c6:	2301      	movs	r3, #1
 80027c8:	60fb      	str	r3, [r7, #12]
 80027ca:	e007      	b.n	80027dc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b1d      	cmp	r3, #29
 80027d0:	d104      	bne.n	80027dc <RTC_DateUpdate+0x10c>
      {
        month++;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	3301      	adds	r3, #1
 80027d6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80027d8:	2301      	movs	r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3301      	adds	r3, #1
 80027e0:	60bb      	str	r3, [r7, #8]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d38b      	bcc.n	8002702 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	b2da      	uxtb	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	4619      	mov	r1, r3
 800280c:	6978      	ldr	r0, [r7, #20]
 800280e:	f000 f83b 	bl	8002888 <RTC_WeekDayNum>
 8002812:	4603      	mov	r3, r0
 8002814:	461a      	mov	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	731a      	strb	r2, [r3, #12]
}
 800281a:	bf00      	nop
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	4603      	mov	r3, r0
 800282c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800282e:	88fb      	ldrh	r3, [r7, #6]
 8002830:	f003 0303 	and.w	r3, r3, #3
 8002834:	b29b      	uxth	r3, r3
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	e01d      	b.n	800287a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800283e:	88fb      	ldrh	r3, [r7, #6]
 8002840:	4a10      	ldr	r2, [pc, #64]	; (8002884 <RTC_IsLeapYear+0x60>)
 8002842:	fba2 1203 	umull	r1, r2, r2, r3
 8002846:	0952      	lsrs	r2, r2, #5
 8002848:	2164      	movs	r1, #100	; 0x64
 800284a:	fb01 f202 	mul.w	r2, r1, r2
 800284e:	1a9b      	subs	r3, r3, r2
 8002850:	b29b      	uxth	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002856:	2301      	movs	r3, #1
 8002858:	e00f      	b.n	800287a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	4a09      	ldr	r2, [pc, #36]	; (8002884 <RTC_IsLeapYear+0x60>)
 800285e:	fba2 1203 	umull	r1, r2, r2, r3
 8002862:	09d2      	lsrs	r2, r2, #7
 8002864:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002868:	fb01 f202 	mul.w	r2, r1, r2
 800286c:	1a9b      	subs	r3, r3, r2
 800286e:	b29b      	uxth	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002878:	2300      	movs	r3, #0
  }
}
 800287a:	4618      	mov	r0, r3
 800287c:	370c      	adds	r7, #12
 800287e:	46bd      	mov	sp, r7
 8002880:	bc80      	pop	{r7}
 8002882:	4770      	bx	lr
 8002884:	51eb851f 	.word	0x51eb851f

08002888 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	460b      	mov	r3, r1
 8002892:	70fb      	strb	r3, [r7, #3]
 8002894:	4613      	mov	r3, r2
 8002896:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	60bb      	str	r3, [r7, #8]
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80028a6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80028a8:	78fb      	ldrb	r3, [r7, #3]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d82d      	bhi.n	800290a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80028ae:	78fa      	ldrb	r2, [r7, #3]
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	4a2c      	ldr	r2, [pc, #176]	; (800296c <RTC_WeekDayNum+0xe4>)
 80028bc:	fba2 2303 	umull	r2, r3, r2, r3
 80028c0:	085a      	lsrs	r2, r3, #1
 80028c2:	78bb      	ldrb	r3, [r7, #2]
 80028c4:	441a      	add	r2, r3
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	441a      	add	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	441a      	add	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	4926      	ldr	r1, [pc, #152]	; (8002970 <RTC_WeekDayNum+0xe8>)
 80028d8:	fba1 1303 	umull	r1, r3, r1, r3
 80028dc:	095b      	lsrs	r3, r3, #5
 80028de:	1ad2      	subs	r2, r2, r3
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	4922      	ldr	r1, [pc, #136]	; (8002970 <RTC_WeekDayNum+0xe8>)
 80028e6:	fba1 1303 	umull	r1, r3, r1, r3
 80028ea:	09db      	lsrs	r3, r3, #7
 80028ec:	4413      	add	r3, r2
 80028ee:	1d1a      	adds	r2, r3, #4
 80028f0:	4b20      	ldr	r3, [pc, #128]	; (8002974 <RTC_WeekDayNum+0xec>)
 80028f2:	fba3 1302 	umull	r1, r3, r3, r2
 80028f6:	1ad1      	subs	r1, r2, r3
 80028f8:	0849      	lsrs	r1, r1, #1
 80028fa:	440b      	add	r3, r1
 80028fc:	0899      	lsrs	r1, r3, #2
 80028fe:	460b      	mov	r3, r1
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	1a5b      	subs	r3, r3, r1
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	e029      	b.n	800295e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	4613      	mov	r3, r2
 800290e:	005b      	lsls	r3, r3, #1
 8002910:	4413      	add	r3, r2
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	4a15      	ldr	r2, [pc, #84]	; (800296c <RTC_WeekDayNum+0xe4>)
 8002918:	fba2 2303 	umull	r2, r3, r2, r3
 800291c:	085a      	lsrs	r2, r3, #1
 800291e:	78bb      	ldrb	r3, [r7, #2]
 8002920:	441a      	add	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	441a      	add	r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	089b      	lsrs	r3, r3, #2
 800292a:	441a      	add	r2, r3
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	4910      	ldr	r1, [pc, #64]	; (8002970 <RTC_WeekDayNum+0xe8>)
 8002930:	fba1 1303 	umull	r1, r3, r1, r3
 8002934:	095b      	lsrs	r3, r3, #5
 8002936:	1ad2      	subs	r2, r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	490d      	ldr	r1, [pc, #52]	; (8002970 <RTC_WeekDayNum+0xe8>)
 800293c:	fba1 1303 	umull	r1, r3, r1, r3
 8002940:	09db      	lsrs	r3, r3, #7
 8002942:	4413      	add	r3, r2
 8002944:	1c9a      	adds	r2, r3, #2
 8002946:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <RTC_WeekDayNum+0xec>)
 8002948:	fba3 1302 	umull	r1, r3, r3, r2
 800294c:	1ad1      	subs	r1, r2, r3
 800294e:	0849      	lsrs	r1, r1, #1
 8002950:	440b      	add	r3, r1
 8002952:	0899      	lsrs	r1, r3, #2
 8002954:	460b      	mov	r3, r1
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	1a5b      	subs	r3, r3, r1
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	b2db      	uxtb	r3, r3
}
 8002962:	4618      	mov	r0, r3
 8002964:	3714      	adds	r7, #20
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr
 800296c:	38e38e39 	.word	0x38e38e39
 8002970:	51eb851f 	.word	0x51eb851f
 8002974:	24924925 	.word	0x24924925

08002978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d101      	bne.n	800298a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e041      	b.n	8002a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b00      	cmp	r3, #0
 8002994:	d106      	bne.n	80029a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f839 	bl	8002a16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3304      	adds	r3, #4
 80029b4:	4619      	mov	r1, r3
 80029b6:	4610      	mov	r0, r2
 80029b8:	f000 f9b4 	bl	8002d24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2201      	movs	r2, #1
 80029f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2201      	movs	r2, #1
 80029f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3708      	adds	r7, #8
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}

08002a16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b083      	sub	sp, #12
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a1e:	bf00      	nop
 8002a20:	370c      	adds	r7, #12
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d001      	beq.n	8002a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e03a      	b.n	8002ab6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68da      	ldr	r2, [r3, #12]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a18      	ldr	r2, [pc, #96]	; (8002ac0 <HAL_TIM_Base_Start_IT+0x98>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00e      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x58>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6a:	d009      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x58>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a14      	ldr	r2, [pc, #80]	; (8002ac4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_TIM_Base_Start_IT+0x58>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d111      	bne.n	8002aa4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b06      	cmp	r3, #6
 8002a90:	d010      	beq.n	8002ab4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f042 0201 	orr.w	r2, r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa2:	e007      	b.n	8002ab4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	40012c00 	.word	0x40012c00
 8002ac4:	40000400 	.word	0x40000400
 8002ac8:	40000800 	.word	0x40000800

08002acc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d122      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d11b      	bne.n	8002b28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f06f 0202 	mvn.w	r2, #2
 8002af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f8ed 	bl	8002cee <HAL_TIM_IC_CaptureCallback>
 8002b14:	e005      	b.n	8002b22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 f8e0 	bl	8002cdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f000 f8ef 	bl	8002d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d122      	bne.n	8002b7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b04      	cmp	r3, #4
 8002b42:	d11b      	bne.n	8002b7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f06f 0204 	mvn.w	r2, #4
 8002b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2202      	movs	r2, #2
 8002b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f8c3 	bl	8002cee <HAL_TIM_IC_CaptureCallback>
 8002b68:	e005      	b.n	8002b76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f8b6 	bl	8002cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f8c5 	bl	8002d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0308 	and.w	r3, r3, #8
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d122      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d11b      	bne.n	8002bd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0208 	mvn.w	r2, #8
 8002ba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2204      	movs	r2, #4
 8002ba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d003      	beq.n	8002bbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f000 f899 	bl	8002cee <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e005      	b.n	8002bca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f000 f88c 	bl	8002cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f89b 	bl	8002d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	f003 0310 	and.w	r3, r3, #16
 8002bda:	2b10      	cmp	r3, #16
 8002bdc:	d122      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f003 0310 	and.w	r3, r3, #16
 8002be8:	2b10      	cmp	r3, #16
 8002bea:	d11b      	bne.n	8002c24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f06f 0210 	mvn.w	r2, #16
 8002bf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2208      	movs	r2, #8
 8002bfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 f86f 	bl	8002cee <HAL_TIM_IC_CaptureCallback>
 8002c10:	e005      	b.n	8002c1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f862 	bl	8002cdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c18:	6878      	ldr	r0, [r7, #4]
 8002c1a:	f000 f871 	bl	8002d00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2200      	movs	r2, #0
 8002c22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691b      	ldr	r3, [r3, #16]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d10e      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d107      	bne.n	8002c50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f06f 0201 	mvn.w	r2, #1
 8002c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fd fd6e 	bl	800072c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5a:	2b80      	cmp	r3, #128	; 0x80
 8002c5c:	d10e      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c68:	2b80      	cmp	r3, #128	; 0x80
 8002c6a:	d107      	bne.n	8002c7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 f8bf 	bl	8002dfa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d10e      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c94:	2b40      	cmp	r3, #64	; 0x40
 8002c96:	d107      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f835 	bl	8002d12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b20      	cmp	r3, #32
 8002cb4:	d10e      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0320 	and.w	r3, r3, #32
 8002cc0:	2b20      	cmp	r3, #32
 8002cc2:	d107      	bne.n	8002cd4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0220 	mvn.w	r2, #32
 8002ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f88a 	bl	8002de8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bc80      	pop	{r7}
 8002d10:	4770      	bx	lr

08002d12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d12:	b480      	push	{r7}
 8002d14:	b083      	sub	sp, #12
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a29      	ldr	r2, [pc, #164]	; (8002ddc <TIM_Base_SetConfig+0xb8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00b      	beq.n	8002d54 <TIM_Base_SetConfig+0x30>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d42:	d007      	beq.n	8002d54 <TIM_Base_SetConfig+0x30>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a26      	ldr	r2, [pc, #152]	; (8002de0 <TIM_Base_SetConfig+0xbc>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d003      	beq.n	8002d54 <TIM_Base_SetConfig+0x30>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a25      	ldr	r2, [pc, #148]	; (8002de4 <TIM_Base_SetConfig+0xc0>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d108      	bne.n	8002d66 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <TIM_Base_SetConfig+0xb8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_Base_SetConfig+0x62>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0x62>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <TIM_Base_SetConfig+0xbc>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_Base_SetConfig+0x62>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a18      	ldr	r2, [pc, #96]	; (8002de4 <TIM_Base_SetConfig+0xc0>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a07      	ldr	r2, [pc, #28]	; (8002ddc <TIM_Base_SetConfig+0xb8>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	40012c00 	.word	0x40012c00
 8002de0:	40000400 	.word	0x40000400
 8002de4:	40000800 	.word	0x40000800

08002de8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002df0:	bf00      	nop
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bc80      	pop	{r7}
 8002df8:	4770      	bx	lr

08002dfa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e02:	bf00      	nop
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e042      	b.n	8002ea4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fd fe7e 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fdf1 	bl	8003a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68da      	ldr	r2, [r3, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2220      	movs	r2, #32
 8002e90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3708      	adds	r7, #8
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b08a      	sub	sp, #40	; 0x28
 8002eb0:	af02      	add	r7, sp, #8
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d16d      	bne.n	8002fa8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d002      	beq.n	8002ed8 <HAL_UART_Transmit+0x2c>
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e066      	b.n	8002faa <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2221      	movs	r2, #33	; 0x21
 8002ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eea:	f7fd fec5 	bl	8000c78 <HAL_GetTick>
 8002eee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	88fa      	ldrh	r2, [r7, #6]
 8002ef4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	88fa      	ldrh	r2, [r7, #6]
 8002efa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f04:	d108      	bne.n	8002f18 <HAL_UART_Transmit+0x6c>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d104      	bne.n	8002f18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	e003      	b.n	8002f20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f20:	e02a      	b.n	8002f78 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	2180      	movs	r1, #128	; 0x80
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 fb79 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 8002f32:	4603      	mov	r3, r0
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d001      	beq.n	8002f3c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002f38:	2303      	movs	r3, #3
 8002f3a:	e036      	b.n	8002faa <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10b      	bne.n	8002f5a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	881b      	ldrh	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	3302      	adds	r3, #2
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	e007      	b.n	8002f6a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	781a      	ldrb	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	3301      	adds	r3, #1
 8002f68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1cf      	bne.n	8002f22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2140      	movs	r1, #64	; 0x40
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fb49 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e006      	b.n	8002faa <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	e000      	b.n	8002faa <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002fa8:	2302      	movs	r3, #2
  }
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3720      	adds	r7, #32
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b08a      	sub	sp, #40	; 0x28
 8002fb6:	af02      	add	r7, sp, #8
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b20      	cmp	r3, #32
 8002fd0:	d17c      	bne.n	80030cc <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <HAL_UART_Receive+0x2c>
 8002fd8:	88fb      	ldrh	r3, [r7, #6]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d101      	bne.n	8002fe2 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e075      	b.n	80030ce <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2222      	movs	r2, #34	; 0x22
 8002fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ff6:	f7fd fe3f 	bl	8000c78 <HAL_GetTick>
 8002ffa:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	88fa      	ldrh	r2, [r7, #6]
 8003000:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	88fa      	ldrh	r2, [r7, #6]
 8003006:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003010:	d108      	bne.n	8003024 <HAL_UART_Receive+0x72>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d104      	bne.n	8003024 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800301a:	2300      	movs	r3, #0
 800301c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	61bb      	str	r3, [r7, #24]
 8003022:	e003      	b.n	800302c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800302c:	e043      	b.n	80030b6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2200      	movs	r2, #0
 8003036:	2120      	movs	r1, #32
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f000 faf3 	bl	8003624 <UART_WaitOnFlagUntilTimeout>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e042      	b.n	80030ce <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	b29b      	uxth	r3, r3
 8003056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305a:	b29a      	uxth	r2, r3
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	3302      	adds	r3, #2
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	e01f      	b.n	80030a8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003070:	d007      	beq.n	8003082 <HAL_UART_Receive+0xd0>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10a      	bne.n	8003090 <HAL_UART_Receive+0xde>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	b2da      	uxtb	r2, r3
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	701a      	strb	r2, [r3, #0]
 800308e:	e008      	b.n	80030a2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800309c:	b2da      	uxtb	r2, r3
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3301      	adds	r3, #1
 80030a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	3b01      	subs	r3, #1
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d1b6      	bne.n	800302e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80030c8:	2300      	movs	r3, #0
 80030ca:	e000      	b.n	80030ce <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80030cc:	2302      	movs	r3, #2
  }
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3720      	adds	r7, #32
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b0ba      	sub	sp, #232	; 0xe8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800310a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003116:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10f      	bne.n	800313e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800311e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	2b00      	cmp	r3, #0
 8003128:	d009      	beq.n	800313e <HAL_UART_IRQHandler+0x66>
 800312a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f000 fbbf 	bl	80038ba <UART_Receive_IT>
      return;
 800313c:	e25b      	b.n	80035f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800313e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80de 	beq.w	8003304 <HAL_UART_IRQHandler+0x22c>
 8003148:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d106      	bne.n	8003162 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003158:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80d1 	beq.w	8003304 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_UART_IRQHandler+0xae>
 800316e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003176:	2b00      	cmp	r3, #0
 8003178:	d005      	beq.n	8003186 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00b      	beq.n	80031aa <HAL_UART_IRQHandler+0xd2>
 8003192:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f043 0202 	orr.w	r2, r3, #2
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00b      	beq.n	80031ce <HAL_UART_IRQHandler+0xf6>
 80031b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d005      	beq.n	80031ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	f043 0204 	orr.w	r2, r3, #4
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80031ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d011      	beq.n	80031fe <HAL_UART_IRQHandler+0x126>
 80031da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031de:	f003 0320 	and.w	r3, r3, #32
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d105      	bne.n	80031f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80031e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d005      	beq.n	80031fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f6:	f043 0208 	orr.w	r2, r3, #8
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003202:	2b00      	cmp	r3, #0
 8003204:	f000 81f2 	beq.w	80035ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <HAL_UART_IRQHandler+0x14e>
 8003214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f000 fb4a 	bl	80038ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d103      	bne.n	8003252 <HAL_UART_IRQHandler+0x17a>
 800324a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800324e:	2b00      	cmp	r3, #0
 8003250:	d04f      	beq.n	80032f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fa54 	bl	8003700 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003262:	2b00      	cmp	r3, #0
 8003264:	d041      	beq.n	80032ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3314      	adds	r3, #20
 800326c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003270:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003274:	e853 3f00 	ldrex	r3, [r3]
 8003278:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800327c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003284:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3314      	adds	r3, #20
 800328e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003292:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003296:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800329e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1d9      	bne.n	8003266 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d013      	beq.n	80032e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032be:	4a7e      	ldr	r2, [pc, #504]	; (80034b8 <HAL_UART_IRQHandler+0x3e0>)
 80032c0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd fdfa 	bl	8000ec0 <HAL_DMA_Abort_IT>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80032dc:	4610      	mov	r0, r2
 80032de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e00e      	b.n	8003300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f98a 	bl	80035fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	e00a      	b.n	8003300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f986 	bl	80035fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f0:	e006      	b.n	8003300 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f982 	bl	80035fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80032fe:	e175      	b.n	80035ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	bf00      	nop
    return;
 8003302:	e173      	b.n	80035ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003308:	2b01      	cmp	r3, #1
 800330a:	f040 814f 	bne.w	80035ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800330e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 8148 	beq.w	80035ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	f000 8141 	beq.w	80035ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800332a:	2300      	movs	r3, #0
 800332c:	60bb      	str	r3, [r7, #8]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	60bb      	str	r3, [r7, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	60bb      	str	r3, [r7, #8]
 800333e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 80b6 	beq.w	80034bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800335c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 8145 	beq.w	80035f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800336a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800336e:	429a      	cmp	r2, r3
 8003370:	f080 813e 	bcs.w	80035f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800337a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b20      	cmp	r3, #32
 8003384:	f000 8088 	beq.w	8003498 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	330c      	adds	r3, #12
 800338e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003392:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003396:	e853 3f00 	ldrex	r3, [r3]
 800339a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800339e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80033b4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80033c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1d9      	bne.n	8003388 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3314      	adds	r3, #20
 80033da:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033de:	e853 3f00 	ldrex	r3, [r3]
 80033e2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3314      	adds	r3, #20
 80033f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033f8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033fc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003400:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800340a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e1      	bne.n	80033d4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3314      	adds	r3, #20
 8003416:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003422:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003426:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3314      	adds	r3, #20
 8003430:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003434:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003436:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800343a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e3      	bne.n	8003410 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	330c      	adds	r3, #12
 800345c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003460:	e853 3f00 	ldrex	r3, [r3]
 8003464:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003466:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003468:	f023 0310 	bic.w	r3, r3, #16
 800346c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	330c      	adds	r3, #12
 8003476:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800347a:	65ba      	str	r2, [r7, #88]	; 0x58
 800347c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800347e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003480:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003482:	e841 2300 	strex	r3, r2, [r1]
 8003486:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003488:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e3      	bne.n	8003456 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd fcd9 	bl	8000e4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2202      	movs	r2, #2
 800349c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	4619      	mov	r1, r3
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f8ad 	bl	800360e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034b4:	e09c      	b.n	80035f0 <HAL_UART_IRQHandler+0x518>
 80034b6:	bf00      	nop
 80034b8:	080037c5 	.word	0x080037c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 808e 	beq.w	80035f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80034d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8089 	beq.w	80035f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	330c      	adds	r3, #12
 80034e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ec:	e853 3f00 	ldrex	r3, [r3]
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	330c      	adds	r3, #12
 8003502:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003506:	647a      	str	r2, [r7, #68]	; 0x44
 8003508:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800350c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e3      	bne.n	80034e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3314      	adds	r3, #20
 8003520:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	623b      	str	r3, [r7, #32]
   return(result);
 800352a:	6a3b      	ldr	r3, [r7, #32]
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3314      	adds	r3, #20
 800353a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800353e:	633a      	str	r2, [r7, #48]	; 0x30
 8003540:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003542:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003546:	e841 2300 	strex	r3, r2, [r1]
 800354a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800354c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800354e:	2b00      	cmp	r3, #0
 8003550:	d1e3      	bne.n	800351a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2220      	movs	r2, #32
 8003556:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	330c      	adds	r3, #12
 8003566:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0310 	bic.w	r3, r3, #16
 8003576:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	330c      	adds	r3, #12
 8003580:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003584:	61fa      	str	r2, [r7, #28]
 8003586:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	69b9      	ldr	r1, [r7, #24]
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	617b      	str	r3, [r7, #20]
   return(result);
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e3      	bne.n	8003560 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800359e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035a2:	4619      	mov	r1, r3
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	f000 f832 	bl	800360e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035aa:	e023      	b.n	80035f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d009      	beq.n	80035cc <HAL_UART_IRQHandler+0x4f4>
 80035b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f911 	bl	80037ec <UART_Transmit_IT>
    return;
 80035ca:	e014      	b.n	80035f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00e      	beq.n	80035f6 <HAL_UART_IRQHandler+0x51e>
 80035d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f000 f950 	bl	800388a <UART_EndTransmit_IT>
    return;
 80035ea:	e004      	b.n	80035f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80035ec:	bf00      	nop
 80035ee:	e002      	b.n	80035f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80035f0:	bf00      	nop
 80035f2:	e000      	b.n	80035f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80035f4:	bf00      	nop
  }
}
 80035f6:	37e8      	adds	r7, #232	; 0xe8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr

0800360e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	460b      	mov	r3, r1
 8003618:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	bc80      	pop	{r7}
 8003622:	4770      	bx	lr

08003624 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b090      	sub	sp, #64	; 0x40
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	603b      	str	r3, [r7, #0]
 8003630:	4613      	mov	r3, r2
 8003632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003634:	e050      	b.n	80036d8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003636:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800363c:	d04c      	beq.n	80036d8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800363e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003640:	2b00      	cmp	r3, #0
 8003642:	d007      	beq.n	8003654 <UART_WaitOnFlagUntilTimeout+0x30>
 8003644:	f7fd fb18 	bl	8000c78 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003650:	429a      	cmp	r2, r3
 8003652:	d241      	bcs.n	80036d8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	330c      	adds	r3, #12
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	330c      	adds	r3, #12
 8003672:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003674:	637a      	str	r2, [r7, #52]	; 0x34
 8003676:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003678:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800367a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800367c:	e841 2300 	strex	r3, r2, [r1]
 8003680:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1e5      	bne.n	8003654 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3314      	adds	r3, #20
 800368e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	e853 3f00 	ldrex	r3, [r3]
 8003696:	613b      	str	r3, [r7, #16]
   return(result);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f023 0301 	bic.w	r3, r3, #1
 800369e:	63bb      	str	r3, [r7, #56]	; 0x38
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3314      	adds	r3, #20
 80036a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036a8:	623a      	str	r2, [r7, #32]
 80036aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ac:	69f9      	ldr	r1, [r7, #28]
 80036ae:	6a3a      	ldr	r2, [r7, #32]
 80036b0:	e841 2300 	strex	r3, r2, [r1]
 80036b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e5      	bne.n	8003688 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e00f      	b.n	80036f8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4013      	ands	r3, r2
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	bf0c      	ite	eq
 80036e8:	2301      	moveq	r3, #1
 80036ea:	2300      	movne	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	79fb      	ldrb	r3, [r7, #7]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d09f      	beq.n	8003636 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3740      	adds	r7, #64	; 0x40
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b095      	sub	sp, #84	; 0x54
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	330c      	adds	r3, #12
 800370e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003712:	e853 3f00 	ldrex	r3, [r3]
 8003716:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800371e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	330c      	adds	r3, #12
 8003726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003728:	643a      	str	r2, [r7, #64]	; 0x40
 800372a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800372e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003730:	e841 2300 	strex	r3, r2, [r1]
 8003734:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e5      	bne.n	8003708 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3314      	adds	r3, #20
 8003742:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	e853 3f00 	ldrex	r3, [r3]
 800374a:	61fb      	str	r3, [r7, #28]
   return(result);
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f023 0301 	bic.w	r3, r3, #1
 8003752:	64bb      	str	r3, [r7, #72]	; 0x48
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3314      	adds	r3, #20
 800375a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800375c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800375e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003760:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003764:	e841 2300 	strex	r3, r2, [r1]
 8003768:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1e5      	bne.n	800373c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003774:	2b01      	cmp	r3, #1
 8003776:	d119      	bne.n	80037ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	330c      	adds	r3, #12
 800377e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	e853 3f00 	ldrex	r3, [r3]
 8003786:	60bb      	str	r3, [r7, #8]
   return(result);
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f023 0310 	bic.w	r3, r3, #16
 800378e:	647b      	str	r3, [r7, #68]	; 0x44
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003798:	61ba      	str	r2, [r7, #24]
 800379a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379c:	6979      	ldr	r1, [r7, #20]
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	e841 2300 	strex	r3, r2, [r1]
 80037a4:	613b      	str	r3, [r7, #16]
   return(result);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e5      	bne.n	8003778 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80037ba:	bf00      	nop
 80037bc:	3754      	adds	r7, #84	; 0x54
 80037be:	46bd      	mov	sp, r7
 80037c0:	bc80      	pop	{r7}
 80037c2:	4770      	bx	lr

080037c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f7ff ff0c 	bl	80035fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	2b21      	cmp	r3, #33	; 0x21
 80037fe:	d13e      	bne.n	800387e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003808:	d114      	bne.n	8003834 <UART_Transmit_IT+0x48>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d110      	bne.n	8003834 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	461a      	mov	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003826:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	1c9a      	adds	r2, r3, #2
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	621a      	str	r2, [r3, #32]
 8003832:	e008      	b.n	8003846 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6a1b      	ldr	r3, [r3, #32]
 8003838:	1c59      	adds	r1, r3, #1
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6211      	str	r1, [r2, #32]
 800383e:	781a      	ldrb	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b01      	subs	r3, #1
 800384e:	b29b      	uxth	r3, r3
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	4619      	mov	r1, r3
 8003854:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10f      	bne.n	800387a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68da      	ldr	r2, [r3, #12]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003868:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003878:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b082      	sub	sp, #8
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68da      	ldr	r2, [r3, #12]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2220      	movs	r2, #32
 80038a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fc ff29 	bl	8000702 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b08c      	sub	sp, #48	; 0x30
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b22      	cmp	r3, #34	; 0x22
 80038cc:	f040 80ae 	bne.w	8003a2c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d8:	d117      	bne.n	800390a <UART_Receive_IT+0x50>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d113      	bne.n	800390a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003902:	1c9a      	adds	r2, r3, #2
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	629a      	str	r2, [r3, #40]	; 0x28
 8003908:	e026      	b.n	8003958 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800390e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003910:	2300      	movs	r3, #0
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800391c:	d007      	beq.n	800392e <UART_Receive_IT+0x74>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10a      	bne.n	800393c <UART_Receive_IT+0x82>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d106      	bne.n	800393c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	b2da      	uxtb	r2, r3
 8003936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003938:	701a      	strb	r2, [r3, #0]
 800393a:	e008      	b.n	800394e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	b2db      	uxtb	r3, r3
 8003944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003948:	b2da      	uxtb	r2, r3
 800394a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29b      	uxth	r3, r3
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	4619      	mov	r1, r3
 8003966:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003968:	2b00      	cmp	r3, #0
 800396a:	d15d      	bne.n	8003a28 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68da      	ldr	r2, [r3, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0220 	bic.w	r2, r2, #32
 800397a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800398a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695a      	ldr	r2, [r3, #20]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0201 	bic.w	r2, r2, #1
 800399a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2220      	movs	r2, #32
 80039a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d135      	bne.n	8003a1e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	330c      	adds	r3, #12
 80039be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	e853 3f00 	ldrex	r3, [r3]
 80039c6:	613b      	str	r3, [r7, #16]
   return(result);
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f023 0310 	bic.w	r3, r3, #16
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	330c      	adds	r3, #12
 80039d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039d8:	623a      	str	r2, [r7, #32]
 80039da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039dc:	69f9      	ldr	r1, [r7, #28]
 80039de:	6a3a      	ldr	r2, [r7, #32]
 80039e0:	e841 2300 	strex	r3, r2, [r1]
 80039e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1e5      	bne.n	80039b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0310 	and.w	r3, r3, #16
 80039f6:	2b10      	cmp	r3, #16
 80039f8:	d10a      	bne.n	8003a10 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80039fa:	2300      	movs	r3, #0
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	60fb      	str	r3, [r7, #12]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003a14:	4619      	mov	r1, r3
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fdf9 	bl	800360e <HAL_UARTEx_RxEventCallback>
 8003a1c:	e002      	b.n	8003a24 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f7fc fe79 	bl	8000716 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e002      	b.n	8003a2e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e000      	b.n	8003a2e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3730      	adds	r7, #48	; 0x30
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	431a      	orrs	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	695b      	ldr	r3, [r3, #20]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a72:	f023 030c 	bic.w	r3, r3, #12
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	68b9      	ldr	r1, [r7, #8]
 8003a7c:	430b      	orrs	r3, r1
 8003a7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699a      	ldr	r2, [r3, #24]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a2c      	ldr	r2, [pc, #176]	; (8003b4c <UART_SetConfig+0x114>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d103      	bne.n	8003aa8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003aa0:	f7fd fff4 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8003aa4:	60f8      	str	r0, [r7, #12]
 8003aa6:	e002      	b.n	8003aae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aa8:	f7fd ffdc 	bl	8001a64 <HAL_RCC_GetPCLK1Freq>
 8003aac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aae:	68fa      	ldr	r2, [r7, #12]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	009a      	lsls	r2, r3, #2
 8003ab8:	441a      	add	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	4a22      	ldr	r2, [pc, #136]	; (8003b50 <UART_SetConfig+0x118>)
 8003ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aca:	095b      	lsrs	r3, r3, #5
 8003acc:	0119      	lsls	r1, r3, #4
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	009a      	lsls	r2, r3, #2
 8003ad8:	441a      	add	r2, r3
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ae4:	4b1a      	ldr	r3, [pc, #104]	; (8003b50 <UART_SetConfig+0x118>)
 8003ae6:	fba3 0302 	umull	r0, r3, r3, r2
 8003aea:	095b      	lsrs	r3, r3, #5
 8003aec:	2064      	movs	r0, #100	; 0x64
 8003aee:	fb00 f303 	mul.w	r3, r0, r3
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	3332      	adds	r3, #50	; 0x32
 8003af8:	4a15      	ldr	r2, [pc, #84]	; (8003b50 <UART_SetConfig+0x118>)
 8003afa:	fba2 2303 	umull	r2, r3, r2, r3
 8003afe:	095b      	lsrs	r3, r3, #5
 8003b00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b04:	4419      	add	r1, r3
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	009a      	lsls	r2, r3, #2
 8003b10:	441a      	add	r2, r3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b1c:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <UART_SetConfig+0x118>)
 8003b1e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	2064      	movs	r0, #100	; 0x64
 8003b26:	fb00 f303 	mul.w	r3, r0, r3
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	3332      	adds	r3, #50	; 0x32
 8003b30:	4a07      	ldr	r2, [pc, #28]	; (8003b50 <UART_SetConfig+0x118>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	f003 020f 	and.w	r2, r3, #15
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	440a      	add	r2, r1
 8003b42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003b44:	bf00      	nop
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40013800 	.word	0x40013800
 8003b50:	51eb851f 	.word	0x51eb851f

08003b54 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f103 0208 	add.w	r2, r3, #8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f04f 32ff 	mov.w	r2, #4294967295
 8003b6c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f103 0208 	add.w	r2, r3, #8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f103 0208 	add.w	r2, r3, #8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bc80      	pop	{r7}
 8003b90:	4770      	bx	lr

08003b92 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr

08003baa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003baa:	b480      	push	{r7}
 8003bac:	b085      	sub	sp, #20
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	683a      	ldr	r2, [r7, #0]
 8003bce:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]
}
 8003be6:	bf00      	nop
 8003be8:	3714      	adds	r7, #20
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d103      	bne.n	8003c10 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	60fb      	str	r3, [r7, #12]
 8003c0e:	e00c      	b.n	8003c2a <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3308      	adds	r3, #8
 8003c14:	60fb      	str	r3, [r7, #12]
 8003c16:	e002      	b.n	8003c1e <vListInsert+0x2e>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d2f6      	bcs.n	8003c18 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	601a      	str	r2, [r3, #0]
}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	6892      	ldr	r2, [r2, #8]
 8003c76:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6852      	ldr	r2, [r2, #4]
 8003c80:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d103      	bne.n	8003c94 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	1e5a      	subs	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3714      	adds	r7, #20
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bc80      	pop	{r7}
 8003cb0:	4770      	bx	lr

08003cb2 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b086      	sub	sp, #24
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	6078      	str	r0, [r7, #4]
 8003cba:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10a      	bne.n	8003ce0 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cce:	f383 8811 	msr	BASEPRI, r3
 8003cd2:	f3bf 8f6f 	isb	sy
 8003cd6:	f3bf 8f4f 	dsb	sy
 8003cda:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003cdc:	bf00      	nop
 8003cde:	e7fe      	b.n	8003cde <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d052      	beq.n	8003d8c <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d04e      	beq.n	8003d8c <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	fba3 2302 	umull	r2, r3, r3, r2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d000      	beq.n	8003d02 <xQueueGenericReset+0x50>
 8003d00:	2101      	movs	r1, #1
 8003d02:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d141      	bne.n	8003d8c <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8003d08:	f001 fdda 	bl	80058c0 <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	6939      	ldr	r1, [r7, #16]
 8003d16:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d18:	fb01 f303 	mul.w	r3, r1, r3
 8003d1c:	441a      	add	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2200      	movs	r2, #0
 8003d26:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	6939      	ldr	r1, [r7, #16]
 8003d3c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	441a      	add	r2, r3
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	22ff      	movs	r2, #255	; 0xff
 8003d4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	22ff      	movs	r2, #255	; 0xff
 8003d54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d109      	bne.n	8003d72 <xQueueGenericReset+0xc0>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00f      	beq.n	8003d86 <xQueueGenericReset+0xd4>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	3310      	adds	r3, #16
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 f970 	bl	8005050 <xTaskRemoveFromEventList>
 8003d70:	e009      	b.n	8003d86 <xQueueGenericReset+0xd4>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	3310      	adds	r3, #16
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff feec 	bl	8003b54 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	3324      	adds	r3, #36	; 0x24
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff fee7 	bl	8003b54 <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8003d86:	f001 fdcb 	bl	8005920 <vPortExitCritical>
 8003d8a:	e001      	b.n	8003d90 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10a      	bne.n	8003dac <xQueueGenericReset+0xfa>
        __asm volatile
 8003d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9a:	f383 8811 	msr	BASEPRI, r3
 8003d9e:	f3bf 8f6f 	isb	sy
 8003da2:	f3bf 8f4f 	dsb	sy
 8003da6:	60bb      	str	r3, [r7, #8]
    }
 8003da8:	bf00      	nop
 8003daa:	e7fe      	b.n	8003daa <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003dac:	697b      	ldr	r3, [r7, #20]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b08a      	sub	sp, #40	; 0x28
 8003dba:	af02      	add	r7, sp, #8
 8003dbc:	60f8      	str	r0, [r7, #12]
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d02e      	beq.n	8003e2c <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003dce:	2100      	movs	r1, #0
 8003dd0:	68ba      	ldr	r2, [r7, #8]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	fba3 2302 	umull	r2, r3, r3, r2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d000      	beq.n	8003dde <xQueueGenericCreate+0x28>
 8003ddc:	2101      	movs	r1, #1
 8003dde:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d123      	bne.n	8003e2c <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003dec:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003df0:	d81c      	bhi.n	8003e2c <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	68ba      	ldr	r2, [r7, #8]
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	3350      	adds	r3, #80	; 0x50
 8003e00:	4618      	mov	r0, r3
 8003e02:	f001 fe63 	bl	8005acc <pvPortMalloc>
 8003e06:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d01c      	beq.n	8003e48 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	3350      	adds	r3, #80	; 0x50
 8003e16:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e18:	79fa      	ldrb	r2, [r7, #7]
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 f814 	bl	8003e52 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003e2a:	e00d      	b.n	8003e48 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10a      	bne.n	8003e48 <xQueueGenericCreate+0x92>
        __asm volatile
 8003e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e36:	f383 8811 	msr	BASEPRI, r3
 8003e3a:	f3bf 8f6f 	isb	sy
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	613b      	str	r3, [r7, #16]
    }
 8003e44:	bf00      	nop
 8003e46:	e7fe      	b.n	8003e46 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003e48:	69fb      	ldr	r3, [r7, #28]
    }
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3720      	adds	r7, #32
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}

08003e52 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003e52:	b580      	push	{r7, lr}
 8003e54:	b084      	sub	sp, #16
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	60f8      	str	r0, [r7, #12]
 8003e5a:	60b9      	str	r1, [r7, #8]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	e002      	b.n	8003e74 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003e74:	69bb      	ldr	r3, [r7, #24]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e80:	2101      	movs	r1, #1
 8003e82:	69b8      	ldr	r0, [r7, #24]
 8003e84:	f7ff ff15 	bl	8003cb2 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003e88:	69bb      	ldr	r3, [r7, #24]
 8003e8a:	78fa      	ldrb	r2, [r7, #3]
 8003e8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8003e90:	78fb      	ldrb	r3, [r7, #3]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	68f9      	ldr	r1, [r7, #12]
 8003e96:	2073      	movs	r0, #115	; 0x73
 8003e98:	f002 fed0 	bl	8006c3c <SEGGER_SYSVIEW_RecordU32x3>
}
 8003e9c:	bf00      	nop
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08e      	sub	sp, #56	; 0x38
 8003ea8:	af02      	add	r7, sp, #8
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
 8003eb0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10a      	bne.n	8003ed6 <xQueueGenericSend+0x32>
        __asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	623b      	str	r3, [r7, #32]
    }
 8003ed2:	bf00      	nop
 8003ed4:	e7fe      	b.n	8003ed4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d103      	bne.n	8003ee4 <xQueueGenericSend+0x40>
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d101      	bne.n	8003ee8 <xQueueGenericSend+0x44>
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e000      	b.n	8003eea <xQueueGenericSend+0x46>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <xQueueGenericSend+0x60>
        __asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	61fb      	str	r3, [r7, #28]
    }
 8003f00:	bf00      	nop
 8003f02:	e7fe      	b.n	8003f02 <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d103      	bne.n	8003f12 <xQueueGenericSend+0x6e>
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d101      	bne.n	8003f16 <xQueueGenericSend+0x72>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e000      	b.n	8003f18 <xQueueGenericSend+0x74>
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <xQueueGenericSend+0x8e>
        __asm volatile
 8003f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f20:	f383 8811 	msr	BASEPRI, r3
 8003f24:	f3bf 8f6f 	isb	sy
 8003f28:	f3bf 8f4f 	dsb	sy
 8003f2c:	61bb      	str	r3, [r7, #24]
    }
 8003f2e:	bf00      	nop
 8003f30:	e7fe      	b.n	8003f30 <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003f32:	f001 fcc5 	bl	80058c0 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d302      	bcc.n	8003f48 <xQueueGenericSend+0xa4>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d11f      	bne.n	8003f88 <xQueueGenericSend+0xe4>
            {
                traceQUEUE_SEND( pxQueue );
 8003f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f003 fc02 	bl	8007754 <SEGGER_SYSVIEW_ShrinkId>
 8003f50:	68ba      	ldr	r2, [r7, #8]
 8003f52:	6879      	ldr	r1, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4601      	mov	r1, r0
 8003f5c:	205a      	movs	r0, #90	; 0x5a
 8003f5e:	f002 fee3 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	68b9      	ldr	r1, [r7, #8]
 8003f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f68:	f000 f980 	bl	800426c <prvCopyDataToQueue>
 8003f6c:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d004      	beq.n	8003f80 <xQueueGenericSend+0xdc>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f78:	3324      	adds	r3, #36	; 0x24
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f001 f868 	bl	8005050 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003f80:	f001 fcce 	bl	8005920 <vPortExitCritical>
                return pdPASS;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e07d      	b.n	8004084 <xQueueGenericSend+0x1e0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d110      	bne.n	8003fb0 <xQueueGenericSend+0x10c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003f8e:	f001 fcc7 	bl	8005920 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8003f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f94:	4618      	mov	r0, r3
 8003f96:	f003 fbdd 	bl	8007754 <SEGGER_SYSVIEW_ShrinkId>
 8003f9a:	68ba      	ldr	r2, [r7, #8]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	9300      	str	r3, [sp, #0]
 8003fa2:	460b      	mov	r3, r1
 8003fa4:	4601      	mov	r1, r0
 8003fa6:	205a      	movs	r0, #90	; 0x5a
 8003fa8:	f002 febe 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e069      	b.n	8004084 <xQueueGenericSend+0x1e0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <xQueueGenericSend+0x120>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003fb6:	f107 0310 	add.w	r3, r7, #16
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f001 f920 	bl	8005200 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003fc4:	f001 fcac 	bl	8005920 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003fc8:	f000 fdaa 	bl	8004b20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003fcc:	f001 fc78 	bl	80058c0 <vPortEnterCritical>
 8003fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fd6:	b25b      	sxtb	r3, r3
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d103      	bne.n	8003fe6 <xQueueGenericSend+0x142>
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fec:	b25b      	sxtb	r3, r3
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d103      	bne.n	8003ffc <xQueueGenericSend+0x158>
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ffc:	f001 fc90 	bl	8005920 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004000:	1d3a      	adds	r2, r7, #4
 8004002:	f107 0310 	add.w	r3, r7, #16
 8004006:	4611      	mov	r1, r2
 8004008:	4618      	mov	r0, r3
 800400a:	f001 f90f 	bl	800522c <xTaskCheckForTimeOut>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d124      	bne.n	800405e <xQueueGenericSend+0x1ba>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004016:	f000 fa21 	bl	800445c <prvIsQueueFull>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d018      	beq.n	8004052 <xQueueGenericSend+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004022:	3310      	adds	r3, #16
 8004024:	687a      	ldr	r2, [r7, #4]
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f000 ffed 	bl	8005008 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800402e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004030:	f000 f9ac 	bl	800438c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004034:	f000 fd82 	bl	8004b3c <xTaskResumeAll>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	f47f af79 	bne.w	8003f32 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8004040:	4b12      	ldr	r3, [pc, #72]	; (800408c <xQueueGenericSend+0x1e8>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	e76f      	b.n	8003f32 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004054:	f000 f99a 	bl	800438c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004058:	f000 fd70 	bl	8004b3c <xTaskResumeAll>
 800405c:	e769      	b.n	8003f32 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800405e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004060:	f000 f994 	bl	800438c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004064:	f000 fd6a 	bl	8004b3c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8004068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406a:	4618      	mov	r0, r3
 800406c:	f003 fb72 	bl	8007754 <SEGGER_SYSVIEW_ShrinkId>
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	460b      	mov	r3, r1
 800407a:	4601      	mov	r1, r0
 800407c:	205a      	movs	r0, #90	; 0x5a
 800407e:	f002 fe53 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8004082:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004084:	4618      	mov	r0, r3
 8004086:	3730      	adds	r7, #48	; 0x30
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004090:	b590      	push	{r4, r7, lr}
 8004092:	b08f      	sub	sp, #60	; 0x3c
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800409c:	2300      	movs	r3, #0
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80040a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10a      	bne.n	80040c0 <xQueueReceive+0x30>
        __asm volatile
 80040aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ae:	f383 8811 	msr	BASEPRI, r3
 80040b2:	f3bf 8f6f 	isb	sy
 80040b6:	f3bf 8f4f 	dsb	sy
 80040ba:	623b      	str	r3, [r7, #32]
    }
 80040bc:	bf00      	nop
 80040be:	e7fe      	b.n	80040be <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d103      	bne.n	80040ce <xQueueReceive+0x3e>
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d101      	bne.n	80040d2 <xQueueReceive+0x42>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <xQueueReceive+0x44>
 80040d2:	2300      	movs	r3, #0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xQueueReceive+0x5e>
        __asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	61fb      	str	r3, [r7, #28]
    }
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80040ee:	f001 fbe7 	bl	80058c0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d024      	beq.n	8004148 <xQueueReceive+0xb8>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040fe:	68b9      	ldr	r1, [r7, #8]
 8004100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004102:	f000 f91d 	bl	8004340 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	4618      	mov	r0, r3
 800410a:	f003 fb23 	bl	8007754 <SEGGER_SYSVIEW_ShrinkId>
 800410e:	4604      	mov	r4, r0
 8004110:	2000      	movs	r0, #0
 8004112:	f003 fb1f 	bl	8007754 <SEGGER_SYSVIEW_ShrinkId>
 8004116:	4602      	mov	r2, r0
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2101      	movs	r1, #1
 800411c:	9100      	str	r1, [sp, #0]
 800411e:	4621      	mov	r1, r4
 8004120:	205c      	movs	r0, #92	; 0x5c
 8004122:	f002 fe01 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	1e5a      	subs	r2, r3, #1
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800412e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d004      	beq.n	8004140 <xQueueReceive+0xb0>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004138:	3310      	adds	r3, #16
 800413a:	4618      	mov	r0, r3
 800413c:	f000 ff88 	bl	8005050 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004140:	f001 fbee 	bl	8005920 <vPortExitCritical>
                return pdPASS;
 8004144:	2301      	movs	r3, #1
 8004146:	e08a      	b.n	800425e <xQueueReceive+0x1ce>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d113      	bne.n	8004176 <xQueueReceive+0xe6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800414e:	f001 fbe7 	bl	8005920 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8004152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004154:	4618      	mov	r0, r3
 8004156:	f003 fafd 	bl	8007754 <SEGGER_SYSVIEW_ShrinkId>
 800415a:	4604      	mov	r4, r0
 800415c:	2000      	movs	r0, #0
 800415e:	f003 faf9 	bl	8007754 <SEGGER_SYSVIEW_ShrinkId>
 8004162:	4602      	mov	r2, r0
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2101      	movs	r1, #1
 8004168:	9100      	str	r1, [sp, #0]
 800416a:	4621      	mov	r1, r4
 800416c:	205c      	movs	r0, #92	; 0x5c
 800416e:	f002 fddb 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8004172:	2300      	movs	r3, #0
 8004174:	e073      	b.n	800425e <xQueueReceive+0x1ce>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <xQueueReceive+0xfa>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800417c:	f107 0314 	add.w	r3, r7, #20
 8004180:	4618      	mov	r0, r3
 8004182:	f001 f83d 	bl	8005200 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004186:	2301      	movs	r3, #1
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800418a:	f001 fbc9 	bl	8005920 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800418e:	f000 fcc7 	bl	8004b20 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004192:	f001 fb95 	bl	80058c0 <vPortEnterCritical>
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800419c:	b25b      	sxtb	r3, r3
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d103      	bne.n	80041ac <xQueueReceive+0x11c>
 80041a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041b2:	b25b      	sxtb	r3, r3
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d103      	bne.n	80041c2 <xQueueReceive+0x132>
 80041ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041c2:	f001 fbad 	bl	8005920 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041c6:	1d3a      	adds	r2, r7, #4
 80041c8:	f107 0314 	add.w	r3, r7, #20
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f001 f82c 	bl	800522c <xTaskCheckForTimeOut>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d124      	bne.n	8004224 <xQueueReceive+0x194>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041dc:	f000 f928 	bl	8004430 <prvIsQueueEmpty>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d018      	beq.n	8004218 <xQueueReceive+0x188>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e8:	3324      	adds	r3, #36	; 0x24
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 ff0a 	bl	8005008 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80041f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041f6:	f000 f8c9 	bl	800438c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80041fa:	f000 fc9f 	bl	8004b3c <xTaskResumeAll>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	f47f af74 	bne.w	80040ee <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8004206:	4b18      	ldr	r3, [pc, #96]	; (8004268 <xQueueReceive+0x1d8>)
 8004208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800420c:	601a      	str	r2, [r3, #0]
 800420e:	f3bf 8f4f 	dsb	sy
 8004212:	f3bf 8f6f 	isb	sy
 8004216:	e76a      	b.n	80040ee <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004218:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800421a:	f000 f8b7 	bl	800438c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800421e:	f000 fc8d 	bl	8004b3c <xTaskResumeAll>
 8004222:	e764      	b.n	80040ee <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004226:	f000 f8b1 	bl	800438c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800422a:	f000 fc87 	bl	8004b3c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800422e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004230:	f000 f8fe 	bl	8004430 <prvIsQueueEmpty>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	f43f af59 	beq.w	80040ee <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800423c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423e:	4618      	mov	r0, r3
 8004240:	f003 fa88 	bl	8007754 <SEGGER_SYSVIEW_ShrinkId>
 8004244:	4604      	mov	r4, r0
 8004246:	2000      	movs	r0, #0
 8004248:	f003 fa84 	bl	8007754 <SEGGER_SYSVIEW_ShrinkId>
 800424c:	4602      	mov	r2, r0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2101      	movs	r1, #1
 8004252:	9100      	str	r1, [sp, #0]
 8004254:	4621      	mov	r1, r4
 8004256:	205c      	movs	r0, #92	; 0x5c
 8004258:	f002 fd66 	bl	8006d28 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800425c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800425e:	4618      	mov	r0, r3
 8004260:	3734      	adds	r7, #52	; 0x34
 8004262:	46bd      	mov	sp, r7
 8004264:	bd90      	pop	{r4, r7, pc}
 8004266:	bf00      	nop
 8004268:	e000ed04 	.word	0xe000ed04

0800426c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10d      	bne.n	80042a6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d14d      	bne.n	800432e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	4618      	mov	r0, r3
 8004298:	f001 f8e4 	bl	8005464 <xTaskPriorityDisinherit>
 800429c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	e043      	b.n	800432e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d119      	bne.n	80042e0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6858      	ldr	r0, [r3, #4]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b4:	461a      	mov	r2, r3
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	f003 ff64 	bl	8008184 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	441a      	add	r2, r3
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d32b      	bcc.n	800432e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]
 80042de:	e026      	b.n	800432e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	68d8      	ldr	r0, [r3, #12]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e8:	461a      	mov	r2, r3
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	f003 ff4a 	bl	8008184 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	68da      	ldr	r2, [r3, #12]
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	425b      	negs	r3, r3
 80042fa:	441a      	add	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	429a      	cmp	r2, r3
 800430a:	d207      	bcs.n	800431c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	425b      	negs	r3, r3
 8004316:	441a      	add	r2, r3
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d105      	bne.n	800432e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d002      	beq.n	800432e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	3b01      	subs	r3, #1
 800432c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8004336:	697b      	ldr	r3, [r7, #20]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	2b00      	cmp	r3, #0
 8004350:	d018      	beq.n	8004384 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	441a      	add	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	429a      	cmp	r2, r3
 800436a:	d303      	bcc.n	8004374 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68d9      	ldr	r1, [r3, #12]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437c:	461a      	mov	r2, r3
 800437e:	6838      	ldr	r0, [r7, #0]
 8004380:	f003 ff00 	bl	8008184 <memcpy>
    }
}
 8004384:	bf00      	nop
 8004386:	3708      	adds	r7, #8
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004394:	f001 fa94 	bl	80058c0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800439e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80043a0:	e011      	b.n	80043c6 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d012      	beq.n	80043d0 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	3324      	adds	r3, #36	; 0x24
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fe4e 	bl	8005050 <xTaskRemoveFromEventList>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80043ba:	f000 ff9d 	bl	80052f8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80043be:	7bfb      	ldrb	r3, [r7, #15]
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80043c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	dce9      	bgt.n	80043a2 <prvUnlockQueue+0x16>
 80043ce:	e000      	b.n	80043d2 <prvUnlockQueue+0x46>
                        break;
 80043d0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	22ff      	movs	r2, #255	; 0xff
 80043d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80043da:	f001 faa1 	bl	8005920 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80043de:	f001 fa6f 	bl	80058c0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80043e8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80043ea:	e011      	b.n	8004410 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d012      	beq.n	800441a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	3310      	adds	r3, #16
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 fe29 	bl	8005050 <xTaskRemoveFromEventList>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004404:	f000 ff78 	bl	80052f8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004408:	7bbb      	ldrb	r3, [r7, #14]
 800440a:	3b01      	subs	r3, #1
 800440c:	b2db      	uxtb	r3, r3
 800440e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004414:	2b00      	cmp	r3, #0
 8004416:	dce9      	bgt.n	80043ec <prvUnlockQueue+0x60>
 8004418:	e000      	b.n	800441c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800441a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	22ff      	movs	r2, #255	; 0xff
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8004424:	f001 fa7c 	bl	8005920 <vPortExitCritical>
}
 8004428:	bf00      	nop
 800442a:	3710      	adds	r7, #16
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004438:	f001 fa42 	bl	80058c0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	2b00      	cmp	r3, #0
 8004442:	d102      	bne.n	800444a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004444:	2301      	movs	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e001      	b.n	800444e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800444a:	2300      	movs	r3, #0
 800444c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800444e:	f001 fa67 	bl	8005920 <vPortExitCritical>

    return xReturn;
 8004452:	68fb      	ldr	r3, [r7, #12]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3710      	adds	r7, #16
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004464:	f001 fa2c 	bl	80058c0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	429a      	cmp	r2, r3
 8004472:	d102      	bne.n	800447a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004474:	2301      	movs	r3, #1
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	e001      	b.n	800447e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800447a:	2300      	movs	r3, #0
 800447c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800447e:	f001 fa4f 	bl	8005920 <vPortExitCritical>

    return xReturn;
 8004482:	68fb      	ldr	r3, [r7, #12]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800448c:	b580      	push	{r7, lr}
 800448e:	b08c      	sub	sp, #48	; 0x30
 8004490:	af04      	add	r7, sp, #16
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	603b      	str	r3, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800449c:	88fb      	ldrh	r3, [r7, #6]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4618      	mov	r0, r3
 80044a2:	f001 fb13 	bl	8005acc <pvPortMalloc>
 80044a6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00e      	beq.n	80044cc <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044ae:	2058      	movs	r0, #88	; 0x58
 80044b0:	f001 fb0c 	bl	8005acc <pvPortMalloc>
 80044b4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d003      	beq.n	80044c4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
 80044c2:	e005      	b.n	80044d0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80044c4:	6978      	ldr	r0, [r7, #20]
 80044c6:	f001 fbe1 	bl	8005c8c <vPortFree>
 80044ca:	e001      	b.n	80044d0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d013      	beq.n	80044fe <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044d6:	88fa      	ldrh	r2, [r7, #6]
 80044d8:	2300      	movs	r3, #0
 80044da:	9303      	str	r3, [sp, #12]
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	9302      	str	r3, [sp, #8]
 80044e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e2:	9301      	str	r3, [sp, #4]
 80044e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e6:	9300      	str	r3, [sp, #0]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f80e 	bl	800450e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80044f2:	69f8      	ldr	r0, [r7, #28]
 80044f4:	f000 f8b0 	bl	8004658 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80044f8:	2301      	movs	r3, #1
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	e002      	b.n	8004504 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004502:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004504:	69bb      	ldr	r3, [r7, #24]
    }
 8004506:	4618      	mov	r0, r3
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}

0800450e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800450e:	b580      	push	{r7, lr}
 8004510:	b088      	sub	sp, #32
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	461a      	mov	r2, r3
 8004526:	21a5      	movs	r1, #165	; 0xa5
 8004528:	f003 fdac 	bl	8008084 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800452c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004536:	3b01      	subs	r3, #1
 8004538:	009b      	lsls	r3, r3, #2
 800453a:	4413      	add	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	f023 0307 	bic.w	r3, r3, #7
 8004544:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00a      	beq.n	8004566 <prvInitialiseNewTask+0x58>
        __asm volatile
 8004550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	617b      	str	r3, [r7, #20]
    }
 8004562:	bf00      	nop
 8004564:	e7fe      	b.n	8004564 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d01f      	beq.n	80045ac <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800456c:	2300      	movs	r3, #0
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	e012      	b.n	8004598 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	7819      	ldrb	r1, [r3, #0]
 800457a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	4413      	add	r3, r2
 8004580:	3334      	adds	r3, #52	; 0x34
 8004582:	460a      	mov	r2, r1
 8004584:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	4413      	add	r3, r2
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	3301      	adds	r3, #1
 8004596:	61fb      	str	r3, [r7, #28]
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	2b09      	cmp	r3, #9
 800459c:	d9e9      	bls.n	8004572 <prvInitialiseNewTask+0x64>
 800459e:	e000      	b.n	80045a2 <prvInitialiseNewTask+0x94>
            {
                break;
 80045a0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80045aa:	e003      	b.n	80045b4 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d90a      	bls.n	80045d0 <prvInitialiseNewTask+0xc2>
        __asm volatile
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	613b      	str	r3, [r7, #16]
    }
 80045cc:	bf00      	nop
 80045ce:	e7fe      	b.n	80045ce <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80045d6:	2302      	movs	r3, #2
 80045d8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80045da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045de:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045e4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80045e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e8:	2200      	movs	r2, #0
 80045ea:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	3304      	adds	r3, #4
 80045f0:	4618      	mov	r0, r3
 80045f2:	f7ff face 	bl	8003b92 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	3318      	adds	r3, #24
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fac9 	bl	8003b92 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004604:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004608:	f1c3 0203 	rsb	r2, r3, #3
 800460c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004614:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	3350      	adds	r3, #80	; 0x50
 800461a:	2204      	movs	r2, #4
 800461c:	2100      	movs	r1, #0
 800461e:	4618      	mov	r0, r3
 8004620:	f003 fd30 	bl	8008084 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004626:	3354      	adds	r3, #84	; 0x54
 8004628:	2201      	movs	r2, #1
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f003 fd29 	bl	8008084 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	68f9      	ldr	r1, [r7, #12]
 8004636:	69b8      	ldr	r0, [r7, #24]
 8004638:	f001 f84c 	bl	80056d4 <pxPortInitialiseStack>
 800463c:	4602      	mov	r2, r0
 800463e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004640:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800464c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800464e:	bf00      	nop
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004658:	b5b0      	push	{r4, r5, r7, lr}
 800465a:	b086      	sub	sp, #24
 800465c:	af02      	add	r7, sp, #8
 800465e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004660:	f001 f92e 	bl	80058c0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004664:	4b49      	ldr	r3, [pc, #292]	; (800478c <prvAddNewTaskToReadyList+0x134>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	3301      	adds	r3, #1
 800466a:	4a48      	ldr	r2, [pc, #288]	; (800478c <prvAddNewTaskToReadyList+0x134>)
 800466c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800466e:	4b48      	ldr	r3, [pc, #288]	; (8004790 <prvAddNewTaskToReadyList+0x138>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d109      	bne.n	800468a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8004676:	4a46      	ldr	r2, [pc, #280]	; (8004790 <prvAddNewTaskToReadyList+0x138>)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800467c:	4b43      	ldr	r3, [pc, #268]	; (800478c <prvAddNewTaskToReadyList+0x134>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d110      	bne.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8004684:	f000 fe56 	bl	8005334 <prvInitialiseTaskLists>
 8004688:	e00d      	b.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800468a:	4b42      	ldr	r3, [pc, #264]	; (8004794 <prvAddNewTaskToReadyList+0x13c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004692:	4b3f      	ldr	r3, [pc, #252]	; (8004790 <prvAddNewTaskToReadyList+0x138>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	429a      	cmp	r2, r3
 800469e:	d802      	bhi.n	80046a6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80046a0:	4a3b      	ldr	r2, [pc, #236]	; (8004790 <prvAddNewTaskToReadyList+0x138>)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80046a6:	4b3c      	ldr	r3, [pc, #240]	; (8004798 <prvAddNewTaskToReadyList+0x140>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	3301      	adds	r3, #1
 80046ac:	4a3a      	ldr	r2, [pc, #232]	; (8004798 <prvAddNewTaskToReadyList+0x140>)
 80046ae:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046b0:	4b39      	ldr	r3, [pc, #228]	; (8004798 <prvAddNewTaskToReadyList+0x140>)
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d016      	beq.n	80046ec <prvAddNewTaskToReadyList+0x94>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f002 ff21 	bl	8007508 <SEGGER_SYSVIEW_OnTaskCreate>
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d6:	461d      	mov	r5, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	461c      	mov	r4, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	1ae3      	subs	r3, r4, r3
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	462b      	mov	r3, r5
 80046e8:	f003 fa2e 	bl	8007b48 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f002 ff8e 	bl	8007610 <SEGGER_SYSVIEW_OnTaskStartReady>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f8:	2201      	movs	r2, #1
 80046fa:	409a      	lsls	r2, r3
 80046fc:	4b27      	ldr	r3, [pc, #156]	; (800479c <prvAddNewTaskToReadyList+0x144>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4313      	orrs	r3, r2
 8004702:	4a26      	ldr	r2, [pc, #152]	; (800479c <prvAddNewTaskToReadyList+0x144>)
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800470a:	4925      	ldr	r1, [pc, #148]	; (80047a0 <prvAddNewTaskToReadyList+0x148>)
 800470c:	4613      	mov	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	3304      	adds	r3, #4
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	609a      	str	r2, [r3, #8]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	3204      	adds	r2, #4
 8004732:	605a      	str	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	1d1a      	adds	r2, r3, #4
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004740:	4613      	mov	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4413      	add	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4a15      	ldr	r2, [pc, #84]	; (80047a0 <prvAddNewTaskToReadyList+0x148>)
 800474a:	441a      	add	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	615a      	str	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004754:	4912      	ldr	r1, [pc, #72]	; (80047a0 <prvAddNewTaskToReadyList+0x148>)
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	1c59      	adds	r1, r3, #1
 8004764:	480e      	ldr	r0, [pc, #56]	; (80047a0 <prvAddNewTaskToReadyList+0x148>)
 8004766:	4613      	mov	r3, r2
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4413      	add	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4403      	add	r3, r0
 8004770:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004772:	f001 f8d5 	bl	8005920 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004776:	4b07      	ldr	r3, [pc, #28]	; (8004794 <prvAddNewTaskToReadyList+0x13c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <prvAddNewTaskToReadyList+0x138>)
 8004780:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004782:	bf00      	nop
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bdb0      	pop	{r4, r5, r7, pc}
 800478a:	bf00      	nop
 800478c:	20000220 	.word	0x20000220
 8004790:	20000170 	.word	0x20000170
 8004794:	2000022c 	.word	0x2000022c
 8004798:	2000023c 	.word	0x2000023c
 800479c:	20000228 	.word	0x20000228
 80047a0:	20000174 	.word	0x20000174

080047a4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80047ac:	f001 f888 	bl	80058c0 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d102      	bne.n	80047bc <vTaskSuspend+0x18>
 80047b6:	4b4a      	ldr	r3, [pc, #296]	; (80048e0 <vTaskSuspend+0x13c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	e000      	b.n	80047be <vTaskSuspend+0x1a>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f002 ffc6 	bl	8007754 <SEGGER_SYSVIEW_ShrinkId>
 80047c8:	4603      	mov	r3, r0
 80047ca:	4619      	mov	r1, r3
 80047cc:	2029      	movs	r0, #41	; 0x29
 80047ce:	f002 f99f 	bl	8006b10 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	3304      	adds	r3, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f7ff fa42 	bl	8003c60 <uxListRemove>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d115      	bne.n	800480e <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	493f      	ldr	r1, [pc, #252]	; (80048e4 <vTaskSuspend+0x140>)
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10a      	bne.n	800480e <vTaskSuspend+0x6a>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	2201      	movs	r2, #1
 80047fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004802:	43da      	mvns	r2, r3
 8004804:	4b38      	ldr	r3, [pc, #224]	; (80048e8 <vTaskSuspend+0x144>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4013      	ands	r3, r2
 800480a:	4a37      	ldr	r2, [pc, #220]	; (80048e8 <vTaskSuspend+0x144>)
 800480c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004812:	2b00      	cmp	r3, #0
 8004814:	d004      	beq.n	8004820 <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	3318      	adds	r3, #24
 800481a:	4618      	mov	r0, r3
 800481c:	f7ff fa20 	bl	8003c60 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB); //Added due to SEGGER Patch
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	211b      	movs	r1, #27
 8004824:	4618      	mov	r0, r3
 8004826:	f002 ff35 	bl	8007694 <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3304      	adds	r3, #4
 800482e:	4619      	mov	r1, r3
 8004830:	482e      	ldr	r0, [pc, #184]	; (80048ec <vTaskSuspend+0x148>)
 8004832:	f7ff f9ba 	bl	8003baa <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004836:	2300      	movs	r3, #0
 8004838:	617b      	str	r3, [r7, #20]
 800483a:	e010      	b.n	800485e <vTaskSuspend+0xba>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	4413      	add	r3, r2
 8004842:	3354      	adds	r3, #84	; 0x54
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	b2db      	uxtb	r3, r3
 8004848:	2b01      	cmp	r3, #1
 800484a:	d105      	bne.n	8004858 <vTaskSuspend+0xb4>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	4413      	add	r3, r2
 8004852:	3354      	adds	r3, #84	; 0x54
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	3301      	adds	r3, #1
 800485c:	617b      	str	r3, [r7, #20]
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	ddeb      	ble.n	800483c <vTaskSuspend+0x98>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8004864:	f001 f85c 	bl	8005920 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8004868:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <vTaskSuspend+0x14c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 8004870:	f001 f826 	bl	80058c0 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8004874:	f000 fddc 	bl	8005430 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8004878:	f001 f852 	bl	8005920 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 800487c:	4b18      	ldr	r3, [pc, #96]	; (80048e0 <vTaskSuspend+0x13c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	429a      	cmp	r2, r3
 8004884:	d127      	bne.n	80048d6 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8004886:	4b1a      	ldr	r3, [pc, #104]	; (80048f0 <vTaskSuspend+0x14c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d017      	beq.n	80048be <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 800488e:	4b19      	ldr	r3, [pc, #100]	; (80048f4 <vTaskSuspend+0x150>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00a      	beq.n	80048ac <vTaskSuspend+0x108>
        __asm volatile
 8004896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489a:	f383 8811 	msr	BASEPRI, r3
 800489e:	f3bf 8f6f 	isb	sy
 80048a2:	f3bf 8f4f 	dsb	sy
 80048a6:	60fb      	str	r3, [r7, #12]
    }
 80048a8:	bf00      	nop
 80048aa:	e7fe      	b.n	80048aa <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 80048ac:	4b12      	ldr	r3, [pc, #72]	; (80048f8 <vTaskSuspend+0x154>)
 80048ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	f3bf 8f4f 	dsb	sy
 80048b8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80048bc:	e00b      	b.n	80048d6 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <vTaskSuspend+0x148>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	4b0e      	ldr	r3, [pc, #56]	; (80048fc <vTaskSuspend+0x158>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d103      	bne.n	80048d2 <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <vTaskSuspend+0x13c>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
    }
 80048d0:	e001      	b.n	80048d6 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 80048d2:	f000 fb2f 	bl	8004f34 <vTaskSwitchContext>
    }
 80048d6:	bf00      	nop
 80048d8:	3718      	adds	r7, #24
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20000170 	.word	0x20000170
 80048e4:	20000174 	.word	0x20000174
 80048e8:	20000228 	.word	0x20000228
 80048ec:	2000020c 	.word	0x2000020c
 80048f0:	2000022c 	.word	0x2000022c
 80048f4:	20000248 	.word	0x20000248
 80048f8:	e000ed04 	.word	0xe000ed04
 80048fc:	20000220 	.word	0x20000220

08004900 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8004900:	b480      	push	{r7}
 8004902:	b087      	sub	sp, #28
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8004908:	2300      	movs	r3, #0
 800490a:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10a      	bne.n	800492c <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8004916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491a:	f383 8811 	msr	BASEPRI, r3
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f3bf 8f4f 	dsb	sy
 8004926:	60fb      	str	r3, [r7, #12]
    }
 8004928:	bf00      	nop
 800492a:	e7fe      	b.n	800492a <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	4a09      	ldr	r2, [pc, #36]	; (8004958 <prvTaskIsTaskSuspended+0x58>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d10a      	bne.n	800494c <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800493a:	4a08      	ldr	r2, [pc, #32]	; (800495c <prvTaskIsTaskSuspended+0x5c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d005      	beq.n	800494c <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8004948:	2301      	movs	r3, #1
 800494a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800494c:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800494e:	4618      	mov	r0, r3
 8004950:	371c      	adds	r7, #28
 8004952:	46bd      	mov	sp, r7
 8004954:	bc80      	pop	{r7}
 8004956:	4770      	bx	lr
 8004958:	2000020c 	.word	0x2000020c
 800495c:	200001e0 	.word	0x200001e0

08004960 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10a      	bne.n	8004988 <vTaskResume+0x28>
        __asm volatile
 8004972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004976:	f383 8811 	msr	BASEPRI, r3
 800497a:	f3bf 8f6f 	isb	sy
 800497e:	f3bf 8f4f 	dsb	sy
 8004982:	60fb      	str	r3, [r7, #12]
    }
 8004984:	bf00      	nop
 8004986:	e7fe      	b.n	8004986 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004988:	4b34      	ldr	r3, [pc, #208]	; (8004a5c <vTaskResume+0xfc>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	697a      	ldr	r2, [r7, #20]
 800498e:	429a      	cmp	r2, r3
 8004990:	d05f      	beq.n	8004a52 <vTaskResume+0xf2>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d05c      	beq.n	8004a52 <vTaskResume+0xf2>
        {
            taskENTER_CRITICAL();
 8004998:	f000 ff92 	bl	80058c0 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800499c:	6978      	ldr	r0, [r7, #20]
 800499e:	f7ff ffaf 	bl	8004900 <prvTaskIsTaskSuspended>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d052      	beq.n	8004a4e <vTaskResume+0xee>
                {
                    traceTASK_RESUME( pxTCB );
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f002 fed2 	bl	8007754 <SEGGER_SYSVIEW_ShrinkId>
 80049b0:	4603      	mov	r3, r0
 80049b2:	4619      	mov	r1, r3
 80049b4:	202a      	movs	r0, #42	; 0x2a
 80049b6:	f002 f8ab 	bl	8006b10 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	3304      	adds	r3, #4
 80049be:	4618      	mov	r0, r3
 80049c0:	f7ff f94e 	bl	8003c60 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f002 fe22 	bl	8007610 <SEGGER_SYSVIEW_OnTaskStartReady>
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d0:	2201      	movs	r2, #1
 80049d2:	409a      	lsls	r2, r3
 80049d4:	4b22      	ldr	r3, [pc, #136]	; (8004a60 <vTaskResume+0x100>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4313      	orrs	r3, r2
 80049da:	4a21      	ldr	r2, [pc, #132]	; (8004a60 <vTaskResume+0x100>)
 80049dc:	6013      	str	r3, [r2, #0]
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	4920      	ldr	r1, [pc, #128]	; (8004a64 <vTaskResume+0x104>)
 80049e4:	4613      	mov	r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	3304      	adds	r3, #4
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	613b      	str	r3, [r7, #16]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	609a      	str	r2, [r3, #8]
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	3204      	adds	r2, #4
 8004a0a:	605a      	str	r2, [r3, #4]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	1d1a      	adds	r2, r3, #4
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4a10      	ldr	r2, [pc, #64]	; (8004a64 <vTaskResume+0x104>)
 8004a22:	441a      	add	r2, r3
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	615a      	str	r2, [r3, #20]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a2c:	490d      	ldr	r1, [pc, #52]	; (8004a64 <vTaskResume+0x104>)
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	1c59      	adds	r1, r3, #1
 8004a3c:	4809      	ldr	r0, [pc, #36]	; (8004a64 <vTaskResume+0x104>)
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4403      	add	r3, r0
 8004a48:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a4a:	4b04      	ldr	r3, [pc, #16]	; (8004a5c <vTaskResume+0xfc>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004a4e:	f000 ff67 	bl	8005920 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004a52:	bf00      	nop
 8004a54:	3718      	adds	r7, #24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	20000170 	.word	0x20000170
 8004a60:	20000228 	.word	0x20000228
 8004a64:	20000174 	.word	0x20000174

08004a68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004a6e:	4b24      	ldr	r3, [pc, #144]	; (8004b00 <vTaskStartScheduler+0x98>)
 8004a70:	9301      	str	r3, [sp, #4]
 8004a72:	2300      	movs	r3, #0
 8004a74:	9300      	str	r3, [sp, #0]
 8004a76:	2300      	movs	r3, #0
 8004a78:	2282      	movs	r2, #130	; 0x82
 8004a7a:	4922      	ldr	r1, [pc, #136]	; (8004b04 <vTaskStartScheduler+0x9c>)
 8004a7c:	4822      	ldr	r0, [pc, #136]	; (8004b08 <vTaskStartScheduler+0xa0>)
 8004a7e:	f7ff fd05 	bl	800448c <xTaskCreate>
 8004a82:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d124      	bne.n	8004ad4 <vTaskStartScheduler+0x6c>
        __asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	60bb      	str	r3, [r7, #8]
    }
 8004a9c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004a9e:	4b1b      	ldr	r3, [pc, #108]	; (8004b0c <vTaskStartScheduler+0xa4>)
 8004aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004aa6:	4b1a      	ldr	r3, [pc, #104]	; (8004b10 <vTaskStartScheduler+0xa8>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004aac:	4b19      	ldr	r3, [pc, #100]	; (8004b14 <vTaskStartScheduler+0xac>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8004ab2:	4b19      	ldr	r3, [pc, #100]	; (8004b18 <vTaskStartScheduler+0xb0>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	4b12      	ldr	r3, [pc, #72]	; (8004b00 <vTaskStartScheduler+0x98>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d102      	bne.n	8004ac4 <vTaskStartScheduler+0x5c>
 8004abe:	f002 fd07 	bl	80074d0 <SEGGER_SYSVIEW_OnIdle>
 8004ac2:	e004      	b.n	8004ace <vTaskStartScheduler+0x66>
 8004ac4:	4b14      	ldr	r3, [pc, #80]	; (8004b18 <vTaskStartScheduler+0xb0>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f002 fd5f 	bl	800758c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004ace:	f000 fe85 	bl	80057dc <xPortStartScheduler>
 8004ad2:	e00e      	b.n	8004af2 <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ada:	d10a      	bne.n	8004af2 <vTaskStartScheduler+0x8a>
        __asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	607b      	str	r3, [r7, #4]
    }
 8004aee:	bf00      	nop
 8004af0:	e7fe      	b.n	8004af0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004af2:	4b0a      	ldr	r3, [pc, #40]	; (8004b1c <vTaskStartScheduler+0xb4>)
 8004af4:	681b      	ldr	r3, [r3, #0]
}
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000244 	.word	0x20000244
 8004b04:	08008d98 	.word	0x08008d98
 8004b08:	08005311 	.word	0x08005311
 8004b0c:	20000240 	.word	0x20000240
 8004b10:	2000022c 	.word	0x2000022c
 8004b14:	20000224 	.word	0x20000224
 8004b18:	20000170 	.word	0x20000170
 8004b1c:	2000002c 	.word	0x2000002c

08004b20 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004b24:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <vTaskSuspendAll+0x18>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	4a03      	ldr	r2, [pc, #12]	; (8004b38 <vTaskSuspendAll+0x18>)
 8004b2c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004b2e:	bf00      	nop
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bc80      	pop	{r7}
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	20000248 	.word	0x20000248

08004b3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004b42:	2300      	movs	r3, #0
 8004b44:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004b4a:	4b6d      	ldr	r3, [pc, #436]	; (8004d00 <xTaskResumeAll+0x1c4>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <xTaskResumeAll+0x2c>
        __asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	607b      	str	r3, [r7, #4]
    }
 8004b64:	bf00      	nop
 8004b66:	e7fe      	b.n	8004b66 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004b68:	f000 feaa 	bl	80058c0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004b6c:	4b64      	ldr	r3, [pc, #400]	; (8004d00 <xTaskResumeAll+0x1c4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	4a63      	ldr	r2, [pc, #396]	; (8004d00 <xTaskResumeAll+0x1c4>)
 8004b74:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b76:	4b62      	ldr	r3, [pc, #392]	; (8004d00 <xTaskResumeAll+0x1c4>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 80b8 	bne.w	8004cf0 <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b80:	4b60      	ldr	r3, [pc, #384]	; (8004d04 <xTaskResumeAll+0x1c8>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80b3 	beq.w	8004cf0 <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b8a:	e08e      	b.n	8004caa <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b8c:	4b5e      	ldr	r3, [pc, #376]	; (8004d08 <xTaskResumeAll+0x1cc>)
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b98:	613b      	str	r3, [r7, #16]
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	69fa      	ldr	r2, [r7, #28]
 8004ba0:	6a12      	ldr	r2, [r2, #32]
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	69d2      	ldr	r2, [r2, #28]
 8004bac:	605a      	str	r2, [r3, #4]
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	685a      	ldr	r2, [r3, #4]
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	3318      	adds	r3, #24
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d103      	bne.n	8004bc2 <xTaskResumeAll+0x86>
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	6a1a      	ldr	r2, [r3, #32]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	1e5a      	subs	r2, r3, #1
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	69fa      	ldr	r2, [r7, #28]
 8004bde:	68d2      	ldr	r2, [r2, #12]
 8004be0:	609a      	str	r2, [r3, #8]
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	69fa      	ldr	r2, [r7, #28]
 8004be8:	6892      	ldr	r2, [r2, #8]
 8004bea:	605a      	str	r2, [r3, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d103      	bne.n	8004c00 <xTaskResumeAll+0xc4>
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	68da      	ldr	r2, [r3, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	605a      	str	r2, [r3, #4]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	2200      	movs	r2, #0
 8004c04:	615a      	str	r2, [r3, #20]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1e5a      	subs	r2, r3, #1
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	4618      	mov	r0, r3
 8004c14:	f002 fcfc 	bl	8007610 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004c18:	69fb      	ldr	r3, [r7, #28]
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	4b3a      	ldr	r3, [pc, #232]	; (8004d0c <xTaskResumeAll+0x1d0>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	4a39      	ldr	r2, [pc, #228]	; (8004d0c <xTaskResumeAll+0x1d0>)
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2e:	4938      	ldr	r1, [pc, #224]	; (8004d10 <xTaskResumeAll+0x1d4>)
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	440b      	add	r3, r1
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	60bb      	str	r3, [r7, #8]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	609a      	str	r2, [r3, #8]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	60da      	str	r2, [r3, #12]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	3204      	adds	r2, #4
 8004c56:	605a      	str	r2, [r3, #4]
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	1d1a      	adds	r2, r3, #4
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	609a      	str	r2, [r3, #8]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c64:	4613      	mov	r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	4a28      	ldr	r2, [pc, #160]	; (8004d10 <xTaskResumeAll+0x1d4>)
 8004c6e:	441a      	add	r2, r3
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	615a      	str	r2, [r3, #20]
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c78:	4925      	ldr	r1, [pc, #148]	; (8004d10 <xTaskResumeAll+0x1d4>)
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	009b      	lsls	r3, r3, #2
 8004c7e:	4413      	add	r3, r2
 8004c80:	009b      	lsls	r3, r3, #2
 8004c82:	440b      	add	r3, r1
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	1c59      	adds	r1, r3, #1
 8004c88:	4821      	ldr	r0, [pc, #132]	; (8004d10 <xTaskResumeAll+0x1d4>)
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4403      	add	r3, r0
 8004c94:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9a:	4b1e      	ldr	r3, [pc, #120]	; (8004d14 <xTaskResumeAll+0x1d8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d302      	bcc.n	8004caa <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8004ca4:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <xTaskResumeAll+0x1dc>)
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004caa:	4b17      	ldr	r3, [pc, #92]	; (8004d08 <xTaskResumeAll+0x1cc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f47f af6c 	bne.w	8004b8c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004cba:	f000 fbb9 	bl	8005430 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004cbe:	4b17      	ldr	r3, [pc, #92]	; (8004d1c <xTaskResumeAll+0x1e0>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d010      	beq.n	8004cec <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004cca:	f000 f83b 	bl	8004d44 <xTaskIncrementTick>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8004cd4:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <xTaskResumeAll+0x1dc>)
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004ce0:	69bb      	ldr	r3, [r7, #24]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d1f1      	bne.n	8004cca <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8004ce6:	4b0d      	ldr	r3, [pc, #52]	; (8004d1c <xTaskResumeAll+0x1e0>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <xTaskResumeAll+0x1dc>)
 8004cee:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004cf0:	f000 fe16 	bl	8005920 <vPortExitCritical>

    return xAlreadyYielded;
 8004cf4:	697b      	ldr	r3, [r7, #20]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3720      	adds	r7, #32
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20000248 	.word	0x20000248
 8004d04:	20000220 	.word	0x20000220
 8004d08:	200001e0 	.word	0x200001e0
 8004d0c:	20000228 	.word	0x20000228
 8004d10:	20000174 	.word	0x20000174
 8004d14:	20000170 	.word	0x20000170
 8004d18:	20000234 	.word	0x20000234
 8004d1c:	20000230 	.word	0x20000230

08004d20 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d26:	f000 fe93 	bl	8005a50 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8004d2e:	4b04      	ldr	r3, [pc, #16]	; (8004d40 <xTaskGetTickCountFromISR+0x20>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004d34:	683b      	ldr	r3, [r7, #0]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	20000224 	.word	0x20000224

08004d44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d4e:	4b70      	ldr	r3, [pc, #448]	; (8004f10 <xTaskIncrementTick+0x1cc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f040 80d1 	bne.w	8004efa <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d58:	4b6e      	ldr	r3, [pc, #440]	; (8004f14 <xTaskIncrementTick+0x1d0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004d60:	4a6c      	ldr	r2, [pc, #432]	; (8004f14 <xTaskIncrementTick+0x1d0>)
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d66:	6a3b      	ldr	r3, [r7, #32]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d120      	bne.n	8004dae <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004d6c:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <xTaskIncrementTick+0x1d4>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <xTaskIncrementTick+0x48>
        __asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	607b      	str	r3, [r7, #4]
    }
 8004d88:	bf00      	nop
 8004d8a:	e7fe      	b.n	8004d8a <xTaskIncrementTick+0x46>
 8004d8c:	4b62      	ldr	r3, [pc, #392]	; (8004f18 <xTaskIncrementTick+0x1d4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	4b62      	ldr	r3, [pc, #392]	; (8004f1c <xTaskIncrementTick+0x1d8>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a60      	ldr	r2, [pc, #384]	; (8004f18 <xTaskIncrementTick+0x1d4>)
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4a60      	ldr	r2, [pc, #384]	; (8004f1c <xTaskIncrementTick+0x1d8>)
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	6013      	str	r3, [r2, #0]
 8004da0:	4b5f      	ldr	r3, [pc, #380]	; (8004f20 <xTaskIncrementTick+0x1dc>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	3301      	adds	r3, #1
 8004da6:	4a5e      	ldr	r2, [pc, #376]	; (8004f20 <xTaskIncrementTick+0x1dc>)
 8004da8:	6013      	str	r3, [r2, #0]
 8004daa:	f000 fb41 	bl	8005430 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004dae:	4b5d      	ldr	r3, [pc, #372]	; (8004f24 <xTaskIncrementTick+0x1e0>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	6a3a      	ldr	r2, [r7, #32]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	f0c0 80a5 	bcc.w	8004f04 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dba:	4b57      	ldr	r3, [pc, #348]	; (8004f18 <xTaskIncrementTick+0x1d4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d104      	bne.n	8004dce <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dc4:	4b57      	ldr	r3, [pc, #348]	; (8004f24 <xTaskIncrementTick+0x1e0>)
 8004dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004dca:	601a      	str	r2, [r3, #0]
                    break;
 8004dcc:	e09a      	b.n	8004f04 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dce:	4b52      	ldr	r3, [pc, #328]	; (8004f18 <xTaskIncrementTick+0x1d4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8004dde:	6a3a      	ldr	r2, [r7, #32]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d203      	bcs.n	8004dee <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004de6:	4a4f      	ldr	r2, [pc, #316]	; (8004f24 <xTaskIncrementTick+0x1e0>)
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8004dec:	e08a      	b.n	8004f04 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	68d2      	ldr	r2, [r2, #12]
 8004dfc:	609a      	str	r2, [r3, #8]
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	6892      	ldr	r2, [r2, #8]
 8004e06:	605a      	str	r2, [r3, #4]
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	685a      	ldr	r2, [r3, #4]
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	3304      	adds	r3, #4
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d103      	bne.n	8004e1c <xTaskIncrementTick+0xd8>
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	68da      	ldr	r2, [r3, #12]
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	605a      	str	r2, [r3, #4]
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	615a      	str	r2, [r3, #20]
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1e5a      	subs	r2, r3, #1
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004e2c:	69bb      	ldr	r3, [r7, #24]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01e      	beq.n	8004e72 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	60fb      	str	r3, [r7, #12]
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	6a12      	ldr	r2, [r2, #32]
 8004e42:	609a      	str	r2, [r3, #8]
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	69d2      	ldr	r2, [r2, #28]
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	3318      	adds	r3, #24
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d103      	bne.n	8004e62 <xTaskIncrementTick+0x11e>
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	6a1a      	ldr	r2, [r3, #32]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2200      	movs	r2, #0
 8004e66:	629a      	str	r2, [r3, #40]	; 0x28
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	1e5a      	subs	r2, r3, #1
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f002 fbcb 	bl	8007610 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7e:	2201      	movs	r2, #1
 8004e80:	409a      	lsls	r2, r3
 8004e82:	4b29      	ldr	r3, [pc, #164]	; (8004f28 <xTaskIncrementTick+0x1e4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <xTaskIncrementTick+0x1e4>)
 8004e8a:	6013      	str	r3, [r2, #0]
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e90:	4926      	ldr	r1, [pc, #152]	; (8004f2c <xTaskIncrementTick+0x1e8>)
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	609a      	str	r2, [r3, #8]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	689a      	ldr	r2, [r3, #8]
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	60da      	str	r2, [r3, #12]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	3204      	adds	r2, #4
 8004eb8:	605a      	str	r2, [r3, #4]
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	1d1a      	adds	r2, r3, #4
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	609a      	str	r2, [r3, #8]
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	4413      	add	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <xTaskIncrementTick+0x1e8>)
 8004ed0:	441a      	add	r2, r3
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	615a      	str	r2, [r3, #20]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eda:	4914      	ldr	r1, [pc, #80]	; (8004f2c <xTaskIncrementTick+0x1e8>)
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	440b      	add	r3, r1
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	1c59      	adds	r1, r3, #1
 8004eea:	4810      	ldr	r0, [pc, #64]	; (8004f2c <xTaskIncrementTick+0x1e8>)
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4403      	add	r3, r0
 8004ef6:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef8:	e75f      	b.n	8004dba <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004efa:	4b0d      	ldr	r3, [pc, #52]	; (8004f30 <xTaskIncrementTick+0x1ec>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3301      	adds	r3, #1
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <xTaskIncrementTick+0x1ec>)
 8004f02:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3728      	adds	r7, #40	; 0x28
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	20000248 	.word	0x20000248
 8004f14:	20000224 	.word	0x20000224
 8004f18:	200001d8 	.word	0x200001d8
 8004f1c:	200001dc 	.word	0x200001dc
 8004f20:	20000238 	.word	0x20000238
 8004f24:	20000240 	.word	0x20000240
 8004f28:	20000228 	.word	0x20000228
 8004f2c:	20000174 	.word	0x20000174
 8004f30:	20000230 	.word	0x20000230

08004f34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b086      	sub	sp, #24
 8004f38:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004f3a:	4b2d      	ldr	r3, [pc, #180]	; (8004ff0 <vTaskSwitchContext+0xbc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d003      	beq.n	8004f4a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004f42:	4b2c      	ldr	r3, [pc, #176]	; (8004ff4 <vTaskSwitchContext+0xc0>)
 8004f44:	2201      	movs	r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004f48:	e04d      	b.n	8004fe6 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8004f4a:	4b2a      	ldr	r3, [pc, #168]	; (8004ff4 <vTaskSwitchContext+0xc0>)
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f50:	4b29      	ldr	r3, [pc, #164]	; (8004ff8 <vTaskSwitchContext+0xc4>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	fab3 f383 	clz	r3, r3
 8004f5c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004f5e:	7afb      	ldrb	r3, [r7, #11]
 8004f60:	f1c3 031f 	rsb	r3, r3, #31
 8004f64:	617b      	str	r3, [r7, #20]
 8004f66:	4925      	ldr	r1, [pc, #148]	; (8004ffc <vTaskSwitchContext+0xc8>)
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	607b      	str	r3, [r7, #4]
    }
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <vTaskSwitchContext+0x5a>
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <vTaskSwitchContext+0xc8>)
 8004f9c:	4413      	add	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	685a      	ldr	r2, [r3, #4]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	605a      	str	r2, [r3, #4]
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	3308      	adds	r3, #8
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d104      	bne.n	8004fc0 <vTaskSwitchContext+0x8c>
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	605a      	str	r2, [r3, #4]
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	4a0e      	ldr	r2, [pc, #56]	; (8005000 <vTaskSwitchContext+0xcc>)
 8004fc8:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8004fca:	4b0d      	ldr	r3, [pc, #52]	; (8005000 <vTaskSwitchContext+0xcc>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <vTaskSwitchContext+0xd0>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d102      	bne.n	8004fdc <vTaskSwitchContext+0xa8>
 8004fd6:	f002 fa7b 	bl	80074d0 <SEGGER_SYSVIEW_OnIdle>
}
 8004fda:	e004      	b.n	8004fe6 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8004fdc:	4b08      	ldr	r3, [pc, #32]	; (8005000 <vTaskSwitchContext+0xcc>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f002 fad3 	bl	800758c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8004fe6:	bf00      	nop
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000248 	.word	0x20000248
 8004ff4:	20000234 	.word	0x20000234
 8004ff8:	20000228 	.word	0x20000228
 8004ffc:	20000174 	.word	0x20000174
 8005000:	20000170 	.word	0x20000170
 8005004:	20000244 	.word	0x20000244

08005008 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d10a      	bne.n	800502e <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8005018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501c:	f383 8811 	msr	BASEPRI, r3
 8005020:	f3bf 8f6f 	isb	sy
 8005024:	f3bf 8f4f 	dsb	sy
 8005028:	60fb      	str	r3, [r7, #12]
    }
 800502a:	bf00      	nop
 800502c:	e7fe      	b.n	800502c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <vTaskPlaceOnEventList+0x44>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3318      	adds	r3, #24
 8005034:	4619      	mov	r1, r3
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fe fdda 	bl	8003bf0 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800503c:	2101      	movs	r1, #1
 800503e:	6838      	ldr	r0, [r7, #0]
 8005040:	f000 fabc 	bl	80055bc <prvAddCurrentTaskToDelayedList>
}
 8005044:	bf00      	nop
 8005046:	3710      	adds	r7, #16
 8005048:	46bd      	mov	sp, r7
 800504a:	bd80      	pop	{r7, pc}
 800504c:	20000170 	.word	0x20000170

08005050 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	; 0x28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8005060:	6a3b      	ldr	r3, [r7, #32]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10a      	bne.n	800507c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8005066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506a:	f383 8811 	msr	BASEPRI, r3
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f3bf 8f4f 	dsb	sy
 8005076:	60fb      	str	r3, [r7, #12]
    }
 8005078:	bf00      	nop
 800507a:	e7fe      	b.n	800507a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800507c:	6a3b      	ldr	r3, [r7, #32]
 800507e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005080:	61fb      	str	r3, [r7, #28]
 8005082:	6a3b      	ldr	r3, [r7, #32]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	6a3a      	ldr	r2, [r7, #32]
 8005088:	6a12      	ldr	r2, [r2, #32]
 800508a:	609a      	str	r2, [r3, #8]
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	6a3a      	ldr	r2, [r7, #32]
 8005092:	69d2      	ldr	r2, [r2, #28]
 8005094:	605a      	str	r2, [r3, #4]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	3318      	adds	r3, #24
 800509e:	429a      	cmp	r2, r3
 80050a0:	d103      	bne.n	80050aa <xTaskRemoveFromEventList+0x5a>
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	605a      	str	r2, [r3, #4]
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	2200      	movs	r2, #0
 80050ae:	629a      	str	r2, [r3, #40]	; 0x28
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	1e5a      	subs	r2, r3, #1
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80050ba:	4b4b      	ldr	r3, [pc, #300]	; (80051e8 <xTaskRemoveFromEventList+0x198>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d162      	bne.n	8005188 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	6a3b      	ldr	r3, [r7, #32]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	6a3a      	ldr	r2, [r7, #32]
 80050ce:	68d2      	ldr	r2, [r2, #12]
 80050d0:	609a      	str	r2, [r3, #8]
 80050d2:	6a3b      	ldr	r3, [r7, #32]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	6a3a      	ldr	r2, [r7, #32]
 80050d8:	6892      	ldr	r2, [r2, #8]
 80050da:	605a      	str	r2, [r3, #4]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	3304      	adds	r3, #4
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d103      	bne.n	80050f0 <xTaskRemoveFromEventList+0xa0>
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	605a      	str	r2, [r3, #4]
 80050f0:	6a3b      	ldr	r3, [r7, #32]
 80050f2:	2200      	movs	r2, #0
 80050f4:	615a      	str	r2, [r3, #20]
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	1e5a      	subs	r2, r3, #1
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	4618      	mov	r0, r3
 8005104:	f002 fa84 	bl	8007610 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510c:	2201      	movs	r2, #1
 800510e:	409a      	lsls	r2, r3
 8005110:	4b36      	ldr	r3, [pc, #216]	; (80051ec <xTaskRemoveFromEventList+0x19c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4313      	orrs	r3, r2
 8005116:	4a35      	ldr	r2, [pc, #212]	; (80051ec <xTaskRemoveFromEventList+0x19c>)
 8005118:	6013      	str	r3, [r2, #0]
 800511a:	6a3b      	ldr	r3, [r7, #32]
 800511c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511e:	4934      	ldr	r1, [pc, #208]	; (80051f0 <xTaskRemoveFromEventList+0x1a0>)
 8005120:	4613      	mov	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4413      	add	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	3304      	adds	r3, #4
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	613b      	str	r3, [r7, #16]
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	609a      	str	r2, [r3, #8]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	60da      	str	r2, [r3, #12]
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	6a3a      	ldr	r2, [r7, #32]
 8005144:	3204      	adds	r2, #4
 8005146:	605a      	str	r2, [r3, #4]
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	1d1a      	adds	r2, r3, #4
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	609a      	str	r2, [r3, #8]
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4a24      	ldr	r2, [pc, #144]	; (80051f0 <xTaskRemoveFromEventList+0x1a0>)
 800515e:	441a      	add	r2, r3
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	615a      	str	r2, [r3, #20]
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005168:	4921      	ldr	r1, [pc, #132]	; (80051f0 <xTaskRemoveFromEventList+0x1a0>)
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	1c59      	adds	r1, r3, #1
 8005178:	481d      	ldr	r0, [pc, #116]	; (80051f0 <xTaskRemoveFromEventList+0x1a0>)
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4403      	add	r3, r0
 8005184:	6019      	str	r1, [r3, #0]
 8005186:	e01b      	b.n	80051c0 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005188:	4b1a      	ldr	r3, [pc, #104]	; (80051f4 <xTaskRemoveFromEventList+0x1a4>)
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	69ba      	ldr	r2, [r7, #24]
 8005192:	61da      	str	r2, [r3, #28]
 8005194:	69bb      	ldr	r3, [r7, #24]
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	6a3b      	ldr	r3, [r7, #32]
 800519a:	621a      	str	r2, [r3, #32]
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	6a3a      	ldr	r2, [r7, #32]
 80051a2:	3218      	adds	r2, #24
 80051a4:	605a      	str	r2, [r3, #4]
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	f103 0218 	add.w	r2, r3, #24
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	609a      	str	r2, [r3, #8]
 80051b0:	6a3b      	ldr	r3, [r7, #32]
 80051b2:	4a10      	ldr	r2, [pc, #64]	; (80051f4 <xTaskRemoveFromEventList+0x1a4>)
 80051b4:	629a      	str	r2, [r3, #40]	; 0x28
 80051b6:	4b0f      	ldr	r3, [pc, #60]	; (80051f4 <xTaskRemoveFromEventList+0x1a4>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3301      	adds	r3, #1
 80051bc:	4a0d      	ldr	r2, [pc, #52]	; (80051f4 <xTaskRemoveFromEventList+0x1a4>)
 80051be:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c4:	4b0c      	ldr	r3, [pc, #48]	; (80051f8 <xTaskRemoveFromEventList+0x1a8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d905      	bls.n	80051da <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80051ce:	2301      	movs	r3, #1
 80051d0:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80051d2:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <xTaskRemoveFromEventList+0x1ac>)
 80051d4:	2201      	movs	r2, #1
 80051d6:	601a      	str	r2, [r3, #0]
 80051d8:	e001      	b.n	80051de <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 80051da:	2300      	movs	r3, #0
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3728      	adds	r7, #40	; 0x28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	20000248 	.word	0x20000248
 80051ec:	20000228 	.word	0x20000228
 80051f0:	20000174 	.word	0x20000174
 80051f4:	200001e0 	.word	0x200001e0
 80051f8:	20000170 	.word	0x20000170
 80051fc:	20000234 	.word	0x20000234

08005200 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005208:	4b06      	ldr	r3, [pc, #24]	; (8005224 <vTaskInternalSetTimeOutState+0x24>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <vTaskInternalSetTimeOutState+0x28>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	605a      	str	r2, [r3, #4]
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	bc80      	pop	{r7}
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	20000238 	.word	0x20000238
 8005228:	20000224 	.word	0x20000224

0800522c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	613b      	str	r3, [r7, #16]
    }
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	60fb      	str	r3, [r7, #12]
    }
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 800526e:	f000 fb27 	bl	80058c0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005272:	4b1f      	ldr	r3, [pc, #124]	; (80052f0 <xTaskCheckForTimeOut+0xc4>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528a:	d102      	bne.n	8005292 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800528c:	2300      	movs	r3, #0
 800528e:	61fb      	str	r3, [r7, #28]
 8005290:	e026      	b.n	80052e0 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	4b17      	ldr	r3, [pc, #92]	; (80052f4 <xTaskCheckForTimeOut+0xc8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	429a      	cmp	r2, r3
 800529c:	d00a      	beq.n	80052b4 <xTaskCheckForTimeOut+0x88>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d305      	bcc.n	80052b4 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	e015      	b.n	80052e0 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d20b      	bcs.n	80052d6 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	1ad2      	subs	r2, r2, r3
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f7ff ff98 	bl	8005200 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80052d0:	2300      	movs	r3, #0
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	e004      	b.n	80052e0 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	2200      	movs	r2, #0
 80052da:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80052dc:	2301      	movs	r3, #1
 80052de:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80052e0:	f000 fb1e 	bl	8005920 <vPortExitCritical>

    return xReturn;
 80052e4:	69fb      	ldr	r3, [r7, #28]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	20000224 	.word	0x20000224
 80052f4:	20000238 	.word	0x20000238

080052f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80052fc:	4b03      	ldr	r3, [pc, #12]	; (800530c <vTaskMissedYield+0x14>)
 80052fe:	2201      	movs	r2, #1
 8005300:	601a      	str	r2, [r3, #0]
}
 8005302:	bf00      	nop
 8005304:	46bd      	mov	sp, r7
 8005306:	bc80      	pop	{r7}
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000234 	.word	0x20000234

08005310 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005318:	f000 f84c 	bl	80053b4 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800531c:	4b04      	ldr	r3, [pc, #16]	; (8005330 <prvIdleTask+0x20>)
 800531e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800532c:	e7f4      	b.n	8005318 <prvIdleTask+0x8>
 800532e:	bf00      	nop
 8005330:	e000ed04 	.word	0xe000ed04

08005334 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800533a:	2300      	movs	r3, #0
 800533c:	607b      	str	r3, [r7, #4]
 800533e:	e00c      	b.n	800535a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4a12      	ldr	r2, [pc, #72]	; (8005394 <prvInitialiseTaskLists+0x60>)
 800534c:	4413      	add	r3, r2
 800534e:	4618      	mov	r0, r3
 8005350:	f7fe fc00 	bl	8003b54 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3301      	adds	r3, #1
 8005358:	607b      	str	r3, [r7, #4]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b02      	cmp	r3, #2
 800535e:	d9ef      	bls.n	8005340 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005360:	480d      	ldr	r0, [pc, #52]	; (8005398 <prvInitialiseTaskLists+0x64>)
 8005362:	f7fe fbf7 	bl	8003b54 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005366:	480d      	ldr	r0, [pc, #52]	; (800539c <prvInitialiseTaskLists+0x68>)
 8005368:	f7fe fbf4 	bl	8003b54 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800536c:	480c      	ldr	r0, [pc, #48]	; (80053a0 <prvInitialiseTaskLists+0x6c>)
 800536e:	f7fe fbf1 	bl	8003b54 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005372:	480c      	ldr	r0, [pc, #48]	; (80053a4 <prvInitialiseTaskLists+0x70>)
 8005374:	f7fe fbee 	bl	8003b54 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005378:	480b      	ldr	r0, [pc, #44]	; (80053a8 <prvInitialiseTaskLists+0x74>)
 800537a:	f7fe fbeb 	bl	8003b54 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800537e:	4b0b      	ldr	r3, [pc, #44]	; (80053ac <prvInitialiseTaskLists+0x78>)
 8005380:	4a05      	ldr	r2, [pc, #20]	; (8005398 <prvInitialiseTaskLists+0x64>)
 8005382:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005384:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <prvInitialiseTaskLists+0x7c>)
 8005386:	4a05      	ldr	r2, [pc, #20]	; (800539c <prvInitialiseTaskLists+0x68>)
 8005388:	601a      	str	r2, [r3, #0]
}
 800538a:	bf00      	nop
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	20000174 	.word	0x20000174
 8005398:	200001b0 	.word	0x200001b0
 800539c:	200001c4 	.word	0x200001c4
 80053a0:	200001e0 	.word	0x200001e0
 80053a4:	200001f4 	.word	0x200001f4
 80053a8:	2000020c 	.word	0x2000020c
 80053ac:	200001d8 	.word	0x200001d8
 80053b0:	200001dc 	.word	0x200001dc

080053b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053ba:	e019      	b.n	80053f0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80053bc:	f000 fa80 	bl	80058c0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053c0:	4b10      	ldr	r3, [pc, #64]	; (8005404 <prvCheckTasksWaitingTermination+0x50>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe fc47 	bl	8003c60 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80053d2:	4b0d      	ldr	r3, [pc, #52]	; (8005408 <prvCheckTasksWaitingTermination+0x54>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	3b01      	subs	r3, #1
 80053d8:	4a0b      	ldr	r2, [pc, #44]	; (8005408 <prvCheckTasksWaitingTermination+0x54>)
 80053da:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <prvCheckTasksWaitingTermination+0x58>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	4a0a      	ldr	r2, [pc, #40]	; (800540c <prvCheckTasksWaitingTermination+0x58>)
 80053e4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80053e6:	f000 fa9b 	bl	8005920 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f810 	bl	8005410 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80053f0:	4b06      	ldr	r3, [pc, #24]	; (800540c <prvCheckTasksWaitingTermination+0x58>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1e1      	bne.n	80053bc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80053f8:	bf00      	nop
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	200001f4 	.word	0x200001f4
 8005408:	20000220 	.word	0x20000220
 800540c:	20000208 	.word	0x20000208

08005410 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fc35 	bl	8005c8c <vPortFree>
                vPortFree( pxTCB );
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 fc32 	bl	8005c8c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005428:	bf00      	nop
 800542a:	3708      	adds	r7, #8
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005434:	4b09      	ldr	r3, [pc, #36]	; (800545c <prvResetNextTaskUnblockTime+0x2c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800543e:	4b08      	ldr	r3, [pc, #32]	; (8005460 <prvResetNextTaskUnblockTime+0x30>)
 8005440:	f04f 32ff 	mov.w	r2, #4294967295
 8005444:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005446:	e005      	b.n	8005454 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005448:	4b04      	ldr	r3, [pc, #16]	; (800545c <prvResetNextTaskUnblockTime+0x2c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a03      	ldr	r2, [pc, #12]	; (8005460 <prvResetNextTaskUnblockTime+0x30>)
 8005452:	6013      	str	r3, [r2, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr
 800545c:	200001d8 	.word	0x200001d8
 8005460:	20000240 	.word	0x20000240

08005464 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005464:	b580      	push	{r7, lr}
 8005466:	b088      	sub	sp, #32
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8005470:	2300      	movs	r3, #0
 8005472:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	f000 8095 	beq.w	80055a6 <xTaskPriorityDisinherit+0x142>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800547c:	4b4c      	ldr	r3, [pc, #304]	; (80055b0 <xTaskPriorityDisinherit+0x14c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69ba      	ldr	r2, [r7, #24]
 8005482:	429a      	cmp	r2, r3
 8005484:	d00a      	beq.n	800549c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	613b      	str	r3, [r7, #16]
    }
 8005498:	bf00      	nop
 800549a:	e7fe      	b.n	800549a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10a      	bne.n	80054ba <xTaskPriorityDisinherit+0x56>
        __asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	60fb      	str	r3, [r7, #12]
    }
 80054b6:	bf00      	nop
 80054b8:	e7fe      	b.n	80054b8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054be:	1e5a      	subs	r2, r3, #1
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d06a      	beq.n	80055a6 <xTaskPriorityDisinherit+0x142>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d166      	bne.n	80055a6 <xTaskPriorityDisinherit+0x142>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	3304      	adds	r3, #4
 80054dc:	4618      	mov	r0, r3
 80054de:	f7fe fbbf 	bl	8003c60 <uxListRemove>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ec:	2201      	movs	r2, #1
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	43da      	mvns	r2, r3
 80054f4:	4b2f      	ldr	r3, [pc, #188]	; (80055b4 <xTaskPriorityDisinherit+0x150>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4013      	ands	r3, r2
 80054fa:	4a2e      	ldr	r2, [pc, #184]	; (80055b4 <xTaskPriorityDisinherit+0x150>)
 80054fc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4619      	mov	r1, r3
 8005502:	204a      	movs	r0, #74	; 0x4a
 8005504:	f001 fb04 	bl	8006b10 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005514:	f1c3 0203 	rsb	r2, r3, #3
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	4618      	mov	r0, r3
 8005520:	f002 f876 	bl	8007610 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	2201      	movs	r2, #1
 800552a:	409a      	lsls	r2, r3
 800552c:	4b21      	ldr	r3, [pc, #132]	; (80055b4 <xTaskPriorityDisinherit+0x150>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4313      	orrs	r3, r2
 8005532:	4a20      	ldr	r2, [pc, #128]	; (80055b4 <xTaskPriorityDisinherit+0x150>)
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	491f      	ldr	r1, [pc, #124]	; (80055b8 <xTaskPriorityDisinherit+0x154>)
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009b      	lsls	r3, r3, #2
 8005544:	440b      	add	r3, r1
 8005546:	3304      	adds	r3, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	697a      	ldr	r2, [r7, #20]
 8005550:	609a      	str	r2, [r3, #8]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	689a      	ldr	r2, [r3, #8]
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	60da      	str	r2, [r3, #12]
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	69ba      	ldr	r2, [r7, #24]
 8005560:	3204      	adds	r2, #4
 8005562:	605a      	str	r2, [r3, #4]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	1d1a      	adds	r2, r3, #4
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	609a      	str	r2, [r3, #8]
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	4613      	mov	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	009b      	lsls	r3, r3, #2
 8005578:	4a0f      	ldr	r2, [pc, #60]	; (80055b8 <xTaskPriorityDisinherit+0x154>)
 800557a:	441a      	add	r2, r3
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	615a      	str	r2, [r3, #20]
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005584:	490c      	ldr	r1, [pc, #48]	; (80055b8 <xTaskPriorityDisinherit+0x154>)
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	1c59      	adds	r1, r3, #1
 8005594:	4808      	ldr	r0, [pc, #32]	; (80055b8 <xTaskPriorityDisinherit+0x154>)
 8005596:	4613      	mov	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	4413      	add	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4403      	add	r3, r0
 80055a0:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80055a2:	2301      	movs	r3, #1
 80055a4:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80055a6:	69fb      	ldr	r3, [r7, #28]
    }
 80055a8:	4618      	mov	r0, r3
 80055aa:	3720      	adds	r7, #32
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	20000170 	.word	0x20000170
 80055b4:	20000228 	.word	0x20000228
 80055b8:	20000174 	.word	0x20000174

080055bc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80055c6:	4b3c      	ldr	r3, [pc, #240]	; (80056b8 <prvAddCurrentTaskToDelayedList+0xfc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055cc:	4b3b      	ldr	r3, [pc, #236]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	3304      	adds	r3, #4
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fe fb44 	bl	8003c60 <uxListRemove>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d10b      	bne.n	80055f6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055de:	4b37      	ldr	r3, [pc, #220]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e4:	2201      	movs	r2, #1
 80055e6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ea:	43da      	mvns	r2, r3
 80055ec:	4b34      	ldr	r3, [pc, #208]	; (80056c0 <prvAddCurrentTaskToDelayedList+0x104>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4013      	ands	r3, r2
 80055f2:	4a33      	ldr	r2, [pc, #204]	; (80056c0 <prvAddCurrentTaskToDelayedList+0x104>)
 80055f4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d124      	bne.n	8005648 <prvAddCurrentTaskToDelayedList+0x8c>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d021      	beq.n	8005648 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005604:	4b2f      	ldr	r3, [pc, #188]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x108>)
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]
 800560a:	4b2c      	ldr	r3, [pc, #176]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	693a      	ldr	r2, [r7, #16]
 8005610:	609a      	str	r2, [r3, #8]
 8005612:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	6892      	ldr	r2, [r2, #8]
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	4b27      	ldr	r3, [pc, #156]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	3204      	adds	r2, #4
 8005626:	605a      	str	r2, [r3, #4]
 8005628:	4b24      	ldr	r3, [pc, #144]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	1d1a      	adds	r2, r3, #4
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	609a      	str	r2, [r3, #8]
 8005632:	4b22      	ldr	r3, [pc, #136]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a23      	ldr	r2, [pc, #140]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x108>)
 8005638:	615a      	str	r2, [r3, #20]
 800563a:	4b22      	ldr	r3, [pc, #136]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x108>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	4a20      	ldr	r2, [pc, #128]	; (80056c4 <prvAddCurrentTaskToDelayedList+0x108>)
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005646:	e032      	b.n	80056ae <prvAddCurrentTaskToDelayedList+0xf2>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005648:	697a      	ldr	r2, [r7, #20]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4413      	add	r3, r2
 800564e:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005650:	4b1a      	ldr	r3, [pc, #104]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	429a      	cmp	r2, r3
 800565e:	d20f      	bcs.n	8005680 <prvAddCurrentTaskToDelayedList+0xc4>
                	traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST(); //Added due to SEGGER Patch
 8005660:	4b16      	ldr	r3, [pc, #88]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2104      	movs	r1, #4
 8005666:	4618      	mov	r0, r3
 8005668:	f002 f814 	bl	8007694 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800566c:	4b16      	ldr	r3, [pc, #88]	; (80056c8 <prvAddCurrentTaskToDelayedList+0x10c>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	4b12      	ldr	r3, [pc, #72]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	3304      	adds	r3, #4
 8005676:	4619      	mov	r1, r3
 8005678:	4610      	mov	r0, r2
 800567a:	f7fe fab9 	bl	8003bf0 <vListInsert>
}
 800567e:	e016      	b.n	80056ae <prvAddCurrentTaskToDelayedList+0xf2>
                	traceMOVED_TASK_TO_DELAYED_LIST();          //Added due to SEGGER Patch
 8005680:	4b0e      	ldr	r3, [pc, #56]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2104      	movs	r1, #4
 8005686:	4618      	mov	r0, r3
 8005688:	f002 f804 	bl	8007694 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800568c:	4b0f      	ldr	r3, [pc, #60]	; (80056cc <prvAddCurrentTaskToDelayedList+0x110>)
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	4b0a      	ldr	r3, [pc, #40]	; (80056bc <prvAddCurrentTaskToDelayedList+0x100>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3304      	adds	r3, #4
 8005696:	4619      	mov	r1, r3
 8005698:	4610      	mov	r0, r2
 800569a:	f7fe faa9 	bl	8003bf0 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <prvAddCurrentTaskToDelayedList+0x114>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d202      	bcs.n	80056ae <prvAddCurrentTaskToDelayedList+0xf2>
                        xNextTaskUnblockTime = xTimeToWake;
 80056a8:	4a09      	ldr	r2, [pc, #36]	; (80056d0 <prvAddCurrentTaskToDelayedList+0x114>)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6013      	str	r3, [r2, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3718      	adds	r7, #24
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20000224 	.word	0x20000224
 80056bc:	20000170 	.word	0x20000170
 80056c0:	20000228 	.word	0x20000228
 80056c4:	2000020c 	.word	0x2000020c
 80056c8:	200001dc 	.word	0x200001dc
 80056cc:	200001d8 	.word	0x200001d8
 80056d0:	20000240 	.word	0x20000240

080056d4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80056d4:	b480      	push	{r7}
 80056d6:	b085      	sub	sp, #20
 80056d8:	af00      	add	r7, sp, #0
 80056da:	60f8      	str	r0, [r7, #12]
 80056dc:	60b9      	str	r1, [r7, #8]
 80056de:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3b04      	subs	r3, #4
 80056e4:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80056ec:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	3b04      	subs	r3, #4
 80056f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f023 0201 	bic.w	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3b04      	subs	r3, #4
 8005702:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <pxPortInitialiseStack+0x54>)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	3b14      	subs	r3, #20
 800570e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	3b20      	subs	r3, #32
 800571a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800571c:	68fb      	ldr	r3, [r7, #12]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr
 8005728:	0800572d 	.word	0x0800572d

0800572c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8005732:	2300      	movs	r3, #0
 8005734:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005736:	4b12      	ldr	r3, [pc, #72]	; (8005780 <prvTaskExitError+0x54>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573e:	d00a      	beq.n	8005756 <prvTaskExitError+0x2a>
        __asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60fb      	str	r3, [r7, #12]
    }
 8005752:	bf00      	nop
 8005754:	e7fe      	b.n	8005754 <prvTaskExitError+0x28>
        __asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	60bb      	str	r3, [r7, #8]
    }
 8005768:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800576a:	bf00      	nop
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d0fc      	beq.n	800576c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005772:	bf00      	nop
 8005774:	bf00      	nop
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	bc80      	pop	{r7}
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20000030 	.word	0x20000030
	...

08005790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005790:	4b07      	ldr	r3, [pc, #28]	; (80057b0 <pxCurrentTCBConst2>)
 8005792:	6819      	ldr	r1, [r3, #0]
 8005794:	6808      	ldr	r0, [r1, #0]
 8005796:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800579a:	f380 8809 	msr	PSP, r0
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f04f 0000 	mov.w	r0, #0
 80057a6:	f380 8811 	msr	BASEPRI, r0
 80057aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80057ae:	4770      	bx	lr

080057b0 <pxCurrentTCBConst2>:
 80057b0:	20000170 	.word	0x20000170
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80057b4:	bf00      	nop
 80057b6:	bf00      	nop

080057b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80057b8:	4806      	ldr	r0, [pc, #24]	; (80057d4 <prvPortStartFirstTask+0x1c>)
 80057ba:	6800      	ldr	r0, [r0, #0]
 80057bc:	6800      	ldr	r0, [r0, #0]
 80057be:	f380 8808 	msr	MSP, r0
 80057c2:	b662      	cpsie	i
 80057c4:	b661      	cpsie	f
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	df00      	svc	0
 80057d0:	bf00      	nop
 80057d2:	0000      	.short	0x0000
 80057d4:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop

080057dc <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80057e2:	4b32      	ldr	r3, [pc, #200]	; (80058ac <xPortStartScheduler+0xd0>)
 80057e4:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	22ff      	movs	r2, #255	; 0xff
 80057f2:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80057fc:	78fb      	ldrb	r3, [r7, #3]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005804:	b2da      	uxtb	r2, r3
 8005806:	4b2a      	ldr	r3, [pc, #168]	; (80058b0 <xPortStartScheduler+0xd4>)
 8005808:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800580a:	4b2a      	ldr	r3, [pc, #168]	; (80058b4 <xPortStartScheduler+0xd8>)
 800580c:	2207      	movs	r2, #7
 800580e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005810:	e009      	b.n	8005826 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8005812:	4b28      	ldr	r3, [pc, #160]	; (80058b4 <xPortStartScheduler+0xd8>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3b01      	subs	r3, #1
 8005818:	4a26      	ldr	r2, [pc, #152]	; (80058b4 <xPortStartScheduler+0xd8>)
 800581a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800581c:	78fb      	ldrb	r3, [r7, #3]
 800581e:	b2db      	uxtb	r3, r3
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	b2db      	uxtb	r3, r3
 8005824:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005826:	78fb      	ldrb	r3, [r7, #3]
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582e:	2b80      	cmp	r3, #128	; 0x80
 8005830:	d0ef      	beq.n	8005812 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005832:	4b20      	ldr	r3, [pc, #128]	; (80058b4 <xPortStartScheduler+0xd8>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f1c3 0307 	rsb	r3, r3, #7
 800583a:	2b04      	cmp	r3, #4
 800583c:	d00a      	beq.n	8005854 <xPortStartScheduler+0x78>
        __asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	60bb      	str	r3, [r7, #8]
    }
 8005850:	bf00      	nop
 8005852:	e7fe      	b.n	8005852 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005854:	4b17      	ldr	r3, [pc, #92]	; (80058b4 <xPortStartScheduler+0xd8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	021b      	lsls	r3, r3, #8
 800585a:	4a16      	ldr	r2, [pc, #88]	; (80058b4 <xPortStartScheduler+0xd8>)
 800585c:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800585e:	4b15      	ldr	r3, [pc, #84]	; (80058b4 <xPortStartScheduler+0xd8>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005866:	4a13      	ldr	r2, [pc, #76]	; (80058b4 <xPortStartScheduler+0xd8>)
 8005868:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	b2da      	uxtb	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005872:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <xPortStartScheduler+0xdc>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a10      	ldr	r2, [pc, #64]	; (80058b8 <xPortStartScheduler+0xdc>)
 8005878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800587c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800587e:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <xPortStartScheduler+0xdc>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a0d      	ldr	r2, [pc, #52]	; (80058b8 <xPortStartScheduler+0xdc>)
 8005884:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005888:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800588a:	f000 f8bf 	bl	8005a0c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800588e:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <xPortStartScheduler+0xe0>)
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005894:	f7ff ff90 	bl	80057b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005898:	f7ff fb4c 	bl	8004f34 <vTaskSwitchContext>
    prvTaskExitError();
 800589c:	f7ff ff46 	bl	800572c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3710      	adds	r7, #16
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	e000e400 	.word	0xe000e400
 80058b0:	2000024c 	.word	0x2000024c
 80058b4:	20000250 	.word	0x20000250
 80058b8:	e000ed20 	.word	0xe000ed20
 80058bc:	20000030 	.word	0x20000030

080058c0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
        __asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	607b      	str	r3, [r7, #4]
    }
 80058d8:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80058da:	4b0f      	ldr	r3, [pc, #60]	; (8005918 <vPortEnterCritical+0x58>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3301      	adds	r3, #1
 80058e0:	4a0d      	ldr	r2, [pc, #52]	; (8005918 <vPortEnterCritical+0x58>)
 80058e2:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80058e4:	4b0c      	ldr	r3, [pc, #48]	; (8005918 <vPortEnterCritical+0x58>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d10f      	bne.n	800590c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <vPortEnterCritical+0x5c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <vPortEnterCritical+0x4c>
        __asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	603b      	str	r3, [r7, #0]
    }
 8005908:	bf00      	nop
 800590a:	e7fe      	b.n	800590a <vPortEnterCritical+0x4a>
    }
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	bc80      	pop	{r7}
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	20000030 	.word	0x20000030
 800591c:	e000ed04 	.word	0xe000ed04

08005920 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005926:	4b11      	ldr	r3, [pc, #68]	; (800596c <vPortExitCritical+0x4c>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <vPortExitCritical+0x24>
        __asm volatile
 800592e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005932:	f383 8811 	msr	BASEPRI, r3
 8005936:	f3bf 8f6f 	isb	sy
 800593a:	f3bf 8f4f 	dsb	sy
 800593e:	607b      	str	r3, [r7, #4]
    }
 8005940:	bf00      	nop
 8005942:	e7fe      	b.n	8005942 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <vPortExitCritical+0x4c>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3b01      	subs	r3, #1
 800594a:	4a08      	ldr	r2, [pc, #32]	; (800596c <vPortExitCritical+0x4c>)
 800594c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800594e:	4b07      	ldr	r3, [pc, #28]	; (800596c <vPortExitCritical+0x4c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d105      	bne.n	8005962 <vPortExitCritical+0x42>
 8005956:	2300      	movs	r3, #0
 8005958:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005960:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	bc80      	pop	{r7}
 800596a:	4770      	bx	lr
 800596c:	20000030 	.word	0x20000030

08005970 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005970:	f3ef 8009 	mrs	r0, PSP
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <pxCurrentTCBConst>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005980:	6010      	str	r0, [r2, #0]
 8005982:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005986:	f04f 0050 	mov.w	r0, #80	; 0x50
 800598a:	f380 8811 	msr	BASEPRI, r0
 800598e:	f7ff fad1 	bl	8004f34 <vTaskSwitchContext>
 8005992:	f04f 0000 	mov.w	r0, #0
 8005996:	f380 8811 	msr	BASEPRI, r0
 800599a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800599e:	6819      	ldr	r1, [r3, #0]
 80059a0:	6808      	ldr	r0, [r1, #0]
 80059a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80059a6:	f380 8809 	msr	PSP, r0
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	4770      	bx	lr

080059b0 <pxCurrentTCBConst>:
 80059b0:	20000170 	.word	0x20000170
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop

080059b8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
        __asm volatile
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	607b      	str	r3, [r7, #4]
    }
 80059d0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();                     //Added due to SEGGER Patch
 80059d2:	f001 fd03 	bl	80073dc <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80059d6:	f7ff f9b5 	bl	8004d44 <xTaskIncrementTick>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d006      	beq.n	80059ee <SysTick_Handler+0x36>
        {
        	traceISR_EXIT_TO_SCHEDULER(); //Added due to SEGGER Patch
 80059e0:	f001 fd5a 	bl	8007498 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80059e4:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <SysTick_Handler+0x50>)
 80059e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	e001      	b.n	80059f2 <SysTick_Handler+0x3a>
        }
        else                  //Added due to SEGGER Patch
        {                     //Added due to SEGGER Patch
        	traceISR_EXIT();  //Added due to SEGGER Patch
 80059ee:	f001 fd37 	bl	8007460 <SEGGER_SYSVIEW_RecordExitISR>
 80059f2:	2300      	movs	r3, #0
 80059f4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	f383 8811 	msr	BASEPRI, r3
    }
 80059fc:	bf00      	nop
        }                     //Added due to SEGGER Patch
    }
    portENABLE_INTERRUPTS();
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	e000ed04 	.word	0xe000ed04

08005a0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005a10:	4b0a      	ldr	r3, [pc, #40]	; (8005a3c <vPortSetupTimerInterrupt+0x30>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <vPortSetupTimerInterrupt+0x34>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <vPortSetupTimerInterrupt+0x38>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a09      	ldr	r2, [pc, #36]	; (8005a48 <vPortSetupTimerInterrupt+0x3c>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	095b      	lsrs	r3, r3, #5
 8005a28:	4a08      	ldr	r2, [pc, #32]	; (8005a4c <vPortSetupTimerInterrupt+0x40>)
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005a2e:	4b03      	ldr	r3, [pc, #12]	; (8005a3c <vPortSetupTimerInterrupt+0x30>)
 8005a30:	2207      	movs	r2, #7
 8005a32:	601a      	str	r2, [r3, #0]
}
 8005a34:	bf00      	nop
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bc80      	pop	{r7}
 8005a3a:	4770      	bx	lr
 8005a3c:	e000e010 	.word	0xe000e010
 8005a40:	e000e018 	.word	0xe000e018
 8005a44:	20000020 	.word	0x20000020
 8005a48:	10624dd3 	.word	0x10624dd3
 8005a4c:	e000e014 	.word	0xe000e014

08005a50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005a50:	b480      	push	{r7}
 8005a52:	b085      	sub	sp, #20
 8005a54:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005a56:	f3ef 8305 	mrs	r3, IPSR
 8005a5a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2b0f      	cmp	r3, #15
 8005a60:	d914      	bls.n	8005a8c <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005a62:	4a16      	ldr	r2, [pc, #88]	; (8005abc <vPortValidateInterruptPriority+0x6c>)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	4413      	add	r3, r2
 8005a68:	781b      	ldrb	r3, [r3, #0]
 8005a6a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005a6c:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <vPortValidateInterruptPriority+0x70>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	7afa      	ldrb	r2, [r7, #11]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d20a      	bcs.n	8005a8c <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	607b      	str	r3, [r7, #4]
    }
 8005a88:	bf00      	nop
 8005a8a:	e7fe      	b.n	8005a8a <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005a8c:	4b0d      	ldr	r3, [pc, #52]	; (8005ac4 <vPortValidateInterruptPriority+0x74>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <vPortValidateInterruptPriority+0x78>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d90a      	bls.n	8005ab2 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	603b      	str	r3, [r7, #0]
    }
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <vPortValidateInterruptPriority+0x60>
    }
 8005ab2:	bf00      	nop
 8005ab4:	3714      	adds	r7, #20
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bc80      	pop	{r7}
 8005aba:	4770      	bx	lr
 8005abc:	e000e3f0 	.word	0xe000e3f0
 8005ac0:	2000024c 	.word	0x2000024c
 8005ac4:	e000ed0c 	.word	0xe000ed0c
 8005ac8:	20000250 	.word	0x20000250

08005acc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08a      	sub	sp, #40	; 0x28
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005ad8:	f7ff f822 	bl	8004b20 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005adc:	4b65      	ldr	r3, [pc, #404]	; (8005c74 <pvPortMalloc+0x1a8>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d101      	bne.n	8005ae8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005ae4:	f000 f934 	bl	8005d50 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ae8:	4b63      	ldr	r3, [pc, #396]	; (8005c78 <pvPortMalloc+0x1ac>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	4013      	ands	r3, r2
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	f040 80a7 	bne.w	8005c44 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d02d      	beq.n	8005b58 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005afc:	2208      	movs	r2, #8
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d227      	bcs.n	8005b58 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8005b08:	2208      	movs	r2, #8
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f003 0307 	and.w	r3, r3, #7
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d021      	beq.n	8005b5e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f023 0307 	bic.w	r3, r3, #7
 8005b20:	3308      	adds	r3, #8
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d214      	bcs.n	8005b52 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f023 0307 	bic.w	r3, r3, #7
 8005b2e:	3308      	adds	r3, #8
 8005b30:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f003 0307 	and.w	r3, r3, #7
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d010      	beq.n	8005b5e <pvPortMalloc+0x92>
        __asm volatile
 8005b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b40:	f383 8811 	msr	BASEPRI, r3
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	f3bf 8f4f 	dsb	sy
 8005b4c:	617b      	str	r3, [r7, #20]
    }
 8005b4e:	bf00      	nop
 8005b50:	e7fe      	b.n	8005b50 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005b52:	2300      	movs	r3, #0
 8005b54:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b56:	e002      	b.n	8005b5e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	607b      	str	r3, [r7, #4]
 8005b5c:	e000      	b.n	8005b60 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005b5e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d06e      	beq.n	8005c44 <pvPortMalloc+0x178>
 8005b66:	4b45      	ldr	r3, [pc, #276]	; (8005c7c <pvPortMalloc+0x1b0>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d869      	bhi.n	8005c44 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005b70:	4b43      	ldr	r3, [pc, #268]	; (8005c80 <pvPortMalloc+0x1b4>)
 8005b72:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005b74:	4b42      	ldr	r3, [pc, #264]	; (8005c80 <pvPortMalloc+0x1b4>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b7a:	e004      	b.n	8005b86 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d903      	bls.n	8005b98 <pvPortMalloc+0xcc>
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1f1      	bne.n	8005b7c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005b98:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <pvPortMalloc+0x1a8>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d050      	beq.n	8005c44 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2208      	movs	r2, #8
 8005ba8:	4413      	add	r3, r2
 8005baa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	6a3b      	ldr	r3, [r7, #32]
 8005bb2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d91f      	bls.n	8005c04 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4413      	add	r3, r2
 8005bca:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	f003 0307 	and.w	r3, r3, #7
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <pvPortMalloc+0x120>
        __asm volatile
 8005bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bda:	f383 8811 	msr	BASEPRI, r3
 8005bde:	f3bf 8f6f 	isb	sy
 8005be2:	f3bf 8f4f 	dsb	sy
 8005be6:	613b      	str	r3, [r7, #16]
    }
 8005be8:	bf00      	nop
 8005bea:	e7fe      	b.n	8005bea <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	685a      	ldr	r2, [r3, #4]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	1ad2      	subs	r2, r2, r3
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005bfe:	69b8      	ldr	r0, [r7, #24]
 8005c00:	f000 f908 	bl	8005e14 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005c04:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <pvPortMalloc+0x1b0>)
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <pvPortMalloc+0x1b0>)
 8005c10:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005c12:	4b1a      	ldr	r3, [pc, #104]	; (8005c7c <pvPortMalloc+0x1b0>)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <pvPortMalloc+0x1b8>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d203      	bcs.n	8005c26 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005c1e:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <pvPortMalloc+0x1b0>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <pvPortMalloc+0x1b8>)
 8005c24:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	4b13      	ldr	r3, [pc, #76]	; (8005c78 <pvPortMalloc+0x1ac>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c32:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	2200      	movs	r2, #0
 8005c38:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005c3a:	4b13      	ldr	r3, [pc, #76]	; (8005c88 <pvPortMalloc+0x1bc>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	4a11      	ldr	r2, [pc, #68]	; (8005c88 <pvPortMalloc+0x1bc>)
 8005c42:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005c44:	f7fe ff7a 	bl	8004b3c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <pvPortMalloc+0x19c>
        __asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	60fb      	str	r3, [r7, #12]
    }
 8005c64:	bf00      	nop
 8005c66:	e7fe      	b.n	8005c66 <pvPortMalloc+0x19a>
    return pvReturn;
 8005c68:	69fb      	ldr	r3, [r7, #28]
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3728      	adds	r7, #40	; 0x28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}
 8005c72:	bf00      	nop
 8005c74:	20001a5c 	.word	0x20001a5c
 8005c78:	20001a70 	.word	0x20001a70
 8005c7c:	20001a60 	.word	0x20001a60
 8005c80:	20001a54 	.word	0x20001a54
 8005c84:	20001a64 	.word	0x20001a64
 8005c88:	20001a68 	.word	0x20001a68

08005c8c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b086      	sub	sp, #24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d04d      	beq.n	8005d3a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005c9e:	2308      	movs	r3, #8
 8005ca0:	425b      	negs	r3, r3
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	685a      	ldr	r2, [r3, #4]
 8005cb0:	4b24      	ldr	r3, [pc, #144]	; (8005d44 <vPortFree+0xb8>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10a      	bne.n	8005cd0 <vPortFree+0x44>
        __asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	60fb      	str	r3, [r7, #12]
    }
 8005ccc:	bf00      	nop
 8005cce:	e7fe      	b.n	8005cce <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d00a      	beq.n	8005cee <vPortFree+0x62>
        __asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	60bb      	str	r3, [r7, #8]
    }
 8005cea:	bf00      	nop
 8005cec:	e7fe      	b.n	8005cec <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	685a      	ldr	r2, [r3, #4]
 8005cf2:	4b14      	ldr	r3, [pc, #80]	; (8005d44 <vPortFree+0xb8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d01e      	beq.n	8005d3a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d11a      	bne.n	8005d3a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <vPortFree+0xb8>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	43db      	mvns	r3, r3
 8005d0e:	401a      	ands	r2, r3
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005d14:	f7fe ff04 	bl	8004b20 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <vPortFree+0xbc>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4413      	add	r3, r2
 8005d22:	4a09      	ldr	r2, [pc, #36]	; (8005d48 <vPortFree+0xbc>)
 8005d24:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005d26:	6938      	ldr	r0, [r7, #16]
 8005d28:	f000 f874 	bl	8005e14 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005d2c:	4b07      	ldr	r3, [pc, #28]	; (8005d4c <vPortFree+0xc0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3301      	adds	r3, #1
 8005d32:	4a06      	ldr	r2, [pc, #24]	; (8005d4c <vPortFree+0xc0>)
 8005d34:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005d36:	f7fe ff01 	bl	8004b3c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005d3a:	bf00      	nop
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	20001a70 	.word	0x20001a70
 8005d48:	20001a60 	.word	0x20001a60
 8005d4c:	20001a6c 	.word	0x20001a6c

08005d50 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005d56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005d5a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005d5c:	4b27      	ldr	r3, [pc, #156]	; (8005dfc <prvHeapInit+0xac>)
 8005d5e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00c      	beq.n	8005d84 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	3307      	adds	r3, #7
 8005d6e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0307 	bic.w	r3, r3, #7
 8005d76:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	4a1f      	ldr	r2, [pc, #124]	; (8005dfc <prvHeapInit+0xac>)
 8005d80:	4413      	add	r3, r2
 8005d82:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005d88:	4a1d      	ldr	r2, [pc, #116]	; (8005e00 <prvHeapInit+0xb0>)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005d8e:	4b1c      	ldr	r3, [pc, #112]	; (8005e00 <prvHeapInit+0xb0>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68ba      	ldr	r2, [r7, #8]
 8005d98:	4413      	add	r3, r2
 8005d9a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	1a9b      	subs	r3, r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 0307 	bic.w	r3, r3, #7
 8005daa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <prvHeapInit+0xb4>)
 8005db0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005db2:	4b14      	ldr	r3, [pc, #80]	; (8005e04 <prvHeapInit+0xb4>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2200      	movs	r2, #0
 8005db8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005dba:	4b12      	ldr	r3, [pc, #72]	; (8005e04 <prvHeapInit+0xb4>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	1ad2      	subs	r2, r2, r3
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005dd0:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <prvHeapInit+0xb4>)
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	4a0a      	ldr	r2, [pc, #40]	; (8005e08 <prvHeapInit+0xb8>)
 8005dde:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <prvHeapInit+0xbc>)
 8005de6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005de8:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <prvHeapInit+0xc0>)
 8005dea:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005dee:	601a      	str	r2, [r3, #0]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bc80      	pop	{r7}
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000254 	.word	0x20000254
 8005e00:	20001a54 	.word	0x20001a54
 8005e04:	20001a5c 	.word	0x20001a5c
 8005e08:	20001a64 	.word	0x20001a64
 8005e0c:	20001a60 	.word	0x20001a60
 8005e10:	20001a70 	.word	0x20001a70

08005e14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005e1c:	4b27      	ldr	r3, [pc, #156]	; (8005ebc <prvInsertBlockIntoFreeList+0xa8>)
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	e002      	b.n	8005e28 <prvInsertBlockIntoFreeList+0x14>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d8f7      	bhi.n	8005e22 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d108      	bne.n	8005e56 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685a      	ldr	r2, [r3, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	441a      	add	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	441a      	add	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d118      	bne.n	8005e9c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	4b14      	ldr	r3, [pc, #80]	; (8005ec0 <prvInsertBlockIntoFreeList+0xac>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d00d      	beq.n	8005e92 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	685a      	ldr	r2, [r3, #4]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	441a      	add	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	e008      	b.n	8005ea4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005e92:	4b0b      	ldr	r3, [pc, #44]	; (8005ec0 <prvInsertBlockIntoFreeList+0xac>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e003      	b.n	8005ea4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d002      	beq.n	8005eb2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005eb2:	bf00      	nop
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bc80      	pop	{r7}
 8005eba:	4770      	bx	lr
 8005ebc:	20001a54 	.word	0x20001a54
 8005ec0:	20001a5c 	.word	0x20001a5c

08005ec4 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8005ec8:	4803      	ldr	r0, [pc, #12]	; (8005ed8 <_cbSendSystemDesc+0x14>)
 8005eca:	f001 fa31 	bl	8007330 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8005ece:	4803      	ldr	r0, [pc, #12]	; (8005edc <_cbSendSystemDesc+0x18>)
 8005ed0:	f001 fa2e 	bl	8007330 <SEGGER_SYSVIEW_SendSysDesc>
}
 8005ed4:	bf00      	nop
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	08008da0 	.word	0x08008da0
 8005edc:	08008dd4 	.word	0x08008dd4

08005ee0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0

#if ENABLE_DWT_CYCCNT
  //
  // If no debugger is connected, the DWT must be enabled by the application
  //
  if ((DEMCR & TRACEENA_BIT) == 0)
 8005ee4:	4b18      	ldr	r3, [pc, #96]	; (8005f48 <SEGGER_SYSVIEW_Conf+0x68>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d105      	bne.n	8005efc <SEGGER_SYSVIEW_Conf+0x1c>
  {
	  DEMCR |= TRACEENA_BIT;
 8005ef0:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <SEGGER_SYSVIEW_Conf+0x68>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a14      	ldr	r2, [pc, #80]	; (8005f48 <SEGGER_SYSVIEW_Conf+0x68>)
 8005ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005efa:	6013      	str	r3, [r2, #0]
  //
  // The cycle counter must be activated in order
  // to use time related functions.
  //

  DWT_CTRL |= CYCCNTENA_BIT;
 8005efc:	4b13      	ldr	r3, [pc, #76]	; (8005f4c <SEGGER_SYSVIEW_Conf+0x6c>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a12      	ldr	r2, [pc, #72]	; (8005f4c <SEGGER_SYSVIEW_Conf+0x6c>)
 8005f02:	f043 0301 	orr.w	r3, r3, #1
 8005f06:	6013      	str	r3, [r2, #0]
  if ((DWT_CTRL & NOCYCCNT_BIT) == 0)
 8005f08:	4b10      	ldr	r3, [pc, #64]	; (8005f4c <SEGGER_SYSVIEW_Conf+0x6c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <SEGGER_SYSVIEW_Conf+0x4c>
  {
	  // Cycle counter supported?
	  if ((DWT_CTRL & CYCCNTENA_BIT) == 0)
 8005f14:	4b0d      	ldr	r3, [pc, #52]	; (8005f4c <SEGGER_SYSVIEW_Conf+0x6c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d105      	bne.n	8005f2c <SEGGER_SYSVIEW_Conf+0x4c>
	  {
		  // Cycle counter not enabled?
		  DWT_CTRL |= CYCCNTENA_BIT; // Enable Cycle counter
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <SEGGER_SYSVIEW_Conf+0x6c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <SEGGER_SYSVIEW_Conf+0x6c>)
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	6013      	str	r3, [r2, #0]
	  }
  }
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ,
 8005f2c:	4b08      	ldr	r3, [pc, #32]	; (8005f50 <SEGGER_SYSVIEW_Conf+0x70>)
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	4b07      	ldr	r3, [pc, #28]	; (8005f50 <SEGGER_SYSVIEW_Conf+0x70>)
 8005f32:	6819      	ldr	r1, [r3, #0]
 8005f34:	4b07      	ldr	r3, [pc, #28]	; (8005f54 <SEGGER_SYSVIEW_Conf+0x74>)
 8005f36:	4a08      	ldr	r2, [pc, #32]	; (8005f58 <SEGGER_SYSVIEW_Conf+0x78>)
 8005f38:	f000 fd7a 	bl	8006a30 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8005f3c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8005f40:	f000 fdba 	bl	8006ab8 <SEGGER_SYSVIEW_SetRAMBase>
#if SEGGER_SYSVIEW_START_ON_INIT
  SEGGER_SYSVIEW_Start();
  // Start recording to catch system initialization.
#endif
}
 8005f44:	bf00      	nop
 8005f46:	bd80      	pop	{r7, pc}
 8005f48:	e000edfc 	.word	0xe000edfc
 8005f4c:	e0001000 	.word	0xe0001000
 8005f50:	20000020 	.word	0x20000020
 8005f54:	08005ec5 	.word	0x08005ec5
 8005f58:	08008eb8 	.word	0x08008eb8

08005f5c <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005f62:	4b25      	ldr	r3, [pc, #148]	; (8005ff8 <_DoInit+0x9c>)
 8005f64:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8005f66:	22a8      	movs	r2, #168	; 0xa8
 8005f68:	2100      	movs	r1, #0
 8005f6a:	6838      	ldr	r0, [r7, #0]
 8005f6c:	f002 f88a 	bl	8008084 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2203      	movs	r2, #3
 8005f74:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	2203      	movs	r2, #3
 8005f7a:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	4a1f      	ldr	r2, [pc, #124]	; (8005ffc <_DoInit+0xa0>)
 8005f80:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	4a1e      	ldr	r2, [pc, #120]	; (8006000 <_DoInit+0xa4>)
 8005f86:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f8e:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	2200      	movs	r2, #0
 8005f94:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	4a15      	ldr	r2, [pc, #84]	; (8005ffc <_DoInit+0xa0>)
 8005fa6:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	4a16      	ldr	r2, [pc, #88]	; (8006004 <_DoInit+0xa8>)
 8005fac:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	675a      	str	r2, [r3, #116]	; 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	607b      	str	r3, [r7, #4]
 8005fca:	e00c      	b.n	8005fe6 <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f1c3 030f 	rsb	r3, r3, #15
 8005fd2:	4a0d      	ldr	r2, [pc, #52]	; (8006008 <_DoInit+0xac>)
 8005fd4:	5cd1      	ldrb	r1, [r2, r3]
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4413      	add	r3, r2
 8005fdc:	460a      	mov	r2, r1
 8005fde:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	607b      	str	r3, [r7, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2b0f      	cmp	r3, #15
 8005fea:	d9ef      	bls.n	8005fcc <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8005fec:	bf00      	nop
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	20001a74 	.word	0x20001a74
 8005ffc:	08008de4 	.word	0x08008de4
 8006000:	20001b1c 	.word	0x20001b1c
 8006004:	20001f1c 	.word	0x20001f1c
 8006008:	08008e98 	.word	0x08008e98

0800600c <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800600c:	b580      	push	{r7, lr}
 800600e:	b08a      	sub	sp, #40	; 0x28
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8006018:	2300      	movs	r3, #0
 800601a:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	691b      	ldr	r3, [r3, #16]
 8006026:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	429a      	cmp	r2, r3
 800602e:	d905      	bls.n	800603c <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	3b01      	subs	r3, #1
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
 800603a:	e007      	b.n	800604c <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	69b9      	ldr	r1, [r7, #24]
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	1acb      	subs	r3, r1, r3
 8006046:	4413      	add	r3, r2
 8006048:	3b01      	subs	r3, #1
 800604a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	69fb      	ldr	r3, [r7, #28]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006056:	4293      	cmp	r3, r2
 8006058:	bf28      	it	cs
 800605a:	4613      	movcs	r3, r2
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800605e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4293      	cmp	r3, r2
 8006064:	bf28      	it	cs
 8006066:	4613      	movcs	r3, r2
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8006074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	6978      	ldr	r0, [r7, #20]
 800607a:	f002 f883 	bl	8008184 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800607e:	6a3a      	ldr	r2, [r7, #32]
 8006080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006082:	4413      	add	r3, r2
 8006084:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	4413      	add	r3, r2
 800608c:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8006096:	69fa      	ldr	r2, [r7, #28]
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	4413      	add	r3, r2
 800609c:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	69fa      	ldr	r2, [r7, #28]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d101      	bne.n	80060ac <_WriteBlocking+0xa0>
      WrOff = 0u;
 80060a8:	2300      	movs	r3, #0
 80060aa:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	69fa      	ldr	r2, [r7, #28]
 80060b0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1b4      	bne.n	8006022 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80060b8:	6a3b      	ldr	r3, [r7, #32]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3728      	adds	r7, #40	; 0x28
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b088      	sub	sp, #32
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	60f8      	str	r0, [r7, #12]
 80060ca:	60b9      	str	r1, [r7, #8]
 80060cc:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	1ad3      	subs	r3, r2, r3
 80060dc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d90f      	bls.n	8006106 <_WriteNoCheck+0x44>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685a      	ldr	r2, [r3, #4]
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	4413      	add	r3, r2
 80060ee:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	68b9      	ldr	r1, [r7, #8]
 80060f4:	6938      	ldr	r0, [r7, #16]
 80060f6:	f002 f845 	bl	8008184 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff + NumBytes;
 80060fa:	69fa      	ldr	r2, [r7, #28]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	441a      	add	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8006104:	e01d      	b.n	8006142 <_WriteNoCheck+0x80>
    NumBytesAtOnce = Rem;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	4413      	add	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	68b9      	ldr	r1, [r7, #8]
 8006118:	6938      	ldr	r0, [r7, #16]
 800611a:	f002 f833 	bl	8008184 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	69bb      	ldr	r3, [r7, #24]
 8006130:	4413      	add	r3, r2
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	4619      	mov	r1, r3
 8006136:	6938      	ldr	r0, [r7, #16]
 8006138:	f002 f824 	bl	8008184 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	60da      	str	r2, [r3, #12]
}
 8006142:	bf00      	nop
 8006144:	3720      	adds	r7, #32
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800614a:	b480      	push	{r7}
 800614c:	b087      	sub	sp, #28
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	429a      	cmp	r2, r3
 8006164:	d808      	bhi.n	8006178 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	689a      	ldr	r2, [r3, #8]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	1ad2      	subs	r2, r2, r3
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	4413      	add	r3, r2
 8006172:	3b01      	subs	r3, #1
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	e004      	b.n	8006182 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	3b01      	subs	r3, #1
 8006180:	617b      	str	r3, [r7, #20]
  }
  return r;
 8006182:	697b      	ldr	r3, [r7, #20]
}
 8006184:	4618      	mov	r0, r3
 8006186:	371c      	adds	r7, #28
 8006188:	46bd      	mov	sp, r7
 800618a:	bc80      	pop	{r7}
 800618c:	4770      	bx	lr
	...

08006190 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8006190:	b580      	push	{r7, lr}
 8006192:	b08c      	sub	sp, #48	; 0x30
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800619c:	4b3e      	ldr	r3, [pc, #248]	; (8006298 <SEGGER_RTT_ReadNoLock+0x108>)
 800619e:	623b      	str	r3, [r7, #32]
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b53      	cmp	r3, #83	; 0x53
 80061a8:	d001      	beq.n	80061ae <SEGGER_RTT_ReadNoLock+0x1e>
 80061aa:	f7ff fed7 	bl	8005f5c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4613      	mov	r3, r2
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	4413      	add	r3, r2
 80061b6:	00db      	lsls	r3, r3, #3
 80061b8:	3360      	adds	r3, #96	; 0x60
 80061ba:	4a37      	ldr	r2, [pc, #220]	; (8006298 <SEGGER_RTT_ReadNoLock+0x108>)
 80061bc:	4413      	add	r3, r2
 80061be:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80061d0:	2300      	movs	r3, #0
 80061d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80061d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d92b      	bls.n	8006234 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	689a      	ldr	r2, [r3, #8]
 80061e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4293      	cmp	r3, r2
 80061ec:	bf28      	it	cs
 80061ee:	4613      	movcs	r3, r2
 80061f0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f8:	4413      	add	r3, r2
 80061fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	6939      	ldr	r1, [r7, #16]
 8006200:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006202:	f001 ffbf 	bl	8008184 <memcpy>
    NumBytesRead += NumBytesRem;
 8006206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	4413      	add	r3, r2
 800620c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800620e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	4413      	add	r3, r2
 8006214:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800621e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	4413      	add	r3, r2
 8006224:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800622c:	429a      	cmp	r2, r3
 800622e:	d101      	bne.n	8006234 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8006230:	2300      	movs	r3, #0
 8006232:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4293      	cmp	r3, r2
 8006242:	bf28      	it	cs
 8006244:	4613      	movcs	r3, r2
 8006246:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d019      	beq.n	8006282 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	685a      	ldr	r2, [r3, #4]
 8006252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006254:	4413      	add	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	6939      	ldr	r1, [r7, #16]
 800625c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800625e:	f001 ff91 	bl	8008184 <memcpy>
    NumBytesRead += NumBytesRem;
 8006262:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	4413      	add	r3, r2
 8006268:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800626a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	4413      	add	r3, r2
 8006270:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800627a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	4413      	add	r3, r2
 8006280:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8006282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006284:	2b00      	cmp	r3, #0
 8006286:	d002      	beq.n	800628e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800628c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800628e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006290:	4618      	mov	r0, r3
 8006292:	3730      	adds	r7, #48	; 0x30
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20001a74 	.word	0x20001a74

0800629c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	4613      	mov	r3, r2
 80062b2:	005b      	lsls	r3, r3, #1
 80062b4:	4413      	add	r3, r2
 80062b6:	00db      	lsls	r3, r3, #3
 80062b8:	4a1f      	ldr	r2, [pc, #124]	; (8006338 <SEGGER_RTT_WriteNoLock+0x9c>)
 80062ba:	4413      	add	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d029      	beq.n	800631a <SEGGER_RTT_WriteNoLock+0x7e>
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d82e      	bhi.n	8006328 <SEGGER_RTT_WriteNoLock+0x8c>
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <SEGGER_RTT_WriteNoLock+0x38>
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d013      	beq.n	80062fa <SEGGER_RTT_WriteNoLock+0x5e>
 80062d2:	e029      	b.n	8006328 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80062d4:	6978      	ldr	r0, [r7, #20]
 80062d6:	f7ff ff38 	bl	800614a <_GetAvailWriteSpace>
 80062da:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80062dc:	693a      	ldr	r2, [r7, #16]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d202      	bcs.n	80062ea <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 80062e4:	2300      	movs	r3, #0
 80062e6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80062e8:	e021      	b.n	800632e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	69b9      	ldr	r1, [r7, #24]
 80062f2:	6978      	ldr	r0, [r7, #20]
 80062f4:	f7ff fee5 	bl	80060c2 <_WriteNoCheck>
    break;
 80062f8:	e019      	b.n	800632e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80062fa:	6978      	ldr	r0, [r7, #20]
 80062fc:	f7ff ff25 	bl	800614a <_GetAvailWriteSpace>
 8006300:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4293      	cmp	r3, r2
 8006308:	bf28      	it	cs
 800630a:	4613      	movcs	r3, r2
 800630c:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	69b9      	ldr	r1, [r7, #24]
 8006312:	6978      	ldr	r0, [r7, #20]
 8006314:	f7ff fed5 	bl	80060c2 <_WriteNoCheck>
    break;
 8006318:	e009      	b.n	800632e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	69b9      	ldr	r1, [r7, #24]
 800631e:	6978      	ldr	r0, [r7, #20]
 8006320:	f7ff fe74 	bl	800600c <_WriteBlocking>
 8006324:	61f8      	str	r0, [r7, #28]
    break;
 8006326:	e002      	b.n	800632e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8006328:	2300      	movs	r3, #0
 800632a:	61fb      	str	r3, [r7, #28]
    break;
 800632c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800632e:	69fb      	ldr	r3, [r7, #28]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3720      	adds	r7, #32
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20001a74 	.word	0x20001a74

0800633c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800633c:	b580      	push	{r7, lr}
 800633e:	b088      	sub	sp, #32
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8006348:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <SEGGER_RTT_Write+0x48>)
 800634a:	61fb      	str	r3, [r7, #28]
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	b2db      	uxtb	r3, r3
 8006352:	2b53      	cmp	r3, #83	; 0x53
 8006354:	d001      	beq.n	800635a <SEGGER_RTT_Write+0x1e>
 8006356:	f7ff fe01 	bl	8005f5c <_DoInit>
  SEGGER_RTT_LOCK();
 800635a:	f3ef 8311 	mrs	r3, BASEPRI
 800635e:	f04f 0120 	mov.w	r1, #32
 8006362:	f381 8811 	msr	BASEPRI, r1
 8006366:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8006368:	687a      	ldr	r2, [r7, #4]
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f7ff ff95 	bl	800629c <SEGGER_RTT_WriteNoLock>
 8006372:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800637a:	697b      	ldr	r3, [r7, #20]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	20001a74 	.word	0x20001a74

08006388 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b088      	sub	sp, #32
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8006396:	4b3c      	ldr	r3, [pc, #240]	; (8006488 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8006398:	61bb      	str	r3, [r7, #24]
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b53      	cmp	r3, #83	; 0x53
 80063a2:	d001      	beq.n	80063a8 <SEGGER_RTT_AllocUpBuffer+0x20>
 80063a4:	f7ff fdda 	bl	8005f5c <_DoInit>
  SEGGER_RTT_LOCK();
 80063a8:	f3ef 8311 	mrs	r3, BASEPRI
 80063ac:	f04f 0120 	mov.w	r1, #32
 80063b0:	f381 8811 	msr	BASEPRI, r1
 80063b4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80063b6:	4b34      	ldr	r3, [pc, #208]	; (8006488 <SEGGER_RTT_AllocUpBuffer+0x100>)
 80063b8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80063be:	6939      	ldr	r1, [r7, #16]
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	4613      	mov	r3, r2
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	4413      	add	r3, r2
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	440b      	add	r3, r1
 80063ce:	3304      	adds	r3, #4
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d008      	beq.n	80063e8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	3301      	adds	r3, #1
 80063da:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	dbeb      	blt.n	80063be <SEGGER_RTT_AllocUpBuffer+0x36>
 80063e6:	e000      	b.n	80063ea <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80063e8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	da3d      	bge.n	8006470 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80063f4:	6939      	ldr	r1, [r7, #16]
 80063f6:	69fb      	ldr	r3, [r7, #28]
 80063f8:	1c5a      	adds	r2, r3, #1
 80063fa:	4613      	mov	r3, r2
 80063fc:	005b      	lsls	r3, r3, #1
 80063fe:	4413      	add	r3, r2
 8006400:	00db      	lsls	r3, r3, #3
 8006402:	440b      	add	r3, r1
 8006404:	68fa      	ldr	r2, [r7, #12]
 8006406:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8006408:	6939      	ldr	r1, [r7, #16]
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	1c5a      	adds	r2, r3, #1
 800640e:	4613      	mov	r3, r2
 8006410:	005b      	lsls	r3, r3, #1
 8006412:	4413      	add	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	440b      	add	r3, r1
 8006418:	3304      	adds	r3, #4
 800641a:	68ba      	ldr	r2, [r7, #8]
 800641c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800641e:	6939      	ldr	r1, [r7, #16]
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	4613      	mov	r3, r2
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	4413      	add	r3, r2
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	440b      	add	r3, r1
 800642c:	3320      	adds	r3, #32
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8006432:	6939      	ldr	r1, [r7, #16]
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	4613      	mov	r3, r2
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	4413      	add	r3, r2
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	440b      	add	r3, r1
 8006440:	3328      	adds	r3, #40	; 0x28
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8006446:	6939      	ldr	r1, [r7, #16]
 8006448:	69fa      	ldr	r2, [r7, #28]
 800644a:	4613      	mov	r3, r2
 800644c:	005b      	lsls	r3, r3, #1
 800644e:	4413      	add	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	440b      	add	r3, r1
 8006454:	3324      	adds	r3, #36	; 0x24
 8006456:	2200      	movs	r2, #0
 8006458:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800645a:	6939      	ldr	r1, [r7, #16]
 800645c:	69fa      	ldr	r2, [r7, #28]
 800645e:	4613      	mov	r3, r2
 8006460:	005b      	lsls	r3, r3, #1
 8006462:	4413      	add	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	440b      	add	r3, r1
 8006468:	332c      	adds	r3, #44	; 0x2c
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	e002      	b.n	8006476 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8006470:	f04f 33ff 	mov.w	r3, #4294967295
 8006474:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800647c:	69fb      	ldr	r3, [r7, #28]
}
 800647e:	4618      	mov	r0, r3
 8006480:	3720      	adds	r7, #32
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20001a74 	.word	0x20001a74

0800648c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800648c:	b580      	push	{r7, lr}
 800648e:	b08a      	sub	sp, #40	; 0x28
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
 8006498:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800649a:	4b20      	ldr	r3, [pc, #128]	; (800651c <SEGGER_RTT_ConfigDownBuffer+0x90>)
 800649c:	623b      	str	r3, [r7, #32]
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b53      	cmp	r3, #83	; 0x53
 80064a6:	d001      	beq.n	80064ac <SEGGER_RTT_ConfigDownBuffer+0x20>
 80064a8:	f7ff fd58 	bl	8005f5c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80064ac:	4b1b      	ldr	r3, [pc, #108]	; (800651c <SEGGER_RTT_ConfigDownBuffer+0x90>)
 80064ae:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d82a      	bhi.n	800650c <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 80064b6:	f3ef 8311 	mrs	r3, BASEPRI
 80064ba:	f04f 0120 	mov.w	r1, #32
 80064be:	f381 8811 	msr	BASEPRI, r1
 80064c2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4613      	mov	r3, r2
 80064c8:	005b      	lsls	r3, r3, #1
 80064ca:	4413      	add	r3, r2
 80064cc:	00db      	lsls	r3, r3, #3
 80064ce:	3360      	adds	r3, #96	; 0x60
 80064d0:	69fa      	ldr	r2, [r7, #28]
 80064d2:	4413      	add	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00e      	beq.n	80064fa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	68ba      	ldr	r2, [r7, #8]
 80064e0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2200      	movs	r2, #0
 80064f2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2200      	movs	r2, #0
 80064f8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064fe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8006506:	2300      	movs	r3, #0
 8006508:	627b      	str	r3, [r7, #36]	; 0x24
 800650a:	e002      	b.n	8006512 <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 800650c:	f04f 33ff 	mov.w	r3, #4294967295
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
  }
  return r;
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006514:	4618      	mov	r0, r3
 8006516:	3728      	adds	r7, #40	; 0x28
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	20001a74 	.word	0x20001a74

08006520 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8006520:	b480      	push	{r7}
 8006522:	b087      	sub	sp, #28
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	60fa      	str	r2, [r7, #12]
 8006536:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2b80      	cmp	r3, #128	; 0x80
 800653c:	d90a      	bls.n	8006554 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800653e:	2380      	movs	r3, #128	; 0x80
 8006540:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8006542:	e007      	b.n	8006554 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	1c53      	adds	r3, r2, #1
 8006548:	60bb      	str	r3, [r7, #8]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1c59      	adds	r1, r3, #1
 800654e:	60f9      	str	r1, [r7, #12]
 8006550:	7812      	ldrb	r2, [r2, #0]
 8006552:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	1e5a      	subs	r2, r3, #1
 8006558:	607a      	str	r2, [r7, #4]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <_EncodeStr+0x46>
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1ee      	bne.n	8006544 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8006566:	68ba      	ldr	r2, [r7, #8]
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	b2da      	uxtb	r2, r3
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8006572:	68fb      	ldr	r3, [r7, #12]
}
 8006574:	4618      	mov	r0, r3
 8006576:	371c      	adds	r7, #28
 8006578:	46bd      	mov	sp, r7
 800657a:	bc80      	pop	{r7}
 800657c:	4770      	bx	lr

0800657e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3307      	adds	r3, #7
}
 800658a:	4618      	mov	r0, r3
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	bc80      	pop	{r7}
 8006592:	4770      	bx	lr

08006594 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800659a:	4b34      	ldr	r3, [pc, #208]	; (800666c <_HandleIncomingPacket+0xd8>)
 800659c:	7e1b      	ldrb	r3, [r3, #24]
 800659e:	4618      	mov	r0, r3
 80065a0:	1cfb      	adds	r3, r7, #3
 80065a2:	2201      	movs	r2, #1
 80065a4:	4619      	mov	r1, r3
 80065a6:	f7ff fdf3 	bl	8006190 <SEGGER_RTT_ReadNoLock>
 80065aa:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d057      	beq.n	8006662 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80065b2:	78fb      	ldrb	r3, [r7, #3]
 80065b4:	2b80      	cmp	r3, #128	; 0x80
 80065b6:	d031      	beq.n	800661c <_HandleIncomingPacket+0x88>
 80065b8:	2b80      	cmp	r3, #128	; 0x80
 80065ba:	dc40      	bgt.n	800663e <_HandleIncomingPacket+0xaa>
 80065bc:	2b07      	cmp	r3, #7
 80065be:	dc15      	bgt.n	80065ec <_HandleIncomingPacket+0x58>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	dd3c      	ble.n	800663e <_HandleIncomingPacket+0xaa>
 80065c4:	3b01      	subs	r3, #1
 80065c6:	2b06      	cmp	r3, #6
 80065c8:	d839      	bhi.n	800663e <_HandleIncomingPacket+0xaa>
 80065ca:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <_HandleIncomingPacket+0x3c>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	080065f3 	.word	0x080065f3
 80065d4:	080065f9 	.word	0x080065f9
 80065d8:	080065ff 	.word	0x080065ff
 80065dc:	08006605 	.word	0x08006605
 80065e0:	0800660b 	.word	0x0800660b
 80065e4:	08006611 	.word	0x08006611
 80065e8:	08006617 	.word	0x08006617
 80065ec:	2b7f      	cmp	r3, #127	; 0x7f
 80065ee:	d033      	beq.n	8006658 <_HandleIncomingPacket+0xc4>
 80065f0:	e025      	b.n	800663e <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80065f2:	f000 fc2b 	bl	8006e4c <SEGGER_SYSVIEW_Start>
      break;
 80065f6:	e034      	b.n	8006662 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80065f8:	f000 fce2 	bl	8006fc0 <SEGGER_SYSVIEW_Stop>
      break;
 80065fc:	e031      	b.n	8006662 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80065fe:	f000 febb 	bl	8007378 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8006602:	e02e      	b.n	8006662 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8006604:	f000 fe80 	bl	8007308 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8006608:	e02b      	b.n	8006662 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800660a:	f000 fcff 	bl	800700c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800660e:	e028      	b.n	8006662 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8006610:	f001 f958 	bl	80078c4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8006614:	e025      	b.n	8006662 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8006616:	f001 f937 	bl	8007888 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800661a:	e022      	b.n	8006662 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800661c:	4b13      	ldr	r3, [pc, #76]	; (800666c <_HandleIncomingPacket+0xd8>)
 800661e:	7e1b      	ldrb	r3, [r3, #24]
 8006620:	4618      	mov	r0, r3
 8006622:	1cfb      	adds	r3, r7, #3
 8006624:	2201      	movs	r2, #1
 8006626:	4619      	mov	r1, r3
 8006628:	f7ff fdb2 	bl	8006190 <SEGGER_RTT_ReadNoLock>
 800662c:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d013      	beq.n	800665c <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8006634:	78fb      	ldrb	r3, [r7, #3]
 8006636:	4618      	mov	r0, r3
 8006638:	f001 f89c 	bl	8007774 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800663c:	e00e      	b.n	800665c <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	b25b      	sxtb	r3, r3
 8006642:	2b00      	cmp	r3, #0
 8006644:	da0c      	bge.n	8006660 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8006646:	4b09      	ldr	r3, [pc, #36]	; (800666c <_HandleIncomingPacket+0xd8>)
 8006648:	7e1b      	ldrb	r3, [r3, #24]
 800664a:	4618      	mov	r0, r3
 800664c:	1cfb      	adds	r3, r7, #3
 800664e:	2201      	movs	r2, #1
 8006650:	4619      	mov	r1, r3
 8006652:	f7ff fd9d 	bl	8006190 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8006656:	e003      	b.n	8006660 <_HandleIncomingPacket+0xcc>
      break;
 8006658:	bf00      	nop
 800665a:	e002      	b.n	8006662 <_HandleIncomingPacket+0xce>
      break;
 800665c:	bf00      	nop
 800665e:	e000      	b.n	8006662 <_HandleIncomingPacket+0xce>
      break;
 8006660:	bf00      	nop
    }
  }
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20002734 	.word	0x20002734

08006670 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8006670:	b580      	push	{r7, lr}
 8006672:	b08c      	sub	sp, #48	; 0x30
 8006674:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8006676:	2301      	movs	r3, #1
 8006678:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800667a:	1d3b      	adds	r3, r7, #4
 800667c:	3301      	adds	r3, #1
 800667e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006684:	4b31      	ldr	r3, [pc, #196]	; (800674c <_TrySendOverflowPacket+0xdc>)
 8006686:	695b      	ldr	r3, [r3, #20]
 8006688:	62bb      	str	r3, [r7, #40]	; 0x28
 800668a:	e00b      	b.n	80066a4 <_TrySendOverflowPacket+0x34>
 800668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800668e:	b2da      	uxtb	r2, r3
 8006690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006692:	1c59      	adds	r1, r3, #1
 8006694:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006696:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	09db      	lsrs	r3, r3, #7
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	2b7f      	cmp	r3, #127	; 0x7f
 80066a8:	d8f0      	bhi.n	800668c <_TrySendOverflowPacket+0x1c>
 80066aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ac:	1c5a      	adds	r2, r3, #1
 80066ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80066ba:	4b25      	ldr	r3, [pc, #148]	; (8006750 <_TrySendOverflowPacket+0xe0>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80066c0:	4b22      	ldr	r3, [pc, #136]	; (800674c <_TrySendOverflowPacket+0xdc>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	1ad3      	subs	r3, r2, r3
 80066c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	623b      	str	r3, [r7, #32]
 80066d2:	e00b      	b.n	80066ec <_TrySendOverflowPacket+0x7c>
 80066d4:	6a3b      	ldr	r3, [r7, #32]
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	1c59      	adds	r1, r3, #1
 80066dc:	6279      	str	r1, [r7, #36]	; 0x24
 80066de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066e2:	b2d2      	uxtb	r2, r2
 80066e4:	701a      	strb	r2, [r3, #0]
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	09db      	lsrs	r3, r3, #7
 80066ea:	623b      	str	r3, [r7, #32]
 80066ec:	6a3b      	ldr	r3, [r7, #32]
 80066ee:	2b7f      	cmp	r3, #127	; 0x7f
 80066f0:	d8f0      	bhi.n	80066d4 <_TrySendOverflowPacket+0x64>
 80066f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f4:	1c5a      	adds	r2, r3, #1
 80066f6:	627a      	str	r2, [r7, #36]	; 0x24
 80066f8:	6a3a      	ldr	r2, [r7, #32]
 80066fa:	b2d2      	uxtb	r2, r2
 80066fc:	701a      	strb	r2, [r3, #0]
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8006702:	4b12      	ldr	r3, [pc, #72]	; (800674c <_TrySendOverflowPacket+0xdc>)
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	4618      	mov	r0, r3
 8006708:	1d3b      	adds	r3, r7, #4
 800670a:	69fa      	ldr	r2, [r7, #28]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	461a      	mov	r2, r3
 8006710:	1d3b      	adds	r3, r7, #4
 8006712:	4619      	mov	r1, r3
 8006714:	f7f9 fd1c 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8006718:	4603      	mov	r3, r0
 800671a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d009      	beq.n	8006736 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8006722:	4a0a      	ldr	r2, [pc, #40]	; (800674c <_TrySendOverflowPacket+0xdc>)
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8006728:	4b08      	ldr	r3, [pc, #32]	; (800674c <_TrySendOverflowPacket+0xdc>)
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	3b01      	subs	r3, #1
 800672e:	b2da      	uxtb	r2, r3
 8006730:	4b06      	ldr	r3, [pc, #24]	; (800674c <_TrySendOverflowPacket+0xdc>)
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	e004      	b.n	8006740 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8006736:	4b05      	ldr	r3, [pc, #20]	; (800674c <_TrySendOverflowPacket+0xdc>)
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	3301      	adds	r3, #1
 800673c:	4a03      	ldr	r2, [pc, #12]	; (800674c <_TrySendOverflowPacket+0xdc>)
 800673e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8006740:	693b      	ldr	r3, [r7, #16]
}
 8006742:	4618      	mov	r0, r3
 8006744:	3730      	adds	r7, #48	; 0x30
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	20002734 	.word	0x20002734
 8006750:	e0001004 	.word	0xe0001004

08006754 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8006754:	b580      	push	{r7, lr}
 8006756:	b08a      	sub	sp, #40	; 0x28
 8006758:	af00      	add	r7, sp, #0
 800675a:	60f8      	str	r0, [r7, #12]
 800675c:	60b9      	str	r1, [r7, #8]
 800675e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8006760:	4b98      	ldr	r3, [pc, #608]	; (80069c4 <_SendPacket+0x270>)
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d010      	beq.n	800678a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8006768:	4b96      	ldr	r3, [pc, #600]	; (80069c4 <_SendPacket+0x270>)
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 812d 	beq.w	80069cc <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8006772:	4b94      	ldr	r3, [pc, #592]	; (80069c4 <_SendPacket+0x270>)
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d109      	bne.n	800678e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800677a:	f7ff ff79 	bl	8006670 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800677e:	4b91      	ldr	r3, [pc, #580]	; (80069c4 <_SendPacket+0x270>)
 8006780:	781b      	ldrb	r3, [r3, #0]
 8006782:	2b01      	cmp	r3, #1
 8006784:	f040 8124 	bne.w	80069d0 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8006788:	e001      	b.n	800678e <_SendPacket+0x3a>
    goto Send;
 800678a:	bf00      	nop
 800678c:	e000      	b.n	8006790 <_SendPacket+0x3c>
Send:
 800678e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2b1f      	cmp	r3, #31
 8006794:	d809      	bhi.n	80067aa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8006796:	4b8b      	ldr	r3, [pc, #556]	; (80069c4 <_SendPacket+0x270>)
 8006798:	69da      	ldr	r2, [r3, #28]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	fa22 f303 	lsr.w	r3, r2, r3
 80067a0:	f003 0301 	and.w	r3, r3, #1
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f040 8115 	bne.w	80069d4 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b17      	cmp	r3, #23
 80067ae:	d807      	bhi.n	80067c0 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	3b01      	subs	r3, #1
 80067b4:	60fb      	str	r3, [r7, #12]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	e0c4      	b.n	800694a <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	1ad3      	subs	r3, r2, r3
 80067c6:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	2b7f      	cmp	r3, #127	; 0x7f
 80067cc:	d912      	bls.n	80067f4 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	09da      	lsrs	r2, r3, #7
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3b01      	subs	r3, #1
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	b2d2      	uxtb	r2, r2
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	3a01      	subs	r2, #1
 80067e6:	60fa      	str	r2, [r7, #12]
 80067e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	701a      	strb	r2, [r3, #0]
 80067f2:	e006      	b.n	8006802 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	60fb      	str	r3, [r7, #12]
 80067fa:	69fb      	ldr	r3, [r7, #28]
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b7e      	cmp	r3, #126	; 0x7e
 8006806:	d807      	bhi.n	8006818 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	3b01      	subs	r3, #1
 800680c:	60fb      	str	r3, [r7, #12]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	b2da      	uxtb	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	701a      	strb	r2, [r3, #0]
 8006816:	e098      	b.n	800694a <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800681e:	d212      	bcs.n	8006846 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	09da      	lsrs	r2, r3, #7
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	3b01      	subs	r3, #1
 8006828:	60fb      	str	r3, [r7, #12]
 800682a:	b2d2      	uxtb	r2, r2
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	b2db      	uxtb	r3, r3
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	3a01      	subs	r2, #1
 8006838:	60fa      	str	r2, [r7, #12]
 800683a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800683e:	b2da      	uxtb	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	e081      	b.n	800694a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800684c:	d21d      	bcs.n	800688a <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	0b9a      	lsrs	r2, r3, #14
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	3b01      	subs	r3, #1
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	09db      	lsrs	r3, r3, #7
 8006862:	b2db      	uxtb	r3, r3
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	3a01      	subs	r2, #1
 8006868:	60fa      	str	r2, [r7, #12]
 800686a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800686e:	b2da      	uxtb	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	b2db      	uxtb	r3, r3
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	3a01      	subs	r2, #1
 800687c:	60fa      	str	r2, [r7, #12]
 800687e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006882:	b2da      	uxtb	r2, r3
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	701a      	strb	r2, [r3, #0]
 8006888:	e05f      	b.n	800694a <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006890:	d228      	bcs.n	80068e4 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	0d5a      	lsrs	r2, r3, #21
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	3b01      	subs	r3, #1
 800689a:	60fb      	str	r3, [r7, #12]
 800689c:	b2d2      	uxtb	r2, r2
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	0b9b      	lsrs	r3, r3, #14
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	3a01      	subs	r2, #1
 80068ac:	60fa      	str	r2, [r7, #12]
 80068ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	09db      	lsrs	r3, r3, #7
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	3a01      	subs	r2, #1
 80068c2:	60fa      	str	r2, [r7, #12]
 80068c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	3a01      	subs	r2, #1
 80068d6:	60fa      	str	r2, [r7, #12]
 80068d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	e032      	b.n	800694a <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	0f1a      	lsrs	r2, r3, #28
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	3b01      	subs	r3, #1
 80068ec:	60fb      	str	r3, [r7, #12]
 80068ee:	b2d2      	uxtb	r2, r2
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	0d5b      	lsrs	r3, r3, #21
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	3a01      	subs	r2, #1
 80068fe:	60fa      	str	r2, [r7, #12]
 8006900:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006904:	b2da      	uxtb	r2, r3
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	0b9b      	lsrs	r3, r3, #14
 800690e:	b2db      	uxtb	r3, r3
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	3a01      	subs	r2, #1
 8006914:	60fa      	str	r2, [r7, #12]
 8006916:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800691a:	b2da      	uxtb	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	09db      	lsrs	r3, r3, #7
 8006924:	b2db      	uxtb	r3, r3
 8006926:	68fa      	ldr	r2, [r7, #12]
 8006928:	3a01      	subs	r2, #1
 800692a:	60fa      	str	r2, [r7, #12]
 800692c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006930:	b2da      	uxtb	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	68fa      	ldr	r2, [r7, #12]
 800693c:	3a01      	subs	r2, #1
 800693e:	60fa      	str	r2, [r7, #12]
 8006940:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800694a:	4b1f      	ldr	r3, [pc, #124]	; (80069c8 <_SendPacket+0x274>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8006950:	4b1c      	ldr	r3, [pc, #112]	; (80069c4 <_SendPacket+0x270>)
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	627b      	str	r3, [r7, #36]	; 0x24
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	623b      	str	r3, [r7, #32]
 8006962:	e00b      	b.n	800697c <_SendPacket+0x228>
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	b2da      	uxtb	r2, r3
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	1c59      	adds	r1, r3, #1
 800696c:	6279      	str	r1, [r7, #36]	; 0x24
 800696e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006972:	b2d2      	uxtb	r2, r2
 8006974:	701a      	strb	r2, [r3, #0]
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	09db      	lsrs	r3, r3, #7
 800697a:	623b      	str	r3, [r7, #32]
 800697c:	6a3b      	ldr	r3, [r7, #32]
 800697e:	2b7f      	cmp	r3, #127	; 0x7f
 8006980:	d8f0      	bhi.n	8006964 <_SendPacket+0x210>
 8006982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006984:	1c5a      	adds	r2, r3, #1
 8006986:	627a      	str	r2, [r7, #36]	; 0x24
 8006988:	6a3a      	ldr	r2, [r7, #32]
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8006992:	4b0c      	ldr	r3, [pc, #48]	; (80069c4 <_SendPacket+0x270>)
 8006994:	785b      	ldrb	r3, [r3, #1]
 8006996:	4618      	mov	r0, r3
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	1ad3      	subs	r3, r2, r3
 800699e:	461a      	mov	r2, r3
 80069a0:	68f9      	ldr	r1, [r7, #12]
 80069a2:	f7f9 fbd5 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80069a6:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d003      	beq.n	80069b6 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80069ae:	4a05      	ldr	r2, [pc, #20]	; (80069c4 <_SendPacket+0x270>)
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	60d3      	str	r3, [r2, #12]
 80069b4:	e00f      	b.n	80069d6 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80069b6:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <_SendPacket+0x270>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2da      	uxtb	r2, r3
 80069be:	4b01      	ldr	r3, [pc, #4]	; (80069c4 <_SendPacket+0x270>)
 80069c0:	701a      	strb	r2, [r3, #0]
 80069c2:	e008      	b.n	80069d6 <_SendPacket+0x282>
 80069c4:	20002734 	.word	0x20002734
 80069c8:	e0001004 	.word	0xe0001004
    goto SendDone;
 80069cc:	bf00      	nop
 80069ce:	e002      	b.n	80069d6 <_SendPacket+0x282>
      goto SendDone;
 80069d0:	bf00      	nop
 80069d2:	e000      	b.n	80069d6 <_SendPacket+0x282>
      goto SendDone;
 80069d4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80069d6:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <_SendPacket+0x2d4>)
 80069d8:	7e1b      	ldrb	r3, [r3, #24]
 80069da:	4619      	mov	r1, r3
 80069dc:	4a13      	ldr	r2, [pc, #76]	; (8006a2c <_SendPacket+0x2d8>)
 80069de:	460b      	mov	r3, r1
 80069e0:	005b      	lsls	r3, r3, #1
 80069e2:	440b      	add	r3, r1
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	4413      	add	r3, r2
 80069e8:	336c      	adds	r3, #108	; 0x6c
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	4b0e      	ldr	r3, [pc, #56]	; (8006a28 <_SendPacket+0x2d4>)
 80069ee:	7e1b      	ldrb	r3, [r3, #24]
 80069f0:	4618      	mov	r0, r3
 80069f2:	490e      	ldr	r1, [pc, #56]	; (8006a2c <_SendPacket+0x2d8>)
 80069f4:	4603      	mov	r3, r0
 80069f6:	005b      	lsls	r3, r3, #1
 80069f8:	4403      	add	r3, r0
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	440b      	add	r3, r1
 80069fe:	3370      	adds	r3, #112	; 0x70
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d00b      	beq.n	8006a1e <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006a06:	4b08      	ldr	r3, [pc, #32]	; (8006a28 <_SendPacket+0x2d4>)
 8006a08:	789b      	ldrb	r3, [r3, #2]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d107      	bne.n	8006a1e <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006a0e:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <_SendPacket+0x2d4>)
 8006a10:	2201      	movs	r2, #1
 8006a12:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006a14:	f7ff fdbe 	bl	8006594 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006a18:	4b03      	ldr	r3, [pc, #12]	; (8006a28 <_SendPacket+0x2d4>)
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006a1e:	bf00      	nop
 8006a20:	3728      	adds	r7, #40	; 0x28
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20002734 	.word	0x20002734
 8006a2c:	20001a74 	.word	0x20001a74

08006a30 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a3e:	2300      	movs	r3, #0
 8006a40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a44:	4917      	ldr	r1, [pc, #92]	; (8006aa4 <SEGGER_SYSVIEW_Init+0x74>)
 8006a46:	4818      	ldr	r0, [pc, #96]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x78>)
 8006a48:	f7ff fc9e 	bl	8006388 <SEGGER_RTT_AllocUpBuffer>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	4b16      	ldr	r3, [pc, #88]	; (8006aac <SEGGER_SYSVIEW_Init+0x7c>)
 8006a52:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006a54:	4b15      	ldr	r3, [pc, #84]	; (8006aac <SEGGER_SYSVIEW_Init+0x7c>)
 8006a56:	785a      	ldrb	r2, [r3, #1]
 8006a58:	4b14      	ldr	r3, [pc, #80]	; (8006aac <SEGGER_SYSVIEW_Init+0x7c>)
 8006a5a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006a5c:	4b13      	ldr	r3, [pc, #76]	; (8006aac <SEGGER_SYSVIEW_Init+0x7c>)
 8006a5e:	7e1b      	ldrb	r3, [r3, #24]
 8006a60:	4618      	mov	r0, r3
 8006a62:	2300      	movs	r3, #0
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	2308      	movs	r3, #8
 8006a68:	4a11      	ldr	r2, [pc, #68]	; (8006ab0 <SEGGER_SYSVIEW_Init+0x80>)
 8006a6a:	490f      	ldr	r1, [pc, #60]	; (8006aa8 <SEGGER_SYSVIEW_Init+0x78>)
 8006a6c:	f7ff fd0e 	bl	800648c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006a70:	4b0e      	ldr	r3, [pc, #56]	; (8006aac <SEGGER_SYSVIEW_Init+0x7c>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006a76:	4b0f      	ldr	r3, [pc, #60]	; (8006ab4 <SEGGER_SYSVIEW_Init+0x84>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a0c      	ldr	r2, [pc, #48]	; (8006aac <SEGGER_SYSVIEW_Init+0x7c>)
 8006a7c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006a7e:	4a0b      	ldr	r2, [pc, #44]	; (8006aac <SEGGER_SYSVIEW_Init+0x7c>)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006a84:	4a09      	ldr	r2, [pc, #36]	; (8006aac <SEGGER_SYSVIEW_Init+0x7c>)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006a8a:	4a08      	ldr	r2, [pc, #32]	; (8006aac <SEGGER_SYSVIEW_Init+0x7c>)
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006a90:	4a06      	ldr	r2, [pc, #24]	; (8006aac <SEGGER_SYSVIEW_Init+0x7c>)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006a96:	4b05      	ldr	r3, [pc, #20]	; (8006aac <SEGGER_SYSVIEW_Init+0x7c>)
 8006a98:	2200      	movs	r2, #0
 8006a9a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006a9c:	bf00      	nop
 8006a9e:	3710      	adds	r7, #16
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	bd80      	pop	{r7, pc}
 8006aa4:	20001f2c 	.word	0x20001f2c
 8006aa8:	08008df8 	.word	0x08008df8
 8006aac:	20002734 	.word	0x20002734
 8006ab0:	2000272c 	.word	0x2000272c
 8006ab4:	e0001004 	.word	0xe0001004

08006ab8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006ac0:	4a03      	ldr	r2, [pc, #12]	; (8006ad0 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6113      	str	r3, [r2, #16]
}
 8006ac6:	bf00      	nop
 8006ac8:	370c      	adds	r7, #12
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bc80      	pop	{r7}
 8006ace:	4770      	bx	lr
 8006ad0:	20002734 	.word	0x20002734

08006ad4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006adc:	f3ef 8311 	mrs	r3, BASEPRI
 8006ae0:	f04f 0120 	mov.w	r1, #32
 8006ae4:	f381 8811 	msr	BASEPRI, r1
 8006ae8:	60fb      	str	r3, [r7, #12]
 8006aea:	4808      	ldr	r0, [pc, #32]	; (8006b0c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006aec:	f7ff fd47 	bl	800657e <_PreparePacket>
 8006af0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	68b9      	ldr	r1, [r7, #8]
 8006af6:	68b8      	ldr	r0, [r7, #8]
 8006af8:	f7ff fe2c 	bl	8006754 <_SendPacket>
  RECORD_END();
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f383 8811 	msr	BASEPRI, r3
}
 8006b02:	bf00      	nop
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20002764 	.word	0x20002764

08006b10 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b1a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b1e:	f04f 0120 	mov.w	r1, #32
 8006b22:	f381 8811 	msr	BASEPRI, r1
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	4816      	ldr	r0, [pc, #88]	; (8006b84 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006b2a:	f7ff fd28 	bl	800657e <_PreparePacket>
 8006b2e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	e00b      	b.n	8006b56 <SEGGER_SYSVIEW_RecordU32+0x46>
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	b2da      	uxtb	r2, r3
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	1c59      	adds	r1, r3, #1
 8006b46:	61f9      	str	r1, [r7, #28]
 8006b48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b4c:	b2d2      	uxtb	r2, r2
 8006b4e:	701a      	strb	r2, [r3, #0]
 8006b50:	69bb      	ldr	r3, [r7, #24]
 8006b52:	09db      	lsrs	r3, r3, #7
 8006b54:	61bb      	str	r3, [r7, #24]
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	2b7f      	cmp	r3, #127	; 0x7f
 8006b5a:	d8f0      	bhi.n	8006b3e <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006b5c:	69fb      	ldr	r3, [r7, #28]
 8006b5e:	1c5a      	adds	r2, r3, #1
 8006b60:	61fa      	str	r2, [r7, #28]
 8006b62:	69ba      	ldr	r2, [r7, #24]
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b6c:	687a      	ldr	r2, [r7, #4]
 8006b6e:	68f9      	ldr	r1, [r7, #12]
 8006b70:	6938      	ldr	r0, [r7, #16]
 8006b72:	f7ff fdef 	bl	8006754 <_SendPacket>
  RECORD_END();
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f383 8811 	msr	BASEPRI, r3
}
 8006b7c:	bf00      	nop
 8006b7e:	3720      	adds	r7, #32
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20002764 	.word	0x20002764

08006b88 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b08c      	sub	sp, #48	; 0x30
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b94:	f3ef 8311 	mrs	r3, BASEPRI
 8006b98:	f04f 0120 	mov.w	r1, #32
 8006b9c:	f381 8811 	msr	BASEPRI, r1
 8006ba0:	61fb      	str	r3, [r7, #28]
 8006ba2:	4825      	ldr	r0, [pc, #148]	; (8006c38 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006ba4:	f7ff fceb 	bl	800657e <_PreparePacket>
 8006ba8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb6:	e00b      	b.n	8006bd0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc6:	b2d2      	uxtb	r2, r2
 8006bc8:	701a      	strb	r2, [r3, #0]
 8006bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bcc:	09db      	lsrs	r3, r3, #7
 8006bce:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd4:	d8f0      	bhi.n	8006bb8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bde:	b2d2      	uxtb	r2, r2
 8006be0:	701a      	strb	r2, [r3, #0]
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006be6:	697b      	ldr	r3, [r7, #20]
 8006be8:	627b      	str	r3, [r7, #36]	; 0x24
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	623b      	str	r3, [r7, #32]
 8006bee:	e00b      	b.n	8006c08 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	1c59      	adds	r1, r3, #1
 8006bf8:	6279      	str	r1, [r7, #36]	; 0x24
 8006bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	09db      	lsrs	r3, r3, #7
 8006c06:	623b      	str	r3, [r7, #32]
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c0c:	d8f0      	bhi.n	8006bf0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	627a      	str	r2, [r7, #36]	; 0x24
 8006c14:	6a3a      	ldr	r2, [r7, #32]
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	6979      	ldr	r1, [r7, #20]
 8006c22:	69b8      	ldr	r0, [r7, #24]
 8006c24:	f7ff fd96 	bl	8006754 <_SendPacket>
  RECORD_END();
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	f383 8811 	msr	BASEPRI, r3
}
 8006c2e:	bf00      	nop
 8006c30:	3730      	adds	r7, #48	; 0x30
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20002764 	.word	0x20002764

08006c3c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b08e      	sub	sp, #56	; 0x38
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c4a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c4e:	f04f 0120 	mov.w	r1, #32
 8006c52:	f381 8811 	msr	BASEPRI, r1
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	4832      	ldr	r0, [pc, #200]	; (8006d24 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006c5a:	f7ff fc90 	bl	800657e <_PreparePacket>
 8006c5e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	637b      	str	r3, [r7, #52]	; 0x34
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	633b      	str	r3, [r7, #48]	; 0x30
 8006c6c:	e00b      	b.n	8006c86 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c74:	1c59      	adds	r1, r3, #1
 8006c76:	6379      	str	r1, [r7, #52]	; 0x34
 8006c78:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c7c:	b2d2      	uxtb	r2, r2
 8006c7e:	701a      	strb	r2, [r3, #0]
 8006c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c82:	09db      	lsrs	r3, r3, #7
 8006c84:	633b      	str	r3, [r7, #48]	; 0x30
 8006c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c88:	2b7f      	cmp	r3, #127	; 0x7f
 8006c8a:	d8f0      	bhi.n	8006c6e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c8e:	1c5a      	adds	r2, r3, #1
 8006c90:	637a      	str	r2, [r7, #52]	; 0x34
 8006c92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	701a      	strb	r2, [r3, #0]
 8006c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ca4:	e00b      	b.n	8006cbe <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cac:	1c59      	adds	r1, r3, #1
 8006cae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006cb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cb4:	b2d2      	uxtb	r2, r2
 8006cb6:	701a      	strb	r2, [r3, #0]
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	09db      	lsrs	r3, r3, #7
 8006cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc0:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc2:	d8f0      	bhi.n	8006ca6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc6:	1c5a      	adds	r2, r3, #1
 8006cc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ccc:	b2d2      	uxtb	r2, r2
 8006cce:	701a      	strb	r2, [r3, #0]
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	623b      	str	r3, [r7, #32]
 8006cdc:	e00b      	b.n	8006cf6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	1c59      	adds	r1, r3, #1
 8006ce6:	6279      	str	r1, [r7, #36]	; 0x24
 8006ce8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	09db      	lsrs	r3, r3, #7
 8006cf4:	623b      	str	r3, [r7, #32]
 8006cf6:	6a3b      	ldr	r3, [r7, #32]
 8006cf8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cfa:	d8f0      	bhi.n	8006cde <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	627a      	str	r2, [r7, #36]	; 0x24
 8006d02:	6a3a      	ldr	r2, [r7, #32]
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	6979      	ldr	r1, [r7, #20]
 8006d10:	69b8      	ldr	r0, [r7, #24]
 8006d12:	f7ff fd1f 	bl	8006754 <_SendPacket>
  RECORD_END();
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f383 8811 	msr	BASEPRI, r3
}
 8006d1c:	bf00      	nop
 8006d1e:	3738      	adds	r7, #56	; 0x38
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20002764 	.word	0x20002764

08006d28 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b090      	sub	sp, #64	; 0x40
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	60f8      	str	r0, [r7, #12]
 8006d30:	60b9      	str	r1, [r7, #8]
 8006d32:	607a      	str	r2, [r7, #4]
 8006d34:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d36:	f3ef 8311 	mrs	r3, BASEPRI
 8006d3a:	f04f 0120 	mov.w	r1, #32
 8006d3e:	f381 8811 	msr	BASEPRI, r1
 8006d42:	61fb      	str	r3, [r7, #28]
 8006d44:	4840      	ldr	r0, [pc, #256]	; (8006e48 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006d46:	f7ff fc1a 	bl	800657e <_PreparePacket>
 8006d4a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006d4c:	69bb      	ldr	r3, [r7, #24]
 8006d4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d58:	e00b      	b.n	8006d72 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d60:	1c59      	adds	r1, r3, #1
 8006d62:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d68:	b2d2      	uxtb	r2, r2
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	09db      	lsrs	r3, r3, #7
 8006d70:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d74:	2b7f      	cmp	r3, #127	; 0x7f
 8006d76:	d8f0      	bhi.n	8006d5a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d7a:	1c5a      	adds	r2, r3, #1
 8006d7c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	701a      	strb	r2, [r3, #0]
 8006d84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d90:	e00b      	b.n	8006daa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d98:	1c59      	adds	r1, r3, #1
 8006d9a:	6379      	str	r1, [r7, #52]	; 0x34
 8006d9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da0:	b2d2      	uxtb	r2, r2
 8006da2:	701a      	strb	r2, [r3, #0]
 8006da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da6:	09db      	lsrs	r3, r3, #7
 8006da8:	633b      	str	r3, [r7, #48]	; 0x30
 8006daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dac:	2b7f      	cmp	r3, #127	; 0x7f
 8006dae:	d8f0      	bhi.n	8006d92 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db2:	1c5a      	adds	r2, r3, #1
 8006db4:	637a      	str	r2, [r7, #52]	; 0x34
 8006db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006db8:	b2d2      	uxtb	r2, r2
 8006dba:	701a      	strb	r2, [r3, #0]
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbe:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc8:	e00b      	b.n	8006de2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dcc:	b2da      	uxtb	r2, r3
 8006dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd0:	1c59      	adds	r1, r3, #1
 8006dd2:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006dd4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	09db      	lsrs	r3, r3, #7
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de4:	2b7f      	cmp	r3, #127	; 0x7f
 8006de6:	d8f0      	bhi.n	8006dca <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dea:	1c5a      	adds	r2, r3, #1
 8006dec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006df0:	b2d2      	uxtb	r2, r2
 8006df2:	701a      	strb	r2, [r3, #0]
 8006df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006dfe:	623b      	str	r3, [r7, #32]
 8006e00:	e00b      	b.n	8006e1a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006e02:	6a3b      	ldr	r3, [r7, #32]
 8006e04:	b2da      	uxtb	r2, r3
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	1c59      	adds	r1, r3, #1
 8006e0a:	6279      	str	r1, [r7, #36]	; 0x24
 8006e0c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e10:	b2d2      	uxtb	r2, r2
 8006e12:	701a      	strb	r2, [r3, #0]
 8006e14:	6a3b      	ldr	r3, [r7, #32]
 8006e16:	09db      	lsrs	r3, r3, #7
 8006e18:	623b      	str	r3, [r7, #32]
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	2b7f      	cmp	r3, #127	; 0x7f
 8006e1e:	d8f0      	bhi.n	8006e02 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	627a      	str	r2, [r7, #36]	; 0x24
 8006e26:	6a3a      	ldr	r2, [r7, #32]
 8006e28:	b2d2      	uxtb	r2, r2
 8006e2a:	701a      	strb	r2, [r3, #0]
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006e30:	68fa      	ldr	r2, [r7, #12]
 8006e32:	6979      	ldr	r1, [r7, #20]
 8006e34:	69b8      	ldr	r0, [r7, #24]
 8006e36:	f7ff fc8d 	bl	8006754 <_SendPacket>
  RECORD_END();
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	f383 8811 	msr	BASEPRI, r3
}
 8006e40:	bf00      	nop
 8006e42:	3740      	adds	r7, #64	; 0x40
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	20002764 	.word	0x20002764

08006e4c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08c      	sub	sp, #48	; 0x30
 8006e50:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006e52:	4b58      	ldr	r3, [pc, #352]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x168>)
 8006e54:	2201      	movs	r2, #1
 8006e56:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006e58:	f3ef 8311 	mrs	r3, BASEPRI
 8006e5c:	f04f 0120 	mov.w	r1, #32
 8006e60:	f381 8811 	msr	BASEPRI, r1
 8006e64:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006e66:	4b53      	ldr	r3, [pc, #332]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x168>)
 8006e68:	785b      	ldrb	r3, [r3, #1]
 8006e6a:	220a      	movs	r2, #10
 8006e6c:	4952      	ldr	r1, [pc, #328]	; (8006fb8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7f9 f96e 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006e7a:	200a      	movs	r0, #10
 8006e7c:	f7ff fe2a 	bl	8006ad4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006e80:	f3ef 8311 	mrs	r3, BASEPRI
 8006e84:	f04f 0120 	mov.w	r1, #32
 8006e88:	f381 8811 	msr	BASEPRI, r1
 8006e8c:	60bb      	str	r3, [r7, #8]
 8006e8e:	484b      	ldr	r0, [pc, #300]	; (8006fbc <SEGGER_SYSVIEW_Start+0x170>)
 8006e90:	f7ff fb75 	bl	800657e <_PreparePacket>
 8006e94:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e9e:	4b45      	ldr	r3, [pc, #276]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x168>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ea4:	e00b      	b.n	8006ebe <SEGGER_SYSVIEW_Start+0x72>
 8006ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	1c59      	adds	r1, r3, #1
 8006eae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006eb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eb4:	b2d2      	uxtb	r2, r2
 8006eb6:	701a      	strb	r2, [r3, #0]
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	09db      	lsrs	r3, r3, #7
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	2b7f      	cmp	r3, #127	; 0x7f
 8006ec2:	d8f0      	bhi.n	8006ea6 <SEGGER_SYSVIEW_Start+0x5a>
 8006ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec6:	1c5a      	adds	r2, r3, #1
 8006ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ecc:	b2d2      	uxtb	r2, r2
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ed2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed8:	4b36      	ldr	r3, [pc, #216]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x168>)
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	623b      	str	r3, [r7, #32]
 8006ede:	e00b      	b.n	8006ef8 <SEGGER_SYSVIEW_Start+0xac>
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	b2da      	uxtb	r2, r3
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	1c59      	adds	r1, r3, #1
 8006ee8:	6279      	str	r1, [r7, #36]	; 0x24
 8006eea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	701a      	strb	r2, [r3, #0]
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	09db      	lsrs	r3, r3, #7
 8006ef6:	623b      	str	r3, [r7, #32]
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	2b7f      	cmp	r3, #127	; 0x7f
 8006efc:	d8f0      	bhi.n	8006ee0 <SEGGER_SYSVIEW_Start+0x94>
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	627a      	str	r2, [r7, #36]	; 0x24
 8006f04:	6a3a      	ldr	r2, [r7, #32]
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	61fb      	str	r3, [r7, #28]
 8006f12:	4b28      	ldr	r3, [pc, #160]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x168>)
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	e00b      	b.n	8006f32 <SEGGER_SYSVIEW_Start+0xe6>
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	b2da      	uxtb	r2, r3
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	1c59      	adds	r1, r3, #1
 8006f22:	61f9      	str	r1, [r7, #28]
 8006f24:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f28:	b2d2      	uxtb	r2, r2
 8006f2a:	701a      	strb	r2, [r3, #0]
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	09db      	lsrs	r3, r3, #7
 8006f30:	61bb      	str	r3, [r7, #24]
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	2b7f      	cmp	r3, #127	; 0x7f
 8006f36:	d8f0      	bhi.n	8006f1a <SEGGER_SYSVIEW_Start+0xce>
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	61fa      	str	r2, [r7, #28]
 8006f3e:	69ba      	ldr	r2, [r7, #24]
 8006f40:	b2d2      	uxtb	r2, r2
 8006f42:	701a      	strb	r2, [r3, #0]
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	617b      	str	r3, [r7, #20]
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	613b      	str	r3, [r7, #16]
 8006f50:	e00b      	b.n	8006f6a <SEGGER_SYSVIEW_Start+0x11e>
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	b2da      	uxtb	r2, r3
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	1c59      	adds	r1, r3, #1
 8006f5a:	6179      	str	r1, [r7, #20]
 8006f5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f60:	b2d2      	uxtb	r2, r2
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	693b      	ldr	r3, [r7, #16]
 8006f66:	09db      	lsrs	r3, r3, #7
 8006f68:	613b      	str	r3, [r7, #16]
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f6e:	d8f0      	bhi.n	8006f52 <SEGGER_SYSVIEW_Start+0x106>
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	617a      	str	r2, [r7, #20]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	b2d2      	uxtb	r2, r2
 8006f7a:	701a      	strb	r2, [r3, #0]
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006f80:	2218      	movs	r2, #24
 8006f82:	6839      	ldr	r1, [r7, #0]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff fbe5 	bl	8006754 <_SendPacket>
      RECORD_END();
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006f90:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x168>)
 8006f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d002      	beq.n	8006f9e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006f98:	4b06      	ldr	r3, [pc, #24]	; (8006fb4 <SEGGER_SYSVIEW_Start+0x168>)
 8006f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006f9e:	f000 f9eb 	bl	8007378 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006fa2:	f000 f9b1 	bl	8007308 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006fa6:	f000 fc8d 	bl	80078c4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006faa:	bf00      	nop
 8006fac:	3730      	adds	r7, #48	; 0x30
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	20002734 	.word	0x20002734
 8006fb8:	08008eac 	.word	0x08008eac
 8006fbc:	20002764 	.word	0x20002764

08006fc0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8006fca:	f04f 0120 	mov.w	r1, #32
 8006fce:	f381 8811 	msr	BASEPRI, r1
 8006fd2:	607b      	str	r3, [r7, #4]
 8006fd4:	480b      	ldr	r0, [pc, #44]	; (8007004 <SEGGER_SYSVIEW_Stop+0x44>)
 8006fd6:	f7ff fad2 	bl	800657e <_PreparePacket>
 8006fda:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006fdc:	4b0a      	ldr	r3, [pc, #40]	; (8007008 <SEGGER_SYSVIEW_Stop+0x48>)
 8006fde:	781b      	ldrb	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d007      	beq.n	8006ff4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006fe4:	220b      	movs	r2, #11
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6838      	ldr	r0, [r7, #0]
 8006fea:	f7ff fbb3 	bl	8006754 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006fee:	4b06      	ldr	r3, [pc, #24]	; (8007008 <SEGGER_SYSVIEW_Stop+0x48>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f383 8811 	msr	BASEPRI, r3
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	20002764 	.word	0x20002764
 8007008:	20002734 	.word	0x20002734

0800700c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800700c:	b580      	push	{r7, lr}
 800700e:	b08c      	sub	sp, #48	; 0x30
 8007010:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8007012:	f3ef 8311 	mrs	r3, BASEPRI
 8007016:	f04f 0120 	mov.w	r1, #32
 800701a:	f381 8811 	msr	BASEPRI, r1
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	4845      	ldr	r0, [pc, #276]	; (8007138 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8007022:	f7ff faac 	bl	800657e <_PreparePacket>
 8007026:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007030:	4b42      	ldr	r3, [pc, #264]	; (800713c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	62bb      	str	r3, [r7, #40]	; 0x28
 8007036:	e00b      	b.n	8007050 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	b2da      	uxtb	r2, r3
 800703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703e:	1c59      	adds	r1, r3, #1
 8007040:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007042:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007046:	b2d2      	uxtb	r2, r2
 8007048:	701a      	strb	r2, [r3, #0]
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	09db      	lsrs	r3, r3, #7
 800704e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	2b7f      	cmp	r3, #127	; 0x7f
 8007054:	d8f0      	bhi.n	8007038 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8007056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007058:	1c5a      	adds	r2, r3, #1
 800705a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800705c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800705e:	b2d2      	uxtb	r2, r2
 8007060:	701a      	strb	r2, [r3, #0]
 8007062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007064:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	627b      	str	r3, [r7, #36]	; 0x24
 800706a:	4b34      	ldr	r3, [pc, #208]	; (800713c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	623b      	str	r3, [r7, #32]
 8007070:	e00b      	b.n	800708a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8007072:	6a3b      	ldr	r3, [r7, #32]
 8007074:	b2da      	uxtb	r2, r3
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	1c59      	adds	r1, r3, #1
 800707a:	6279      	str	r1, [r7, #36]	; 0x24
 800707c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007080:	b2d2      	uxtb	r2, r2
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	09db      	lsrs	r3, r3, #7
 8007088:	623b      	str	r3, [r7, #32]
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	2b7f      	cmp	r3, #127	; 0x7f
 800708e:	d8f0      	bhi.n	8007072 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8007090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007092:	1c5a      	adds	r2, r3, #1
 8007094:	627a      	str	r2, [r7, #36]	; 0x24
 8007096:	6a3a      	ldr	r2, [r7, #32]
 8007098:	b2d2      	uxtb	r2, r2
 800709a:	701a      	strb	r2, [r3, #0]
 800709c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	61fb      	str	r3, [r7, #28]
 80070a4:	4b25      	ldr	r3, [pc, #148]	; (800713c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80070a6:	691b      	ldr	r3, [r3, #16]
 80070a8:	61bb      	str	r3, [r7, #24]
 80070aa:	e00b      	b.n	80070c4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	69fb      	ldr	r3, [r7, #28]
 80070b2:	1c59      	adds	r1, r3, #1
 80070b4:	61f9      	str	r1, [r7, #28]
 80070b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070ba:	b2d2      	uxtb	r2, r2
 80070bc:	701a      	strb	r2, [r3, #0]
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	09db      	lsrs	r3, r3, #7
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	69bb      	ldr	r3, [r7, #24]
 80070c6:	2b7f      	cmp	r3, #127	; 0x7f
 80070c8:	d8f0      	bhi.n	80070ac <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	61fa      	str	r2, [r7, #28]
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	b2d2      	uxtb	r2, r2
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	617b      	str	r3, [r7, #20]
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	e00b      	b.n	80070fc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	697b      	ldr	r3, [r7, #20]
 80070ea:	1c59      	adds	r1, r3, #1
 80070ec:	6179      	str	r1, [r7, #20]
 80070ee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070f2:	b2d2      	uxtb	r2, r2
 80070f4:	701a      	strb	r2, [r3, #0]
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	09db      	lsrs	r3, r3, #7
 80070fa:	613b      	str	r3, [r7, #16]
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	2b7f      	cmp	r3, #127	; 0x7f
 8007100:	d8f0      	bhi.n	80070e4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8007102:	697b      	ldr	r3, [r7, #20]
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	617a      	str	r2, [r7, #20]
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	b2d2      	uxtb	r2, r2
 800710c:	701a      	strb	r2, [r3, #0]
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8007112:	2218      	movs	r2, #24
 8007114:	6879      	ldr	r1, [r7, #4]
 8007116:	68b8      	ldr	r0, [r7, #8]
 8007118:	f7ff fb1c 	bl	8006754 <_SendPacket>
  RECORD_END();
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8007124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800712a:	4b04      	ldr	r3, [pc, #16]	; (800713c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800712c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712e:	4798      	blx	r3
  }
}
 8007130:	bf00      	nop
 8007132:	3730      	adds	r7, #48	; 0x30
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}
 8007138:	20002764 	.word	0x20002764
 800713c:	20002734 	.word	0x20002734

08007140 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8007140:	b580      	push	{r7, lr}
 8007142:	b092      	sub	sp, #72	; 0x48
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8007148:	f3ef 8311 	mrs	r3, BASEPRI
 800714c:	f04f 0120 	mov.w	r1, #32
 8007150:	f381 8811 	msr	BASEPRI, r1
 8007154:	617b      	str	r3, [r7, #20]
 8007156:	486a      	ldr	r0, [pc, #424]	; (8007300 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8007158:	f7ff fa11 	bl	800657e <_PreparePacket>
 800715c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	647b      	str	r3, [r7, #68]	; 0x44
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	4b66      	ldr	r3, [pc, #408]	; (8007304 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	643b      	str	r3, [r7, #64]	; 0x40
 8007172:	e00b      	b.n	800718c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8007174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007176:	b2da      	uxtb	r2, r3
 8007178:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800717a:	1c59      	adds	r1, r3, #1
 800717c:	6479      	str	r1, [r7, #68]	; 0x44
 800717e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]
 8007186:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007188:	09db      	lsrs	r3, r3, #7
 800718a:	643b      	str	r3, [r7, #64]	; 0x40
 800718c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800718e:	2b7f      	cmp	r3, #127	; 0x7f
 8007190:	d8f0      	bhi.n	8007174 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8007192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	647a      	str	r2, [r7, #68]	; 0x44
 8007198:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800719a:	b2d2      	uxtb	r2, r2
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80071ac:	e00b      	b.n	80071c6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80071ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071b4:	1c59      	adds	r1, r3, #1
 80071b6:	63f9      	str	r1, [r7, #60]	; 0x3c
 80071b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071bc:	b2d2      	uxtb	r2, r2
 80071be:	701a      	strb	r2, [r3, #0]
 80071c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c2:	09db      	lsrs	r3, r3, #7
 80071c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80071c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071c8:	2b7f      	cmp	r3, #127	; 0x7f
 80071ca:	d8f0      	bhi.n	80071ae <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80071cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80071d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071d4:	b2d2      	uxtb	r2, r2
 80071d6:	701a      	strb	r2, [r3, #0]
 80071d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071da:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	2220      	movs	r2, #32
 80071e2:	4619      	mov	r1, r3
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7ff f99b 	bl	8006520 <_EncodeStr>
 80071ea:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80071ec:	2209      	movs	r2, #9
 80071ee:	68f9      	ldr	r1, [r7, #12]
 80071f0:	6938      	ldr	r0, [r7, #16]
 80071f2:	f7ff faaf 	bl	8006754 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	637b      	str	r3, [r7, #52]	; 0x34
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	4b40      	ldr	r3, [pc, #256]	; (8007304 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	1ad3      	subs	r3, r2, r3
 8007208:	633b      	str	r3, [r7, #48]	; 0x30
 800720a:	e00b      	b.n	8007224 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800720c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800720e:	b2da      	uxtb	r2, r3
 8007210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007212:	1c59      	adds	r1, r3, #1
 8007214:	6379      	str	r1, [r7, #52]	; 0x34
 8007216:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800721a:	b2d2      	uxtb	r2, r2
 800721c:	701a      	strb	r2, [r3, #0]
 800721e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007220:	09db      	lsrs	r3, r3, #7
 8007222:	633b      	str	r3, [r7, #48]	; 0x30
 8007224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007226:	2b7f      	cmp	r3, #127	; 0x7f
 8007228:	d8f0      	bhi.n	800720c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800722a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	637a      	str	r2, [r7, #52]	; 0x34
 8007230:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007232:	b2d2      	uxtb	r2, r2
 8007234:	701a      	strb	r2, [r3, #0]
 8007236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007238:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	62bb      	str	r3, [r7, #40]	; 0x28
 8007244:	e00b      	b.n	800725e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	b2da      	uxtb	r2, r3
 800724a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800724c:	1c59      	adds	r1, r3, #1
 800724e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8007250:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007254:	b2d2      	uxtb	r2, r2
 8007256:	701a      	strb	r2, [r3, #0]
 8007258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725a:	09db      	lsrs	r3, r3, #7
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	2b7f      	cmp	r3, #127	; 0x7f
 8007262:	d8f0      	bhi.n	8007246 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007266:	1c5a      	adds	r2, r3, #1
 8007268:	62fa      	str	r2, [r7, #44]	; 0x2c
 800726a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800726c:	b2d2      	uxtb	r2, r2
 800726e:	701a      	strb	r2, [r3, #0]
 8007270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007272:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	627b      	str	r3, [r7, #36]	; 0x24
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	691b      	ldr	r3, [r3, #16]
 800727c:	623b      	str	r3, [r7, #32]
 800727e:	e00b      	b.n	8007298 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	b2da      	uxtb	r2, r3
 8007284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007286:	1c59      	adds	r1, r3, #1
 8007288:	6279      	str	r1, [r7, #36]	; 0x24
 800728a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800728e:	b2d2      	uxtb	r2, r2
 8007290:	701a      	strb	r2, [r3, #0]
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	09db      	lsrs	r3, r3, #7
 8007296:	623b      	str	r3, [r7, #32]
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	2b7f      	cmp	r3, #127	; 0x7f
 800729c:	d8f0      	bhi.n	8007280 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800729e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a0:	1c5a      	adds	r2, r3, #1
 80072a2:	627a      	str	r2, [r7, #36]	; 0x24
 80072a4:	6a3a      	ldr	r2, [r7, #32]
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	2300      	movs	r3, #0
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	e00b      	b.n	80072d0 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	b2da      	uxtb	r2, r3
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	1c59      	adds	r1, r3, #1
 80072c0:	61f9      	str	r1, [r7, #28]
 80072c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072c6:	b2d2      	uxtb	r2, r2
 80072c8:	701a      	strb	r2, [r3, #0]
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	09db      	lsrs	r3, r3, #7
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	2b7f      	cmp	r3, #127	; 0x7f
 80072d4:	d8f0      	bhi.n	80072b8 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	61fa      	str	r2, [r7, #28]
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	b2d2      	uxtb	r2, r2
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	69fb      	ldr	r3, [r7, #28]
 80072e4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80072e6:	2215      	movs	r2, #21
 80072e8:	68f9      	ldr	r1, [r7, #12]
 80072ea:	6938      	ldr	r0, [r7, #16]
 80072ec:	f7ff fa32 	bl	8006754 <_SendPacket>
  RECORD_END();
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	f383 8811 	msr	BASEPRI, r3
}
 80072f6:	bf00      	nop
 80072f8:	3748      	adds	r7, #72	; 0x48
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	20002764 	.word	0x20002764
 8007304:	20002734 	.word	0x20002734

08007308 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007308:	b580      	push	{r7, lr}
 800730a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800730c:	4b07      	ldr	r3, [pc, #28]	; (800732c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d008      	beq.n	8007326 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007314:	4b05      	ldr	r3, [pc, #20]	; (800732c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d003      	beq.n	8007326 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800731e:	4b03      	ldr	r3, [pc, #12]	; (800732c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007320:	6a1b      	ldr	r3, [r3, #32]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4798      	blx	r3
  }
}
 8007326:	bf00      	nop
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20002734 	.word	0x20002734

08007330 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007338:	f3ef 8311 	mrs	r3, BASEPRI
 800733c:	f04f 0120 	mov.w	r1, #32
 8007340:	f381 8811 	msr	BASEPRI, r1
 8007344:	617b      	str	r3, [r7, #20]
 8007346:	480b      	ldr	r0, [pc, #44]	; (8007374 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007348:	f7ff f919 	bl	800657e <_PreparePacket>
 800734c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800734e:	2280      	movs	r2, #128	; 0x80
 8007350:	6879      	ldr	r1, [r7, #4]
 8007352:	6938      	ldr	r0, [r7, #16]
 8007354:	f7ff f8e4 	bl	8006520 <_EncodeStr>
 8007358:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800735a:	220e      	movs	r2, #14
 800735c:	68f9      	ldr	r1, [r7, #12]
 800735e:	6938      	ldr	r0, [r7, #16]
 8007360:	f7ff f9f8 	bl	8006754 <_SendPacket>
  RECORD_END();
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	f383 8811 	msr	BASEPRI, r3
}
 800736a:	bf00      	nop
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20002764 	.word	0x20002764

08007378 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007378:	b590      	push	{r4, r7, lr}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800737e:	4b15      	ldr	r3, [pc, #84]	; (80073d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d01a      	beq.n	80073bc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007386:	4b13      	ldr	r3, [pc, #76]	; (80073d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007388:	6a1b      	ldr	r3, [r3, #32]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d015      	beq.n	80073bc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007390:	4b10      	ldr	r3, [pc, #64]	; (80073d4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007392:	6a1b      	ldr	r3, [r3, #32]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4798      	blx	r3
 8007398:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800739c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800739e:	e9d7 0100 	ldrd	r0, r1, [r7]
 80073a2:	f04f 0200 	mov.w	r2, #0
 80073a6:	f04f 0300 	mov.w	r3, #0
 80073aa:	000a      	movs	r2, r1
 80073ac:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80073ae:	4613      	mov	r3, r2
 80073b0:	461a      	mov	r2, r3
 80073b2:	4621      	mov	r1, r4
 80073b4:	200d      	movs	r0, #13
 80073b6:	f7ff fbe7 	bl	8006b88 <SEGGER_SYSVIEW_RecordU32x2>
 80073ba:	e006      	b.n	80073ca <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80073bc:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4619      	mov	r1, r3
 80073c2:	200c      	movs	r0, #12
 80073c4:	f7ff fba4 	bl	8006b10 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80073c8:	bf00      	nop
 80073ca:	bf00      	nop
 80073cc:	370c      	adds	r7, #12
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd90      	pop	{r4, r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20002734 	.word	0x20002734
 80073d8:	e0001004 	.word	0xe0001004

080073dc <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80073e2:	f3ef 8311 	mrs	r3, BASEPRI
 80073e6:	f04f 0120 	mov.w	r1, #32
 80073ea:	f381 8811 	msr	BASEPRI, r1
 80073ee:	60fb      	str	r3, [r7, #12]
 80073f0:	4819      	ldr	r0, [pc, #100]	; (8007458 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80073f2:	f7ff f8c4 	bl	800657e <_PreparePacket>
 80073f6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80073fc:	4b17      	ldr	r3, [pc, #92]	; (800745c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007404:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	613b      	str	r3, [r7, #16]
 800740e:	e00b      	b.n	8007428 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	b2da      	uxtb	r2, r3
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	1c59      	adds	r1, r3, #1
 8007418:	6179      	str	r1, [r7, #20]
 800741a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	09db      	lsrs	r3, r3, #7
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	2b7f      	cmp	r3, #127	; 0x7f
 800742c:	d8f0      	bhi.n	8007410 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	617a      	str	r2, [r7, #20]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	b2d2      	uxtb	r2, r2
 8007438:	701a      	strb	r2, [r3, #0]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800743e:	2202      	movs	r2, #2
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	68b8      	ldr	r0, [r7, #8]
 8007444:	f7ff f986 	bl	8006754 <_SendPacket>
  RECORD_END();
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f383 8811 	msr	BASEPRI, r3
}
 800744e:	bf00      	nop
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	20002764 	.word	0x20002764
 800745c:	e000ed04 	.word	0xe000ed04

08007460 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007466:	f3ef 8311 	mrs	r3, BASEPRI
 800746a:	f04f 0120 	mov.w	r1, #32
 800746e:	f381 8811 	msr	BASEPRI, r1
 8007472:	607b      	str	r3, [r7, #4]
 8007474:	4807      	ldr	r0, [pc, #28]	; (8007494 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007476:	f7ff f882 	bl	800657e <_PreparePacket>
 800747a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800747c:	2203      	movs	r2, #3
 800747e:	6839      	ldr	r1, [r7, #0]
 8007480:	6838      	ldr	r0, [r7, #0]
 8007482:	f7ff f967 	bl	8006754 <_SendPacket>
  RECORD_END();
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f383 8811 	msr	BASEPRI, r3
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20002764 	.word	0x20002764

08007498 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800749e:	f3ef 8311 	mrs	r3, BASEPRI
 80074a2:	f04f 0120 	mov.w	r1, #32
 80074a6:	f381 8811 	msr	BASEPRI, r1
 80074aa:	607b      	str	r3, [r7, #4]
 80074ac:	4807      	ldr	r0, [pc, #28]	; (80074cc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80074ae:	f7ff f866 	bl	800657e <_PreparePacket>
 80074b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80074b4:	2212      	movs	r2, #18
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6838      	ldr	r0, [r7, #0]
 80074ba:	f7ff f94b 	bl	8006754 <_SendPacket>
  RECORD_END();
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f383 8811 	msr	BASEPRI, r3
}
 80074c4:	bf00      	nop
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	20002764 	.word	0x20002764

080074d0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b082      	sub	sp, #8
 80074d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80074d6:	f3ef 8311 	mrs	r3, BASEPRI
 80074da:	f04f 0120 	mov.w	r1, #32
 80074de:	f381 8811 	msr	BASEPRI, r1
 80074e2:	607b      	str	r3, [r7, #4]
 80074e4:	4807      	ldr	r0, [pc, #28]	; (8007504 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80074e6:	f7ff f84a 	bl	800657e <_PreparePacket>
 80074ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80074ec:	2211      	movs	r2, #17
 80074ee:	6839      	ldr	r1, [r7, #0]
 80074f0:	6838      	ldr	r0, [r7, #0]
 80074f2:	f7ff f92f 	bl	8006754 <_SendPacket>
  RECORD_END();
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f383 8811 	msr	BASEPRI, r3
}
 80074fc:	bf00      	nop
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}
 8007504:	20002764 	.word	0x20002764

08007508 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007508:	b580      	push	{r7, lr}
 800750a:	b088      	sub	sp, #32
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007510:	f3ef 8311 	mrs	r3, BASEPRI
 8007514:	f04f 0120 	mov.w	r1, #32
 8007518:	f381 8811 	msr	BASEPRI, r1
 800751c:	617b      	str	r3, [r7, #20]
 800751e:	4819      	ldr	r0, [pc, #100]	; (8007584 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007520:	f7ff f82d 	bl	800657e <_PreparePacket>
 8007524:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800752a:	4b17      	ldr	r3, [pc, #92]	; (8007588 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	61bb      	str	r3, [r7, #24]
 800753c:	e00b      	b.n	8007556 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800753e:	69bb      	ldr	r3, [r7, #24]
 8007540:	b2da      	uxtb	r2, r3
 8007542:	69fb      	ldr	r3, [r7, #28]
 8007544:	1c59      	adds	r1, r3, #1
 8007546:	61f9      	str	r1, [r7, #28]
 8007548:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800754c:	b2d2      	uxtb	r2, r2
 800754e:	701a      	strb	r2, [r3, #0]
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	09db      	lsrs	r3, r3, #7
 8007554:	61bb      	str	r3, [r7, #24]
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	2b7f      	cmp	r3, #127	; 0x7f
 800755a:	d8f0      	bhi.n	800753e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	1c5a      	adds	r2, r3, #1
 8007560:	61fa      	str	r2, [r7, #28]
 8007562:	69ba      	ldr	r2, [r7, #24]
 8007564:	b2d2      	uxtb	r2, r2
 8007566:	701a      	strb	r2, [r3, #0]
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800756c:	2208      	movs	r2, #8
 800756e:	68f9      	ldr	r1, [r7, #12]
 8007570:	6938      	ldr	r0, [r7, #16]
 8007572:	f7ff f8ef 	bl	8006754 <_SendPacket>
  RECORD_END();
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f383 8811 	msr	BASEPRI, r3
}
 800757c:	bf00      	nop
 800757e:	3720      	adds	r7, #32
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}
 8007584:	20002764 	.word	0x20002764
 8007588:	20002734 	.word	0x20002734

0800758c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b088      	sub	sp, #32
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007594:	f3ef 8311 	mrs	r3, BASEPRI
 8007598:	f04f 0120 	mov.w	r1, #32
 800759c:	f381 8811 	msr	BASEPRI, r1
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	4819      	ldr	r0, [pc, #100]	; (8007608 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80075a4:	f7fe ffeb 	bl	800657e <_PreparePacket>
 80075a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80075ae:	4b17      	ldr	r3, [pc, #92]	; (800760c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80075b0:	691b      	ldr	r3, [r3, #16]
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	61fb      	str	r3, [r7, #28]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	61bb      	str	r3, [r7, #24]
 80075c0:	e00b      	b.n	80075da <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	1c59      	adds	r1, r3, #1
 80075ca:	61f9      	str	r1, [r7, #28]
 80075cc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80075d0:	b2d2      	uxtb	r2, r2
 80075d2:	701a      	strb	r2, [r3, #0]
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	09db      	lsrs	r3, r3, #7
 80075d8:	61bb      	str	r3, [r7, #24]
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b7f      	cmp	r3, #127	; 0x7f
 80075de:	d8f0      	bhi.n	80075c2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	61fa      	str	r2, [r7, #28]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	b2d2      	uxtb	r2, r2
 80075ea:	701a      	strb	r2, [r3, #0]
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80075f0:	2204      	movs	r2, #4
 80075f2:	68f9      	ldr	r1, [r7, #12]
 80075f4:	6938      	ldr	r0, [r7, #16]
 80075f6:	f7ff f8ad 	bl	8006754 <_SendPacket>
  RECORD_END();
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	f383 8811 	msr	BASEPRI, r3
}
 8007600:	bf00      	nop
 8007602:	3720      	adds	r7, #32
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	20002764 	.word	0x20002764
 800760c:	20002734 	.word	0x20002734

08007610 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007618:	f3ef 8311 	mrs	r3, BASEPRI
 800761c:	f04f 0120 	mov.w	r1, #32
 8007620:	f381 8811 	msr	BASEPRI, r1
 8007624:	617b      	str	r3, [r7, #20]
 8007626:	4819      	ldr	r0, [pc, #100]	; (800768c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007628:	f7fe ffa9 	bl	800657e <_PreparePacket>
 800762c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007632:	4b17      	ldr	r3, [pc, #92]	; (8007690 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	61fb      	str	r3, [r7, #28]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	61bb      	str	r3, [r7, #24]
 8007644:	e00b      	b.n	800765e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	b2da      	uxtb	r2, r3
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	1c59      	adds	r1, r3, #1
 800764e:	61f9      	str	r1, [r7, #28]
 8007650:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	69bb      	ldr	r3, [r7, #24]
 800765a:	09db      	lsrs	r3, r3, #7
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	69bb      	ldr	r3, [r7, #24]
 8007660:	2b7f      	cmp	r3, #127	; 0x7f
 8007662:	d8f0      	bhi.n	8007646 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	61fa      	str	r2, [r7, #28]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	b2d2      	uxtb	r2, r2
 800766e:	701a      	strb	r2, [r3, #0]
 8007670:	69fb      	ldr	r3, [r7, #28]
 8007672:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007674:	2206      	movs	r2, #6
 8007676:	68f9      	ldr	r1, [r7, #12]
 8007678:	6938      	ldr	r0, [r7, #16]
 800767a:	f7ff f86b 	bl	8006754 <_SendPacket>
  RECORD_END();
 800767e:	697b      	ldr	r3, [r7, #20]
 8007680:	f383 8811 	msr	BASEPRI, r3
}
 8007684:	bf00      	nop
 8007686:	3720      	adds	r7, #32
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	20002764 	.word	0x20002764
 8007690:	20002734 	.word	0x20002734

08007694 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007694:	b580      	push	{r7, lr}
 8007696:	b08a      	sub	sp, #40	; 0x28
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800769e:	f3ef 8311 	mrs	r3, BASEPRI
 80076a2:	f04f 0120 	mov.w	r1, #32
 80076a6:	f381 8811 	msr	BASEPRI, r1
 80076aa:	617b      	str	r3, [r7, #20]
 80076ac:	4827      	ldr	r0, [pc, #156]	; (800774c <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80076ae:	f7fe ff66 	bl	800657e <_PreparePacket>
 80076b2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80076b8:	4b25      	ldr	r3, [pc, #148]	; (8007750 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	627b      	str	r3, [r7, #36]	; 0x24
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	623b      	str	r3, [r7, #32]
 80076ca:	e00b      	b.n	80076e4 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	1c59      	adds	r1, r3, #1
 80076d4:	6279      	str	r1, [r7, #36]	; 0x24
 80076d6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	09db      	lsrs	r3, r3, #7
 80076e2:	623b      	str	r3, [r7, #32]
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	2b7f      	cmp	r3, #127	; 0x7f
 80076e8:	d8f0      	bhi.n	80076cc <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	627a      	str	r2, [r7, #36]	; 0x24
 80076f0:	6a3a      	ldr	r2, [r7, #32]
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	61fb      	str	r3, [r7, #28]
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	61bb      	str	r3, [r7, #24]
 8007702:	e00b      	b.n	800771c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	b2da      	uxtb	r2, r3
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	1c59      	adds	r1, r3, #1
 800770c:	61f9      	str	r1, [r7, #28]
 800770e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	09db      	lsrs	r3, r3, #7
 800771a:	61bb      	str	r3, [r7, #24]
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	2b7f      	cmp	r3, #127	; 0x7f
 8007720:	d8f0      	bhi.n	8007704 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8007722:	69fb      	ldr	r3, [r7, #28]
 8007724:	1c5a      	adds	r2, r3, #1
 8007726:	61fa      	str	r2, [r7, #28]
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	b2d2      	uxtb	r2, r2
 800772c:	701a      	strb	r2, [r3, #0]
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8007732:	2207      	movs	r2, #7
 8007734:	68f9      	ldr	r1, [r7, #12]
 8007736:	6938      	ldr	r0, [r7, #16]
 8007738:	f7ff f80c 	bl	8006754 <_SendPacket>
  RECORD_END();
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	f383 8811 	msr	BASEPRI, r3
}
 8007742:	bf00      	nop
 8007744:	3728      	adds	r7, #40	; 0x28
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20002764 	.word	0x20002764
 8007750:	20002734 	.word	0x20002734

08007754 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800775c:	4b04      	ldr	r3, [pc, #16]	; (8007770 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800775e:	691b      	ldr	r3, [r3, #16]
 8007760:	687a      	ldr	r2, [r7, #4]
 8007762:	1ad3      	subs	r3, r2, r3
}
 8007764:	4618      	mov	r0, r3
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	20002734 	.word	0x20002734

08007774 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007774:	b580      	push	{r7, lr}
 8007776:	b08c      	sub	sp, #48	; 0x30
 8007778:	af00      	add	r7, sp, #0
 800777a:	4603      	mov	r3, r0
 800777c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800777e:	4b40      	ldr	r3, [pc, #256]	; (8007880 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d077      	beq.n	8007876 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8007786:	4b3e      	ldr	r3, [pc, #248]	; (8007880 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800778c:	2300      	movs	r3, #0
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007790:	e008      	b.n	80077a4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800779a:	2b00      	cmp	r3, #0
 800779c:	d007      	beq.n	80077ae <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	3301      	adds	r3, #1
 80077a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077a4:	79fb      	ldrb	r3, [r7, #7]
 80077a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d3f2      	bcc.n	8007792 <SEGGER_SYSVIEW_SendModule+0x1e>
 80077ac:	e000      	b.n	80077b0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80077ae:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80077b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d055      	beq.n	8007862 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80077b6:	f3ef 8311 	mrs	r3, BASEPRI
 80077ba:	f04f 0120 	mov.w	r1, #32
 80077be:	f381 8811 	msr	BASEPRI, r1
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	482f      	ldr	r0, [pc, #188]	; (8007884 <SEGGER_SYSVIEW_SendModule+0x110>)
 80077c6:	f7fe feda 	bl	800657e <_PreparePacket>
 80077ca:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	623b      	str	r3, [r7, #32]
 80077d8:	e00b      	b.n	80077f2 <SEGGER_SYSVIEW_SendModule+0x7e>
 80077da:	6a3b      	ldr	r3, [r7, #32]
 80077dc:	b2da      	uxtb	r2, r3
 80077de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e0:	1c59      	adds	r1, r3, #1
 80077e2:	6279      	str	r1, [r7, #36]	; 0x24
 80077e4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80077e8:	b2d2      	uxtb	r2, r2
 80077ea:	701a      	strb	r2, [r3, #0]
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	09db      	lsrs	r3, r3, #7
 80077f0:	623b      	str	r3, [r7, #32]
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	2b7f      	cmp	r3, #127	; 0x7f
 80077f6:	d8f0      	bhi.n	80077da <SEGGER_SYSVIEW_SendModule+0x66>
 80077f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	627a      	str	r2, [r7, #36]	; 0x24
 80077fe:	6a3a      	ldr	r2, [r7, #32]
 8007800:	b2d2      	uxtb	r2, r2
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007806:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	61fb      	str	r3, [r7, #28]
 800780c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	e00b      	b.n	800782c <SEGGER_SYSVIEW_SendModule+0xb8>
 8007814:	69bb      	ldr	r3, [r7, #24]
 8007816:	b2da      	uxtb	r2, r3
 8007818:	69fb      	ldr	r3, [r7, #28]
 800781a:	1c59      	adds	r1, r3, #1
 800781c:	61f9      	str	r1, [r7, #28]
 800781e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007822:	b2d2      	uxtb	r2, r2
 8007824:	701a      	strb	r2, [r3, #0]
 8007826:	69bb      	ldr	r3, [r7, #24]
 8007828:	09db      	lsrs	r3, r3, #7
 800782a:	61bb      	str	r3, [r7, #24]
 800782c:	69bb      	ldr	r3, [r7, #24]
 800782e:	2b7f      	cmp	r3, #127	; 0x7f
 8007830:	d8f0      	bhi.n	8007814 <SEGGER_SYSVIEW_SendModule+0xa0>
 8007832:	69fb      	ldr	r3, [r7, #28]
 8007834:	1c5a      	adds	r2, r3, #1
 8007836:	61fa      	str	r2, [r7, #28]
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	b2d2      	uxtb	r2, r2
 800783c:	701a      	strb	r2, [r3, #0]
 800783e:	69fb      	ldr	r3, [r7, #28]
 8007840:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	2280      	movs	r2, #128	; 0x80
 8007848:	4619      	mov	r1, r3
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f7fe fe68 	bl	8006520 <_EncodeStr>
 8007850:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007852:	2216      	movs	r2, #22
 8007854:	68f9      	ldr	r1, [r7, #12]
 8007856:	6938      	ldr	r0, [r7, #16]
 8007858:	f7fe ff7c 	bl	8006754 <_SendPacket>
      RECORD_END();
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8007862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007864:	2b00      	cmp	r3, #0
 8007866:	d006      	beq.n	8007876 <SEGGER_SYSVIEW_SendModule+0x102>
 8007868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	4798      	blx	r3
    }
  }
}
 8007876:	bf00      	nop
 8007878:	3730      	adds	r7, #48	; 0x30
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	2000275c 	.word	0x2000275c
 8007884:	20002764 	.word	0x20002764

08007888 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800788e:	4b0c      	ldr	r3, [pc, #48]	; (80078c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00f      	beq.n	80078b6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007896:	4b0a      	ldr	r3, [pc, #40]	; (80078c0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d002      	beq.n	80078aa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1f2      	bne.n	800789c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	2000275c 	.word	0x2000275c

080078c4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80078ca:	f3ef 8311 	mrs	r3, BASEPRI
 80078ce:	f04f 0120 	mov.w	r1, #32
 80078d2:	f381 8811 	msr	BASEPRI, r1
 80078d6:	60fb      	str	r3, [r7, #12]
 80078d8:	4817      	ldr	r0, [pc, #92]	; (8007938 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80078da:	f7fe fe50 	bl	800657e <_PreparePacket>
 80078de:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	617b      	str	r3, [r7, #20]
 80078e8:	4b14      	ldr	r3, [pc, #80]	; (800793c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80078ea:	781b      	ldrb	r3, [r3, #0]
 80078ec:	613b      	str	r3, [r7, #16]
 80078ee:	e00b      	b.n	8007908 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80078f0:	693b      	ldr	r3, [r7, #16]
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	1c59      	adds	r1, r3, #1
 80078f8:	6179      	str	r1, [r7, #20]
 80078fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80078fe:	b2d2      	uxtb	r2, r2
 8007900:	701a      	strb	r2, [r3, #0]
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	09db      	lsrs	r3, r3, #7
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	2b7f      	cmp	r3, #127	; 0x7f
 800790c:	d8f0      	bhi.n	80078f0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	1c5a      	adds	r2, r3, #1
 8007912:	617a      	str	r2, [r7, #20]
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	b2d2      	uxtb	r2, r2
 8007918:	701a      	strb	r2, [r3, #0]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800791e:	221b      	movs	r2, #27
 8007920:	6879      	ldr	r1, [r7, #4]
 8007922:	68b8      	ldr	r0, [r7, #8]
 8007924:	f7fe ff16 	bl	8006754 <_SendPacket>
  RECORD_END();
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f383 8811 	msr	BASEPRI, r3
}
 800792e:	bf00      	nop
 8007930:	3718      	adds	r7, #24
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	20002764 	.word	0x20002764
 800793c:	20002760 	.word	0x20002760

08007940 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007940:	b580      	push	{r7, lr}
 8007942:	b08a      	sub	sp, #40	; 0x28
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007948:	f3ef 8311 	mrs	r3, BASEPRI
 800794c:	f04f 0120 	mov.w	r1, #32
 8007950:	f381 8811 	msr	BASEPRI, r1
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	4827      	ldr	r0, [pc, #156]	; (80079f4 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007958:	f7fe fe11 	bl	800657e <_PreparePacket>
 800795c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800795e:	2280      	movs	r2, #128	; 0x80
 8007960:	6879      	ldr	r1, [r7, #4]
 8007962:	6938      	ldr	r0, [r7, #16]
 8007964:	f7fe fddc 	bl	8006520 <_EncodeStr>
 8007968:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
 800796e:	2301      	movs	r3, #1
 8007970:	623b      	str	r3, [r7, #32]
 8007972:	e00b      	b.n	800798c <SEGGER_SYSVIEW_Warn+0x4c>
 8007974:	6a3b      	ldr	r3, [r7, #32]
 8007976:	b2da      	uxtb	r2, r3
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	1c59      	adds	r1, r3, #1
 800797c:	6279      	str	r1, [r7, #36]	; 0x24
 800797e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]
 8007986:	6a3b      	ldr	r3, [r7, #32]
 8007988:	09db      	lsrs	r3, r3, #7
 800798a:	623b      	str	r3, [r7, #32]
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	2b7f      	cmp	r3, #127	; 0x7f
 8007990:	d8f0      	bhi.n	8007974 <SEGGER_SYSVIEW_Warn+0x34>
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	627a      	str	r2, [r7, #36]	; 0x24
 8007998:	6a3a      	ldr	r2, [r7, #32]
 800799a:	b2d2      	uxtb	r2, r2
 800799c:	701a      	strb	r2, [r3, #0]
 800799e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	61fb      	str	r3, [r7, #28]
 80079a6:	2300      	movs	r3, #0
 80079a8:	61bb      	str	r3, [r7, #24]
 80079aa:	e00b      	b.n	80079c4 <SEGGER_SYSVIEW_Warn+0x84>
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	1c59      	adds	r1, r3, #1
 80079b4:	61f9      	str	r1, [r7, #28]
 80079b6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80079ba:	b2d2      	uxtb	r2, r2
 80079bc:	701a      	strb	r2, [r3, #0]
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	09db      	lsrs	r3, r3, #7
 80079c2:	61bb      	str	r3, [r7, #24]
 80079c4:	69bb      	ldr	r3, [r7, #24]
 80079c6:	2b7f      	cmp	r3, #127	; 0x7f
 80079c8:	d8f0      	bhi.n	80079ac <SEGGER_SYSVIEW_Warn+0x6c>
 80079ca:	69fb      	ldr	r3, [r7, #28]
 80079cc:	1c5a      	adds	r2, r3, #1
 80079ce:	61fa      	str	r2, [r7, #28]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	b2d2      	uxtb	r2, r2
 80079d4:	701a      	strb	r2, [r3, #0]
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80079da:	221a      	movs	r2, #26
 80079dc:	68f9      	ldr	r1, [r7, #12]
 80079de:	6938      	ldr	r0, [r7, #16]
 80079e0:	f7fe feb8 	bl	8006754 <_SendPacket>
  RECORD_END();
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f383 8811 	msr	BASEPRI, r3
}
 80079ea:	bf00      	nop
 80079ec:	3728      	adds	r7, #40	; 0x28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20002764 	.word	0x20002764

080079f8 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
 8007a04:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8007a06:	683a      	ldr	r2, [r7, #0]
 8007a08:	6879      	ldr	r1, [r7, #4]
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	f7fe fc96 	bl	800633c <SEGGER_RTT_Write>
  return len;
 8007a10:	683b      	ldr	r3, [r7, #0]
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8007a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a1e:	b085      	sub	sp, #20
 8007a20:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8007a22:	2300      	movs	r3, #0
 8007a24:	607b      	str	r3, [r7, #4]
 8007a26:	e033      	b.n	8007a90 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8007a28:	491e      	ldr	r1, [pc, #120]	; (8007aa4 <_cbSendTaskList+0x88>)
 8007a2a:	687a      	ldr	r2, [r7, #4]
 8007a2c:	4613      	mov	r3, r2
 8007a2e:	009b      	lsls	r3, r3, #2
 8007a30:	4413      	add	r3, r2
 8007a32:	009b      	lsls	r3, r3, #2
 8007a34:	440b      	add	r3, r1
 8007a36:	6818      	ldr	r0, [r3, #0]
 8007a38:	491a      	ldr	r1, [pc, #104]	; (8007aa4 <_cbSendTaskList+0x88>)
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	3304      	adds	r3, #4
 8007a48:	6819      	ldr	r1, [r3, #0]
 8007a4a:	4c16      	ldr	r4, [pc, #88]	; (8007aa4 <_cbSendTaskList+0x88>)
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	4413      	add	r3, r2
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4423      	add	r3, r4
 8007a58:	3308      	adds	r3, #8
 8007a5a:	681c      	ldr	r4, [r3, #0]
 8007a5c:	4d11      	ldr	r5, [pc, #68]	; (8007aa4 <_cbSendTaskList+0x88>)
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	442b      	add	r3, r5
 8007a6a:	330c      	adds	r3, #12
 8007a6c:	681d      	ldr	r5, [r3, #0]
 8007a6e:	4e0d      	ldr	r6, [pc, #52]	; (8007aa4 <_cbSendTaskList+0x88>)
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	4613      	mov	r3, r2
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	4413      	add	r3, r2
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	4433      	add	r3, r6
 8007a7c:	3310      	adds	r3, #16
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	462b      	mov	r3, r5
 8007a84:	4622      	mov	r2, r4
 8007a86:	f000 f8c7 	bl	8007c18 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	607b      	str	r3, [r7, #4]
 8007a90:	4b05      	ldr	r3, [pc, #20]	; (8007aa8 <_cbSendTaskList+0x8c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	687a      	ldr	r2, [r7, #4]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d3c6      	bcc.n	8007a28 <_cbSendTaskList+0xc>
  }
}
 8007a9a:	bf00      	nop
 8007a9c:	bf00      	nop
 8007a9e:	370c      	adds	r7, #12
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007aa4:	20002848 	.word	0x20002848
 8007aa8:	200028e8 	.word	0x200028e8

08007aac <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8007aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ab0:	b084      	sub	sp, #16
 8007ab2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8007ab4:	f7fd f934 	bl	8004d20 <xTaskGetTickCountFromISR>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2200      	movs	r2, #0
 8007abc:	603b      	str	r3, [r7, #0]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  Time *= portTICK_PERIOD_MS;
 8007ac8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007acc:	eb12 0a02 	adds.w	sl, r2, r2
 8007ad0:	eb43 0b03 	adc.w	fp, r3, r3
 8007ad4:	e9c7 ab02 	strd	sl, fp, [r7, #8]
  Time *= 1000;
 8007ad8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007adc:	4602      	mov	r2, r0
 8007ade:	460b      	mov	r3, r1
 8007ae0:	f04f 0a00 	mov.w	sl, #0
 8007ae4:	f04f 0b00 	mov.w	fp, #0
 8007ae8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8007aec:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8007af0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8007af4:	4652      	mov	r2, sl
 8007af6:	465b      	mov	r3, fp
 8007af8:	1a14      	subs	r4, r2, r0
 8007afa:	eb63 0501 	sbc.w	r5, r3, r1
 8007afe:	f04f 0200 	mov.w	r2, #0
 8007b02:	f04f 0300 	mov.w	r3, #0
 8007b06:	00ab      	lsls	r3, r5, #2
 8007b08:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8007b0c:	00a2      	lsls	r2, r4, #2
 8007b0e:	4614      	mov	r4, r2
 8007b10:	461d      	mov	r5, r3
 8007b12:	eb14 0800 	adds.w	r8, r4, r0
 8007b16:	eb45 0901 	adc.w	r9, r5, r1
 8007b1a:	f04f 0200 	mov.w	r2, #0
 8007b1e:	f04f 0300 	mov.w	r3, #0
 8007b22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b2e:	4690      	mov	r8, r2
 8007b30:	4699      	mov	r9, r3
 8007b32:	e9c7 8902 	strd	r8, r9, [r7, #8]
  return Time;
 8007b36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8007b3a:	4610      	mov	r0, r2
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08007b48 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b086      	sub	sp, #24
 8007b4c:	af02      	add	r7, sp, #8
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	607a      	str	r2, [r7, #4]
 8007b54:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8007b56:	2205      	movs	r2, #5
 8007b58:	492b      	ldr	r1, [pc, #172]	; (8007c08 <SYSVIEW_AddTask+0xc0>)
 8007b5a:	68b8      	ldr	r0, [r7, #8]
 8007b5c:	f000 fa82 	bl	8008064 <memcmp>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d04b      	beq.n	8007bfe <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8007b66:	4b29      	ldr	r3, [pc, #164]	; (8007c0c <SYSVIEW_AddTask+0xc4>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b07      	cmp	r3, #7
 8007b6c:	d903      	bls.n	8007b76 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8007b6e:	4828      	ldr	r0, [pc, #160]	; (8007c10 <SYSVIEW_AddTask+0xc8>)
 8007b70:	f7ff fee6 	bl	8007940 <SEGGER_SYSVIEW_Warn>
    return;
 8007b74:	e044      	b.n	8007c00 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8007b76:	4b25      	ldr	r3, [pc, #148]	; (8007c0c <SYSVIEW_AddTask+0xc4>)
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	4926      	ldr	r1, [pc, #152]	; (8007c14 <SYSVIEW_AddTask+0xcc>)
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8007b8a:	4b20      	ldr	r3, [pc, #128]	; (8007c0c <SYSVIEW_AddTask+0xc4>)
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	4921      	ldr	r1, [pc, #132]	; (8007c14 <SYSVIEW_AddTask+0xcc>)
 8007b90:	4613      	mov	r3, r2
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	4413      	add	r3, r2
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	440b      	add	r3, r1
 8007b9a:	3304      	adds	r3, #4
 8007b9c:	68ba      	ldr	r2, [r7, #8]
 8007b9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8007ba0:	4b1a      	ldr	r3, [pc, #104]	; (8007c0c <SYSVIEW_AddTask+0xc4>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	491b      	ldr	r1, [pc, #108]	; (8007c14 <SYSVIEW_AddTask+0xcc>)
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8007bb6:	4b15      	ldr	r3, [pc, #84]	; (8007c0c <SYSVIEW_AddTask+0xc4>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	4916      	ldr	r1, [pc, #88]	; (8007c14 <SYSVIEW_AddTask+0xcc>)
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	4413      	add	r3, r2
 8007bc2:	009b      	lsls	r3, r3, #2
 8007bc4:	440b      	add	r3, r1
 8007bc6:	330c      	adds	r3, #12
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8007bcc:	4b0f      	ldr	r3, [pc, #60]	; (8007c0c <SYSVIEW_AddTask+0xc4>)
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	4910      	ldr	r1, [pc, #64]	; (8007c14 <SYSVIEW_AddTask+0xcc>)
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	440b      	add	r3, r1
 8007bdc:	3310      	adds	r3, #16
 8007bde:	69ba      	ldr	r2, [r7, #24]
 8007be0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8007be2:	4b0a      	ldr	r3, [pc, #40]	; (8007c0c <SYSVIEW_AddTask+0xc4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3301      	adds	r3, #1
 8007be8:	4a08      	ldr	r2, [pc, #32]	; (8007c0c <SYSVIEW_AddTask+0xc4>)
 8007bea:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	68b9      	ldr	r1, [r7, #8]
 8007bf6:	68f8      	ldr	r0, [r7, #12]
 8007bf8:	f000 f80e 	bl	8007c18 <SYSVIEW_SendTaskInfo>
 8007bfc:	e000      	b.n	8007c00 <SYSVIEW_AddTask+0xb8>
    return;
 8007bfe:	bf00      	nop

}
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	08008e00 	.word	0x08008e00
 8007c0c:	200028e8 	.word	0x200028e8
 8007c10:	08008e08 	.word	0x08008e08
 8007c14:	20002848 	.word	0x20002848

08007c18 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b08a      	sub	sp, #40	; 0x28
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
 8007c24:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8007c26:	f107 0314 	add.w	r3, r7, #20
 8007c2a:	2214      	movs	r2, #20
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f000 fa28 	bl	8008084 <memset>
  TaskInfo.TaskID     = TaskID;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8007c48:	f107 0314 	add.w	r3, r7, #20
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff fa77 	bl	8007140 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8007c52:	bf00      	nop
 8007c54:	3728      	adds	r7, #40	; 0x28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	bd80      	pop	{r7, pc}
	...

08007c5c <std>:
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	b510      	push	{r4, lr}
 8007c60:	4604      	mov	r4, r0
 8007c62:	e9c0 3300 	strd	r3, r3, [r0]
 8007c66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c6a:	6083      	str	r3, [r0, #8]
 8007c6c:	8181      	strh	r1, [r0, #12]
 8007c6e:	6643      	str	r3, [r0, #100]	; 0x64
 8007c70:	81c2      	strh	r2, [r0, #14]
 8007c72:	6183      	str	r3, [r0, #24]
 8007c74:	4619      	mov	r1, r3
 8007c76:	2208      	movs	r2, #8
 8007c78:	305c      	adds	r0, #92	; 0x5c
 8007c7a:	f000 fa03 	bl	8008084 <memset>
 8007c7e:	4b05      	ldr	r3, [pc, #20]	; (8007c94 <std+0x38>)
 8007c80:	6224      	str	r4, [r4, #32]
 8007c82:	6263      	str	r3, [r4, #36]	; 0x24
 8007c84:	4b04      	ldr	r3, [pc, #16]	; (8007c98 <std+0x3c>)
 8007c86:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c88:	4b04      	ldr	r3, [pc, #16]	; (8007c9c <std+0x40>)
 8007c8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c8c:	4b04      	ldr	r3, [pc, #16]	; (8007ca0 <std+0x44>)
 8007c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8007c90:	bd10      	pop	{r4, pc}
 8007c92:	bf00      	nop
 8007c94:	08007eb5 	.word	0x08007eb5
 8007c98:	08007ed7 	.word	0x08007ed7
 8007c9c:	08007f0f 	.word	0x08007f0f
 8007ca0:	08007f33 	.word	0x08007f33

08007ca4 <stdio_exit_handler>:
 8007ca4:	4a02      	ldr	r2, [pc, #8]	; (8007cb0 <stdio_exit_handler+0xc>)
 8007ca6:	4903      	ldr	r1, [pc, #12]	; (8007cb4 <stdio_exit_handler+0x10>)
 8007ca8:	4803      	ldr	r0, [pc, #12]	; (8007cb8 <stdio_exit_handler+0x14>)
 8007caa:	f000 b869 	b.w	8007d80 <_fwalk_sglue>
 8007cae:	bf00      	nop
 8007cb0:	20000034 	.word	0x20000034
 8007cb4:	08008a65 	.word	0x08008a65
 8007cb8:	20000040 	.word	0x20000040

08007cbc <cleanup_stdio>:
 8007cbc:	6841      	ldr	r1, [r0, #4]
 8007cbe:	4b0c      	ldr	r3, [pc, #48]	; (8007cf0 <cleanup_stdio+0x34>)
 8007cc0:	b510      	push	{r4, lr}
 8007cc2:	4299      	cmp	r1, r3
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	d001      	beq.n	8007ccc <cleanup_stdio+0x10>
 8007cc8:	f000 fecc 	bl	8008a64 <_fflush_r>
 8007ccc:	68a1      	ldr	r1, [r4, #8]
 8007cce:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <cleanup_stdio+0x38>)
 8007cd0:	4299      	cmp	r1, r3
 8007cd2:	d002      	beq.n	8007cda <cleanup_stdio+0x1e>
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f000 fec5 	bl	8008a64 <_fflush_r>
 8007cda:	68e1      	ldr	r1, [r4, #12]
 8007cdc:	4b06      	ldr	r3, [pc, #24]	; (8007cf8 <cleanup_stdio+0x3c>)
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d004      	beq.n	8007cec <cleanup_stdio+0x30>
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce8:	f000 bebc 	b.w	8008a64 <_fflush_r>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	bf00      	nop
 8007cf0:	200028ec 	.word	0x200028ec
 8007cf4:	20002954 	.word	0x20002954
 8007cf8:	200029bc 	.word	0x200029bc

08007cfc <global_stdio_init.part.0>:
 8007cfc:	b510      	push	{r4, lr}
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	; (8007d2c <global_stdio_init.part.0+0x30>)
 8007d00:	4c0b      	ldr	r4, [pc, #44]	; (8007d30 <global_stdio_init.part.0+0x34>)
 8007d02:	4a0c      	ldr	r2, [pc, #48]	; (8007d34 <global_stdio_init.part.0+0x38>)
 8007d04:	4620      	mov	r0, r4
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	2104      	movs	r1, #4
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f7ff ffa6 	bl	8007c5c <std>
 8007d10:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d14:	2201      	movs	r2, #1
 8007d16:	2109      	movs	r1, #9
 8007d18:	f7ff ffa0 	bl	8007c5c <std>
 8007d1c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d20:	2202      	movs	r2, #2
 8007d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d26:	2112      	movs	r1, #18
 8007d28:	f7ff bf98 	b.w	8007c5c <std>
 8007d2c:	20002a24 	.word	0x20002a24
 8007d30:	200028ec 	.word	0x200028ec
 8007d34:	08007ca5 	.word	0x08007ca5

08007d38 <__sfp_lock_acquire>:
 8007d38:	4801      	ldr	r0, [pc, #4]	; (8007d40 <__sfp_lock_acquire+0x8>)
 8007d3a:	f000 ba19 	b.w	8008170 <__retarget_lock_acquire_recursive>
 8007d3e:	bf00      	nop
 8007d40:	20002a2d 	.word	0x20002a2d

08007d44 <__sfp_lock_release>:
 8007d44:	4801      	ldr	r0, [pc, #4]	; (8007d4c <__sfp_lock_release+0x8>)
 8007d46:	f000 ba14 	b.w	8008172 <__retarget_lock_release_recursive>
 8007d4a:	bf00      	nop
 8007d4c:	20002a2d 	.word	0x20002a2d

08007d50 <__sinit>:
 8007d50:	b510      	push	{r4, lr}
 8007d52:	4604      	mov	r4, r0
 8007d54:	f7ff fff0 	bl	8007d38 <__sfp_lock_acquire>
 8007d58:	6a23      	ldr	r3, [r4, #32]
 8007d5a:	b11b      	cbz	r3, 8007d64 <__sinit+0x14>
 8007d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d60:	f7ff bff0 	b.w	8007d44 <__sfp_lock_release>
 8007d64:	4b04      	ldr	r3, [pc, #16]	; (8007d78 <__sinit+0x28>)
 8007d66:	6223      	str	r3, [r4, #32]
 8007d68:	4b04      	ldr	r3, [pc, #16]	; (8007d7c <__sinit+0x2c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f5      	bne.n	8007d5c <__sinit+0xc>
 8007d70:	f7ff ffc4 	bl	8007cfc <global_stdio_init.part.0>
 8007d74:	e7f2      	b.n	8007d5c <__sinit+0xc>
 8007d76:	bf00      	nop
 8007d78:	08007cbd 	.word	0x08007cbd
 8007d7c:	20002a24 	.word	0x20002a24

08007d80 <_fwalk_sglue>:
 8007d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d84:	4607      	mov	r7, r0
 8007d86:	4688      	mov	r8, r1
 8007d88:	4614      	mov	r4, r2
 8007d8a:	2600      	movs	r6, #0
 8007d8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d90:	f1b9 0901 	subs.w	r9, r9, #1
 8007d94:	d505      	bpl.n	8007da2 <_fwalk_sglue+0x22>
 8007d96:	6824      	ldr	r4, [r4, #0]
 8007d98:	2c00      	cmp	r4, #0
 8007d9a:	d1f7      	bne.n	8007d8c <_fwalk_sglue+0xc>
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d907      	bls.n	8007db8 <_fwalk_sglue+0x38>
 8007da8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dac:	3301      	adds	r3, #1
 8007dae:	d003      	beq.n	8007db8 <_fwalk_sglue+0x38>
 8007db0:	4629      	mov	r1, r5
 8007db2:	4638      	mov	r0, r7
 8007db4:	47c0      	blx	r8
 8007db6:	4306      	orrs	r6, r0
 8007db8:	3568      	adds	r5, #104	; 0x68
 8007dba:	e7e9      	b.n	8007d90 <_fwalk_sglue+0x10>

08007dbc <_puts_r>:
 8007dbc:	6a03      	ldr	r3, [r0, #32]
 8007dbe:	b570      	push	{r4, r5, r6, lr}
 8007dc0:	4605      	mov	r5, r0
 8007dc2:	460e      	mov	r6, r1
 8007dc4:	6884      	ldr	r4, [r0, #8]
 8007dc6:	b90b      	cbnz	r3, 8007dcc <_puts_r+0x10>
 8007dc8:	f7ff ffc2 	bl	8007d50 <__sinit>
 8007dcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dce:	07db      	lsls	r3, r3, #31
 8007dd0:	d405      	bmi.n	8007dde <_puts_r+0x22>
 8007dd2:	89a3      	ldrh	r3, [r4, #12]
 8007dd4:	0598      	lsls	r0, r3, #22
 8007dd6:	d402      	bmi.n	8007dde <_puts_r+0x22>
 8007dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dda:	f000 f9c9 	bl	8008170 <__retarget_lock_acquire_recursive>
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	0719      	lsls	r1, r3, #28
 8007de2:	d513      	bpl.n	8007e0c <_puts_r+0x50>
 8007de4:	6923      	ldr	r3, [r4, #16]
 8007de6:	b18b      	cbz	r3, 8007e0c <_puts_r+0x50>
 8007de8:	3e01      	subs	r6, #1
 8007dea:	68a3      	ldr	r3, [r4, #8]
 8007dec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007df0:	3b01      	subs	r3, #1
 8007df2:	60a3      	str	r3, [r4, #8]
 8007df4:	b9e9      	cbnz	r1, 8007e32 <_puts_r+0x76>
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	da2e      	bge.n	8007e58 <_puts_r+0x9c>
 8007dfa:	4622      	mov	r2, r4
 8007dfc:	210a      	movs	r1, #10
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f000 f89b 	bl	8007f3a <__swbuf_r>
 8007e04:	3001      	adds	r0, #1
 8007e06:	d007      	beq.n	8007e18 <_puts_r+0x5c>
 8007e08:	250a      	movs	r5, #10
 8007e0a:	e007      	b.n	8007e1c <_puts_r+0x60>
 8007e0c:	4621      	mov	r1, r4
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 f8d0 	bl	8007fb4 <__swsetup_r>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d0e7      	beq.n	8007de8 <_puts_r+0x2c>
 8007e18:	f04f 35ff 	mov.w	r5, #4294967295
 8007e1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e1e:	07da      	lsls	r2, r3, #31
 8007e20:	d405      	bmi.n	8007e2e <_puts_r+0x72>
 8007e22:	89a3      	ldrh	r3, [r4, #12]
 8007e24:	059b      	lsls	r3, r3, #22
 8007e26:	d402      	bmi.n	8007e2e <_puts_r+0x72>
 8007e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e2a:	f000 f9a2 	bl	8008172 <__retarget_lock_release_recursive>
 8007e2e:	4628      	mov	r0, r5
 8007e30:	bd70      	pop	{r4, r5, r6, pc}
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	da04      	bge.n	8007e40 <_puts_r+0x84>
 8007e36:	69a2      	ldr	r2, [r4, #24]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	dc06      	bgt.n	8007e4a <_puts_r+0x8e>
 8007e3c:	290a      	cmp	r1, #10
 8007e3e:	d004      	beq.n	8007e4a <_puts_r+0x8e>
 8007e40:	6823      	ldr	r3, [r4, #0]
 8007e42:	1c5a      	adds	r2, r3, #1
 8007e44:	6022      	str	r2, [r4, #0]
 8007e46:	7019      	strb	r1, [r3, #0]
 8007e48:	e7cf      	b.n	8007dea <_puts_r+0x2e>
 8007e4a:	4622      	mov	r2, r4
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	f000 f874 	bl	8007f3a <__swbuf_r>
 8007e52:	3001      	adds	r0, #1
 8007e54:	d1c9      	bne.n	8007dea <_puts_r+0x2e>
 8007e56:	e7df      	b.n	8007e18 <_puts_r+0x5c>
 8007e58:	250a      	movs	r5, #10
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	1c5a      	adds	r2, r3, #1
 8007e5e:	6022      	str	r2, [r4, #0]
 8007e60:	701d      	strb	r5, [r3, #0]
 8007e62:	e7db      	b.n	8007e1c <_puts_r+0x60>

08007e64 <puts>:
 8007e64:	4b02      	ldr	r3, [pc, #8]	; (8007e70 <puts+0xc>)
 8007e66:	4601      	mov	r1, r0
 8007e68:	6818      	ldr	r0, [r3, #0]
 8007e6a:	f7ff bfa7 	b.w	8007dbc <_puts_r>
 8007e6e:	bf00      	nop
 8007e70:	2000008c 	.word	0x2000008c

08007e74 <siprintf>:
 8007e74:	b40e      	push	{r1, r2, r3}
 8007e76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007e7a:	b500      	push	{lr}
 8007e7c:	b09c      	sub	sp, #112	; 0x70
 8007e7e:	ab1d      	add	r3, sp, #116	; 0x74
 8007e80:	9002      	str	r0, [sp, #8]
 8007e82:	9006      	str	r0, [sp, #24]
 8007e84:	9107      	str	r1, [sp, #28]
 8007e86:	9104      	str	r1, [sp, #16]
 8007e88:	4808      	ldr	r0, [pc, #32]	; (8007eac <siprintf+0x38>)
 8007e8a:	4909      	ldr	r1, [pc, #36]	; (8007eb0 <siprintf+0x3c>)
 8007e8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e90:	9105      	str	r1, [sp, #20]
 8007e92:	6800      	ldr	r0, [r0, #0]
 8007e94:	a902      	add	r1, sp, #8
 8007e96:	9301      	str	r3, [sp, #4]
 8007e98:	f000 fad0 	bl	800843c <_svfiprintf_r>
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	9b02      	ldr	r3, [sp, #8]
 8007ea0:	701a      	strb	r2, [r3, #0]
 8007ea2:	b01c      	add	sp, #112	; 0x70
 8007ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea8:	b003      	add	sp, #12
 8007eaa:	4770      	bx	lr
 8007eac:	2000008c 	.word	0x2000008c
 8007eb0:	ffff0208 	.word	0xffff0208

08007eb4 <__sread>:
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	460c      	mov	r4, r1
 8007eb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ebc:	f000 f922 	bl	8008104 <_read_r>
 8007ec0:	2800      	cmp	r0, #0
 8007ec2:	bfab      	itete	ge
 8007ec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ec6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ec8:	181b      	addge	r3, r3, r0
 8007eca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ece:	bfac      	ite	ge
 8007ed0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ed2:	81a3      	strhlt	r3, [r4, #12]
 8007ed4:	bd10      	pop	{r4, pc}

08007ed6 <__swrite>:
 8007ed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eda:	461f      	mov	r7, r3
 8007edc:	898b      	ldrh	r3, [r1, #12]
 8007ede:	4605      	mov	r5, r0
 8007ee0:	05db      	lsls	r3, r3, #23
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	4616      	mov	r6, r2
 8007ee6:	d505      	bpl.n	8007ef4 <__swrite+0x1e>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	2200      	movs	r2, #0
 8007eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef0:	f000 f8f6 	bl	80080e0 <_lseek_r>
 8007ef4:	89a3      	ldrh	r3, [r4, #12]
 8007ef6:	4632      	mov	r2, r6
 8007ef8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007efc:	81a3      	strh	r3, [r4, #12]
 8007efe:	4628      	mov	r0, r5
 8007f00:	463b      	mov	r3, r7
 8007f02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f0a:	f7ff bd75 	b.w	80079f8 <_write_r>

08007f0e <__sseek>:
 8007f0e:	b510      	push	{r4, lr}
 8007f10:	460c      	mov	r4, r1
 8007f12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f16:	f000 f8e3 	bl	80080e0 <_lseek_r>
 8007f1a:	1c43      	adds	r3, r0, #1
 8007f1c:	89a3      	ldrh	r3, [r4, #12]
 8007f1e:	bf15      	itete	ne
 8007f20:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f2a:	81a3      	strheq	r3, [r4, #12]
 8007f2c:	bf18      	it	ne
 8007f2e:	81a3      	strhne	r3, [r4, #12]
 8007f30:	bd10      	pop	{r4, pc}

08007f32 <__sclose>:
 8007f32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f36:	f000 b8c3 	b.w	80080c0 <_close_r>

08007f3a <__swbuf_r>:
 8007f3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f3c:	460e      	mov	r6, r1
 8007f3e:	4614      	mov	r4, r2
 8007f40:	4605      	mov	r5, r0
 8007f42:	b118      	cbz	r0, 8007f4c <__swbuf_r+0x12>
 8007f44:	6a03      	ldr	r3, [r0, #32]
 8007f46:	b90b      	cbnz	r3, 8007f4c <__swbuf_r+0x12>
 8007f48:	f7ff ff02 	bl	8007d50 <__sinit>
 8007f4c:	69a3      	ldr	r3, [r4, #24]
 8007f4e:	60a3      	str	r3, [r4, #8]
 8007f50:	89a3      	ldrh	r3, [r4, #12]
 8007f52:	071a      	lsls	r2, r3, #28
 8007f54:	d525      	bpl.n	8007fa2 <__swbuf_r+0x68>
 8007f56:	6923      	ldr	r3, [r4, #16]
 8007f58:	b31b      	cbz	r3, 8007fa2 <__swbuf_r+0x68>
 8007f5a:	6823      	ldr	r3, [r4, #0]
 8007f5c:	6922      	ldr	r2, [r4, #16]
 8007f5e:	b2f6      	uxtb	r6, r6
 8007f60:	1a98      	subs	r0, r3, r2
 8007f62:	6963      	ldr	r3, [r4, #20]
 8007f64:	4637      	mov	r7, r6
 8007f66:	4283      	cmp	r3, r0
 8007f68:	dc04      	bgt.n	8007f74 <__swbuf_r+0x3a>
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	4628      	mov	r0, r5
 8007f6e:	f000 fd79 	bl	8008a64 <_fflush_r>
 8007f72:	b9e0      	cbnz	r0, 8007fae <__swbuf_r+0x74>
 8007f74:	68a3      	ldr	r3, [r4, #8]
 8007f76:	3b01      	subs	r3, #1
 8007f78:	60a3      	str	r3, [r4, #8]
 8007f7a:	6823      	ldr	r3, [r4, #0]
 8007f7c:	1c5a      	adds	r2, r3, #1
 8007f7e:	6022      	str	r2, [r4, #0]
 8007f80:	701e      	strb	r6, [r3, #0]
 8007f82:	6962      	ldr	r2, [r4, #20]
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	429a      	cmp	r2, r3
 8007f88:	d004      	beq.n	8007f94 <__swbuf_r+0x5a>
 8007f8a:	89a3      	ldrh	r3, [r4, #12]
 8007f8c:	07db      	lsls	r3, r3, #31
 8007f8e:	d506      	bpl.n	8007f9e <__swbuf_r+0x64>
 8007f90:	2e0a      	cmp	r6, #10
 8007f92:	d104      	bne.n	8007f9e <__swbuf_r+0x64>
 8007f94:	4621      	mov	r1, r4
 8007f96:	4628      	mov	r0, r5
 8007f98:	f000 fd64 	bl	8008a64 <_fflush_r>
 8007f9c:	b938      	cbnz	r0, 8007fae <__swbuf_r+0x74>
 8007f9e:	4638      	mov	r0, r7
 8007fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	4628      	mov	r0, r5
 8007fa6:	f000 f805 	bl	8007fb4 <__swsetup_r>
 8007faa:	2800      	cmp	r0, #0
 8007fac:	d0d5      	beq.n	8007f5a <__swbuf_r+0x20>
 8007fae:	f04f 37ff 	mov.w	r7, #4294967295
 8007fb2:	e7f4      	b.n	8007f9e <__swbuf_r+0x64>

08007fb4 <__swsetup_r>:
 8007fb4:	b538      	push	{r3, r4, r5, lr}
 8007fb6:	4b2a      	ldr	r3, [pc, #168]	; (8008060 <__swsetup_r+0xac>)
 8007fb8:	4605      	mov	r5, r0
 8007fba:	6818      	ldr	r0, [r3, #0]
 8007fbc:	460c      	mov	r4, r1
 8007fbe:	b118      	cbz	r0, 8007fc8 <__swsetup_r+0x14>
 8007fc0:	6a03      	ldr	r3, [r0, #32]
 8007fc2:	b90b      	cbnz	r3, 8007fc8 <__swsetup_r+0x14>
 8007fc4:	f7ff fec4 	bl	8007d50 <__sinit>
 8007fc8:	89a3      	ldrh	r3, [r4, #12]
 8007fca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007fce:	0718      	lsls	r0, r3, #28
 8007fd0:	d422      	bmi.n	8008018 <__swsetup_r+0x64>
 8007fd2:	06d9      	lsls	r1, r3, #27
 8007fd4:	d407      	bmi.n	8007fe6 <__swsetup_r+0x32>
 8007fd6:	2309      	movs	r3, #9
 8007fd8:	602b      	str	r3, [r5, #0]
 8007fda:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007fde:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	e034      	b.n	8008050 <__swsetup_r+0x9c>
 8007fe6:	0758      	lsls	r0, r3, #29
 8007fe8:	d512      	bpl.n	8008010 <__swsetup_r+0x5c>
 8007fea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fec:	b141      	cbz	r1, 8008000 <__swsetup_r+0x4c>
 8007fee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ff2:	4299      	cmp	r1, r3
 8007ff4:	d002      	beq.n	8007ffc <__swsetup_r+0x48>
 8007ff6:	4628      	mov	r0, r5
 8007ff8:	f000 f8d2 	bl	80081a0 <_free_r>
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	6363      	str	r3, [r4, #52]	; 0x34
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008006:	81a3      	strh	r3, [r4, #12]
 8008008:	2300      	movs	r3, #0
 800800a:	6063      	str	r3, [r4, #4]
 800800c:	6923      	ldr	r3, [r4, #16]
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	f043 0308 	orr.w	r3, r3, #8
 8008016:	81a3      	strh	r3, [r4, #12]
 8008018:	6923      	ldr	r3, [r4, #16]
 800801a:	b94b      	cbnz	r3, 8008030 <__swsetup_r+0x7c>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008022:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008026:	d003      	beq.n	8008030 <__swsetup_r+0x7c>
 8008028:	4621      	mov	r1, r4
 800802a:	4628      	mov	r0, r5
 800802c:	f000 fd67 	bl	8008afe <__smakebuf_r>
 8008030:	89a0      	ldrh	r0, [r4, #12]
 8008032:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008036:	f010 0301 	ands.w	r3, r0, #1
 800803a:	d00a      	beq.n	8008052 <__swsetup_r+0x9e>
 800803c:	2300      	movs	r3, #0
 800803e:	60a3      	str	r3, [r4, #8]
 8008040:	6963      	ldr	r3, [r4, #20]
 8008042:	425b      	negs	r3, r3
 8008044:	61a3      	str	r3, [r4, #24]
 8008046:	6923      	ldr	r3, [r4, #16]
 8008048:	b943      	cbnz	r3, 800805c <__swsetup_r+0xa8>
 800804a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800804e:	d1c4      	bne.n	8007fda <__swsetup_r+0x26>
 8008050:	bd38      	pop	{r3, r4, r5, pc}
 8008052:	0781      	lsls	r1, r0, #30
 8008054:	bf58      	it	pl
 8008056:	6963      	ldrpl	r3, [r4, #20]
 8008058:	60a3      	str	r3, [r4, #8]
 800805a:	e7f4      	b.n	8008046 <__swsetup_r+0x92>
 800805c:	2000      	movs	r0, #0
 800805e:	e7f7      	b.n	8008050 <__swsetup_r+0x9c>
 8008060:	2000008c 	.word	0x2000008c

08008064 <memcmp>:
 8008064:	b510      	push	{r4, lr}
 8008066:	3901      	subs	r1, #1
 8008068:	4402      	add	r2, r0
 800806a:	4290      	cmp	r0, r2
 800806c:	d101      	bne.n	8008072 <memcmp+0xe>
 800806e:	2000      	movs	r0, #0
 8008070:	e005      	b.n	800807e <memcmp+0x1a>
 8008072:	7803      	ldrb	r3, [r0, #0]
 8008074:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008078:	42a3      	cmp	r3, r4
 800807a:	d001      	beq.n	8008080 <memcmp+0x1c>
 800807c:	1b18      	subs	r0, r3, r4
 800807e:	bd10      	pop	{r4, pc}
 8008080:	3001      	adds	r0, #1
 8008082:	e7f2      	b.n	800806a <memcmp+0x6>

08008084 <memset>:
 8008084:	4603      	mov	r3, r0
 8008086:	4402      	add	r2, r0
 8008088:	4293      	cmp	r3, r2
 800808a:	d100      	bne.n	800808e <memset+0xa>
 800808c:	4770      	bx	lr
 800808e:	f803 1b01 	strb.w	r1, [r3], #1
 8008092:	e7f9      	b.n	8008088 <memset+0x4>

08008094 <strstr>:
 8008094:	780a      	ldrb	r2, [r1, #0]
 8008096:	b570      	push	{r4, r5, r6, lr}
 8008098:	b96a      	cbnz	r2, 80080b6 <strstr+0x22>
 800809a:	bd70      	pop	{r4, r5, r6, pc}
 800809c:	429a      	cmp	r2, r3
 800809e:	d109      	bne.n	80080b4 <strstr+0x20>
 80080a0:	460c      	mov	r4, r1
 80080a2:	4605      	mov	r5, r0
 80080a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d0f6      	beq.n	800809a <strstr+0x6>
 80080ac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80080b0:	429e      	cmp	r6, r3
 80080b2:	d0f7      	beq.n	80080a4 <strstr+0x10>
 80080b4:	3001      	adds	r0, #1
 80080b6:	7803      	ldrb	r3, [r0, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1ef      	bne.n	800809c <strstr+0x8>
 80080bc:	4618      	mov	r0, r3
 80080be:	e7ec      	b.n	800809a <strstr+0x6>

080080c0 <_close_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	2300      	movs	r3, #0
 80080c4:	4d05      	ldr	r5, [pc, #20]	; (80080dc <_close_r+0x1c>)
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	f7f8 fcd1 	bl	8000a72 <_close>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_close_r+0x1a>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_close_r+0x1a>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	20002a28 	.word	0x20002a28

080080e0 <_lseek_r>:
 80080e0:	b538      	push	{r3, r4, r5, lr}
 80080e2:	4604      	mov	r4, r0
 80080e4:	4608      	mov	r0, r1
 80080e6:	4611      	mov	r1, r2
 80080e8:	2200      	movs	r2, #0
 80080ea:	4d05      	ldr	r5, [pc, #20]	; (8008100 <_lseek_r+0x20>)
 80080ec:	602a      	str	r2, [r5, #0]
 80080ee:	461a      	mov	r2, r3
 80080f0:	f7f8 fce3 	bl	8000aba <_lseek>
 80080f4:	1c43      	adds	r3, r0, #1
 80080f6:	d102      	bne.n	80080fe <_lseek_r+0x1e>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	b103      	cbz	r3, 80080fe <_lseek_r+0x1e>
 80080fc:	6023      	str	r3, [r4, #0]
 80080fe:	bd38      	pop	{r3, r4, r5, pc}
 8008100:	20002a28 	.word	0x20002a28

08008104 <_read_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	4611      	mov	r1, r2
 800810c:	2200      	movs	r2, #0
 800810e:	4d05      	ldr	r5, [pc, #20]	; (8008124 <_read_r+0x20>)
 8008110:	602a      	str	r2, [r5, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	f7f8 fc90 	bl	8000a38 <_read>
 8008118:	1c43      	adds	r3, r0, #1
 800811a:	d102      	bne.n	8008122 <_read_r+0x1e>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	b103      	cbz	r3, 8008122 <_read_r+0x1e>
 8008120:	6023      	str	r3, [r4, #0]
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	20002a28 	.word	0x20002a28

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	2600      	movs	r6, #0
 800812c:	4d0c      	ldr	r5, [pc, #48]	; (8008160 <__libc_init_array+0x38>)
 800812e:	4c0d      	ldr	r4, [pc, #52]	; (8008164 <__libc_init_array+0x3c>)
 8008130:	1b64      	subs	r4, r4, r5
 8008132:	10a4      	asrs	r4, r4, #2
 8008134:	42a6      	cmp	r6, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	f000 fdbe 	bl	8008cb8 <_init>
 800813c:	2600      	movs	r6, #0
 800813e:	4d0a      	ldr	r5, [pc, #40]	; (8008168 <__libc_init_array+0x40>)
 8008140:	4c0a      	ldr	r4, [pc, #40]	; (800816c <__libc_init_array+0x44>)
 8008142:	1b64      	subs	r4, r4, r5
 8008144:	10a4      	asrs	r4, r4, #2
 8008146:	42a6      	cmp	r6, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008150:	4798      	blx	r3
 8008152:	3601      	adds	r6, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f855 3b04 	ldr.w	r3, [r5], #4
 800815a:	4798      	blx	r3
 800815c:	3601      	adds	r6, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	08008ef4 	.word	0x08008ef4
 8008164:	08008ef4 	.word	0x08008ef4
 8008168:	08008ef4 	.word	0x08008ef4
 800816c:	08008ef8 	.word	0x08008ef8

08008170 <__retarget_lock_acquire_recursive>:
 8008170:	4770      	bx	lr

08008172 <__retarget_lock_release_recursive>:
 8008172:	4770      	bx	lr

08008174 <strcpy>:
 8008174:	4603      	mov	r3, r0
 8008176:	f811 2b01 	ldrb.w	r2, [r1], #1
 800817a:	f803 2b01 	strb.w	r2, [r3], #1
 800817e:	2a00      	cmp	r2, #0
 8008180:	d1f9      	bne.n	8008176 <strcpy+0x2>
 8008182:	4770      	bx	lr

08008184 <memcpy>:
 8008184:	440a      	add	r2, r1
 8008186:	4291      	cmp	r1, r2
 8008188:	f100 33ff 	add.w	r3, r0, #4294967295
 800818c:	d100      	bne.n	8008190 <memcpy+0xc>
 800818e:	4770      	bx	lr
 8008190:	b510      	push	{r4, lr}
 8008192:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008196:	4291      	cmp	r1, r2
 8008198:	f803 4f01 	strb.w	r4, [r3, #1]!
 800819c:	d1f9      	bne.n	8008192 <memcpy+0xe>
 800819e:	bd10      	pop	{r4, pc}

080081a0 <_free_r>:
 80081a0:	b538      	push	{r3, r4, r5, lr}
 80081a2:	4605      	mov	r5, r0
 80081a4:	2900      	cmp	r1, #0
 80081a6:	d040      	beq.n	800822a <_free_r+0x8a>
 80081a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ac:	1f0c      	subs	r4, r1, #4
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	bfb8      	it	lt
 80081b2:	18e4      	addlt	r4, r4, r3
 80081b4:	f000 f8dc 	bl	8008370 <__malloc_lock>
 80081b8:	4a1c      	ldr	r2, [pc, #112]	; (800822c <_free_r+0x8c>)
 80081ba:	6813      	ldr	r3, [r2, #0]
 80081bc:	b933      	cbnz	r3, 80081cc <_free_r+0x2c>
 80081be:	6063      	str	r3, [r4, #4]
 80081c0:	6014      	str	r4, [r2, #0]
 80081c2:	4628      	mov	r0, r5
 80081c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c8:	f000 b8d8 	b.w	800837c <__malloc_unlock>
 80081cc:	42a3      	cmp	r3, r4
 80081ce:	d908      	bls.n	80081e2 <_free_r+0x42>
 80081d0:	6820      	ldr	r0, [r4, #0]
 80081d2:	1821      	adds	r1, r4, r0
 80081d4:	428b      	cmp	r3, r1
 80081d6:	bf01      	itttt	eq
 80081d8:	6819      	ldreq	r1, [r3, #0]
 80081da:	685b      	ldreq	r3, [r3, #4]
 80081dc:	1809      	addeq	r1, r1, r0
 80081de:	6021      	streq	r1, [r4, #0]
 80081e0:	e7ed      	b.n	80081be <_free_r+0x1e>
 80081e2:	461a      	mov	r2, r3
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	b10b      	cbz	r3, 80081ec <_free_r+0x4c>
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	d9fa      	bls.n	80081e2 <_free_r+0x42>
 80081ec:	6811      	ldr	r1, [r2, #0]
 80081ee:	1850      	adds	r0, r2, r1
 80081f0:	42a0      	cmp	r0, r4
 80081f2:	d10b      	bne.n	800820c <_free_r+0x6c>
 80081f4:	6820      	ldr	r0, [r4, #0]
 80081f6:	4401      	add	r1, r0
 80081f8:	1850      	adds	r0, r2, r1
 80081fa:	4283      	cmp	r3, r0
 80081fc:	6011      	str	r1, [r2, #0]
 80081fe:	d1e0      	bne.n	80081c2 <_free_r+0x22>
 8008200:	6818      	ldr	r0, [r3, #0]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	4408      	add	r0, r1
 8008206:	6010      	str	r0, [r2, #0]
 8008208:	6053      	str	r3, [r2, #4]
 800820a:	e7da      	b.n	80081c2 <_free_r+0x22>
 800820c:	d902      	bls.n	8008214 <_free_r+0x74>
 800820e:	230c      	movs	r3, #12
 8008210:	602b      	str	r3, [r5, #0]
 8008212:	e7d6      	b.n	80081c2 <_free_r+0x22>
 8008214:	6820      	ldr	r0, [r4, #0]
 8008216:	1821      	adds	r1, r4, r0
 8008218:	428b      	cmp	r3, r1
 800821a:	bf01      	itttt	eq
 800821c:	6819      	ldreq	r1, [r3, #0]
 800821e:	685b      	ldreq	r3, [r3, #4]
 8008220:	1809      	addeq	r1, r1, r0
 8008222:	6021      	streq	r1, [r4, #0]
 8008224:	6063      	str	r3, [r4, #4]
 8008226:	6054      	str	r4, [r2, #4]
 8008228:	e7cb      	b.n	80081c2 <_free_r+0x22>
 800822a:	bd38      	pop	{r3, r4, r5, pc}
 800822c:	20002a30 	.word	0x20002a30

08008230 <sbrk_aligned>:
 8008230:	b570      	push	{r4, r5, r6, lr}
 8008232:	4e0e      	ldr	r6, [pc, #56]	; (800826c <sbrk_aligned+0x3c>)
 8008234:	460c      	mov	r4, r1
 8008236:	6831      	ldr	r1, [r6, #0]
 8008238:	4605      	mov	r5, r0
 800823a:	b911      	cbnz	r1, 8008242 <sbrk_aligned+0x12>
 800823c:	f000 fcd8 	bl	8008bf0 <_sbrk_r>
 8008240:	6030      	str	r0, [r6, #0]
 8008242:	4621      	mov	r1, r4
 8008244:	4628      	mov	r0, r5
 8008246:	f000 fcd3 	bl	8008bf0 <_sbrk_r>
 800824a:	1c43      	adds	r3, r0, #1
 800824c:	d00a      	beq.n	8008264 <sbrk_aligned+0x34>
 800824e:	1cc4      	adds	r4, r0, #3
 8008250:	f024 0403 	bic.w	r4, r4, #3
 8008254:	42a0      	cmp	r0, r4
 8008256:	d007      	beq.n	8008268 <sbrk_aligned+0x38>
 8008258:	1a21      	subs	r1, r4, r0
 800825a:	4628      	mov	r0, r5
 800825c:	f000 fcc8 	bl	8008bf0 <_sbrk_r>
 8008260:	3001      	adds	r0, #1
 8008262:	d101      	bne.n	8008268 <sbrk_aligned+0x38>
 8008264:	f04f 34ff 	mov.w	r4, #4294967295
 8008268:	4620      	mov	r0, r4
 800826a:	bd70      	pop	{r4, r5, r6, pc}
 800826c:	20002a34 	.word	0x20002a34

08008270 <_malloc_r>:
 8008270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008274:	1ccd      	adds	r5, r1, #3
 8008276:	f025 0503 	bic.w	r5, r5, #3
 800827a:	3508      	adds	r5, #8
 800827c:	2d0c      	cmp	r5, #12
 800827e:	bf38      	it	cc
 8008280:	250c      	movcc	r5, #12
 8008282:	2d00      	cmp	r5, #0
 8008284:	4607      	mov	r7, r0
 8008286:	db01      	blt.n	800828c <_malloc_r+0x1c>
 8008288:	42a9      	cmp	r1, r5
 800828a:	d905      	bls.n	8008298 <_malloc_r+0x28>
 800828c:	230c      	movs	r3, #12
 800828e:	2600      	movs	r6, #0
 8008290:	603b      	str	r3, [r7, #0]
 8008292:	4630      	mov	r0, r6
 8008294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008298:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800836c <_malloc_r+0xfc>
 800829c:	f000 f868 	bl	8008370 <__malloc_lock>
 80082a0:	f8d8 3000 	ldr.w	r3, [r8]
 80082a4:	461c      	mov	r4, r3
 80082a6:	bb5c      	cbnz	r4, 8008300 <_malloc_r+0x90>
 80082a8:	4629      	mov	r1, r5
 80082aa:	4638      	mov	r0, r7
 80082ac:	f7ff ffc0 	bl	8008230 <sbrk_aligned>
 80082b0:	1c43      	adds	r3, r0, #1
 80082b2:	4604      	mov	r4, r0
 80082b4:	d155      	bne.n	8008362 <_malloc_r+0xf2>
 80082b6:	f8d8 4000 	ldr.w	r4, [r8]
 80082ba:	4626      	mov	r6, r4
 80082bc:	2e00      	cmp	r6, #0
 80082be:	d145      	bne.n	800834c <_malloc_r+0xdc>
 80082c0:	2c00      	cmp	r4, #0
 80082c2:	d048      	beq.n	8008356 <_malloc_r+0xe6>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	4631      	mov	r1, r6
 80082c8:	4638      	mov	r0, r7
 80082ca:	eb04 0903 	add.w	r9, r4, r3
 80082ce:	f000 fc8f 	bl	8008bf0 <_sbrk_r>
 80082d2:	4581      	cmp	r9, r0
 80082d4:	d13f      	bne.n	8008356 <_malloc_r+0xe6>
 80082d6:	6821      	ldr	r1, [r4, #0]
 80082d8:	4638      	mov	r0, r7
 80082da:	1a6d      	subs	r5, r5, r1
 80082dc:	4629      	mov	r1, r5
 80082de:	f7ff ffa7 	bl	8008230 <sbrk_aligned>
 80082e2:	3001      	adds	r0, #1
 80082e4:	d037      	beq.n	8008356 <_malloc_r+0xe6>
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	442b      	add	r3, r5
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	f8d8 3000 	ldr.w	r3, [r8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d038      	beq.n	8008366 <_malloc_r+0xf6>
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	42a2      	cmp	r2, r4
 80082f8:	d12b      	bne.n	8008352 <_malloc_r+0xe2>
 80082fa:	2200      	movs	r2, #0
 80082fc:	605a      	str	r2, [r3, #4]
 80082fe:	e00f      	b.n	8008320 <_malloc_r+0xb0>
 8008300:	6822      	ldr	r2, [r4, #0]
 8008302:	1b52      	subs	r2, r2, r5
 8008304:	d41f      	bmi.n	8008346 <_malloc_r+0xd6>
 8008306:	2a0b      	cmp	r2, #11
 8008308:	d917      	bls.n	800833a <_malloc_r+0xca>
 800830a:	1961      	adds	r1, r4, r5
 800830c:	42a3      	cmp	r3, r4
 800830e:	6025      	str	r5, [r4, #0]
 8008310:	bf18      	it	ne
 8008312:	6059      	strne	r1, [r3, #4]
 8008314:	6863      	ldr	r3, [r4, #4]
 8008316:	bf08      	it	eq
 8008318:	f8c8 1000 	streq.w	r1, [r8]
 800831c:	5162      	str	r2, [r4, r5]
 800831e:	604b      	str	r3, [r1, #4]
 8008320:	4638      	mov	r0, r7
 8008322:	f104 060b 	add.w	r6, r4, #11
 8008326:	f000 f829 	bl	800837c <__malloc_unlock>
 800832a:	f026 0607 	bic.w	r6, r6, #7
 800832e:	1d23      	adds	r3, r4, #4
 8008330:	1af2      	subs	r2, r6, r3
 8008332:	d0ae      	beq.n	8008292 <_malloc_r+0x22>
 8008334:	1b9b      	subs	r3, r3, r6
 8008336:	50a3      	str	r3, [r4, r2]
 8008338:	e7ab      	b.n	8008292 <_malloc_r+0x22>
 800833a:	42a3      	cmp	r3, r4
 800833c:	6862      	ldr	r2, [r4, #4]
 800833e:	d1dd      	bne.n	80082fc <_malloc_r+0x8c>
 8008340:	f8c8 2000 	str.w	r2, [r8]
 8008344:	e7ec      	b.n	8008320 <_malloc_r+0xb0>
 8008346:	4623      	mov	r3, r4
 8008348:	6864      	ldr	r4, [r4, #4]
 800834a:	e7ac      	b.n	80082a6 <_malloc_r+0x36>
 800834c:	4634      	mov	r4, r6
 800834e:	6876      	ldr	r6, [r6, #4]
 8008350:	e7b4      	b.n	80082bc <_malloc_r+0x4c>
 8008352:	4613      	mov	r3, r2
 8008354:	e7cc      	b.n	80082f0 <_malloc_r+0x80>
 8008356:	230c      	movs	r3, #12
 8008358:	4638      	mov	r0, r7
 800835a:	603b      	str	r3, [r7, #0]
 800835c:	f000 f80e 	bl	800837c <__malloc_unlock>
 8008360:	e797      	b.n	8008292 <_malloc_r+0x22>
 8008362:	6025      	str	r5, [r4, #0]
 8008364:	e7dc      	b.n	8008320 <_malloc_r+0xb0>
 8008366:	605b      	str	r3, [r3, #4]
 8008368:	deff      	udf	#255	; 0xff
 800836a:	bf00      	nop
 800836c:	20002a30 	.word	0x20002a30

08008370 <__malloc_lock>:
 8008370:	4801      	ldr	r0, [pc, #4]	; (8008378 <__malloc_lock+0x8>)
 8008372:	f7ff befd 	b.w	8008170 <__retarget_lock_acquire_recursive>
 8008376:	bf00      	nop
 8008378:	20002a2c 	.word	0x20002a2c

0800837c <__malloc_unlock>:
 800837c:	4801      	ldr	r0, [pc, #4]	; (8008384 <__malloc_unlock+0x8>)
 800837e:	f7ff bef8 	b.w	8008172 <__retarget_lock_release_recursive>
 8008382:	bf00      	nop
 8008384:	20002a2c 	.word	0x20002a2c

08008388 <__ssputs_r>:
 8008388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800838c:	461f      	mov	r7, r3
 800838e:	688e      	ldr	r6, [r1, #8]
 8008390:	4682      	mov	sl, r0
 8008392:	42be      	cmp	r6, r7
 8008394:	460c      	mov	r4, r1
 8008396:	4690      	mov	r8, r2
 8008398:	680b      	ldr	r3, [r1, #0]
 800839a:	d82c      	bhi.n	80083f6 <__ssputs_r+0x6e>
 800839c:	898a      	ldrh	r2, [r1, #12]
 800839e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083a2:	d026      	beq.n	80083f2 <__ssputs_r+0x6a>
 80083a4:	6965      	ldr	r5, [r4, #20]
 80083a6:	6909      	ldr	r1, [r1, #16]
 80083a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083ac:	eba3 0901 	sub.w	r9, r3, r1
 80083b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083b4:	1c7b      	adds	r3, r7, #1
 80083b6:	444b      	add	r3, r9
 80083b8:	106d      	asrs	r5, r5, #1
 80083ba:	429d      	cmp	r5, r3
 80083bc:	bf38      	it	cc
 80083be:	461d      	movcc	r5, r3
 80083c0:	0553      	lsls	r3, r2, #21
 80083c2:	d527      	bpl.n	8008414 <__ssputs_r+0x8c>
 80083c4:	4629      	mov	r1, r5
 80083c6:	f7ff ff53 	bl	8008270 <_malloc_r>
 80083ca:	4606      	mov	r6, r0
 80083cc:	b360      	cbz	r0, 8008428 <__ssputs_r+0xa0>
 80083ce:	464a      	mov	r2, r9
 80083d0:	6921      	ldr	r1, [r4, #16]
 80083d2:	f7ff fed7 	bl	8008184 <memcpy>
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083e0:	81a3      	strh	r3, [r4, #12]
 80083e2:	6126      	str	r6, [r4, #16]
 80083e4:	444e      	add	r6, r9
 80083e6:	6026      	str	r6, [r4, #0]
 80083e8:	463e      	mov	r6, r7
 80083ea:	6165      	str	r5, [r4, #20]
 80083ec:	eba5 0509 	sub.w	r5, r5, r9
 80083f0:	60a5      	str	r5, [r4, #8]
 80083f2:	42be      	cmp	r6, r7
 80083f4:	d900      	bls.n	80083f8 <__ssputs_r+0x70>
 80083f6:	463e      	mov	r6, r7
 80083f8:	4632      	mov	r2, r6
 80083fa:	4641      	mov	r1, r8
 80083fc:	6820      	ldr	r0, [r4, #0]
 80083fe:	f000 fbba 	bl	8008b76 <memmove>
 8008402:	2000      	movs	r0, #0
 8008404:	68a3      	ldr	r3, [r4, #8]
 8008406:	1b9b      	subs	r3, r3, r6
 8008408:	60a3      	str	r3, [r4, #8]
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	4433      	add	r3, r6
 800840e:	6023      	str	r3, [r4, #0]
 8008410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008414:	462a      	mov	r2, r5
 8008416:	f000 fc09 	bl	8008c2c <_realloc_r>
 800841a:	4606      	mov	r6, r0
 800841c:	2800      	cmp	r0, #0
 800841e:	d1e0      	bne.n	80083e2 <__ssputs_r+0x5a>
 8008420:	4650      	mov	r0, sl
 8008422:	6921      	ldr	r1, [r4, #16]
 8008424:	f7ff febc 	bl	80081a0 <_free_r>
 8008428:	230c      	movs	r3, #12
 800842a:	f8ca 3000 	str.w	r3, [sl]
 800842e:	89a3      	ldrh	r3, [r4, #12]
 8008430:	f04f 30ff 	mov.w	r0, #4294967295
 8008434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008438:	81a3      	strh	r3, [r4, #12]
 800843a:	e7e9      	b.n	8008410 <__ssputs_r+0x88>

0800843c <_svfiprintf_r>:
 800843c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	4698      	mov	r8, r3
 8008442:	898b      	ldrh	r3, [r1, #12]
 8008444:	4607      	mov	r7, r0
 8008446:	061b      	lsls	r3, r3, #24
 8008448:	460d      	mov	r5, r1
 800844a:	4614      	mov	r4, r2
 800844c:	b09d      	sub	sp, #116	; 0x74
 800844e:	d50e      	bpl.n	800846e <_svfiprintf_r+0x32>
 8008450:	690b      	ldr	r3, [r1, #16]
 8008452:	b963      	cbnz	r3, 800846e <_svfiprintf_r+0x32>
 8008454:	2140      	movs	r1, #64	; 0x40
 8008456:	f7ff ff0b 	bl	8008270 <_malloc_r>
 800845a:	6028      	str	r0, [r5, #0]
 800845c:	6128      	str	r0, [r5, #16]
 800845e:	b920      	cbnz	r0, 800846a <_svfiprintf_r+0x2e>
 8008460:	230c      	movs	r3, #12
 8008462:	603b      	str	r3, [r7, #0]
 8008464:	f04f 30ff 	mov.w	r0, #4294967295
 8008468:	e0d0      	b.n	800860c <_svfiprintf_r+0x1d0>
 800846a:	2340      	movs	r3, #64	; 0x40
 800846c:	616b      	str	r3, [r5, #20]
 800846e:	2300      	movs	r3, #0
 8008470:	9309      	str	r3, [sp, #36]	; 0x24
 8008472:	2320      	movs	r3, #32
 8008474:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008478:	2330      	movs	r3, #48	; 0x30
 800847a:	f04f 0901 	mov.w	r9, #1
 800847e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008482:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8008624 <_svfiprintf_r+0x1e8>
 8008486:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800848a:	4623      	mov	r3, r4
 800848c:	469a      	mov	sl, r3
 800848e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008492:	b10a      	cbz	r2, 8008498 <_svfiprintf_r+0x5c>
 8008494:	2a25      	cmp	r2, #37	; 0x25
 8008496:	d1f9      	bne.n	800848c <_svfiprintf_r+0x50>
 8008498:	ebba 0b04 	subs.w	fp, sl, r4
 800849c:	d00b      	beq.n	80084b6 <_svfiprintf_r+0x7a>
 800849e:	465b      	mov	r3, fp
 80084a0:	4622      	mov	r2, r4
 80084a2:	4629      	mov	r1, r5
 80084a4:	4638      	mov	r0, r7
 80084a6:	f7ff ff6f 	bl	8008388 <__ssputs_r>
 80084aa:	3001      	adds	r0, #1
 80084ac:	f000 80a9 	beq.w	8008602 <_svfiprintf_r+0x1c6>
 80084b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b2:	445a      	add	r2, fp
 80084b4:	9209      	str	r2, [sp, #36]	; 0x24
 80084b6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	f000 80a1 	beq.w	8008602 <_svfiprintf_r+0x1c6>
 80084c0:	2300      	movs	r3, #0
 80084c2:	f04f 32ff 	mov.w	r2, #4294967295
 80084c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ca:	f10a 0a01 	add.w	sl, sl, #1
 80084ce:	9304      	str	r3, [sp, #16]
 80084d0:	9307      	str	r3, [sp, #28]
 80084d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084d6:	931a      	str	r3, [sp, #104]	; 0x68
 80084d8:	4654      	mov	r4, sl
 80084da:	2205      	movs	r2, #5
 80084dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084e0:	4850      	ldr	r0, [pc, #320]	; (8008624 <_svfiprintf_r+0x1e8>)
 80084e2:	f000 fb95 	bl	8008c10 <memchr>
 80084e6:	9a04      	ldr	r2, [sp, #16]
 80084e8:	b9d8      	cbnz	r0, 8008522 <_svfiprintf_r+0xe6>
 80084ea:	06d0      	lsls	r0, r2, #27
 80084ec:	bf44      	itt	mi
 80084ee:	2320      	movmi	r3, #32
 80084f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084f4:	0711      	lsls	r1, r2, #28
 80084f6:	bf44      	itt	mi
 80084f8:	232b      	movmi	r3, #43	; 0x2b
 80084fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084fe:	f89a 3000 	ldrb.w	r3, [sl]
 8008502:	2b2a      	cmp	r3, #42	; 0x2a
 8008504:	d015      	beq.n	8008532 <_svfiprintf_r+0xf6>
 8008506:	4654      	mov	r4, sl
 8008508:	2000      	movs	r0, #0
 800850a:	f04f 0c0a 	mov.w	ip, #10
 800850e:	9a07      	ldr	r2, [sp, #28]
 8008510:	4621      	mov	r1, r4
 8008512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008516:	3b30      	subs	r3, #48	; 0x30
 8008518:	2b09      	cmp	r3, #9
 800851a:	d94d      	bls.n	80085b8 <_svfiprintf_r+0x17c>
 800851c:	b1b0      	cbz	r0, 800854c <_svfiprintf_r+0x110>
 800851e:	9207      	str	r2, [sp, #28]
 8008520:	e014      	b.n	800854c <_svfiprintf_r+0x110>
 8008522:	eba0 0308 	sub.w	r3, r0, r8
 8008526:	fa09 f303 	lsl.w	r3, r9, r3
 800852a:	4313      	orrs	r3, r2
 800852c:	46a2      	mov	sl, r4
 800852e:	9304      	str	r3, [sp, #16]
 8008530:	e7d2      	b.n	80084d8 <_svfiprintf_r+0x9c>
 8008532:	9b03      	ldr	r3, [sp, #12]
 8008534:	1d19      	adds	r1, r3, #4
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	9103      	str	r1, [sp, #12]
 800853a:	2b00      	cmp	r3, #0
 800853c:	bfbb      	ittet	lt
 800853e:	425b      	neglt	r3, r3
 8008540:	f042 0202 	orrlt.w	r2, r2, #2
 8008544:	9307      	strge	r3, [sp, #28]
 8008546:	9307      	strlt	r3, [sp, #28]
 8008548:	bfb8      	it	lt
 800854a:	9204      	strlt	r2, [sp, #16]
 800854c:	7823      	ldrb	r3, [r4, #0]
 800854e:	2b2e      	cmp	r3, #46	; 0x2e
 8008550:	d10c      	bne.n	800856c <_svfiprintf_r+0x130>
 8008552:	7863      	ldrb	r3, [r4, #1]
 8008554:	2b2a      	cmp	r3, #42	; 0x2a
 8008556:	d134      	bne.n	80085c2 <_svfiprintf_r+0x186>
 8008558:	9b03      	ldr	r3, [sp, #12]
 800855a:	3402      	adds	r4, #2
 800855c:	1d1a      	adds	r2, r3, #4
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	9203      	str	r2, [sp, #12]
 8008562:	2b00      	cmp	r3, #0
 8008564:	bfb8      	it	lt
 8008566:	f04f 33ff 	movlt.w	r3, #4294967295
 800856a:	9305      	str	r3, [sp, #20]
 800856c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8008628 <_svfiprintf_r+0x1ec>
 8008570:	2203      	movs	r2, #3
 8008572:	4650      	mov	r0, sl
 8008574:	7821      	ldrb	r1, [r4, #0]
 8008576:	f000 fb4b 	bl	8008c10 <memchr>
 800857a:	b138      	cbz	r0, 800858c <_svfiprintf_r+0x150>
 800857c:	2240      	movs	r2, #64	; 0x40
 800857e:	9b04      	ldr	r3, [sp, #16]
 8008580:	eba0 000a 	sub.w	r0, r0, sl
 8008584:	4082      	lsls	r2, r0
 8008586:	4313      	orrs	r3, r2
 8008588:	3401      	adds	r4, #1
 800858a:	9304      	str	r3, [sp, #16]
 800858c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008590:	2206      	movs	r2, #6
 8008592:	4826      	ldr	r0, [pc, #152]	; (800862c <_svfiprintf_r+0x1f0>)
 8008594:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008598:	f000 fb3a 	bl	8008c10 <memchr>
 800859c:	2800      	cmp	r0, #0
 800859e:	d038      	beq.n	8008612 <_svfiprintf_r+0x1d6>
 80085a0:	4b23      	ldr	r3, [pc, #140]	; (8008630 <_svfiprintf_r+0x1f4>)
 80085a2:	bb1b      	cbnz	r3, 80085ec <_svfiprintf_r+0x1b0>
 80085a4:	9b03      	ldr	r3, [sp, #12]
 80085a6:	3307      	adds	r3, #7
 80085a8:	f023 0307 	bic.w	r3, r3, #7
 80085ac:	3308      	adds	r3, #8
 80085ae:	9303      	str	r3, [sp, #12]
 80085b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b2:	4433      	add	r3, r6
 80085b4:	9309      	str	r3, [sp, #36]	; 0x24
 80085b6:	e768      	b.n	800848a <_svfiprintf_r+0x4e>
 80085b8:	460c      	mov	r4, r1
 80085ba:	2001      	movs	r0, #1
 80085bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80085c0:	e7a6      	b.n	8008510 <_svfiprintf_r+0xd4>
 80085c2:	2300      	movs	r3, #0
 80085c4:	f04f 0c0a 	mov.w	ip, #10
 80085c8:	4619      	mov	r1, r3
 80085ca:	3401      	adds	r4, #1
 80085cc:	9305      	str	r3, [sp, #20]
 80085ce:	4620      	mov	r0, r4
 80085d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085d4:	3a30      	subs	r2, #48	; 0x30
 80085d6:	2a09      	cmp	r2, #9
 80085d8:	d903      	bls.n	80085e2 <_svfiprintf_r+0x1a6>
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d0c6      	beq.n	800856c <_svfiprintf_r+0x130>
 80085de:	9105      	str	r1, [sp, #20]
 80085e0:	e7c4      	b.n	800856c <_svfiprintf_r+0x130>
 80085e2:	4604      	mov	r4, r0
 80085e4:	2301      	movs	r3, #1
 80085e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80085ea:	e7f0      	b.n	80085ce <_svfiprintf_r+0x192>
 80085ec:	ab03      	add	r3, sp, #12
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	462a      	mov	r2, r5
 80085f2:	4638      	mov	r0, r7
 80085f4:	4b0f      	ldr	r3, [pc, #60]	; (8008634 <_svfiprintf_r+0x1f8>)
 80085f6:	a904      	add	r1, sp, #16
 80085f8:	f3af 8000 	nop.w
 80085fc:	1c42      	adds	r2, r0, #1
 80085fe:	4606      	mov	r6, r0
 8008600:	d1d6      	bne.n	80085b0 <_svfiprintf_r+0x174>
 8008602:	89ab      	ldrh	r3, [r5, #12]
 8008604:	065b      	lsls	r3, r3, #25
 8008606:	f53f af2d 	bmi.w	8008464 <_svfiprintf_r+0x28>
 800860a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800860c:	b01d      	add	sp, #116	; 0x74
 800860e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008612:	ab03      	add	r3, sp, #12
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	462a      	mov	r2, r5
 8008618:	4638      	mov	r0, r7
 800861a:	4b06      	ldr	r3, [pc, #24]	; (8008634 <_svfiprintf_r+0x1f8>)
 800861c:	a904      	add	r1, sp, #16
 800861e:	f000 f87d 	bl	800871c <_printf_i>
 8008622:	e7eb      	b.n	80085fc <_svfiprintf_r+0x1c0>
 8008624:	08008ec0 	.word	0x08008ec0
 8008628:	08008ec6 	.word	0x08008ec6
 800862c:	08008eca 	.word	0x08008eca
 8008630:	00000000 	.word	0x00000000
 8008634:	08008389 	.word	0x08008389

08008638 <_printf_common>:
 8008638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800863c:	4616      	mov	r6, r2
 800863e:	4699      	mov	r9, r3
 8008640:	688a      	ldr	r2, [r1, #8]
 8008642:	690b      	ldr	r3, [r1, #16]
 8008644:	4607      	mov	r7, r0
 8008646:	4293      	cmp	r3, r2
 8008648:	bfb8      	it	lt
 800864a:	4613      	movlt	r3, r2
 800864c:	6033      	str	r3, [r6, #0]
 800864e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008652:	460c      	mov	r4, r1
 8008654:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008658:	b10a      	cbz	r2, 800865e <_printf_common+0x26>
 800865a:	3301      	adds	r3, #1
 800865c:	6033      	str	r3, [r6, #0]
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	0699      	lsls	r1, r3, #26
 8008662:	bf42      	ittt	mi
 8008664:	6833      	ldrmi	r3, [r6, #0]
 8008666:	3302      	addmi	r3, #2
 8008668:	6033      	strmi	r3, [r6, #0]
 800866a:	6825      	ldr	r5, [r4, #0]
 800866c:	f015 0506 	ands.w	r5, r5, #6
 8008670:	d106      	bne.n	8008680 <_printf_common+0x48>
 8008672:	f104 0a19 	add.w	sl, r4, #25
 8008676:	68e3      	ldr	r3, [r4, #12]
 8008678:	6832      	ldr	r2, [r6, #0]
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	42ab      	cmp	r3, r5
 800867e:	dc2b      	bgt.n	80086d8 <_printf_common+0xa0>
 8008680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008684:	1e13      	subs	r3, r2, #0
 8008686:	6822      	ldr	r2, [r4, #0]
 8008688:	bf18      	it	ne
 800868a:	2301      	movne	r3, #1
 800868c:	0692      	lsls	r2, r2, #26
 800868e:	d430      	bmi.n	80086f2 <_printf_common+0xba>
 8008690:	4649      	mov	r1, r9
 8008692:	4638      	mov	r0, r7
 8008694:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008698:	47c0      	blx	r8
 800869a:	3001      	adds	r0, #1
 800869c:	d023      	beq.n	80086e6 <_printf_common+0xae>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	6922      	ldr	r2, [r4, #16]
 80086a2:	f003 0306 	and.w	r3, r3, #6
 80086a6:	2b04      	cmp	r3, #4
 80086a8:	bf14      	ite	ne
 80086aa:	2500      	movne	r5, #0
 80086ac:	6833      	ldreq	r3, [r6, #0]
 80086ae:	f04f 0600 	mov.w	r6, #0
 80086b2:	bf08      	it	eq
 80086b4:	68e5      	ldreq	r5, [r4, #12]
 80086b6:	f104 041a 	add.w	r4, r4, #26
 80086ba:	bf08      	it	eq
 80086bc:	1aed      	subeq	r5, r5, r3
 80086be:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80086c2:	bf08      	it	eq
 80086c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086c8:	4293      	cmp	r3, r2
 80086ca:	bfc4      	itt	gt
 80086cc:	1a9b      	subgt	r3, r3, r2
 80086ce:	18ed      	addgt	r5, r5, r3
 80086d0:	42b5      	cmp	r5, r6
 80086d2:	d11a      	bne.n	800870a <_printf_common+0xd2>
 80086d4:	2000      	movs	r0, #0
 80086d6:	e008      	b.n	80086ea <_printf_common+0xb2>
 80086d8:	2301      	movs	r3, #1
 80086da:	4652      	mov	r2, sl
 80086dc:	4649      	mov	r1, r9
 80086de:	4638      	mov	r0, r7
 80086e0:	47c0      	blx	r8
 80086e2:	3001      	adds	r0, #1
 80086e4:	d103      	bne.n	80086ee <_printf_common+0xb6>
 80086e6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086ee:	3501      	adds	r5, #1
 80086f0:	e7c1      	b.n	8008676 <_printf_common+0x3e>
 80086f2:	2030      	movs	r0, #48	; 0x30
 80086f4:	18e1      	adds	r1, r4, r3
 80086f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086fa:	1c5a      	adds	r2, r3, #1
 80086fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008700:	4422      	add	r2, r4
 8008702:	3302      	adds	r3, #2
 8008704:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008708:	e7c2      	b.n	8008690 <_printf_common+0x58>
 800870a:	2301      	movs	r3, #1
 800870c:	4622      	mov	r2, r4
 800870e:	4649      	mov	r1, r9
 8008710:	4638      	mov	r0, r7
 8008712:	47c0      	blx	r8
 8008714:	3001      	adds	r0, #1
 8008716:	d0e6      	beq.n	80086e6 <_printf_common+0xae>
 8008718:	3601      	adds	r6, #1
 800871a:	e7d9      	b.n	80086d0 <_printf_common+0x98>

0800871c <_printf_i>:
 800871c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008720:	7e0f      	ldrb	r7, [r1, #24]
 8008722:	4691      	mov	r9, r2
 8008724:	2f78      	cmp	r7, #120	; 0x78
 8008726:	4680      	mov	r8, r0
 8008728:	460c      	mov	r4, r1
 800872a:	469a      	mov	sl, r3
 800872c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800872e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008732:	d807      	bhi.n	8008744 <_printf_i+0x28>
 8008734:	2f62      	cmp	r7, #98	; 0x62
 8008736:	d80a      	bhi.n	800874e <_printf_i+0x32>
 8008738:	2f00      	cmp	r7, #0
 800873a:	f000 80d5 	beq.w	80088e8 <_printf_i+0x1cc>
 800873e:	2f58      	cmp	r7, #88	; 0x58
 8008740:	f000 80c1 	beq.w	80088c6 <_printf_i+0x1aa>
 8008744:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008748:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800874c:	e03a      	b.n	80087c4 <_printf_i+0xa8>
 800874e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008752:	2b15      	cmp	r3, #21
 8008754:	d8f6      	bhi.n	8008744 <_printf_i+0x28>
 8008756:	a101      	add	r1, pc, #4	; (adr r1, 800875c <_printf_i+0x40>)
 8008758:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800875c:	080087b5 	.word	0x080087b5
 8008760:	080087c9 	.word	0x080087c9
 8008764:	08008745 	.word	0x08008745
 8008768:	08008745 	.word	0x08008745
 800876c:	08008745 	.word	0x08008745
 8008770:	08008745 	.word	0x08008745
 8008774:	080087c9 	.word	0x080087c9
 8008778:	08008745 	.word	0x08008745
 800877c:	08008745 	.word	0x08008745
 8008780:	08008745 	.word	0x08008745
 8008784:	08008745 	.word	0x08008745
 8008788:	080088cf 	.word	0x080088cf
 800878c:	080087f5 	.word	0x080087f5
 8008790:	08008889 	.word	0x08008889
 8008794:	08008745 	.word	0x08008745
 8008798:	08008745 	.word	0x08008745
 800879c:	080088f1 	.word	0x080088f1
 80087a0:	08008745 	.word	0x08008745
 80087a4:	080087f5 	.word	0x080087f5
 80087a8:	08008745 	.word	0x08008745
 80087ac:	08008745 	.word	0x08008745
 80087b0:	08008891 	.word	0x08008891
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	1d1a      	adds	r2, r3, #4
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	602a      	str	r2, [r5, #0]
 80087bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087c4:	2301      	movs	r3, #1
 80087c6:	e0a0      	b.n	800890a <_printf_i+0x1ee>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	682b      	ldr	r3, [r5, #0]
 80087cc:	0607      	lsls	r7, r0, #24
 80087ce:	f103 0104 	add.w	r1, r3, #4
 80087d2:	6029      	str	r1, [r5, #0]
 80087d4:	d501      	bpl.n	80087da <_printf_i+0xbe>
 80087d6:	681e      	ldr	r6, [r3, #0]
 80087d8:	e003      	b.n	80087e2 <_printf_i+0xc6>
 80087da:	0646      	lsls	r6, r0, #25
 80087dc:	d5fb      	bpl.n	80087d6 <_printf_i+0xba>
 80087de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80087e2:	2e00      	cmp	r6, #0
 80087e4:	da03      	bge.n	80087ee <_printf_i+0xd2>
 80087e6:	232d      	movs	r3, #45	; 0x2d
 80087e8:	4276      	negs	r6, r6
 80087ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087ee:	230a      	movs	r3, #10
 80087f0:	4859      	ldr	r0, [pc, #356]	; (8008958 <_printf_i+0x23c>)
 80087f2:	e012      	b.n	800881a <_printf_i+0xfe>
 80087f4:	682b      	ldr	r3, [r5, #0]
 80087f6:	6820      	ldr	r0, [r4, #0]
 80087f8:	1d19      	adds	r1, r3, #4
 80087fa:	6029      	str	r1, [r5, #0]
 80087fc:	0605      	lsls	r5, r0, #24
 80087fe:	d501      	bpl.n	8008804 <_printf_i+0xe8>
 8008800:	681e      	ldr	r6, [r3, #0]
 8008802:	e002      	b.n	800880a <_printf_i+0xee>
 8008804:	0641      	lsls	r1, r0, #25
 8008806:	d5fb      	bpl.n	8008800 <_printf_i+0xe4>
 8008808:	881e      	ldrh	r6, [r3, #0]
 800880a:	2f6f      	cmp	r7, #111	; 0x6f
 800880c:	bf0c      	ite	eq
 800880e:	2308      	moveq	r3, #8
 8008810:	230a      	movne	r3, #10
 8008812:	4851      	ldr	r0, [pc, #324]	; (8008958 <_printf_i+0x23c>)
 8008814:	2100      	movs	r1, #0
 8008816:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800881a:	6865      	ldr	r5, [r4, #4]
 800881c:	2d00      	cmp	r5, #0
 800881e:	bfa8      	it	ge
 8008820:	6821      	ldrge	r1, [r4, #0]
 8008822:	60a5      	str	r5, [r4, #8]
 8008824:	bfa4      	itt	ge
 8008826:	f021 0104 	bicge.w	r1, r1, #4
 800882a:	6021      	strge	r1, [r4, #0]
 800882c:	b90e      	cbnz	r6, 8008832 <_printf_i+0x116>
 800882e:	2d00      	cmp	r5, #0
 8008830:	d04b      	beq.n	80088ca <_printf_i+0x1ae>
 8008832:	4615      	mov	r5, r2
 8008834:	fbb6 f1f3 	udiv	r1, r6, r3
 8008838:	fb03 6711 	mls	r7, r3, r1, r6
 800883c:	5dc7      	ldrb	r7, [r0, r7]
 800883e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008842:	4637      	mov	r7, r6
 8008844:	42bb      	cmp	r3, r7
 8008846:	460e      	mov	r6, r1
 8008848:	d9f4      	bls.n	8008834 <_printf_i+0x118>
 800884a:	2b08      	cmp	r3, #8
 800884c:	d10b      	bne.n	8008866 <_printf_i+0x14a>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	07de      	lsls	r6, r3, #31
 8008852:	d508      	bpl.n	8008866 <_printf_i+0x14a>
 8008854:	6923      	ldr	r3, [r4, #16]
 8008856:	6861      	ldr	r1, [r4, #4]
 8008858:	4299      	cmp	r1, r3
 800885a:	bfde      	ittt	le
 800885c:	2330      	movle	r3, #48	; 0x30
 800885e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008862:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008866:	1b52      	subs	r2, r2, r5
 8008868:	6122      	str	r2, [r4, #16]
 800886a:	464b      	mov	r3, r9
 800886c:	4621      	mov	r1, r4
 800886e:	4640      	mov	r0, r8
 8008870:	f8cd a000 	str.w	sl, [sp]
 8008874:	aa03      	add	r2, sp, #12
 8008876:	f7ff fedf 	bl	8008638 <_printf_common>
 800887a:	3001      	adds	r0, #1
 800887c:	d14a      	bne.n	8008914 <_printf_i+0x1f8>
 800887e:	f04f 30ff 	mov.w	r0, #4294967295
 8008882:	b004      	add	sp, #16
 8008884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	f043 0320 	orr.w	r3, r3, #32
 800888e:	6023      	str	r3, [r4, #0]
 8008890:	2778      	movs	r7, #120	; 0x78
 8008892:	4832      	ldr	r0, [pc, #200]	; (800895c <_printf_i+0x240>)
 8008894:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	6829      	ldr	r1, [r5, #0]
 800889c:	061f      	lsls	r7, r3, #24
 800889e:	f851 6b04 	ldr.w	r6, [r1], #4
 80088a2:	d402      	bmi.n	80088aa <_printf_i+0x18e>
 80088a4:	065f      	lsls	r7, r3, #25
 80088a6:	bf48      	it	mi
 80088a8:	b2b6      	uxthmi	r6, r6
 80088aa:	07df      	lsls	r7, r3, #31
 80088ac:	bf48      	it	mi
 80088ae:	f043 0320 	orrmi.w	r3, r3, #32
 80088b2:	6029      	str	r1, [r5, #0]
 80088b4:	bf48      	it	mi
 80088b6:	6023      	strmi	r3, [r4, #0]
 80088b8:	b91e      	cbnz	r6, 80088c2 <_printf_i+0x1a6>
 80088ba:	6823      	ldr	r3, [r4, #0]
 80088bc:	f023 0320 	bic.w	r3, r3, #32
 80088c0:	6023      	str	r3, [r4, #0]
 80088c2:	2310      	movs	r3, #16
 80088c4:	e7a6      	b.n	8008814 <_printf_i+0xf8>
 80088c6:	4824      	ldr	r0, [pc, #144]	; (8008958 <_printf_i+0x23c>)
 80088c8:	e7e4      	b.n	8008894 <_printf_i+0x178>
 80088ca:	4615      	mov	r5, r2
 80088cc:	e7bd      	b.n	800884a <_printf_i+0x12e>
 80088ce:	682b      	ldr	r3, [r5, #0]
 80088d0:	6826      	ldr	r6, [r4, #0]
 80088d2:	1d18      	adds	r0, r3, #4
 80088d4:	6961      	ldr	r1, [r4, #20]
 80088d6:	6028      	str	r0, [r5, #0]
 80088d8:	0635      	lsls	r5, r6, #24
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	d501      	bpl.n	80088e2 <_printf_i+0x1c6>
 80088de:	6019      	str	r1, [r3, #0]
 80088e0:	e002      	b.n	80088e8 <_printf_i+0x1cc>
 80088e2:	0670      	lsls	r0, r6, #25
 80088e4:	d5fb      	bpl.n	80088de <_printf_i+0x1c2>
 80088e6:	8019      	strh	r1, [r3, #0]
 80088e8:	2300      	movs	r3, #0
 80088ea:	4615      	mov	r5, r2
 80088ec:	6123      	str	r3, [r4, #16]
 80088ee:	e7bc      	b.n	800886a <_printf_i+0x14e>
 80088f0:	682b      	ldr	r3, [r5, #0]
 80088f2:	2100      	movs	r1, #0
 80088f4:	1d1a      	adds	r2, r3, #4
 80088f6:	602a      	str	r2, [r5, #0]
 80088f8:	681d      	ldr	r5, [r3, #0]
 80088fa:	6862      	ldr	r2, [r4, #4]
 80088fc:	4628      	mov	r0, r5
 80088fe:	f000 f987 	bl	8008c10 <memchr>
 8008902:	b108      	cbz	r0, 8008908 <_printf_i+0x1ec>
 8008904:	1b40      	subs	r0, r0, r5
 8008906:	6060      	str	r0, [r4, #4]
 8008908:	6863      	ldr	r3, [r4, #4]
 800890a:	6123      	str	r3, [r4, #16]
 800890c:	2300      	movs	r3, #0
 800890e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008912:	e7aa      	b.n	800886a <_printf_i+0x14e>
 8008914:	462a      	mov	r2, r5
 8008916:	4649      	mov	r1, r9
 8008918:	4640      	mov	r0, r8
 800891a:	6923      	ldr	r3, [r4, #16]
 800891c:	47d0      	blx	sl
 800891e:	3001      	adds	r0, #1
 8008920:	d0ad      	beq.n	800887e <_printf_i+0x162>
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	079b      	lsls	r3, r3, #30
 8008926:	d413      	bmi.n	8008950 <_printf_i+0x234>
 8008928:	68e0      	ldr	r0, [r4, #12]
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	4298      	cmp	r0, r3
 800892e:	bfb8      	it	lt
 8008930:	4618      	movlt	r0, r3
 8008932:	e7a6      	b.n	8008882 <_printf_i+0x166>
 8008934:	2301      	movs	r3, #1
 8008936:	4632      	mov	r2, r6
 8008938:	4649      	mov	r1, r9
 800893a:	4640      	mov	r0, r8
 800893c:	47d0      	blx	sl
 800893e:	3001      	adds	r0, #1
 8008940:	d09d      	beq.n	800887e <_printf_i+0x162>
 8008942:	3501      	adds	r5, #1
 8008944:	68e3      	ldr	r3, [r4, #12]
 8008946:	9903      	ldr	r1, [sp, #12]
 8008948:	1a5b      	subs	r3, r3, r1
 800894a:	42ab      	cmp	r3, r5
 800894c:	dcf2      	bgt.n	8008934 <_printf_i+0x218>
 800894e:	e7eb      	b.n	8008928 <_printf_i+0x20c>
 8008950:	2500      	movs	r5, #0
 8008952:	f104 0619 	add.w	r6, r4, #25
 8008956:	e7f5      	b.n	8008944 <_printf_i+0x228>
 8008958:	08008ed1 	.word	0x08008ed1
 800895c:	08008ee2 	.word	0x08008ee2

08008960 <__sflush_r>:
 8008960:	898a      	ldrh	r2, [r1, #12]
 8008962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008964:	4605      	mov	r5, r0
 8008966:	0710      	lsls	r0, r2, #28
 8008968:	460c      	mov	r4, r1
 800896a:	d457      	bmi.n	8008a1c <__sflush_r+0xbc>
 800896c:	684b      	ldr	r3, [r1, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	dc04      	bgt.n	800897c <__sflush_r+0x1c>
 8008972:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008974:	2b00      	cmp	r3, #0
 8008976:	dc01      	bgt.n	800897c <__sflush_r+0x1c>
 8008978:	2000      	movs	r0, #0
 800897a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800897e:	2e00      	cmp	r6, #0
 8008980:	d0fa      	beq.n	8008978 <__sflush_r+0x18>
 8008982:	2300      	movs	r3, #0
 8008984:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008988:	682f      	ldr	r7, [r5, #0]
 800898a:	6a21      	ldr	r1, [r4, #32]
 800898c:	602b      	str	r3, [r5, #0]
 800898e:	d032      	beq.n	80089f6 <__sflush_r+0x96>
 8008990:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008992:	89a3      	ldrh	r3, [r4, #12]
 8008994:	075a      	lsls	r2, r3, #29
 8008996:	d505      	bpl.n	80089a4 <__sflush_r+0x44>
 8008998:	6863      	ldr	r3, [r4, #4]
 800899a:	1ac0      	subs	r0, r0, r3
 800899c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800899e:	b10b      	cbz	r3, 80089a4 <__sflush_r+0x44>
 80089a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089a2:	1ac0      	subs	r0, r0, r3
 80089a4:	2300      	movs	r3, #0
 80089a6:	4602      	mov	r2, r0
 80089a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089aa:	4628      	mov	r0, r5
 80089ac:	6a21      	ldr	r1, [r4, #32]
 80089ae:	47b0      	blx	r6
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	d106      	bne.n	80089c4 <__sflush_r+0x64>
 80089b6:	6829      	ldr	r1, [r5, #0]
 80089b8:	291d      	cmp	r1, #29
 80089ba:	d82b      	bhi.n	8008a14 <__sflush_r+0xb4>
 80089bc:	4a28      	ldr	r2, [pc, #160]	; (8008a60 <__sflush_r+0x100>)
 80089be:	410a      	asrs	r2, r1
 80089c0:	07d6      	lsls	r6, r2, #31
 80089c2:	d427      	bmi.n	8008a14 <__sflush_r+0xb4>
 80089c4:	2200      	movs	r2, #0
 80089c6:	6062      	str	r2, [r4, #4]
 80089c8:	6922      	ldr	r2, [r4, #16]
 80089ca:	04d9      	lsls	r1, r3, #19
 80089cc:	6022      	str	r2, [r4, #0]
 80089ce:	d504      	bpl.n	80089da <__sflush_r+0x7a>
 80089d0:	1c42      	adds	r2, r0, #1
 80089d2:	d101      	bne.n	80089d8 <__sflush_r+0x78>
 80089d4:	682b      	ldr	r3, [r5, #0]
 80089d6:	b903      	cbnz	r3, 80089da <__sflush_r+0x7a>
 80089d8:	6560      	str	r0, [r4, #84]	; 0x54
 80089da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089dc:	602f      	str	r7, [r5, #0]
 80089de:	2900      	cmp	r1, #0
 80089e0:	d0ca      	beq.n	8008978 <__sflush_r+0x18>
 80089e2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089e6:	4299      	cmp	r1, r3
 80089e8:	d002      	beq.n	80089f0 <__sflush_r+0x90>
 80089ea:	4628      	mov	r0, r5
 80089ec:	f7ff fbd8 	bl	80081a0 <_free_r>
 80089f0:	2000      	movs	r0, #0
 80089f2:	6360      	str	r0, [r4, #52]	; 0x34
 80089f4:	e7c1      	b.n	800897a <__sflush_r+0x1a>
 80089f6:	2301      	movs	r3, #1
 80089f8:	4628      	mov	r0, r5
 80089fa:	47b0      	blx	r6
 80089fc:	1c41      	adds	r1, r0, #1
 80089fe:	d1c8      	bne.n	8008992 <__sflush_r+0x32>
 8008a00:	682b      	ldr	r3, [r5, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d0c5      	beq.n	8008992 <__sflush_r+0x32>
 8008a06:	2b1d      	cmp	r3, #29
 8008a08:	d001      	beq.n	8008a0e <__sflush_r+0xae>
 8008a0a:	2b16      	cmp	r3, #22
 8008a0c:	d101      	bne.n	8008a12 <__sflush_r+0xb2>
 8008a0e:	602f      	str	r7, [r5, #0]
 8008a10:	e7b2      	b.n	8008978 <__sflush_r+0x18>
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a18:	81a3      	strh	r3, [r4, #12]
 8008a1a:	e7ae      	b.n	800897a <__sflush_r+0x1a>
 8008a1c:	690f      	ldr	r7, [r1, #16]
 8008a1e:	2f00      	cmp	r7, #0
 8008a20:	d0aa      	beq.n	8008978 <__sflush_r+0x18>
 8008a22:	0793      	lsls	r3, r2, #30
 8008a24:	bf18      	it	ne
 8008a26:	2300      	movne	r3, #0
 8008a28:	680e      	ldr	r6, [r1, #0]
 8008a2a:	bf08      	it	eq
 8008a2c:	694b      	ldreq	r3, [r1, #20]
 8008a2e:	1bf6      	subs	r6, r6, r7
 8008a30:	600f      	str	r7, [r1, #0]
 8008a32:	608b      	str	r3, [r1, #8]
 8008a34:	2e00      	cmp	r6, #0
 8008a36:	dd9f      	ble.n	8008978 <__sflush_r+0x18>
 8008a38:	4633      	mov	r3, r6
 8008a3a:	463a      	mov	r2, r7
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	6a21      	ldr	r1, [r4, #32]
 8008a40:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008a44:	47e0      	blx	ip
 8008a46:	2800      	cmp	r0, #0
 8008a48:	dc06      	bgt.n	8008a58 <__sflush_r+0xf8>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	e790      	b.n	800897a <__sflush_r+0x1a>
 8008a58:	4407      	add	r7, r0
 8008a5a:	1a36      	subs	r6, r6, r0
 8008a5c:	e7ea      	b.n	8008a34 <__sflush_r+0xd4>
 8008a5e:	bf00      	nop
 8008a60:	dfbffffe 	.word	0xdfbffffe

08008a64 <_fflush_r>:
 8008a64:	b538      	push	{r3, r4, r5, lr}
 8008a66:	690b      	ldr	r3, [r1, #16]
 8008a68:	4605      	mov	r5, r0
 8008a6a:	460c      	mov	r4, r1
 8008a6c:	b913      	cbnz	r3, 8008a74 <_fflush_r+0x10>
 8008a6e:	2500      	movs	r5, #0
 8008a70:	4628      	mov	r0, r5
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	b118      	cbz	r0, 8008a7e <_fflush_r+0x1a>
 8008a76:	6a03      	ldr	r3, [r0, #32]
 8008a78:	b90b      	cbnz	r3, 8008a7e <_fflush_r+0x1a>
 8008a7a:	f7ff f969 	bl	8007d50 <__sinit>
 8008a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0f3      	beq.n	8008a6e <_fflush_r+0xa>
 8008a86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008a88:	07d0      	lsls	r0, r2, #31
 8008a8a:	d404      	bmi.n	8008a96 <_fflush_r+0x32>
 8008a8c:	0599      	lsls	r1, r3, #22
 8008a8e:	d402      	bmi.n	8008a96 <_fflush_r+0x32>
 8008a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a92:	f7ff fb6d 	bl	8008170 <__retarget_lock_acquire_recursive>
 8008a96:	4628      	mov	r0, r5
 8008a98:	4621      	mov	r1, r4
 8008a9a:	f7ff ff61 	bl	8008960 <__sflush_r>
 8008a9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008aa0:	4605      	mov	r5, r0
 8008aa2:	07da      	lsls	r2, r3, #31
 8008aa4:	d4e4      	bmi.n	8008a70 <_fflush_r+0xc>
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	059b      	lsls	r3, r3, #22
 8008aaa:	d4e1      	bmi.n	8008a70 <_fflush_r+0xc>
 8008aac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aae:	f7ff fb60 	bl	8008172 <__retarget_lock_release_recursive>
 8008ab2:	e7dd      	b.n	8008a70 <_fflush_r+0xc>

08008ab4 <__swhatbuf_r>:
 8008ab4:	b570      	push	{r4, r5, r6, lr}
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008abc:	4615      	mov	r5, r2
 8008abe:	2900      	cmp	r1, #0
 8008ac0:	461e      	mov	r6, r3
 8008ac2:	b096      	sub	sp, #88	; 0x58
 8008ac4:	da0c      	bge.n	8008ae0 <__swhatbuf_r+0x2c>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	2100      	movs	r1, #0
 8008aca:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ace:	bf0c      	ite	eq
 8008ad0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008ad4:	2340      	movne	r3, #64	; 0x40
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	6031      	str	r1, [r6, #0]
 8008ada:	602b      	str	r3, [r5, #0]
 8008adc:	b016      	add	sp, #88	; 0x58
 8008ade:	bd70      	pop	{r4, r5, r6, pc}
 8008ae0:	466a      	mov	r2, sp
 8008ae2:	f000 f863 	bl	8008bac <_fstat_r>
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	dbed      	blt.n	8008ac6 <__swhatbuf_r+0x12>
 8008aea:	9901      	ldr	r1, [sp, #4]
 8008aec:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008af0:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008af4:	4259      	negs	r1, r3
 8008af6:	4159      	adcs	r1, r3
 8008af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008afc:	e7eb      	b.n	8008ad6 <__swhatbuf_r+0x22>

08008afe <__smakebuf_r>:
 8008afe:	898b      	ldrh	r3, [r1, #12]
 8008b00:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008b02:	079d      	lsls	r5, r3, #30
 8008b04:	4606      	mov	r6, r0
 8008b06:	460c      	mov	r4, r1
 8008b08:	d507      	bpl.n	8008b1a <__smakebuf_r+0x1c>
 8008b0a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008b0e:	6023      	str	r3, [r4, #0]
 8008b10:	6123      	str	r3, [r4, #16]
 8008b12:	2301      	movs	r3, #1
 8008b14:	6163      	str	r3, [r4, #20]
 8008b16:	b002      	add	sp, #8
 8008b18:	bd70      	pop	{r4, r5, r6, pc}
 8008b1a:	466a      	mov	r2, sp
 8008b1c:	ab01      	add	r3, sp, #4
 8008b1e:	f7ff ffc9 	bl	8008ab4 <__swhatbuf_r>
 8008b22:	9900      	ldr	r1, [sp, #0]
 8008b24:	4605      	mov	r5, r0
 8008b26:	4630      	mov	r0, r6
 8008b28:	f7ff fba2 	bl	8008270 <_malloc_r>
 8008b2c:	b948      	cbnz	r0, 8008b42 <__smakebuf_r+0x44>
 8008b2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b32:	059a      	lsls	r2, r3, #22
 8008b34:	d4ef      	bmi.n	8008b16 <__smakebuf_r+0x18>
 8008b36:	f023 0303 	bic.w	r3, r3, #3
 8008b3a:	f043 0302 	orr.w	r3, r3, #2
 8008b3e:	81a3      	strh	r3, [r4, #12]
 8008b40:	e7e3      	b.n	8008b0a <__smakebuf_r+0xc>
 8008b42:	89a3      	ldrh	r3, [r4, #12]
 8008b44:	6020      	str	r0, [r4, #0]
 8008b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b4a:	81a3      	strh	r3, [r4, #12]
 8008b4c:	9b00      	ldr	r3, [sp, #0]
 8008b4e:	6120      	str	r0, [r4, #16]
 8008b50:	6163      	str	r3, [r4, #20]
 8008b52:	9b01      	ldr	r3, [sp, #4]
 8008b54:	b15b      	cbz	r3, 8008b6e <__smakebuf_r+0x70>
 8008b56:	4630      	mov	r0, r6
 8008b58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008b5c:	f000 f838 	bl	8008bd0 <_isatty_r>
 8008b60:	b128      	cbz	r0, 8008b6e <__smakebuf_r+0x70>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	f023 0303 	bic.w	r3, r3, #3
 8008b68:	f043 0301 	orr.w	r3, r3, #1
 8008b6c:	81a3      	strh	r3, [r4, #12]
 8008b6e:	89a3      	ldrh	r3, [r4, #12]
 8008b70:	431d      	orrs	r5, r3
 8008b72:	81a5      	strh	r5, [r4, #12]
 8008b74:	e7cf      	b.n	8008b16 <__smakebuf_r+0x18>

08008b76 <memmove>:
 8008b76:	4288      	cmp	r0, r1
 8008b78:	b510      	push	{r4, lr}
 8008b7a:	eb01 0402 	add.w	r4, r1, r2
 8008b7e:	d902      	bls.n	8008b86 <memmove+0x10>
 8008b80:	4284      	cmp	r4, r0
 8008b82:	4623      	mov	r3, r4
 8008b84:	d807      	bhi.n	8008b96 <memmove+0x20>
 8008b86:	1e43      	subs	r3, r0, #1
 8008b88:	42a1      	cmp	r1, r4
 8008b8a:	d008      	beq.n	8008b9e <memmove+0x28>
 8008b8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b90:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b94:	e7f8      	b.n	8008b88 <memmove+0x12>
 8008b96:	4601      	mov	r1, r0
 8008b98:	4402      	add	r2, r0
 8008b9a:	428a      	cmp	r2, r1
 8008b9c:	d100      	bne.n	8008ba0 <memmove+0x2a>
 8008b9e:	bd10      	pop	{r4, pc}
 8008ba0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ba4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ba8:	e7f7      	b.n	8008b9a <memmove+0x24>
	...

08008bac <_fstat_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	2300      	movs	r3, #0
 8008bb0:	4d06      	ldr	r5, [pc, #24]	; (8008bcc <_fstat_r+0x20>)
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	602b      	str	r3, [r5, #0]
 8008bba:	f7f7 ff65 	bl	8000a88 <_fstat>
 8008bbe:	1c43      	adds	r3, r0, #1
 8008bc0:	d102      	bne.n	8008bc8 <_fstat_r+0x1c>
 8008bc2:	682b      	ldr	r3, [r5, #0]
 8008bc4:	b103      	cbz	r3, 8008bc8 <_fstat_r+0x1c>
 8008bc6:	6023      	str	r3, [r4, #0]
 8008bc8:	bd38      	pop	{r3, r4, r5, pc}
 8008bca:	bf00      	nop
 8008bcc:	20002a28 	.word	0x20002a28

08008bd0 <_isatty_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	4d05      	ldr	r5, [pc, #20]	; (8008bec <_isatty_r+0x1c>)
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	602b      	str	r3, [r5, #0]
 8008bdc:	f7f7 ff63 	bl	8000aa6 <_isatty>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_isatty_r+0x1a>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_isatty_r+0x1a>
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	20002a28 	.word	0x20002a28

08008bf0 <_sbrk_r>:
 8008bf0:	b538      	push	{r3, r4, r5, lr}
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	4d05      	ldr	r5, [pc, #20]	; (8008c0c <_sbrk_r+0x1c>)
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	4608      	mov	r0, r1
 8008bfa:	602b      	str	r3, [r5, #0]
 8008bfc:	f000 f84e 	bl	8008c9c <_sbrk>
 8008c00:	1c43      	adds	r3, r0, #1
 8008c02:	d102      	bne.n	8008c0a <_sbrk_r+0x1a>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	b103      	cbz	r3, 8008c0a <_sbrk_r+0x1a>
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	bd38      	pop	{r3, r4, r5, pc}
 8008c0c:	20002a28 	.word	0x20002a28

08008c10 <memchr>:
 8008c10:	4603      	mov	r3, r0
 8008c12:	b510      	push	{r4, lr}
 8008c14:	b2c9      	uxtb	r1, r1
 8008c16:	4402      	add	r2, r0
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	d101      	bne.n	8008c22 <memchr+0x12>
 8008c1e:	2000      	movs	r0, #0
 8008c20:	e003      	b.n	8008c2a <memchr+0x1a>
 8008c22:	7804      	ldrb	r4, [r0, #0]
 8008c24:	3301      	adds	r3, #1
 8008c26:	428c      	cmp	r4, r1
 8008c28:	d1f6      	bne.n	8008c18 <memchr+0x8>
 8008c2a:	bd10      	pop	{r4, pc}

08008c2c <_realloc_r>:
 8008c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c30:	4680      	mov	r8, r0
 8008c32:	4614      	mov	r4, r2
 8008c34:	460e      	mov	r6, r1
 8008c36:	b921      	cbnz	r1, 8008c42 <_realloc_r+0x16>
 8008c38:	4611      	mov	r1, r2
 8008c3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c3e:	f7ff bb17 	b.w	8008270 <_malloc_r>
 8008c42:	b92a      	cbnz	r2, 8008c50 <_realloc_r+0x24>
 8008c44:	f7ff faac 	bl	80081a0 <_free_r>
 8008c48:	4625      	mov	r5, r4
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c50:	f000 f81b 	bl	8008c8a <_malloc_usable_size_r>
 8008c54:	4284      	cmp	r4, r0
 8008c56:	4607      	mov	r7, r0
 8008c58:	d802      	bhi.n	8008c60 <_realloc_r+0x34>
 8008c5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c5e:	d812      	bhi.n	8008c86 <_realloc_r+0x5a>
 8008c60:	4621      	mov	r1, r4
 8008c62:	4640      	mov	r0, r8
 8008c64:	f7ff fb04 	bl	8008270 <_malloc_r>
 8008c68:	4605      	mov	r5, r0
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	d0ed      	beq.n	8008c4a <_realloc_r+0x1e>
 8008c6e:	42bc      	cmp	r4, r7
 8008c70:	4622      	mov	r2, r4
 8008c72:	4631      	mov	r1, r6
 8008c74:	bf28      	it	cs
 8008c76:	463a      	movcs	r2, r7
 8008c78:	f7ff fa84 	bl	8008184 <memcpy>
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	4640      	mov	r0, r8
 8008c80:	f7ff fa8e 	bl	80081a0 <_free_r>
 8008c84:	e7e1      	b.n	8008c4a <_realloc_r+0x1e>
 8008c86:	4635      	mov	r5, r6
 8008c88:	e7df      	b.n	8008c4a <_realloc_r+0x1e>

08008c8a <_malloc_usable_size_r>:
 8008c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c8e:	1f18      	subs	r0, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bfbc      	itt	lt
 8008c94:	580b      	ldrlt	r3, [r1, r0]
 8008c96:	18c0      	addlt	r0, r0, r3
 8008c98:	4770      	bx	lr
	...

08008c9c <_sbrk>:
 8008c9c:	4a04      	ldr	r2, [pc, #16]	; (8008cb0 <_sbrk+0x14>)
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	6811      	ldr	r1, [r2, #0]
 8008ca2:	b909      	cbnz	r1, 8008ca8 <_sbrk+0xc>
 8008ca4:	4903      	ldr	r1, [pc, #12]	; (8008cb4 <_sbrk+0x18>)
 8008ca6:	6011      	str	r1, [r2, #0]
 8008ca8:	6810      	ldr	r0, [r2, #0]
 8008caa:	4403      	add	r3, r0
 8008cac:	6013      	str	r3, [r2, #0]
 8008cae:	4770      	bx	lr
 8008cb0:	20002a38 	.word	0x20002a38
 8008cb4:	20002a40 	.word	0x20002a40

08008cb8 <_init>:
 8008cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cba:	bf00      	nop
 8008cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cbe:	bc08      	pop	{r3}
 8008cc0:	469e      	mov	lr, r3
 8008cc2:	4770      	bx	lr

08008cc4 <_fini>:
 8008cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cc6:	bf00      	nop
 8008cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cca:	bc08      	pop	{r3}
 8008ccc:	469e      	mov	lr, r3
 8008cce:	4770      	bx	lr
