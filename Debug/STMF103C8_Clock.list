
STMF103C8_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040c8  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  080041d8  080041d8  000141d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042dc  080042dc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080042dc  080042dc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042dc  080042dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042dc  080042dc  000142dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042e0  080042e0  000142e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080042e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e18  20000078  0800435c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e90  0800435c  00020e90  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d19  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030f4  00000000  00000000  00032dba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00035eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00036ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a665  00000000  00000000  00037ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e97  00000000  00000000  0005265d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000955e2  00000000  00000000  000654f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000faad6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb0  00000000  00000000  000fab2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	080041c0 	.word	0x080041c0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	080041c0 	.word	0x080041c0

08000150 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000156:	4b1a      	ldr	r3, [pc, #104]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000158:	699b      	ldr	r3, [r3, #24]
 800015a:	4a19      	ldr	r2, [pc, #100]	; (80001c0 <MX_GPIO_Init+0x70>)
 800015c:	f043 0310 	orr.w	r3, r3, #16
 8000160:	6193      	str	r3, [r2, #24]
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	f003 0310 	and.w	r3, r3, #16
 800016a:	60fb      	str	r3, [r7, #12]
 800016c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000174:	f043 0320 	orr.w	r3, r3, #32
 8000178:	6193      	str	r3, [r2, #24]
 800017a:	4b11      	ldr	r3, [pc, #68]	; (80001c0 <MX_GPIO_Init+0x70>)
 800017c:	699b      	ldr	r3, [r3, #24]
 800017e:	f003 0320 	and.w	r3, r3, #32
 8000182:	60bb      	str	r3, [r7, #8]
 8000184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000186:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <MX_GPIO_Init+0x70>)
 800018c:	f043 0304 	orr.w	r3, r3, #4
 8000190:	6193      	str	r3, [r2, #24]
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000194:	699b      	ldr	r3, [r3, #24]
 8000196:	f003 0304 	and.w	r3, r3, #4
 800019a:	607b      	str	r3, [r7, #4]
 800019c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a07      	ldr	r2, [pc, #28]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001a4:	f043 0308 	orr.w	r3, r3, #8
 80001a8:	6193      	str	r3, [r2, #24]
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	f003 0308 	and.w	r3, r3, #8
 80001b2:	603b      	str	r3, [r7, #0]
 80001b4:	683b      	ldr	r3, [r7, #0]

}
 80001b6:	bf00      	nop
 80001b8:	3714      	adds	r7, #20
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	40021000 	.word	0x40021000

080001c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001d4:	f003 0301 	and.w	r3, r3, #1
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d013      	beq.n	8000204 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d00b      	beq.n	8000204 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001ec:	e000      	b.n	80001f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d0f9      	beq.n	80001ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	b2d2      	uxtb	r2, r2
 8000202:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000204:	687b      	ldr	r3, [r7, #4]
}
 8000206:	4618      	mov	r0, r3
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000216:	f000 fb0f 	bl	8000838 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021a:	f000 f845 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021e:	f7ff ff97 	bl	8000150 <MX_GPIO_Init>
  MX_RTC_Init();
 8000222:	f000 f903 	bl	800042c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000226:	f000 fa6b 	bl	8000700 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Status = xTaskCreate(Task_1_funtion, "Task 1", 100, NULL, 2, &Task_1_Handler);
 800022a:	4b15      	ldr	r3, [pc, #84]	; (8000280 <main+0x70>)
 800022c:	9301      	str	r3, [sp, #4]
 800022e:	2302      	movs	r3, #2
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2300      	movs	r3, #0
 8000234:	2264      	movs	r2, #100	; 0x64
 8000236:	4913      	ldr	r1, [pc, #76]	; (8000284 <main+0x74>)
 8000238:	4813      	ldr	r0, [pc, #76]	; (8000288 <main+0x78>)
 800023a:	f002 fa6b 	bl	8002714 <xTaskCreate>
 800023e:	4603      	mov	r3, r0
 8000240:	4a12      	ldr	r2, [pc, #72]	; (800028c <main+0x7c>)
 8000242:	6013      	str	r3, [r2, #0]
  Status = xTaskCreate(Print_Time_Runnable, "Print Time", 100, NULL, 2, &Print_Time_Handler);
 8000244:	4b12      	ldr	r3, [pc, #72]	; (8000290 <main+0x80>)
 8000246:	9301      	str	r3, [sp, #4]
 8000248:	2302      	movs	r3, #2
 800024a:	9300      	str	r3, [sp, #0]
 800024c:	2300      	movs	r3, #0
 800024e:	2264      	movs	r2, #100	; 0x64
 8000250:	4910      	ldr	r1, [pc, #64]	; (8000294 <main+0x84>)
 8000252:	4811      	ldr	r0, [pc, #68]	; (8000298 <main+0x88>)
 8000254:	f002 fa5e 	bl	8002714 <xTaskCreate>
 8000258:	4603      	mov	r3, r0
 800025a:	4a0c      	ldr	r2, [pc, #48]	; (800028c <main+0x7c>)
 800025c:	6013      	str	r3, [r2, #0]
  Status = xTaskCreate(Process_UART_Data, "UART Rx", 100, NULL, 2, &Process_Rx_Data_Handler);
 800025e:	4b0f      	ldr	r3, [pc, #60]	; (800029c <main+0x8c>)
 8000260:	9301      	str	r3, [sp, #4]
 8000262:	2302      	movs	r3, #2
 8000264:	9300      	str	r3, [sp, #0]
 8000266:	2300      	movs	r3, #0
 8000268:	2264      	movs	r2, #100	; 0x64
 800026a:	490d      	ldr	r1, [pc, #52]	; (80002a0 <main+0x90>)
 800026c:	480d      	ldr	r0, [pc, #52]	; (80002a4 <main+0x94>)
 800026e:	f002 fa51 	bl	8002714 <xTaskCreate>
 8000272:	4603      	mov	r3, r0
 8000274:	4a05      	ldr	r2, [pc, #20]	; (800028c <main+0x7c>)
 8000276:	6013      	str	r3, [r2, #0]


  vTaskStartScheduler();
 8000278:	f002 fbba 	bl	80029f0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800027c:	e7fe      	b.n	800027c <main+0x6c>
 800027e:	bf00      	nop
 8000280:	20000094 	.word	0x20000094
 8000284:	080041d8 	.word	0x080041d8
 8000288:	08000375 	.word	0x08000375
 800028c:	20000dd8 	.word	0x20000dd8
 8000290:	20000098 	.word	0x20000098
 8000294:	080041e0 	.word	0x080041e0
 8000298:	0800039d 	.word	0x0800039d
 800029c:	2000009c 	.word	0x2000009c
 80002a0:	080041ec 	.word	0x080041ec
 80002a4:	0800034d 	.word	0x0800034d

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b094      	sub	sp, #80	; 0x50
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002b2:	2228      	movs	r2, #40	; 0x28
 80002b4:	2100      	movs	r1, #0
 80002b6:	4618      	mov	r0, r3
 80002b8:	f003 faaa 	bl	8003810 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	2200      	movs	r2, #0
 80002c2:	601a      	str	r2, [r3, #0]
 80002c4:	605a      	str	r2, [r3, #4]
 80002c6:	609a      	str	r2, [r3, #8]
 80002c8:	60da      	str	r2, [r3, #12]
 80002ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80002d8:	2305      	movs	r3, #5
 80002da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80002e2:	2301      	movs	r3, #1
 80002e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002e6:	2300      	movs	r3, #0
 80002e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002ee:	4618      	mov	r0, r3
 80002f0:	f000 fd44 	bl	8000d7c <HAL_RCC_OscConfig>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <SystemClock_Config+0x56>
  {
    Error_Handler();
 80002fa:	f000 f891 	bl	8000420 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fe:	230f      	movs	r3, #15
 8000300:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000302:	2301      	movs	r3, #1
 8000304:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030e:	2300      	movs	r3, #0
 8000310:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000312:	f107 0314 	add.w	r3, r7, #20
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f000 ffaf 	bl	800127c <HAL_RCC_ClockConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000324:	f000 f87c 	bl	8000420 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000328:	2301      	movs	r3, #1
 800032a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800032c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000330:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000332:	1d3b      	adds	r3, r7, #4
 8000334:	4618      	mov	r0, r3
 8000336:	f001 f96b 	bl	8001610 <HAL_RCCEx_PeriphCLKConfig>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000340:	f000 f86e 	bl	8000420 <Error_Handler>
  }
}
 8000344:	bf00      	nop
 8000346:	3750      	adds	r7, #80	; 0x50
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}

0800034c <Process_UART_Data>:

/* USER CODE BEGIN 4 */

static void Process_UART_Data(void * parameters)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b082      	sub	sp, #8
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("Process UART TX Rx Alive\n");
 8000354:	4805      	ldr	r0, [pc, #20]	; (800036c <Process_UART_Data+0x20>)
 8000356:	f003 fad1 	bl	80038fc <puts>
		taskYIELD();
 800035a:	4b05      	ldr	r3, [pc, #20]	; (8000370 <Process_UART_Data+0x24>)
 800035c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000360:	601a      	str	r2, [r3, #0]
 8000362:	f3bf 8f4f 	dsb	sy
 8000366:	f3bf 8f6f 	isb	sy
		printf("Process UART TX Rx Alive\n");
 800036a:	e7f3      	b.n	8000354 <Process_UART_Data+0x8>
 800036c:	080041f4 	.word	0x080041f4
 8000370:	e000ed04 	.word	0xe000ed04

08000374 <Task_1_funtion>:
	}
}

static void Task_1_funtion(void * parameters)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("Getting Time Alive\n");
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <Task_1_funtion+0x20>)
 800037e:	f003 fabd 	bl	80038fc <puts>
		taskYIELD();
 8000382:	4b05      	ldr	r3, [pc, #20]	; (8000398 <Task_1_funtion+0x24>)
 8000384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	f3bf 8f4f 	dsb	sy
 800038e:	f3bf 8f6f 	isb	sy
		printf("Getting Time Alive\n");
 8000392:	e7f3      	b.n	800037c <Task_1_funtion+0x8>
 8000394:	08004210 	.word	0x08004210
 8000398:	e000ed04 	.word	0xe000ed04

0800039c <Print_Time_Runnable>:
	}
}

static void Print_Time_Runnable(void * parameters)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		printf("Printing Time Alive\n");
 80003a4:	4805      	ldr	r0, [pc, #20]	; (80003bc <Print_Time_Runnable+0x20>)
 80003a6:	f003 faa9 	bl	80038fc <puts>
		taskYIELD();
 80003aa:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <Print_Time_Runnable+0x24>)
 80003ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	f3bf 8f4f 	dsb	sy
 80003b6:	f3bf 8f6f 	isb	sy
		printf("Printing Time Alive\n");
 80003ba:	e7f3      	b.n	80003a4 <Print_Time_Runnable+0x8>
 80003bc:	08004224 	.word	0x08004224
 80003c0:	e000ed04 	.word	0xe000ed04

080003c4 <_write>:
}



int _write(int file, char *ptr, int len)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b086      	sub	sp, #24
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	60f8      	str	r0, [r7, #12]
 80003cc:	60b9      	str	r1, [r7, #8]
 80003ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d0:	2300      	movs	r3, #0
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	e009      	b.n	80003ea <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	1c5a      	adds	r2, r3, #1
 80003da:	60ba      	str	r2, [r7, #8]
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	4618      	mov	r0, r3
 80003e0:	f7ff fef0 	bl	80001c4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	3301      	adds	r3, #1
 80003e8:	617b      	str	r3, [r7, #20]
 80003ea:	697a      	ldr	r2, [r7, #20]
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	dbf1      	blt.n	80003d6 <_write+0x12>
	}
	return len;
 80003f2:	687b      	ldr	r3, [r7, #4]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3718      	adds	r7, #24
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}

080003fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b082      	sub	sp, #8
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a04      	ldr	r2, [pc, #16]	; (800041c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800040a:	4293      	cmp	r3, r2
 800040c:	d101      	bne.n	8000412 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800040e:	f000 fa29 	bl	8000864 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000412:	bf00      	nop
 8000414:	3708      	adds	r7, #8
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	40000800 	.word	0x40000800

08000420 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000424:	b672      	cpsid	i
}
 8000426:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000428:	e7fe      	b.n	8000428 <Error_Handler+0x8>
	...

0800042c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2100      	movs	r1, #0
 8000436:	460a      	mov	r2, r1
 8000438:	801a      	strh	r2, [r3, #0]
 800043a:	460a      	mov	r2, r1
 800043c:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800043e:	2300      	movs	r3, #0
 8000440:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000442:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <MX_RTC_Init+0x8c>)
 8000444:	4a1d      	ldr	r2, [pc, #116]	; (80004bc <MX_RTC_Init+0x90>)
 8000446:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_RTC_Init+0x8c>)
 800044a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800044e:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_RTC_Init+0x8c>)
 8000452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000456:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000458:	4817      	ldr	r0, [pc, #92]	; (80004b8 <MX_RTC_Init+0x8c>)
 800045a:	f001 fa53 	bl	8001904 <HAL_RTC_Init>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000464:	f7ff ffdc 	bl	8000420 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000468:	2300      	movs	r3, #0
 800046a:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000470:	2300      	movs	r3, #0
 8000472:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000474:	1d3b      	adds	r3, r7, #4
 8000476:	2200      	movs	r2, #0
 8000478:	4619      	mov	r1, r3
 800047a:	480f      	ldr	r0, [pc, #60]	; (80004b8 <MX_RTC_Init+0x8c>)
 800047c:	f001 fad8 	bl	8001a30 <HAL_RTC_SetTime>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000486:	f7ff ffcb 	bl	8000420 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800048a:	2301      	movs	r3, #1
 800048c:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 800048e:	2301      	movs	r3, #1
 8000490:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8000492:	2301      	movs	r3, #1
 8000494:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800049a:	463b      	mov	r3, r7
 800049c:	2200      	movs	r2, #0
 800049e:	4619      	mov	r1, r3
 80004a0:	4805      	ldr	r0, [pc, #20]	; (80004b8 <MX_RTC_Init+0x8c>)
 80004a2:	f001 fb5d 	bl	8001b60 <HAL_RTC_SetDate>
 80004a6:	4603      	mov	r3, r0
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d001      	beq.n	80004b0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80004ac:	f7ff ffb8 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80004b0:	bf00      	nop
 80004b2:	3708      	adds	r7, #8
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	20000ddc 	.word	0x20000ddc
 80004bc:	40002800 	.word	0x40002800

080004c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a0b      	ldr	r2, [pc, #44]	; (80004fc <HAL_RTC_MspInit+0x3c>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d110      	bne.n	80004f4 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80004d2:	f000 fc47 	bl	8000d64 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80004d6:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <HAL_RTC_MspInit+0x40>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	4a09      	ldr	r2, [pc, #36]	; (8000500 <HAL_RTC_MspInit+0x40>)
 80004dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80004e0:	61d3      	str	r3, [r2, #28]
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <HAL_RTC_MspInit+0x40>)
 80004e4:	69db      	ldr	r3, [r3, #28]
 80004e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80004ea:	60fb      	str	r3, [r7, #12]
 80004ec:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80004ee:	4b05      	ldr	r3, [pc, #20]	; (8000504 <HAL_RTC_MspInit+0x44>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80004f4:	bf00      	nop
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40002800 	.word	0x40002800
 8000500:	40021000 	.word	0x40021000
 8000504:	4242043c 	.word	0x4242043c

08000508 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <HAL_MspInit+0x5c>)
 8000510:	699b      	ldr	r3, [r3, #24]
 8000512:	4a14      	ldr	r2, [pc, #80]	; (8000564 <HAL_MspInit+0x5c>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	6193      	str	r3, [r2, #24]
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_MspInit+0x5c>)
 800051c:	699b      	ldr	r3, [r3, #24]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <HAL_MspInit+0x5c>)
 8000528:	69db      	ldr	r3, [r3, #28]
 800052a:	4a0e      	ldr	r2, [pc, #56]	; (8000564 <HAL_MspInit+0x5c>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000530:	61d3      	str	r3, [r2, #28]
 8000532:	4b0c      	ldr	r3, [pc, #48]	; (8000564 <HAL_MspInit+0x5c>)
 8000534:	69db      	ldr	r3, [r3, #28]
 8000536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800053a:	607b      	str	r3, [r7, #4]
 800053c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800053e:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <HAL_MspInit+0x60>)
 8000540:	685b      	ldr	r3, [r3, #4]
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	4a04      	ldr	r2, [pc, #16]	; (8000568 <HAL_MspInit+0x60>)
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	40021000 	.word	0x40021000
 8000568:	40010000 	.word	0x40010000

0800056c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08c      	sub	sp, #48	; 0x30
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000574:	2300      	movs	r3, #0
 8000576:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000578:	2300      	movs	r3, #0
 800057a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 800057c:	2200      	movs	r2, #0
 800057e:	6879      	ldr	r1, [r7, #4]
 8000580:	201e      	movs	r0, #30
 8000582:	f000 fa40 	bl	8000a06 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000586:	201e      	movs	r0, #30
 8000588:	f000 fa59 	bl	8000a3e <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800058c:	4b1e      	ldr	r3, [pc, #120]	; (8000608 <HAL_InitTick+0x9c>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	4a1d      	ldr	r2, [pc, #116]	; (8000608 <HAL_InitTick+0x9c>)
 8000592:	f043 0304 	orr.w	r3, r3, #4
 8000596:	61d3      	str	r3, [r2, #28]
 8000598:	4b1b      	ldr	r3, [pc, #108]	; (8000608 <HAL_InitTick+0x9c>)
 800059a:	69db      	ldr	r3, [r3, #28]
 800059c:	f003 0304 	and.w	r3, r3, #4
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005a4:	f107 0210 	add.w	r2, r7, #16
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f000 ffe0 	bl	8001574 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80005b4:	f000 ffb6 	bl	8001524 <HAL_RCC_GetPCLK1Freq>
 80005b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005bc:	4a13      	ldr	r2, [pc, #76]	; (800060c <HAL_InitTick+0xa0>)
 80005be:	fba2 2303 	umull	r2, r3, r2, r3
 80005c2:	0c9b      	lsrs	r3, r3, #18
 80005c4:	3b01      	subs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80005c8:	4b11      	ldr	r3, [pc, #68]	; (8000610 <HAL_InitTick+0xa4>)
 80005ca:	4a12      	ldr	r2, [pc, #72]	; (8000614 <HAL_InitTick+0xa8>)
 80005cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80005ce:	4b10      	ldr	r3, [pc, #64]	; (8000610 <HAL_InitTick+0xa4>)
 80005d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005d4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_InitTick+0xa4>)
 80005d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005da:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_InitTick+0xa4>)
 80005de:	2200      	movs	r2, #0
 80005e0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <HAL_InitTick+0xa4>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80005e8:	4809      	ldr	r0, [pc, #36]	; (8000610 <HAL_InitTick+0xa4>)
 80005ea:	f001 fd19 	bl	8002020 <HAL_TIM_Base_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d104      	bne.n	80005fe <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80005f4:	4806      	ldr	r0, [pc, #24]	; (8000610 <HAL_InitTick+0xa4>)
 80005f6:	f001 fd6b 	bl	80020d0 <HAL_TIM_Base_Start_IT>
 80005fa:	4603      	mov	r3, r0
 80005fc:	e000      	b.n	8000600 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3730      	adds	r7, #48	; 0x30
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	431bde83 	.word	0x431bde83
 8000610:	20000df0 	.word	0x20000df0
 8000614:	40000800 	.word	0x40000800

08000618 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800061c:	e7fe      	b.n	800061c <NMI_Handler+0x4>

0800061e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <HardFault_Handler+0x4>

08000624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <MemManage_Handler+0x4>

0800062a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062e:	e7fe      	b.n	800062e <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	e7fe      	b.n	8000634 <UsageFault_Handler+0x4>

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
	...

08000644 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000648:	4802      	ldr	r0, [pc, #8]	; (8000654 <TIM4_IRQHandler+0x10>)
 800064a:	f001 fd93 	bl	8002174 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000df0 	.word	0x20000df0

08000658 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b086      	sub	sp, #24
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	e00a      	b.n	8000680 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800066a:	f3af 8000 	nop.w
 800066e:	4601      	mov	r1, r0
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	1c5a      	adds	r2, r3, #1
 8000674:	60ba      	str	r2, [r7, #8]
 8000676:	b2ca      	uxtb	r2, r1
 8000678:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697a      	ldr	r2, [r7, #20]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	429a      	cmp	r2, r3
 8000686:	dbf0      	blt.n	800066a <_read+0x12>
	}

return len;
 8000688:	687b      	ldr	r3, [r7, #4]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3718      	adds	r7, #24
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
	return -1;
 800069a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800069e:	4618      	mov	r0, r3
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b8:	605a      	str	r2, [r3, #4]
	return 0;
 80006ba:	2300      	movs	r3, #0
}
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <_isatty>:

int _isatty(int file)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
	return 1;
 80006ce:	2301      	movs	r3, #1
}
 80006d0:	4618      	mov	r0, r3
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr

080006da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006da:	b480      	push	{r7}
 80006dc:	b085      	sub	sp, #20
 80006de:	af00      	add	r7, sp, #0
 80006e0:	60f8      	str	r0, [r7, #12]
 80006e2:	60b9      	str	r1, [r7, #8]
 80006e4:	607a      	str	r2, [r7, #4]
	return 0;
 80006e6:	2300      	movs	r3, #0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3714      	adds	r7, #20
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f6:	bf00      	nop
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bc80      	pop	{r7}
 80006fc:	4770      	bx	lr
	...

08000700 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART1_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800070c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART1_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART1_UART_Init+0x4c>)
 8000738:	f001 febc 	bl	80024b4 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f7ff fe6d 	bl	8000420 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000e38 	.word	0x20000e38
 8000750:	40013800 	.word	0x40013800

08000754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0310 	add.w	r3, r7, #16
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a1c      	ldr	r2, [pc, #112]	; (80007e0 <HAL_UART_MspInit+0x8c>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d131      	bne.n	80007d8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000774:	4b1b      	ldr	r3, [pc, #108]	; (80007e4 <HAL_UART_MspInit+0x90>)
 8000776:	699b      	ldr	r3, [r3, #24]
 8000778:	4a1a      	ldr	r2, [pc, #104]	; (80007e4 <HAL_UART_MspInit+0x90>)
 800077a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077e:	6193      	str	r3, [r2, #24]
 8000780:	4b18      	ldr	r3, [pc, #96]	; (80007e4 <HAL_UART_MspInit+0x90>)
 8000782:	699b      	ldr	r3, [r3, #24]
 8000784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <HAL_UART_MspInit+0x90>)
 800078e:	699b      	ldr	r3, [r3, #24]
 8000790:	4a14      	ldr	r2, [pc, #80]	; (80007e4 <HAL_UART_MspInit+0x90>)
 8000792:	f043 0304 	orr.w	r3, r3, #4
 8000796:	6193      	str	r3, [r2, #24]
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <HAL_UART_MspInit+0x90>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	f003 0304 	and.w	r3, r3, #4
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80007a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ae:	2303      	movs	r3, #3
 80007b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 0310 	add.w	r3, r7, #16
 80007b6:	4619      	mov	r1, r3
 80007b8:	480b      	ldr	r0, [pc, #44]	; (80007e8 <HAL_UART_MspInit+0x94>)
 80007ba:	f000 f94f 	bl	8000a5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80007be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007cc:	f107 0310 	add.w	r3, r7, #16
 80007d0:	4619      	mov	r1, r3
 80007d2:	4805      	ldr	r0, [pc, #20]	; (80007e8 <HAL_UART_MspInit+0x94>)
 80007d4:	f000 f942 	bl	8000a5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80007d8:	bf00      	nop
 80007da:	3720      	adds	r7, #32
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40013800 	.word	0x40013800
 80007e4:	40021000 	.word	0x40021000
 80007e8:	40010800 	.word	0x40010800

080007ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007ee:	490d      	ldr	r1, [pc, #52]	; (8000824 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007f0:	4a0d      	ldr	r2, [pc, #52]	; (8000828 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007f4:	e002      	b.n	80007fc <LoopCopyDataInit>

080007f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007fa:	3304      	adds	r3, #4

080007fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000800:	d3f9      	bcc.n	80007f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000802:	4a0a      	ldr	r2, [pc, #40]	; (800082c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000804:	4c0a      	ldr	r4, [pc, #40]	; (8000830 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000808:	e001      	b.n	800080e <LoopFillZerobss>

0800080a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800080a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800080c:	3204      	adds	r2, #4

0800080e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800080e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000810:	d3fb      	bcc.n	800080a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000812:	f7ff ff6e 	bl	80006f2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000816:	f002 ffd7 	bl	80037c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800081a:	f7ff fcf9 	bl	8000210 <main>
  bx lr
 800081e:	4770      	bx	lr
  ldr r0, =_sdata
 8000820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000824:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000828:	080042e4 	.word	0x080042e4
  ldr r2, =_sbss
 800082c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000830:	20000e90 	.word	0x20000e90

08000834 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000834:	e7fe      	b.n	8000834 <ADC1_2_IRQHandler>
	...

08000838 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800083c:	4b08      	ldr	r3, [pc, #32]	; (8000860 <HAL_Init+0x28>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a07      	ldr	r2, [pc, #28]	; (8000860 <HAL_Init+0x28>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000848:	2003      	movs	r0, #3
 800084a:	f000 f8d1 	bl	80009f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800084e:	200f      	movs	r0, #15
 8000850:	f7ff fe8c 	bl	800056c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000854:	f7ff fe58 	bl	8000508 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000858:	2300      	movs	r3, #0
}
 800085a:	4618      	mov	r0, r3
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40022000 	.word	0x40022000

08000864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <HAL_IncTick+0x1c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <HAL_IncTick+0x20>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a03      	ldr	r2, [pc, #12]	; (8000884 <HAL_IncTick+0x20>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	20000008 	.word	0x20000008
 8000884:	20000e7c 	.word	0x20000e7c

08000888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;
 800088c:	4b02      	ldr	r3, [pc, #8]	; (8000898 <HAL_GetTick+0x10>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	20000e7c 	.word	0x20000e7c

0800089c <__NVIC_SetPriorityGrouping>:
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ac:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008b8:	4013      	ands	r3, r2
 80008ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ce:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	60d3      	str	r3, [r2, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_GetPriorityGrouping>:
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <__NVIC_GetPriorityGrouping+0x18>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	f003 0307 	and.w	r3, r3, #7
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_EnableIRQ>:
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	2b00      	cmp	r3, #0
 8000910:	db0b      	blt.n	800092a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	f003 021f 	and.w	r2, r3, #31
 8000918:	4906      	ldr	r1, [pc, #24]	; (8000934 <__NVIC_EnableIRQ+0x34>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	095b      	lsrs	r3, r3, #5
 8000920:	2001      	movs	r0, #1
 8000922:	fa00 f202 	lsl.w	r2, r0, r2
 8000926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	bc80      	pop	{r7}
 8000932:	4770      	bx	lr
 8000934:	e000e100 	.word	0xe000e100

08000938 <__NVIC_SetPriority>:
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	6039      	str	r1, [r7, #0]
 8000942:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000944:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000948:	2b00      	cmp	r3, #0
 800094a:	db0a      	blt.n	8000962 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	b2da      	uxtb	r2, r3
 8000950:	490c      	ldr	r1, [pc, #48]	; (8000984 <__NVIC_SetPriority+0x4c>)
 8000952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000956:	0112      	lsls	r2, r2, #4
 8000958:	b2d2      	uxtb	r2, r2
 800095a:	440b      	add	r3, r1
 800095c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000960:	e00a      	b.n	8000978 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	b2da      	uxtb	r2, r3
 8000966:	4908      	ldr	r1, [pc, #32]	; (8000988 <__NVIC_SetPriority+0x50>)
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f003 030f 	and.w	r3, r3, #15
 800096e:	3b04      	subs	r3, #4
 8000970:	0112      	lsls	r2, r2, #4
 8000972:	b2d2      	uxtb	r2, r2
 8000974:	440b      	add	r3, r1
 8000976:	761a      	strb	r2, [r3, #24]
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	bc80      	pop	{r7}
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	e000e100 	.word	0xe000e100
 8000988:	e000ed00 	.word	0xe000ed00

0800098c <NVIC_EncodePriority>:
{
 800098c:	b480      	push	{r7}
 800098e:	b089      	sub	sp, #36	; 0x24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	f003 0307 	and.w	r3, r3, #7
 800099e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f1c3 0307 	rsb	r3, r3, #7
 80009a6:	2b04      	cmp	r3, #4
 80009a8:	bf28      	it	cs
 80009aa:	2304      	movcs	r3, #4
 80009ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	3304      	adds	r3, #4
 80009b2:	2b06      	cmp	r3, #6
 80009b4:	d902      	bls.n	80009bc <NVIC_EncodePriority+0x30>
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3b03      	subs	r3, #3
 80009ba:	e000      	b.n	80009be <NVIC_EncodePriority+0x32>
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	43da      	mvns	r2, r3
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	401a      	ands	r2, r3
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43d9      	mvns	r1, r3
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009e4:	4313      	orrs	r3, r2
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3724      	adds	r7, #36	; 0x24
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bc80      	pop	{r7}
 80009ee:	4770      	bx	lr

080009f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff ff4f 	bl	800089c <__NVIC_SetPriorityGrouping>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
 8000a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a18:	f7ff ff64 	bl	80008e4 <__NVIC_GetPriorityGrouping>
 8000a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	6978      	ldr	r0, [r7, #20]
 8000a24:	f7ff ffb2 	bl	800098c <NVIC_EncodePriority>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff81 	bl	8000938 <__NVIC_SetPriority>
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff57 	bl	8000900 <__NVIC_EnableIRQ>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
	...

08000a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b08b      	sub	sp, #44	; 0x2c
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a6e:	e169      	b.n	8000d44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a70:	2201      	movs	r2, #1
 8000a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a74:	fa02 f303 	lsl.w	r3, r2, r3
 8000a78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	69fa      	ldr	r2, [r7, #28]
 8000a80:	4013      	ands	r3, r2
 8000a82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	f040 8158 	bne.w	8000d3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	4a9a      	ldr	r2, [pc, #616]	; (8000cfc <HAL_GPIO_Init+0x2a0>)
 8000a94:	4293      	cmp	r3, r2
 8000a96:	d05e      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000a98:	4a98      	ldr	r2, [pc, #608]	; (8000cfc <HAL_GPIO_Init+0x2a0>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d875      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000a9e:	4a98      	ldr	r2, [pc, #608]	; (8000d00 <HAL_GPIO_Init+0x2a4>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d058      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000aa4:	4a96      	ldr	r2, [pc, #600]	; (8000d00 <HAL_GPIO_Init+0x2a4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d86f      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000aaa:	4a96      	ldr	r2, [pc, #600]	; (8000d04 <HAL_GPIO_Init+0x2a8>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d052      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000ab0:	4a94      	ldr	r2, [pc, #592]	; (8000d04 <HAL_GPIO_Init+0x2a8>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d869      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ab6:	4a94      	ldr	r2, [pc, #592]	; (8000d08 <HAL_GPIO_Init+0x2ac>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d04c      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000abc:	4a92      	ldr	r2, [pc, #584]	; (8000d08 <HAL_GPIO_Init+0x2ac>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d863      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ac2:	4a92      	ldr	r2, [pc, #584]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d046      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
 8000ac8:	4a90      	ldr	r2, [pc, #576]	; (8000d0c <HAL_GPIO_Init+0x2b0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d85d      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ace:	2b12      	cmp	r3, #18
 8000ad0:	d82a      	bhi.n	8000b28 <HAL_GPIO_Init+0xcc>
 8000ad2:	2b12      	cmp	r3, #18
 8000ad4:	d859      	bhi.n	8000b8a <HAL_GPIO_Init+0x12e>
 8000ad6:	a201      	add	r2, pc, #4	; (adr r2, 8000adc <HAL_GPIO_Init+0x80>)
 8000ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000adc:	08000b57 	.word	0x08000b57
 8000ae0:	08000b31 	.word	0x08000b31
 8000ae4:	08000b43 	.word	0x08000b43
 8000ae8:	08000b85 	.word	0x08000b85
 8000aec:	08000b8b 	.word	0x08000b8b
 8000af0:	08000b8b 	.word	0x08000b8b
 8000af4:	08000b8b 	.word	0x08000b8b
 8000af8:	08000b8b 	.word	0x08000b8b
 8000afc:	08000b8b 	.word	0x08000b8b
 8000b00:	08000b8b 	.word	0x08000b8b
 8000b04:	08000b8b 	.word	0x08000b8b
 8000b08:	08000b8b 	.word	0x08000b8b
 8000b0c:	08000b8b 	.word	0x08000b8b
 8000b10:	08000b8b 	.word	0x08000b8b
 8000b14:	08000b8b 	.word	0x08000b8b
 8000b18:	08000b8b 	.word	0x08000b8b
 8000b1c:	08000b8b 	.word	0x08000b8b
 8000b20:	08000b39 	.word	0x08000b39
 8000b24:	08000b4d 	.word	0x08000b4d
 8000b28:	4a79      	ldr	r2, [pc, #484]	; (8000d10 <HAL_GPIO_Init+0x2b4>)
 8000b2a:	4293      	cmp	r3, r2
 8000b2c:	d013      	beq.n	8000b56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b2e:	e02c      	b.n	8000b8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	68db      	ldr	r3, [r3, #12]
 8000b34:	623b      	str	r3, [r7, #32]
          break;
 8000b36:	e029      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	623b      	str	r3, [r7, #32]
          break;
 8000b40:	e024      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	3308      	adds	r3, #8
 8000b48:	623b      	str	r3, [r7, #32]
          break;
 8000b4a:	e01f      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	330c      	adds	r3, #12
 8000b52:	623b      	str	r3, [r7, #32]
          break;
 8000b54:	e01a      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	689b      	ldr	r3, [r3, #8]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d102      	bne.n	8000b64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	623b      	str	r3, [r7, #32]
          break;
 8000b62:	e013      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d105      	bne.n	8000b78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b6c:	2308      	movs	r3, #8
 8000b6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	69fa      	ldr	r2, [r7, #28]
 8000b74:	611a      	str	r2, [r3, #16]
          break;
 8000b76:	e009      	b.n	8000b8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b78:	2308      	movs	r3, #8
 8000b7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	69fa      	ldr	r2, [r7, #28]
 8000b80:	615a      	str	r2, [r3, #20]
          break;
 8000b82:	e003      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b84:	2300      	movs	r3, #0
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	e000      	b.n	8000b8c <HAL_GPIO_Init+0x130>
          break;
 8000b8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b8c:	69bb      	ldr	r3, [r7, #24]
 8000b8e:	2bff      	cmp	r3, #255	; 0xff
 8000b90:	d801      	bhi.n	8000b96 <HAL_GPIO_Init+0x13a>
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	e001      	b.n	8000b9a <HAL_GPIO_Init+0x13e>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3304      	adds	r3, #4
 8000b9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	2bff      	cmp	r3, #255	; 0xff
 8000ba0:	d802      	bhi.n	8000ba8 <HAL_GPIO_Init+0x14c>
 8000ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba4:	009b      	lsls	r3, r3, #2
 8000ba6:	e002      	b.n	8000bae <HAL_GPIO_Init+0x152>
 8000ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000baa:	3b08      	subs	r3, #8
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	210f      	movs	r1, #15
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	6a39      	ldr	r1, [r7, #32]
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc8:	431a      	orrs	r2, r3
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	f000 80b1 	beq.w	8000d3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000bdc:	4b4d      	ldr	r3, [pc, #308]	; (8000d14 <HAL_GPIO_Init+0x2b8>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a4c      	ldr	r2, [pc, #304]	; (8000d14 <HAL_GPIO_Init+0x2b8>)
 8000be2:	f043 0301 	orr.w	r3, r3, #1
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b4a      	ldr	r3, [pc, #296]	; (8000d14 <HAL_GPIO_Init+0x2b8>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f003 0301 	and.w	r3, r3, #1
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bf4:	4a48      	ldr	r2, [pc, #288]	; (8000d18 <HAL_GPIO_Init+0x2bc>)
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	089b      	lsrs	r3, r3, #2
 8000bfa:	3302      	adds	r3, #2
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	f003 0303 	and.w	r3, r3, #3
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c10:	43db      	mvns	r3, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	4013      	ands	r3, r2
 8000c16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4a40      	ldr	r2, [pc, #256]	; (8000d1c <HAL_GPIO_Init+0x2c0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d013      	beq.n	8000c48 <HAL_GPIO_Init+0x1ec>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a3f      	ldr	r2, [pc, #252]	; (8000d20 <HAL_GPIO_Init+0x2c4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d00d      	beq.n	8000c44 <HAL_GPIO_Init+0x1e8>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a3e      	ldr	r2, [pc, #248]	; (8000d24 <HAL_GPIO_Init+0x2c8>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d007      	beq.n	8000c40 <HAL_GPIO_Init+0x1e4>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a3d      	ldr	r2, [pc, #244]	; (8000d28 <HAL_GPIO_Init+0x2cc>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d101      	bne.n	8000c3c <HAL_GPIO_Init+0x1e0>
 8000c38:	2303      	movs	r3, #3
 8000c3a:	e006      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e004      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c40:	2302      	movs	r3, #2
 8000c42:	e002      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <HAL_GPIO_Init+0x1ee>
 8000c48:	2300      	movs	r3, #0
 8000c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c4c:	f002 0203 	and.w	r2, r2, #3
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	4093      	lsls	r3, r2
 8000c54:	68fa      	ldr	r2, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c5a:	492f      	ldr	r1, [pc, #188]	; (8000d18 <HAL_GPIO_Init+0x2bc>)
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	089b      	lsrs	r3, r3, #2
 8000c60:	3302      	adds	r3, #2
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c74:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	492c      	ldr	r1, [pc, #176]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	600b      	str	r3, [r1, #0]
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	4928      	ldr	r1, [pc, #160]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d006      	beq.n	8000caa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c9c:	4b23      	ldr	r3, [pc, #140]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000c9e:	685a      	ldr	r2, [r3, #4]
 8000ca0:	4922      	ldr	r1, [pc, #136]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	604b      	str	r3, [r1, #4]
 8000ca8:	e006      	b.n	8000cb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cac:	685a      	ldr	r2, [r3, #4]
 8000cae:	69bb      	ldr	r3, [r7, #24]
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	491e      	ldr	r1, [pc, #120]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d006      	beq.n	8000cd2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	4918      	ldr	r1, [pc, #96]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	608b      	str	r3, [r1, #8]
 8000cd0:	e006      	b.n	8000ce0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	4914      	ldr	r1, [pc, #80]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d021      	beq.n	8000d30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	490e      	ldr	r1, [pc, #56]	; (8000d2c <HAL_GPIO_Init+0x2d0>)
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60cb      	str	r3, [r1, #12]
 8000cf8:	e021      	b.n	8000d3e <HAL_GPIO_Init+0x2e2>
 8000cfa:	bf00      	nop
 8000cfc:	10320000 	.word	0x10320000
 8000d00:	10310000 	.word	0x10310000
 8000d04:	10220000 	.word	0x10220000
 8000d08:	10210000 	.word	0x10210000
 8000d0c:	10120000 	.word	0x10120000
 8000d10:	10110000 	.word	0x10110000
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	40010800 	.word	0x40010800
 8000d20:	40010c00 	.word	0x40010c00
 8000d24:	40011000 	.word	0x40011000
 8000d28:	40011400 	.word	0x40011400
 8000d2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_GPIO_Init+0x304>)
 8000d32:	68da      	ldr	r2, [r3, #12]
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	43db      	mvns	r3, r3
 8000d38:	4909      	ldr	r1, [pc, #36]	; (8000d60 <HAL_GPIO_Init+0x304>)
 8000d3a:	4013      	ands	r3, r2
 8000d3c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d40:	3301      	adds	r3, #1
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f47f ae8e 	bne.w	8000a70 <HAL_GPIO_Init+0x14>
  }
}
 8000d54:	bf00      	nop
 8000d56:	bf00      	nop
 8000d58:	372c      	adds	r7, #44	; 0x2c
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr
 8000d60:	40010400 	.word	0x40010400

08000d64 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bc80      	pop	{r7}
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	420e0020 	.word	0x420e0020

08000d7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e26c      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 8087 	beq.w	8000eaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d9c:	4b92      	ldr	r3, [pc, #584]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 030c 	and.w	r3, r3, #12
 8000da4:	2b04      	cmp	r3, #4
 8000da6:	d00c      	beq.n	8000dc2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000da8:	4b8f      	ldr	r3, [pc, #572]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	f003 030c 	and.w	r3, r3, #12
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d112      	bne.n	8000dda <HAL_RCC_OscConfig+0x5e>
 8000db4:	4b8c      	ldr	r3, [pc, #560]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc0:	d10b      	bne.n	8000dda <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dc2:	4b89      	ldr	r3, [pc, #548]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d06c      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x12c>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d168      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e246      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de2:	d106      	bne.n	8000df2 <HAL_RCC_OscConfig+0x76>
 8000de4:	4b80      	ldr	r3, [pc, #512]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4a7f      	ldr	r2, [pc, #508]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dee:	6013      	str	r3, [r2, #0]
 8000df0:	e02e      	b.n	8000e50 <HAL_RCC_OscConfig+0xd4>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10c      	bne.n	8000e14 <HAL_RCC_OscConfig+0x98>
 8000dfa:	4b7b      	ldr	r3, [pc, #492]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a7a      	ldr	r2, [pc, #488]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	4b78      	ldr	r3, [pc, #480]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a77      	ldr	r2, [pc, #476]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e10:	6013      	str	r3, [r2, #0]
 8000e12:	e01d      	b.n	8000e50 <HAL_RCC_OscConfig+0xd4>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e1c:	d10c      	bne.n	8000e38 <HAL_RCC_OscConfig+0xbc>
 8000e1e:	4b72      	ldr	r3, [pc, #456]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a71      	ldr	r2, [pc, #452]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	4b6f      	ldr	r3, [pc, #444]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a6e      	ldr	r2, [pc, #440]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e34:	6013      	str	r3, [r2, #0]
 8000e36:	e00b      	b.n	8000e50 <HAL_RCC_OscConfig+0xd4>
 8000e38:	4b6b      	ldr	r3, [pc, #428]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a6a      	ldr	r2, [pc, #424]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b68      	ldr	r3, [pc, #416]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a67      	ldr	r2, [pc, #412]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e4e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d013      	beq.n	8000e80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e58:	f7ff fd16 	bl	8000888 <HAL_GetTick>
 8000e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5e:	e008      	b.n	8000e72 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e60:	f7ff fd12 	bl	8000888 <HAL_GetTick>
 8000e64:	4602      	mov	r2, r0
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d901      	bls.n	8000e72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	e1fa      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e72:	4b5d      	ldr	r3, [pc, #372]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f0      	beq.n	8000e60 <HAL_RCC_OscConfig+0xe4>
 8000e7e:	e014      	b.n	8000eaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e80:	f7ff fd02 	bl	8000888 <HAL_GetTick>
 8000e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e88:	f7ff fcfe 	bl	8000888 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b64      	cmp	r3, #100	; 0x64
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e1e6      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e9a:	4b53      	ldr	r3, [pc, #332]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0x10c>
 8000ea6:	e000      	b.n	8000eaa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d063      	beq.n	8000f7e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eb6:	4b4c      	ldr	r3, [pc, #304]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 030c 	and.w	r3, r3, #12
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d00b      	beq.n	8000eda <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ec2:	4b49      	ldr	r3, [pc, #292]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	2b08      	cmp	r3, #8
 8000ecc:	d11c      	bne.n	8000f08 <HAL_RCC_OscConfig+0x18c>
 8000ece:	4b46      	ldr	r3, [pc, #280]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d116      	bne.n	8000f08 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000eda:	4b43      	ldr	r3, [pc, #268]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d005      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x176>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d001      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e1ba      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ef2:	4b3d      	ldr	r3, [pc, #244]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	4939      	ldr	r1, [pc, #228]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f06:	e03a      	b.n	8000f7e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d020      	beq.n	8000f52 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f10:	4b36      	ldr	r3, [pc, #216]	; (8000fec <HAL_RCC_OscConfig+0x270>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f16:	f7ff fcb7 	bl	8000888 <HAL_GetTick>
 8000f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f1c:	e008      	b.n	8000f30 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f1e:	f7ff fcb3 	bl	8000888 <HAL_GetTick>
 8000f22:	4602      	mov	r2, r0
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	1ad3      	subs	r3, r2, r3
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d901      	bls.n	8000f30 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f2c:	2303      	movs	r3, #3
 8000f2e:	e19b      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f30:	4b2d      	ldr	r3, [pc, #180]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0302 	and.w	r3, r3, #2
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f0      	beq.n	8000f1e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3c:	4b2a      	ldr	r3, [pc, #168]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	4927      	ldr	r1, [pc, #156]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	600b      	str	r3, [r1, #0]
 8000f50:	e015      	b.n	8000f7e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <HAL_RCC_OscConfig+0x270>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fc96 	bl	8000888 <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f60:	f7ff fc92 	bl	8000888 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e17a      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f72:	4b1d      	ldr	r3, [pc, #116]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0308 	and.w	r3, r3, #8
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d03a      	beq.n	8001000 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d019      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_RCC_OscConfig+0x274>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f98:	f7ff fc76 	bl	8000888 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fa0:	f7ff fc72 	bl	8000888 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b02      	cmp	r3, #2
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e15a      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb2:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	f000 fb08 	bl	80015d4 <RCC_Delay>
 8000fc4:	e01c      	b.n	8001000 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_RCC_OscConfig+0x274>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fcc:	f7ff fc5c 	bl	8000888 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fd2:	e00f      	b.n	8000ff4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fc58 	bl	8000888 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d908      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e140      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	42420000 	.word	0x42420000
 8000ff0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff4:	4b9e      	ldr	r3, [pc, #632]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	f003 0302 	and.w	r3, r3, #2
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1e9      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0304 	and.w	r3, r3, #4
 8001008:	2b00      	cmp	r3, #0
 800100a:	f000 80a6 	beq.w	800115a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800100e:	2300      	movs	r3, #0
 8001010:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001012:	4b97      	ldr	r3, [pc, #604]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d10d      	bne.n	800103a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800101e:	4b94      	ldr	r3, [pc, #592]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	4a93      	ldr	r2, [pc, #588]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001028:	61d3      	str	r3, [r2, #28]
 800102a:	4b91      	ldr	r3, [pc, #580]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 800102c:	69db      	ldr	r3, [r3, #28]
 800102e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001036:	2301      	movs	r3, #1
 8001038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800103a:	4b8e      	ldr	r3, [pc, #568]	; (8001274 <HAL_RCC_OscConfig+0x4f8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001042:	2b00      	cmp	r3, #0
 8001044:	d118      	bne.n	8001078 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001046:	4b8b      	ldr	r3, [pc, #556]	; (8001274 <HAL_RCC_OscConfig+0x4f8>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a8a      	ldr	r2, [pc, #552]	; (8001274 <HAL_RCC_OscConfig+0x4f8>)
 800104c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001052:	f7ff fc19 	bl	8000888 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800105a:	f7ff fc15 	bl	8000888 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b64      	cmp	r3, #100	; 0x64
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e0fd      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800106c:	4b81      	ldr	r3, [pc, #516]	; (8001274 <HAL_RCC_OscConfig+0x4f8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d106      	bne.n	800108e <HAL_RCC_OscConfig+0x312>
 8001080:	4b7b      	ldr	r3, [pc, #492]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	4a7a      	ldr	r2, [pc, #488]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6213      	str	r3, [r2, #32]
 800108c:	e02d      	b.n	80010ea <HAL_RCC_OscConfig+0x36e>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0x334>
 8001096:	4b76      	ldr	r3, [pc, #472]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001098:	6a1b      	ldr	r3, [r3, #32]
 800109a:	4a75      	ldr	r2, [pc, #468]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 800109c:	f023 0301 	bic.w	r3, r3, #1
 80010a0:	6213      	str	r3, [r2, #32]
 80010a2:	4b73      	ldr	r3, [pc, #460]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80010a4:	6a1b      	ldr	r3, [r3, #32]
 80010a6:	4a72      	ldr	r2, [pc, #456]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80010a8:	f023 0304 	bic.w	r3, r3, #4
 80010ac:	6213      	str	r3, [r2, #32]
 80010ae:	e01c      	b.n	80010ea <HAL_RCC_OscConfig+0x36e>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	2b05      	cmp	r3, #5
 80010b6:	d10c      	bne.n	80010d2 <HAL_RCC_OscConfig+0x356>
 80010b8:	4b6d      	ldr	r3, [pc, #436]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4a6c      	ldr	r2, [pc, #432]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80010be:	f043 0304 	orr.w	r3, r3, #4
 80010c2:	6213      	str	r3, [r2, #32]
 80010c4:	4b6a      	ldr	r3, [pc, #424]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	4a69      	ldr	r2, [pc, #420]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80010ca:	f043 0301 	orr.w	r3, r3, #1
 80010ce:	6213      	str	r3, [r2, #32]
 80010d0:	e00b      	b.n	80010ea <HAL_RCC_OscConfig+0x36e>
 80010d2:	4b67      	ldr	r3, [pc, #412]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80010d4:	6a1b      	ldr	r3, [r3, #32]
 80010d6:	4a66      	ldr	r2, [pc, #408]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6213      	str	r3, [r2, #32]
 80010de:	4b64      	ldr	r3, [pc, #400]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	4a63      	ldr	r2, [pc, #396]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80010e4:	f023 0304 	bic.w	r3, r3, #4
 80010e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d015      	beq.n	800111e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f2:	f7ff fbc9 	bl	8000888 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010f8:	e00a      	b.n	8001110 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010fa:	f7ff fbc5 	bl	8000888 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	f241 3288 	movw	r2, #5000	; 0x1388
 8001108:	4293      	cmp	r3, r2
 800110a:	d901      	bls.n	8001110 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800110c:	2303      	movs	r3, #3
 800110e:	e0ab      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001110:	4b57      	ldr	r3, [pc, #348]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	f003 0302 	and.w	r3, r3, #2
 8001118:	2b00      	cmp	r3, #0
 800111a:	d0ee      	beq.n	80010fa <HAL_RCC_OscConfig+0x37e>
 800111c:	e014      	b.n	8001148 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800111e:	f7ff fbb3 	bl	8000888 <HAL_GetTick>
 8001122:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001124:	e00a      	b.n	800113c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001126:	f7ff fbaf 	bl	8000888 <HAL_GetTick>
 800112a:	4602      	mov	r2, r0
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	1ad3      	subs	r3, r2, r3
 8001130:	f241 3288 	movw	r2, #5000	; 0x1388
 8001134:	4293      	cmp	r3, r2
 8001136:	d901      	bls.n	800113c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e095      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113c:	4b4c      	ldr	r3, [pc, #304]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 800113e:	6a1b      	ldr	r3, [r3, #32]
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1ee      	bne.n	8001126 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001148:	7dfb      	ldrb	r3, [r7, #23]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d105      	bne.n	800115a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800114e:	4b48      	ldr	r3, [pc, #288]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001150:	69db      	ldr	r3, [r3, #28]
 8001152:	4a47      	ldr	r2, [pc, #284]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001154:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001158:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	2b00      	cmp	r3, #0
 8001160:	f000 8081 	beq.w	8001266 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001164:	4b42      	ldr	r3, [pc, #264]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 030c 	and.w	r3, r3, #12
 800116c:	2b08      	cmp	r3, #8
 800116e:	d061      	beq.n	8001234 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	69db      	ldr	r3, [r3, #28]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d146      	bne.n	8001206 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001178:	4b3f      	ldr	r3, [pc, #252]	; (8001278 <HAL_RCC_OscConfig+0x4fc>)
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800117e:	f7ff fb83 	bl	8000888 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001186:	f7ff fb7f 	bl	8000888 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e067      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001198:	4b35      	ldr	r3, [pc, #212]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f0      	bne.n	8001186 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6a1b      	ldr	r3, [r3, #32]
 80011a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ac:	d108      	bne.n	80011c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ae:	4b30      	ldr	r3, [pc, #192]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	492d      	ldr	r1, [pc, #180]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80011bc:	4313      	orrs	r3, r2
 80011be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c0:	4b2b      	ldr	r3, [pc, #172]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a19      	ldr	r1, [r3, #32]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011d0:	430b      	orrs	r3, r1
 80011d2:	4927      	ldr	r1, [pc, #156]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	4313      	orrs	r3, r2
 80011d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011d8:	4b27      	ldr	r3, [pc, #156]	; (8001278 <HAL_RCC_OscConfig+0x4fc>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fb53 	bl	8000888 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e6:	f7ff fb4f 	bl	8000888 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e037      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d0f0      	beq.n	80011e6 <HAL_RCC_OscConfig+0x46a>
 8001204:	e02f      	b.n	8001266 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <HAL_RCC_OscConfig+0x4fc>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120c:	f7ff fb3c 	bl	8000888 <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001212:	e008      	b.n	8001226 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001214:	f7ff fb38 	bl	8000888 <HAL_GetTick>
 8001218:	4602      	mov	r2, r0
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	2b02      	cmp	r3, #2
 8001220:	d901      	bls.n	8001226 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001222:	2303      	movs	r3, #3
 8001224:	e020      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001226:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f0      	bne.n	8001214 <HAL_RCC_OscConfig+0x498>
 8001232:	e018      	b.n	8001266 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	69db      	ldr	r3, [r3, #28]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e013      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <HAL_RCC_OscConfig+0x4f4>)
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	429a      	cmp	r2, r3
 8001252:	d106      	bne.n	8001262 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800125e:	429a      	cmp	r2, r3
 8001260:	d001      	beq.n	8001266 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e000      	b.n	8001268 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000
 8001274:	40007000 	.word	0x40007000
 8001278:	42420060 	.word	0x42420060

0800127c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0d0      	b.n	8001432 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001290:	4b6a      	ldr	r3, [pc, #424]	; (800143c <HAL_RCC_ClockConfig+0x1c0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0307 	and.w	r3, r3, #7
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	429a      	cmp	r2, r3
 800129c:	d910      	bls.n	80012c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800129e:	4b67      	ldr	r3, [pc, #412]	; (800143c <HAL_RCC_ClockConfig+0x1c0>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f023 0207 	bic.w	r2, r3, #7
 80012a6:	4965      	ldr	r1, [pc, #404]	; (800143c <HAL_RCC_ClockConfig+0x1c0>)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012ae:	4b63      	ldr	r3, [pc, #396]	; (800143c <HAL_RCC_ClockConfig+0x1c0>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f003 0307 	and.w	r3, r3, #7
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d001      	beq.n	80012c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e0b8      	b.n	8001432 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d020      	beq.n	800130e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d8:	4b59      	ldr	r3, [pc, #356]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	4a58      	ldr	r2, [pc, #352]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 80012de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80012e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0308 	and.w	r3, r3, #8
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d005      	beq.n	80012fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012f0:	4b53      	ldr	r3, [pc, #332]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	4a52      	ldr	r2, [pc, #328]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 80012f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80012fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012fc:	4b50      	ldr	r3, [pc, #320]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	494d      	ldr	r1, [pc, #308]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 800130a:	4313      	orrs	r3, r2
 800130c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	2b00      	cmp	r3, #0
 8001318:	d040      	beq.n	800139c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d107      	bne.n	8001332 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001322:	4b47      	ldr	r3, [pc, #284]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d115      	bne.n	800135a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e07f      	b.n	8001432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b02      	cmp	r3, #2
 8001338:	d107      	bne.n	800134a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800133a:	4b41      	ldr	r3, [pc, #260]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d109      	bne.n	800135a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e073      	b.n	8001432 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134a:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e06b      	b.n	8001432 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f023 0203 	bic.w	r2, r3, #3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	4936      	ldr	r1, [pc, #216]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800136c:	f7ff fa8c 	bl	8000888 <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001372:	e00a      	b.n	800138a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001374:	f7ff fa88 	bl	8000888 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001382:	4293      	cmp	r3, r2
 8001384:	d901      	bls.n	800138a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e053      	b.n	8001432 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800138a:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 020c 	and.w	r2, r3, #12
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	429a      	cmp	r2, r3
 800139a:	d1eb      	bne.n	8001374 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800139c:	4b27      	ldr	r3, [pc, #156]	; (800143c <HAL_RCC_ClockConfig+0x1c0>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	683a      	ldr	r2, [r7, #0]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d210      	bcs.n	80013cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <HAL_RCC_ClockConfig+0x1c0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f023 0207 	bic.w	r2, r3, #7
 80013b2:	4922      	ldr	r1, [pc, #136]	; (800143c <HAL_RCC_ClockConfig+0x1c0>)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013ba:	4b20      	ldr	r3, [pc, #128]	; (800143c <HAL_RCC_ClockConfig+0x1c0>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	683a      	ldr	r2, [r7, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e032      	b.n	8001432 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d008      	beq.n	80013ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013d8:	4b19      	ldr	r3, [pc, #100]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	4916      	ldr	r1, [pc, #88]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	490e      	ldr	r1, [pc, #56]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	4313      	orrs	r3, r2
 8001408:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800140a:	f000 f821 	bl	8001450 <HAL_RCC_GetSysClockFreq>
 800140e:	4602      	mov	r2, r0
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_RCC_ClockConfig+0x1c4>)
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	490a      	ldr	r1, [pc, #40]	; (8001444 <HAL_RCC_ClockConfig+0x1c8>)
 800141c:	5ccb      	ldrb	r3, [r1, r3]
 800141e:	fa22 f303 	lsr.w	r3, r2, r3
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <HAL_RCC_ClockConfig+0x1cc>)
 8001424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_ClockConfig+0x1d0>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f89e 	bl	800056c <HAL_InitTick>

  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40022000 	.word	0x40022000
 8001440:	40021000 	.word	0x40021000
 8001444:	08004260 	.word	0x08004260
 8001448:	20000000 	.word	0x20000000
 800144c:	20000004 	.word	0x20000004

08001450 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001450:	b490      	push	{r4, r7}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001456:	4b2a      	ldr	r3, [pc, #168]	; (8001500 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001458:	1d3c      	adds	r4, r7, #4
 800145a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800145c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001460:	f240 2301 	movw	r3, #513	; 0x201
 8001464:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
 800146e:	2300      	movs	r3, #0
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
 8001472:	2300      	movs	r3, #0
 8001474:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800147a:	4b22      	ldr	r3, [pc, #136]	; (8001504 <HAL_RCC_GetSysClockFreq+0xb4>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b04      	cmp	r3, #4
 8001488:	d002      	beq.n	8001490 <HAL_RCC_GetSysClockFreq+0x40>
 800148a:	2b08      	cmp	r3, #8
 800148c:	d003      	beq.n	8001496 <HAL_RCC_GetSysClockFreq+0x46>
 800148e:	e02d      	b.n	80014ec <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001492:	623b      	str	r3, [r7, #32]
      break;
 8001494:	e02d      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	0c9b      	lsrs	r3, r3, #18
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014a2:	4413      	add	r3, r2
 80014a4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80014a8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d013      	beq.n	80014dc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014b4:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_RCC_GetSysClockFreq+0xb4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	0c5b      	lsrs	r3, r3, #17
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80014c2:	4413      	add	r3, r2
 80014c4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80014c8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	4a0e      	ldr	r2, [pc, #56]	; (8001508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ce:	fb02 f203 	mul.w	r2, r2, r3
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
 80014da:	e004      	b.n	80014e6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <HAL_RCC_GetSysClockFreq+0xbc>)
 80014e0:	fb02 f303 	mul.w	r3, r2, r3
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	623b      	str	r3, [r7, #32]
      break;
 80014ea:	e002      	b.n	80014f2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014ec:	4b06      	ldr	r3, [pc, #24]	; (8001508 <HAL_RCC_GetSysClockFreq+0xb8>)
 80014ee:	623b      	str	r3, [r7, #32]
      break;
 80014f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014f2:	6a3b      	ldr	r3, [r7, #32]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	3728      	adds	r7, #40	; 0x28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc90      	pop	{r4, r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	08004238 	.word	0x08004238
 8001504:	40021000 	.word	0x40021000
 8001508:	007a1200 	.word	0x007a1200
 800150c:	003d0900 	.word	0x003d0900

08001510 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001514:	4b02      	ldr	r3, [pc, #8]	; (8001520 <HAL_RCC_GetHCLKFreq+0x10>)
 8001516:	681b      	ldr	r3, [r3, #0]
}
 8001518:	4618      	mov	r0, r3
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000000 	.word	0x20000000

08001524 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001528:	f7ff fff2 	bl	8001510 <HAL_RCC_GetHCLKFreq>
 800152c:	4602      	mov	r2, r0
 800152e:	4b05      	ldr	r3, [pc, #20]	; (8001544 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	0a1b      	lsrs	r3, r3, #8
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	4903      	ldr	r1, [pc, #12]	; (8001548 <HAL_RCC_GetPCLK1Freq+0x24>)
 800153a:	5ccb      	ldrb	r3, [r1, r3]
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001540:	4618      	mov	r0, r3
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40021000 	.word	0x40021000
 8001548:	08004270 	.word	0x08004270

0800154c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001550:	f7ff ffde 	bl	8001510 <HAL_RCC_GetHCLKFreq>
 8001554:	4602      	mov	r2, r0
 8001556:	4b05      	ldr	r3, [pc, #20]	; (800156c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	0adb      	lsrs	r3, r3, #11
 800155c:	f003 0307 	and.w	r3, r3, #7
 8001560:	4903      	ldr	r1, [pc, #12]	; (8001570 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001562:	5ccb      	ldrb	r3, [r1, r3]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001568:	4618      	mov	r0, r3
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40021000 	.word	0x40021000
 8001570:	08004270 	.word	0x08004270

08001574 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	220f      	movs	r2, #15
 8001582:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001584:	4b11      	ldr	r3, [pc, #68]	; (80015cc <HAL_RCC_GetClockConfig+0x58>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 0203 	and.w	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <HAL_RCC_GetClockConfig+0x58>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <HAL_RCC_GetClockConfig+0x58>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80015a8:	4b08      	ldr	r3, [pc, #32]	; (80015cc <HAL_RCC_GetClockConfig+0x58>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_RCC_GetClockConfig+0x5c>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0207 	and.w	r2, r3, #7
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40022000 	.word	0x40022000

080015d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015dc:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <RCC_Delay+0x34>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <RCC_Delay+0x38>)
 80015e2:	fba2 2303 	umull	r2, r3, r2, r3
 80015e6:	0a5b      	lsrs	r3, r3, #9
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	fb02 f303 	mul.w	r3, r2, r3
 80015ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015f0:	bf00      	nop
  }
  while (Delay --);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	1e5a      	subs	r2, r3, #1
 80015f6:	60fa      	str	r2, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f9      	bne.n	80015f0 <RCC_Delay+0x1c>
}
 80015fc:	bf00      	nop
 80015fe:	bf00      	nop
 8001600:	3714      	adds	r7, #20
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000000 	.word	0x20000000
 800160c:	10624dd3 	.word	0x10624dd3

08001610 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001618:	2300      	movs	r3, #0
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	2300      	movs	r3, #0
 800161e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	d07d      	beq.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800162c:	2300      	movs	r3, #0
 800162e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001630:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001632:	69db      	ldr	r3, [r3, #28]
 8001634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d10d      	bne.n	8001658 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163c:	4b4c      	ldr	r3, [pc, #304]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800163e:	69db      	ldr	r3, [r3, #28]
 8001640:	4a4b      	ldr	r2, [pc, #300]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001646:	61d3      	str	r3, [r2, #28]
 8001648:	4b49      	ldr	r3, [pc, #292]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800164a:	69db      	ldr	r3, [r3, #28]
 800164c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001654:	2301      	movs	r3, #1
 8001656:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001658:	4b46      	ldr	r3, [pc, #280]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001660:	2b00      	cmp	r3, #0
 8001662:	d118      	bne.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001664:	4b43      	ldr	r3, [pc, #268]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a42      	ldr	r2, [pc, #264]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800166a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800166e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001670:	f7ff f90a 	bl	8000888 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001676:	e008      	b.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001678:	f7ff f906 	bl	8000888 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b64      	cmp	r3, #100	; 0x64
 8001684:	d901      	bls.n	800168a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e06d      	b.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168a:	4b3a      	ldr	r3, [pc, #232]	; (8001774 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0f0      	beq.n	8001678 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001696:	4b36      	ldr	r3, [pc, #216]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800169e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d02e      	beq.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d027      	beq.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016b4:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016c4:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80016ca:	4a29      	ldr	r2, [pc, #164]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d014      	beq.n	8001704 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff f8d5 	bl	8000888 <HAL_GetTick>
 80016de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016e0:	e00a      	b.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016e2:	f7ff f8d1 	bl	8000888 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d901      	bls.n	80016f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80016f4:	2303      	movs	r3, #3
 80016f6:	e036      	b.n	8001766 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f8:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b00      	cmp	r3, #0
 8001702:	d0ee      	beq.n	80016e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001704:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	4917      	ldr	r1, [pc, #92]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001712:	4313      	orrs	r3, r2
 8001714:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001716:	7dfb      	ldrb	r3, [r7, #23]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d105      	bne.n	8001728 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800171c:	4b14      	ldr	r3, [pc, #80]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800171e:	69db      	ldr	r3, [r3, #28]
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001726:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0302 	and.w	r3, r3, #2
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	490b      	ldr	r1, [pc, #44]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b00      	cmp	r3, #0
 8001750:	d008      	beq.n	8001764 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001752:	4b07      	ldr	r3, [pc, #28]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	68db      	ldr	r3, [r3, #12]
 800175e:	4904      	ldr	r1, [pc, #16]	; (8001770 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3718      	adds	r7, #24
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	40007000 	.word	0x40007000
 8001778:	42420440 	.word	0x42420440

0800177c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800177c:	b590      	push	{r4, r7, lr}
 800177e:	b08d      	sub	sp, #52	; 0x34
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001784:	4b5a      	ldr	r3, [pc, #360]	; (80018f0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001786:	f107 040c 	add.w	r4, r7, #12
 800178a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800178c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001790:	f240 2301 	movw	r3, #513	; 0x201
 8001794:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
 800179a:	2300      	movs	r3, #0
 800179c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80017a2:	2300      	movs	r3, #0
 80017a4:	61fb      	str	r3, [r7, #28]
 80017a6:	2300      	movs	r3, #0
 80017a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2b10      	cmp	r3, #16
 80017ae:	d00a      	beq.n	80017c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	f200 8091 	bhi.w	80018da <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d04c      	beq.n	8001858 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d07c      	beq.n	80018be <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80017c4:	e089      	b.n	80018da <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80017c6:	4b4b      	ldr	r3, [pc, #300]	; (80018f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80017cc:	4b49      	ldr	r3, [pc, #292]	; (80018f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 8082 	beq.w	80018de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	0c9b      	lsrs	r3, r3, #18
 80017de:	f003 030f 	and.w	r3, r3, #15
 80017e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80017e6:	4413      	add	r3, r2
 80017e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80017ec:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d018      	beq.n	800182a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017f8:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	0c5b      	lsrs	r3, r3, #17
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001806:	4413      	add	r3, r2
 8001808:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00d      	beq.n	8001834 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001818:	4a37      	ldr	r2, [pc, #220]	; (80018f8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001820:	6a3b      	ldr	r3, [r7, #32]
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001828:	e004      	b.n	8001834 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800182a:	6a3b      	ldr	r3, [r7, #32]
 800182c:	4a33      	ldr	r2, [pc, #204]	; (80018fc <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001834:	4b2f      	ldr	r3, [pc, #188]	; (80018f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800183c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001840:	d102      	bne.n	8001848 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001844:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001846:	e04a      	b.n	80018de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	4a2c      	ldr	r2, [pc, #176]	; (8001900 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 800184e:	fba2 2303 	umull	r2, r3, r2, r3
 8001852:	085b      	lsrs	r3, r3, #1
 8001854:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001856:	e042      	b.n	80018de <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001858:	4b26      	ldr	r3, [pc, #152]	; (80018f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800185a:	6a1b      	ldr	r3, [r3, #32]
 800185c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001868:	d108      	bne.n	800187c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001874:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
 800187a:	e01f      	b.n	80018bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001886:	d109      	bne.n	800189c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188c:	f003 0302 	and.w	r3, r3, #2
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001894:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001898:	62bb      	str	r3, [r7, #40]	; 0x28
 800189a:	e00f      	b.n	80018bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80018a6:	d11c      	bne.n	80018e2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d016      	beq.n	80018e2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80018b4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80018ba:	e012      	b.n	80018e2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80018bc:	e011      	b.n	80018e2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80018be:	f7ff fe45 	bl	800154c <HAL_RCC_GetPCLK2Freq>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	0b9b      	lsrs	r3, r3, #14
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	3301      	adds	r3, #1
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018d6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80018d8:	e004      	b.n	80018e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80018da:	bf00      	nop
 80018dc:	e002      	b.n	80018e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80018de:	bf00      	nop
 80018e0:	e000      	b.n	80018e4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 80018e2:	bf00      	nop
    }
  }
  return (frequency);
 80018e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3734      	adds	r7, #52	; 0x34
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	08004248 	.word	0x08004248
 80018f4:	40021000 	.word	0x40021000
 80018f8:	007a1200 	.word	0x007a1200
 80018fc:	003d0900 	.word	0x003d0900
 8001900:	aaaaaaab 	.word	0xaaaaaaab

08001904 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e084      	b.n	8001a24 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	7c5b      	ldrb	r3, [r3, #17]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	2b00      	cmp	r3, #0
 8001922:	d105      	bne.n	8001930 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7fe fdc8 	bl	80004c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f9c8 	bl	8001ccc <HAL_RTC_WaitForSynchro>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2204      	movs	r2, #4
 8001946:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e06b      	b.n	8001a24 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fa81 	bl	8001e54 <RTC_EnterInitMode>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d004      	beq.n	8001962 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2204      	movs	r2, #4
 800195c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e060      	b.n	8001a24 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0207 	bic.w	r2, r2, #7
 8001970:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d005      	beq.n	8001986 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 800197a:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <HAL_RTC_Init+0x128>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	4a2b      	ldr	r2, [pc, #172]	; (8001a2c <HAL_RTC_Init+0x128>)
 8001980:	f023 0301 	bic.w	r3, r3, #1
 8001984:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001986:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <HAL_RTC_Init+0x128>)
 8001988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	4926      	ldr	r1, [pc, #152]	; (8001a2c <HAL_RTC_Init+0x128>)
 8001994:	4313      	orrs	r3, r2
 8001996:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80019a0:	d003      	beq.n	80019aa <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	e00e      	b.n	80019c8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80019aa:	2001      	movs	r0, #1
 80019ac:	f7ff fee6 	bl	800177c <HAL_RCCEx_GetPeriphCLKFreq>
 80019b0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d104      	bne.n	80019c2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2204      	movs	r2, #4
 80019bc:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e030      	b.n	8001a24 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f023 010f 	bic.w	r1, r3, #15
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	0c1a      	lsrs	r2, r3, #16
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	0c1b      	lsrs	r3, r3, #16
 80019e6:	041b      	lsls	r3, r3, #16
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	b291      	uxth	r1, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	430b      	orrs	r3, r1
 80019f2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 fa55 	bl	8001ea4 <RTC_ExitInitMode>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2204      	movs	r2, #4
 8001a04:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e00c      	b.n	8001a24 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001a22:	2300      	movs	r3, #0
  }
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40006c00 	.word	0x40006c00

08001a30 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	617b      	str	r3, [r7, #20]
 8001a40:	2300      	movs	r3, #0
 8001a42:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d002      	beq.n	8001a50 <HAL_RTC_SetTime+0x20>
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e080      	b.n	8001b56 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	7c1b      	ldrb	r3, [r3, #16]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d101      	bne.n	8001a60 <HAL_RTC_SetTime+0x30>
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e07a      	b.n	8001b56 <HAL_RTC_SetTime+0x126>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2201      	movs	r2, #1
 8001a64:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d113      	bne.n	8001a9a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001a7c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	785b      	ldrb	r3, [r3, #1]
 8001a84:	4619      	mov	r1, r3
 8001a86:	460b      	mov	r3, r1
 8001a88:	011b      	lsls	r3, r3, #4
 8001a8a:	1a5b      	subs	r3, r3, r1
 8001a8c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a8e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001a90:	68ba      	ldr	r2, [r7, #8]
 8001a92:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001a94:	4413      	add	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	e01e      	b.n	8001ad8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fa28 	bl	8001ef4 <RTC_Bcd2ToByte>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001aac:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	785b      	ldrb	r3, [r3, #1]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fa1d 	bl	8001ef4 <RTC_Bcd2ToByte>
 8001aba:	4603      	mov	r3, r0
 8001abc:	461a      	mov	r2, r3
 8001abe:	4613      	mov	r3, r2
 8001ac0:	011b      	lsls	r3, r3, #4
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ac6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	789b      	ldrb	r3, [r3, #2]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 fa11 	bl	8001ef4 <RTC_Bcd2ToByte>
 8001ad2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001ad4:	4423      	add	r3, r4
 8001ad6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001ad8:	6979      	ldr	r1, [r7, #20]
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f953 	bl	8001d86 <RTC_WriteTimeCounter>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	2200      	movs	r2, #0
 8001af0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e02f      	b.n	8001b56 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0205 	bic.w	r2, r2, #5
 8001b04:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f000 f964 	bl	8001dd4 <RTC_ReadAlarmCounter>
 8001b0c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b14:	d018      	beq.n	8001b48 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d214      	bcs.n	8001b48 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001b24:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b28:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001b2a:	6939      	ldr	r1, [r7, #16]
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f96a 	bl	8001e06 <RTC_WriteAlarmCounter>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d007      	beq.n	8001b48 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2204      	movs	r2, #4
 8001b3c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e006      	b.n	8001b56 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8001b54:	2300      	movs	r3, #0
  }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd90      	pop	{r4, r7, pc}
	...

08001b60 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	2300      	movs	r3, #0
 8001b72:	61bb      	str	r3, [r7, #24]
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d002      	beq.n	8001b84 <HAL_RTC_SetDate+0x24>
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e097      	b.n	8001cb8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	7c1b      	ldrb	r3, [r3, #16]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_RTC_SetDate+0x34>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e091      	b.n	8001cb8 <HAL_RTC_SetDate+0x158>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	78da      	ldrb	r2, [r3, #3]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	785a      	ldrb	r2, [r3, #1]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	789a      	ldrb	r2, [r3, #2]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	739a      	strb	r2, [r3, #14]
 8001bbe:	e01a      	b.n	8001bf6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	78db      	ldrb	r3, [r3, #3]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 f995 	bl	8001ef4 <RTC_Bcd2ToByte>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	461a      	mov	r2, r3
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f000 f98c 	bl	8001ef4 <RTC_Bcd2ToByte>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	789b      	ldrb	r3, [r3, #2]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 f983 	bl	8001ef4 <RTC_Bcd2ToByte>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	7bdb      	ldrb	r3, [r3, #15]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	7b59      	ldrb	r1, [r3, #13]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	7b9b      	ldrb	r3, [r3, #14]
 8001c04:	461a      	mov	r2, r3
 8001c06:	f000 f993 	bl	8001f30 <RTC_WeekDayNum>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	7b1a      	ldrb	r2, [r3, #12]
 8001c16:	68bb      	ldr	r3, [r7, #8]
 8001c18:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f000 f883 	bl	8001d26 <RTC_ReadTimeCounter>
 8001c20:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <HAL_RTC_SetDate+0x160>)
 8001c26:	fba2 2303 	umull	r2, r3, r2, r3
 8001c2a:	0adb      	lsrs	r3, r3, #11
 8001c2c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	2b18      	cmp	r3, #24
 8001c32:	d93a      	bls.n	8001caa <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	4a23      	ldr	r2, [pc, #140]	; (8001cc4 <HAL_RTC_SetDate+0x164>)
 8001c38:	fba2 2303 	umull	r2, r3, r2, r3
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <HAL_RTC_SetDate+0x168>)
 8001c40:	fb02 f303 	mul.w	r3, r2, r3
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001c4a:	69f9      	ldr	r1, [r7, #28]
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 f89a 	bl	8001d86 <RTC_WriteTimeCounter>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d007      	beq.n	8001c68 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e027      	b.n	8001cb8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001c68:	68f8      	ldr	r0, [r7, #12]
 8001c6a:	f000 f8b3 	bl	8001dd4 <RTC_ReadAlarmCounter>
 8001c6e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c76:	d018      	beq.n	8001caa <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d214      	bcs.n	8001caa <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001c86:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c8a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001c8c:	69b9      	ldr	r1, [r7, #24]
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 f8b9 	bl	8001e06 <RTC_WriteAlarmCounter>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2204      	movs	r2, #4
 8001c9e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e006      	b.n	8001cb8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2201      	movs	r2, #1
 8001cae:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	91a2b3c5 	.word	0x91a2b3c5
 8001cc4:	aaaaaaab 	.word	0xaaaaaaab
 8001cc8:	00015180 	.word	0x00015180

08001ccc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e01d      	b.n	8001d1e <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0208 	bic.w	r2, r2, #8
 8001cf0:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001cf2:	f7fe fdc9 	bl	8000888 <HAL_GetTick>
 8001cf6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001cf8:	e009      	b.n	8001d0e <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001cfa:	f7fe fdc5 	bl	8000888 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d08:	d901      	bls.n	8001d0e <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e007      	b.n	8001d1e <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d0ee      	beq.n	8001cfa <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b087      	sub	sp, #28
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	827b      	strh	r3, [r7, #18]
 8001d32:	2300      	movs	r3, #0
 8001d34:	823b      	strh	r3, [r7, #16]
 8001d36:	2300      	movs	r3, #0
 8001d38:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69db      	ldr	r3, [r3, #28]
 8001d4c:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001d56:	8a7a      	ldrh	r2, [r7, #18]
 8001d58:	8a3b      	ldrh	r3, [r7, #16]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d008      	beq.n	8001d70 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001d5e:	8a3b      	ldrh	r3, [r7, #16]
 8001d60:	041a      	lsls	r2, r3, #16
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69db      	ldr	r3, [r3, #28]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	e004      	b.n	8001d7a <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001d70:	8a7b      	ldrh	r3, [r7, #18]
 8001d72:	041a      	lsls	r2, r3, #16
 8001d74:	89fb      	ldrh	r3, [r7, #14]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001d7a:	697b      	ldr	r3, [r7, #20]
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	371c      	adds	r7, #28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bc80      	pop	{r7}
 8001d84:	4770      	bx	lr

08001d86 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b084      	sub	sp, #16
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d90:	2300      	movs	r3, #0
 8001d92:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f85d 	bl	8001e54 <RTC_EnterInitMode>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d002      	beq.n	8001da6 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	e011      	b.n	8001dca <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	683a      	ldr	r2, [r7, #0]
 8001dac:	0c12      	lsrs	r2, r2, #16
 8001dae:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	683a      	ldr	r2, [r7, #0]
 8001db6:	b292      	uxth	r2, r2
 8001db8:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f872 	bl	8001ea4 <RTC_ExitInitMode>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	81fb      	strh	r3, [r7, #14]
 8001de0:	2300      	movs	r3, #0
 8001de2:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001df4:	89fb      	ldrh	r3, [r7, #14]
 8001df6:	041a      	lsls	r2, r3, #16
 8001df8:	89bb      	ldrh	r3, [r7, #12]
 8001dfa:	4313      	orrs	r3, r2
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr

08001e06 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b084      	sub	sp, #16
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e10:	2300      	movs	r3, #0
 8001e12:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f81d 	bl	8001e54 <RTC_EnterInitMode>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d002      	beq.n	8001e26 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e011      	b.n	8001e4a <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	0c12      	lsrs	r2, r2, #16
 8001e2e:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	b292      	uxth	r2, r2
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 f832 	bl	8001ea4 <RTC_ExitInitMode>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d001      	beq.n	8001e4a <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001e60:	f7fe fd12 	bl	8000888 <HAL_GetTick>
 8001e64:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001e66:	e009      	b.n	8001e7c <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001e68:	f7fe fd0e 	bl	8000888 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e76:	d901      	bls.n	8001e7c <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e00f      	b.n	8001e9c <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0320 	and.w	r3, r3, #32
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0ee      	beq.n	8001e68 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	685a      	ldr	r2, [r3, #4]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f042 0210 	orr.w	r2, r2, #16
 8001e98:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0210 	bic.w	r2, r2, #16
 8001ebe:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001ec0:	f7fe fce2 	bl	8000888 <HAL_GetTick>
 8001ec4:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001ec6:	e009      	b.n	8001edc <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001ec8:	f7fe fcde 	bl	8000888 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ed6:	d901      	bls.n	8001edc <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e007      	b.n	8001eec <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d0ee      	beq.n	8001ec8 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4603      	mov	r3, r0
 8001efc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	b2da      	uxtb	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	4413      	add	r3, r2
 8001f22:	b2db      	uxtb	r3, r3
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
	...

08001f30 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	460b      	mov	r3, r1
 8001f3a:	70fb      	strb	r3, [r7, #3]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001f4e:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d82d      	bhi.n	8001fb2 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001f56:	78fa      	ldrb	r2, [r7, #3]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	4a2c      	ldr	r2, [pc, #176]	; (8002014 <RTC_WeekDayNum+0xe4>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	085a      	lsrs	r2, r3, #1
 8001f6a:	78bb      	ldrb	r3, [r7, #2]
 8001f6c:	441a      	add	r2, r3
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	441a      	add	r2, r3
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	3b01      	subs	r3, #1
 8001f76:	089b      	lsrs	r3, r3, #2
 8001f78:	441a      	add	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	4926      	ldr	r1, [pc, #152]	; (8002018 <RTC_WeekDayNum+0xe8>)
 8001f80:	fba1 1303 	umull	r1, r3, r1, r3
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	1ad2      	subs	r2, r2, r3
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	4922      	ldr	r1, [pc, #136]	; (8002018 <RTC_WeekDayNum+0xe8>)
 8001f8e:	fba1 1303 	umull	r1, r3, r1, r3
 8001f92:	09db      	lsrs	r3, r3, #7
 8001f94:	4413      	add	r3, r2
 8001f96:	1d1a      	adds	r2, r3, #4
 8001f98:	4b20      	ldr	r3, [pc, #128]	; (800201c <RTC_WeekDayNum+0xec>)
 8001f9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001f9e:	1ad1      	subs	r1, r2, r3
 8001fa0:	0849      	lsrs	r1, r1, #1
 8001fa2:	440b      	add	r3, r1
 8001fa4:	0899      	lsrs	r1, r3, #2
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	00db      	lsls	r3, r3, #3
 8001faa:	1a5b      	subs	r3, r3, r1
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e029      	b.n	8002006 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4413      	add	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	4a15      	ldr	r2, [pc, #84]	; (8002014 <RTC_WeekDayNum+0xe4>)
 8001fc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc4:	085a      	lsrs	r2, r3, #1
 8001fc6:	78bb      	ldrb	r3, [r7, #2]
 8001fc8:	441a      	add	r2, r3
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	441a      	add	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	441a      	add	r2, r3
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4910      	ldr	r1, [pc, #64]	; (8002018 <RTC_WeekDayNum+0xe8>)
 8001fd8:	fba1 1303 	umull	r1, r3, r1, r3
 8001fdc:	095b      	lsrs	r3, r3, #5
 8001fde:	1ad2      	subs	r2, r2, r3
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	490d      	ldr	r1, [pc, #52]	; (8002018 <RTC_WeekDayNum+0xe8>)
 8001fe4:	fba1 1303 	umull	r1, r3, r1, r3
 8001fe8:	09db      	lsrs	r3, r3, #7
 8001fea:	4413      	add	r3, r2
 8001fec:	1c9a      	adds	r2, r3, #2
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <RTC_WeekDayNum+0xec>)
 8001ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff4:	1ad1      	subs	r1, r2, r3
 8001ff6:	0849      	lsrs	r1, r1, #1
 8001ff8:	440b      	add	r3, r1
 8001ffa:	0899      	lsrs	r1, r3, #2
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	1a5b      	subs	r3, r3, r1
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	b2db      	uxtb	r3, r3
}
 800200a:	4618      	mov	r0, r3
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	38e38e39 	.word	0x38e38e39
 8002018:	51eb851f 	.word	0x51eb851f
 800201c:	24924925 	.word	0x24924925

08002020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e041      	b.n	80020b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002038:	b2db      	uxtb	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f839 	bl	80020be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2202      	movs	r2, #2
 8002050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3304      	adds	r3, #4
 800205c:	4619      	mov	r1, r3
 800205e:	4610      	mov	r0, r2
 8002060:	f000 f9b4 	bl	80023cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2201      	movs	r2, #1
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d001      	beq.n	80020e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e03a      	b.n	800215e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2202      	movs	r2, #2
 80020ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0201 	orr.w	r2, r2, #1
 80020fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a18      	ldr	r2, [pc, #96]	; (8002168 <HAL_TIM_Base_Start_IT+0x98>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d00e      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0x58>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002112:	d009      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0x58>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <HAL_TIM_Base_Start_IT+0x9c>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d004      	beq.n	8002128 <HAL_TIM_Base_Start_IT+0x58>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a13      	ldr	r2, [pc, #76]	; (8002170 <HAL_TIM_Base_Start_IT+0xa0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d111      	bne.n	800214c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 0307 	and.w	r3, r3, #7
 8002132:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b06      	cmp	r3, #6
 8002138:	d010      	beq.n	800215c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f042 0201 	orr.w	r2, r2, #1
 8002148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800214a:	e007      	b.n	800215c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	681a      	ldr	r2, [r3, #0]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f042 0201 	orr.w	r2, r2, #1
 800215a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	40012c00 	.word	0x40012c00
 800216c:	40000400 	.word	0x40000400
 8002170:	40000800 	.word	0x40000800

08002174 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	691b      	ldr	r3, [r3, #16]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b02      	cmp	r3, #2
 8002188:	d122      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b02      	cmp	r3, #2
 8002196:	d11b      	bne.n	80021d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f06f 0202 	mvn.w	r2, #2
 80021a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	699b      	ldr	r3, [r3, #24]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 f8ed 	bl	8002396 <HAL_TIM_IC_CaptureCallback>
 80021bc:	e005      	b.n	80021ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 f8e0 	bl	8002384 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f8ef 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f003 0304 	and.w	r3, r3, #4
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d122      	bne.n	8002224 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d11b      	bne.n	8002224 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f06f 0204 	mvn.w	r2, #4
 80021f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2202      	movs	r2, #2
 80021fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f000 f8c3 	bl	8002396 <HAL_TIM_IC_CaptureCallback>
 8002210:	e005      	b.n	800221e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f000 f8b6 	bl	8002384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f8c5 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0308 	and.w	r3, r3, #8
 800222e:	2b08      	cmp	r3, #8
 8002230:	d122      	bne.n	8002278 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	f003 0308 	and.w	r3, r3, #8
 800223c:	2b08      	cmp	r3, #8
 800223e:	d11b      	bne.n	8002278 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0208 	mvn.w	r2, #8
 8002248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2204      	movs	r2, #4
 800224e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	69db      	ldr	r3, [r3, #28]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d003      	beq.n	8002266 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f899 	bl	8002396 <HAL_TIM_IC_CaptureCallback>
 8002264:	e005      	b.n	8002272 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f88c 	bl	8002384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 f89b 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	2b10      	cmp	r3, #16
 8002284:	d122      	bne.n	80022cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b10      	cmp	r3, #16
 8002292:	d11b      	bne.n	80022cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f06f 0210 	mvn.w	r2, #16
 800229c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2208      	movs	r2, #8
 80022a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f000 f86f 	bl	8002396 <HAL_TIM_IC_CaptureCallback>
 80022b8:	e005      	b.n	80022c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f862 	bl	8002384 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022c0:	6878      	ldr	r0, [r7, #4]
 80022c2:	f000 f871 	bl	80023a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10e      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d107      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f06f 0201 	mvn.w	r2, #1
 80022f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7fe f882 	bl	80003fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	2b80      	cmp	r3, #128	; 0x80
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b80      	cmp	r3, #128	; 0x80
 8002312:	d107      	bne.n	8002324 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f8bf 	bl	80024a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b40      	cmp	r3, #64	; 0x40
 8002330:	d10e      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	2b40      	cmp	r3, #64	; 0x40
 800233e:	d107      	bne.n	8002350 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f000 f835 	bl	80023ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	2b20      	cmp	r3, #32
 800235c:	d10e      	bne.n	800237c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f003 0320 	and.w	r3, r3, #32
 8002368:	2b20      	cmp	r3, #32
 800236a:	d107      	bne.n	800237c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f06f 0220 	mvn.w	r2, #32
 8002374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f88a 	bl	8002490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	bc80      	pop	{r7}
 8002394:	4770      	bx	lr

08002396 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002396:	b480      	push	{r7}
 8002398:	b083      	sub	sp, #12
 800239a:	af00      	add	r7, sp, #0
 800239c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800239e:	bf00      	nop
 80023a0:	370c      	adds	r7, #12
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr

080023ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr

080023cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	4a29      	ldr	r2, [pc, #164]	; (8002484 <TIM_Base_SetConfig+0xb8>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d00b      	beq.n	80023fc <TIM_Base_SetConfig+0x30>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ea:	d007      	beq.n	80023fc <TIM_Base_SetConfig+0x30>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a26      	ldr	r2, [pc, #152]	; (8002488 <TIM_Base_SetConfig+0xbc>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d003      	beq.n	80023fc <TIM_Base_SetConfig+0x30>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a25      	ldr	r2, [pc, #148]	; (800248c <TIM_Base_SetConfig+0xc0>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d108      	bne.n	800240e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	68fa      	ldr	r2, [r7, #12]
 800240a:	4313      	orrs	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	4a1c      	ldr	r2, [pc, #112]	; (8002484 <TIM_Base_SetConfig+0xb8>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d00b      	beq.n	800242e <TIM_Base_SetConfig+0x62>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800241c:	d007      	beq.n	800242e <TIM_Base_SetConfig+0x62>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4a19      	ldr	r2, [pc, #100]	; (8002488 <TIM_Base_SetConfig+0xbc>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d003      	beq.n	800242e <TIM_Base_SetConfig+0x62>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4a18      	ldr	r2, [pc, #96]	; (800248c <TIM_Base_SetConfig+0xc0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d108      	bne.n	8002440 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	4313      	orrs	r3, r2
 800243e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	4313      	orrs	r3, r2
 800244c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689a      	ldr	r2, [r3, #8]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a07      	ldr	r2, [pc, #28]	; (8002484 <TIM_Base_SetConfig+0xb8>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d103      	bne.n	8002474 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	615a      	str	r2, [r3, #20]
}
 800247a:	bf00      	nop
 800247c:	3714      	adds	r7, #20
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr
 8002484:	40012c00 	.word	0x40012c00
 8002488:	40000400 	.word	0x40000400
 800248c:	40000800 	.word	0x40000800

08002490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr

080024a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr

080024b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e03f      	b.n	8002546 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d106      	bne.n	80024e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f7fe f93a 	bl	8000754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2224      	movs	r2, #36	; 0x24
 80024e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68da      	ldr	r2, [r3, #12]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f000 f829 	bl	8002550 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691a      	ldr	r2, [r3, #16]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800250c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695a      	ldr	r2, [r3, #20]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800251c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68da      	ldr	r2, [r3, #12]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800252c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	4313      	orrs	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800258a:	f023 030c 	bic.w	r3, r3, #12
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	430b      	orrs	r3, r1
 8002596:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699a      	ldr	r2, [r3, #24]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <UART_SetConfig+0x114>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d103      	bne.n	80025c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025b8:	f7fe ffc8 	bl	800154c <HAL_RCC_GetPCLK2Freq>
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	e002      	b.n	80025c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025c0:	f7fe ffb0 	bl	8001524 <HAL_RCC_GetPCLK1Freq>
 80025c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025c6:	68fa      	ldr	r2, [r7, #12]
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	009a      	lsls	r2, r3, #2
 80025d0:	441a      	add	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025dc:	4a22      	ldr	r2, [pc, #136]	; (8002668 <UART_SetConfig+0x118>)
 80025de:	fba2 2303 	umull	r2, r3, r2, r3
 80025e2:	095b      	lsrs	r3, r3, #5
 80025e4:	0119      	lsls	r1, r3, #4
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009a      	lsls	r2, r3, #2
 80025f0:	441a      	add	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	009b      	lsls	r3, r3, #2
 80025f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <UART_SetConfig+0x118>)
 80025fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002602:	095b      	lsrs	r3, r3, #5
 8002604:	2064      	movs	r0, #100	; 0x64
 8002606:	fb00 f303 	mul.w	r3, r0, r3
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	3332      	adds	r3, #50	; 0x32
 8002610:	4a15      	ldr	r2, [pc, #84]	; (8002668 <UART_SetConfig+0x118>)
 8002612:	fba2 2303 	umull	r2, r3, r2, r3
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800261c:	4419      	add	r1, r3
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	4613      	mov	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	009a      	lsls	r2, r3, #2
 8002628:	441a      	add	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	fbb2 f2f3 	udiv	r2, r2, r3
 8002634:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <UART_SetConfig+0x118>)
 8002636:	fba3 0302 	umull	r0, r3, r3, r2
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	2064      	movs	r0, #100	; 0x64
 800263e:	fb00 f303 	mul.w	r3, r0, r3
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	3332      	adds	r3, #50	; 0x32
 8002648:	4a07      	ldr	r2, [pc, #28]	; (8002668 <UART_SetConfig+0x118>)
 800264a:	fba2 2303 	umull	r2, r3, r2, r3
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	f003 020f 	and.w	r2, r3, #15
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	440a      	add	r2, r1
 800265a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800265c:	bf00      	nop
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40013800 	.word	0x40013800
 8002668:	51eb851f 	.word	0x51eb851f

0800266c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f103 0208 	add.w	r2, r3, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002684:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f103 0208 	add.w	r2, r3, #8
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f103 0208 	add.w	r2, r3, #8
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bc80      	pop	{r7}
 80026a8:	4770      	bx	lr

080026aa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc80      	pop	{r7}
 80026c0:	4770      	bx	lr

080026c2 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026c2:	b480      	push	{r7}
 80026c4:	b085      	sub	sp, #20
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6892      	ldr	r2, [r2, #8]
 80026d8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6852      	ldr	r2, [r2, #4]
 80026e2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d103      	bne.n	80026f6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689a      	ldr	r2, [r3, #8]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	1e5a      	subs	r2, r3, #1
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
}
 800270a:	4618      	mov	r0, r3
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	bc80      	pop	{r7}
 8002712:	4770      	bx	lr

08002714 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af04      	add	r7, sp, #16
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	4613      	mov	r3, r2
 8002722:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002724:	88fb      	ldrh	r3, [r7, #6]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fe51 	bl	80033d0 <pvPortMalloc>
 800272e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00e      	beq.n	8002754 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002736:	2058      	movs	r0, #88	; 0x58
 8002738:	f000 fe4a 	bl	80033d0 <pvPortMalloc>
 800273c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	631a      	str	r2, [r3, #48]	; 0x30
 800274a:	e005      	b.n	8002758 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800274c:	6978      	ldr	r0, [r7, #20]
 800274e:	f000 ff1f 	bl	8003590 <vPortFree>
 8002752:	e001      	b.n	8002758 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002754:	2300      	movs	r3, #0
 8002756:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d013      	beq.n	8002786 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800275e:	88fa      	ldrh	r2, [r7, #6]
 8002760:	2300      	movs	r3, #0
 8002762:	9303      	str	r3, [sp, #12]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	9302      	str	r3, [sp, #8]
 8002768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276a:	9301      	str	r3, [sp, #4]
 800276c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f80e 	bl	8002796 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800277a:	69f8      	ldr	r0, [r7, #28]
 800277c:	f000 f8b0 	bl	80028e0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002780:	2301      	movs	r3, #1
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	e002      	b.n	800278c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002786:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800278a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800278c:	69bb      	ldr	r3, [r7, #24]
    }
 800278e:	4618      	mov	r0, r3
 8002790:	3720      	adds	r7, #32
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b088      	sub	sp, #32
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
 80027a2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80027a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	461a      	mov	r2, r3
 80027ae:	21a5      	movs	r1, #165	; 0xa5
 80027b0:	f001 f82e 	bl	8003810 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80027b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027be:	3b01      	subs	r3, #1
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	f023 0307 	bic.w	r3, r3, #7
 80027cc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80027d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027dc:	f383 8811 	msr	BASEPRI, r3
 80027e0:	f3bf 8f6f 	isb	sy
 80027e4:	f3bf 8f4f 	dsb	sy
 80027e8:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80027ea:	bf00      	nop
 80027ec:	e7fe      	b.n	80027ec <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d01f      	beq.n	8002834 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027f4:	2300      	movs	r3, #0
 80027f6:	61fb      	str	r3, [r7, #28]
 80027f8:	e012      	b.n	8002820 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027fa:	68ba      	ldr	r2, [r7, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	4413      	add	r3, r2
 8002800:	7819      	ldrb	r1, [r3, #0]
 8002802:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	3334      	adds	r3, #52	; 0x34
 800280a:	460a      	mov	r2, r1
 800280c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	4413      	add	r3, r2
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d006      	beq.n	8002828 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	3301      	adds	r3, #1
 800281e:	61fb      	str	r3, [r7, #28]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	2b09      	cmp	r3, #9
 8002824:	d9e9      	bls.n	80027fa <prvInitialiseNewTask+0x64>
 8002826:	e000      	b.n	800282a <prvInitialiseNewTask+0x94>
            {
                break;
 8002828:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	2200      	movs	r2, #0
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002832:	e003      	b.n	800283c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800283c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283e:	2b04      	cmp	r3, #4
 8002840:	d90a      	bls.n	8002858 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002846:	f383 8811 	msr	BASEPRI, r3
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	613b      	str	r3, [r7, #16]
    }
 8002854:	bf00      	nop
 8002856:	e7fe      	b.n	8002856 <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285a:	2b04      	cmp	r3, #4
 800285c:	d901      	bls.n	8002862 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800285e:	2304      	movs	r3, #4
 8002860:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002864:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800286c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800286e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002870:	2200      	movs	r2, #0
 8002872:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002876:	3304      	adds	r3, #4
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff ff16 	bl	80026aa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	3318      	adds	r3, #24
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff11 	bl	80026aa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800288a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800288c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800288e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002890:	f1c3 0205 	rsb	r2, r3, #5
 8002894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002896:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800289c:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	3350      	adds	r3, #80	; 0x50
 80028a2:	2204      	movs	r2, #4
 80028a4:	2100      	movs	r1, #0
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 ffb2 	bl	8003810 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	3354      	adds	r3, #84	; 0x54
 80028b0:	2201      	movs	r2, #1
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 ffab 	bl	8003810 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	68f9      	ldr	r1, [r7, #12]
 80028be:	69b8      	ldr	r0, [r7, #24]
 80028c0:	f000 fbd6 	bl	8003070 <pxPortInitialiseStack>
 80028c4:	4602      	mov	r2, r0
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80028d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028d4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80028d6:	bf00      	nop
 80028d8:	3720      	adds	r7, #32
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
	...

080028e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80028e8:	f000 fcb2 	bl	8003250 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80028ec:	4b3a      	ldr	r3, [pc, #232]	; (80029d8 <prvAddNewTaskToReadyList+0xf8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	4a39      	ldr	r2, [pc, #228]	; (80029d8 <prvAddNewTaskToReadyList+0xf8>)
 80028f4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80028f6:	4b39      	ldr	r3, [pc, #228]	; (80029dc <prvAddNewTaskToReadyList+0xfc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80028fe:	4a37      	ldr	r2, [pc, #220]	; (80029dc <prvAddNewTaskToReadyList+0xfc>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002904:	4b34      	ldr	r3, [pc, #208]	; (80029d8 <prvAddNewTaskToReadyList+0xf8>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d110      	bne.n	800292e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800290c:	f000 fb18 	bl	8002f40 <prvInitialiseTaskLists>
 8002910:	e00d      	b.n	800292e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002912:	4b33      	ldr	r3, [pc, #204]	; (80029e0 <prvAddNewTaskToReadyList+0x100>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800291a:	4b30      	ldr	r3, [pc, #192]	; (80029dc <prvAddNewTaskToReadyList+0xfc>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	429a      	cmp	r2, r3
 8002926:	d802      	bhi.n	800292e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002928:	4a2c      	ldr	r2, [pc, #176]	; (80029dc <prvAddNewTaskToReadyList+0xfc>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800292e:	4b2d      	ldr	r3, [pc, #180]	; (80029e4 <prvAddNewTaskToReadyList+0x104>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3301      	adds	r3, #1
 8002934:	4a2b      	ldr	r2, [pc, #172]	; (80029e4 <prvAddNewTaskToReadyList+0x104>)
 8002936:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002938:	4b2a      	ldr	r3, [pc, #168]	; (80029e4 <prvAddNewTaskToReadyList+0x104>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	2201      	movs	r2, #1
 8002946:	409a      	lsls	r2, r3
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <prvAddNewTaskToReadyList+0x108>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4313      	orrs	r3, r2
 800294e:	4a26      	ldr	r2, [pc, #152]	; (80029e8 <prvAddNewTaskToReadyList+0x108>)
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002956:	4925      	ldr	r1, [pc, #148]	; (80029ec <prvAddNewTaskToReadyList+0x10c>)
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	3304      	adds	r3, #4
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	609a      	str	r2, [r3, #8]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60da      	str	r2, [r3, #12]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	3204      	adds	r2, #4
 800297e:	605a      	str	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	1d1a      	adds	r2, r3, #4
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	609a      	str	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4a15      	ldr	r2, [pc, #84]	; (80029ec <prvAddNewTaskToReadyList+0x10c>)
 8002996:	441a      	add	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	615a      	str	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a0:	4912      	ldr	r1, [pc, #72]	; (80029ec <prvAddNewTaskToReadyList+0x10c>)
 80029a2:	4613      	mov	r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	4413      	add	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	1c59      	adds	r1, r3, #1
 80029b0:	480e      	ldr	r0, [pc, #56]	; (80029ec <prvAddNewTaskToReadyList+0x10c>)
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4403      	add	r3, r0
 80029bc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80029be:	f000 fc77 	bl	80032b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80029c2:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <prvAddNewTaskToReadyList+0x100>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80029ca:	4b04      	ldr	r3, [pc, #16]	; (80029dc <prvAddNewTaskToReadyList+0xfc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000178 	.word	0x20000178
 80029dc:	200000a0 	.word	0x200000a0
 80029e0:	20000184 	.word	0x20000184
 80029e4:	20000194 	.word	0x20000194
 80029e8:	20000180 	.word	0x20000180
 80029ec:	200000a4 	.word	0x200000a4

080029f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b086      	sub	sp, #24
 80029f4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80029f6:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <vTaskStartScheduler+0x7c>)
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	2300      	movs	r3, #0
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2300      	movs	r3, #0
 8002a00:	2282      	movs	r2, #130	; 0x82
 8002a02:	491b      	ldr	r1, [pc, #108]	; (8002a70 <vTaskStartScheduler+0x80>)
 8002a04:	481b      	ldr	r0, [pc, #108]	; (8002a74 <vTaskStartScheduler+0x84>)
 8002a06:	f7ff fe85 	bl	8002714 <xTaskCreate>
 8002a0a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d116      	bne.n	8002a40 <vTaskStartScheduler+0x50>
        __asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	60bb      	str	r3, [r7, #8]
    }
 8002a24:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a26:	4b14      	ldr	r3, [pc, #80]	; (8002a78 <vTaskStartScheduler+0x88>)
 8002a28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a2c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <vTaskStartScheduler+0x8c>)
 8002a30:	2201      	movs	r2, #1
 8002a32:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <vTaskStartScheduler+0x90>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002a3a:	f000 fb97 	bl	800316c <xPortStartScheduler>
 8002a3e:	e00e      	b.n	8002a5e <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a46:	d10a      	bne.n	8002a5e <vTaskStartScheduler+0x6e>
        __asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	607b      	str	r3, [r7, #4]
    }
 8002a5a:	bf00      	nop
 8002a5c:	e7fe      	b.n	8002a5c <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a5e:	4b09      	ldr	r3, [pc, #36]	; (8002a84 <vTaskStartScheduler+0x94>)
 8002a60:	681b      	ldr	r3, [r3, #0]
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2000019c 	.word	0x2000019c
 8002a70:	08004258 	.word	0x08004258
 8002a74:	08002f1d 	.word	0x08002f1d
 8002a78:	20000198 	.word	0x20000198
 8002a7c:	20000184 	.word	0x20000184
 8002a80:	2000017c 	.word	0x2000017c
 8002a84:	2000000c 	.word	0x2000000c

08002a88 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a8c:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <vTaskSuspendAll+0x18>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3301      	adds	r3, #1
 8002a92:	4a03      	ldr	r2, [pc, #12]	; (8002aa0 <vTaskSuspendAll+0x18>)
 8002a94:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a96:	bf00      	nop
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bc80      	pop	{r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	200001a0 	.word	0x200001a0

08002aa4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002ab2:	4b6b      	ldr	r3, [pc, #428]	; (8002c60 <xTaskResumeAll+0x1bc>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10a      	bne.n	8002ad0 <xTaskResumeAll+0x2c>
        __asm volatile
 8002aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002abe:	f383 8811 	msr	BASEPRI, r3
 8002ac2:	f3bf 8f6f 	isb	sy
 8002ac6:	f3bf 8f4f 	dsb	sy
 8002aca:	607b      	str	r3, [r7, #4]
    }
 8002acc:	bf00      	nop
 8002ace:	e7fe      	b.n	8002ace <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002ad0:	f000 fbbe 	bl	8003250 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002ad4:	4b62      	ldr	r3, [pc, #392]	; (8002c60 <xTaskResumeAll+0x1bc>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	4a61      	ldr	r2, [pc, #388]	; (8002c60 <xTaskResumeAll+0x1bc>)
 8002adc:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ade:	4b60      	ldr	r3, [pc, #384]	; (8002c60 <xTaskResumeAll+0x1bc>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 80b4 	bne.w	8002c50 <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ae8:	4b5e      	ldr	r3, [pc, #376]	; (8002c64 <xTaskResumeAll+0x1c0>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 80af 	beq.w	8002c50 <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002af2:	e08a      	b.n	8002c0a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af4:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <xTaskResumeAll+0x1c4>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	6a12      	ldr	r2, [r2, #32]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	69d2      	ldr	r2, [r2, #28]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	685a      	ldr	r2, [r3, #4]
 8002b1a:	69fb      	ldr	r3, [r7, #28]
 8002b1c:	3318      	adds	r3, #24
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d103      	bne.n	8002b2a <xTaskResumeAll+0x86>
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	6a1a      	ldr	r2, [r3, #32]
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	1e5a      	subs	r2, r3, #1
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	69fa      	ldr	r2, [r7, #28]
 8002b46:	68d2      	ldr	r2, [r2, #12]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	6892      	ldr	r2, [r2, #8]
 8002b52:	605a      	str	r2, [r3, #4]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d103      	bne.n	8002b68 <xTaskResumeAll+0xc4>
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	605a      	str	r2, [r3, #4]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	615a      	str	r2, [r3, #20]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1e5a      	subs	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	409a      	lsls	r2, r3
 8002b80:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <xTaskResumeAll+0x1c8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	4a39      	ldr	r2, [pc, #228]	; (8002c6c <xTaskResumeAll+0x1c8>)
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b8e:	4938      	ldr	r1, [pc, #224]	; (8002c70 <xTaskResumeAll+0x1cc>)
 8002b90:	4613      	mov	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	60bb      	str	r3, [r7, #8]
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	609a      	str	r2, [r3, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	60da      	str	r2, [r3, #12]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	69fa      	ldr	r2, [r7, #28]
 8002bb4:	3204      	adds	r2, #4
 8002bb6:	605a      	str	r2, [r3, #4]
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	1d1a      	adds	r2, r3, #4
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4a28      	ldr	r2, [pc, #160]	; (8002c70 <xTaskResumeAll+0x1cc>)
 8002bce:	441a      	add	r2, r3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	615a      	str	r2, [r3, #20]
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd8:	4925      	ldr	r1, [pc, #148]	; (8002c70 <xTaskResumeAll+0x1cc>)
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	1c59      	adds	r1, r3, #1
 8002be8:	4821      	ldr	r0, [pc, #132]	; (8002c70 <xTaskResumeAll+0x1cc>)
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	4403      	add	r3, r0
 8002bf4:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfa:	4b1e      	ldr	r3, [pc, #120]	; (8002c74 <xTaskResumeAll+0x1d0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d302      	bcc.n	8002c0a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002c04:	4b1c      	ldr	r3, [pc, #112]	; (8002c78 <xTaskResumeAll+0x1d4>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c0a:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <xTaskResumeAll+0x1c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f47f af70 	bne.w	8002af4 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c1a:	f000 fa0f 	bl	800303c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c1e:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <xTaskResumeAll+0x1d8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c2a:	f000 f829 	bl	8002c80 <xTaskIncrementTick>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d002      	beq.n	8002c3a <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 8002c34:	4b10      	ldr	r3, [pc, #64]	; (8002c78 <xTaskResumeAll+0x1d4>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1f1      	bne.n	8002c2a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 8002c46:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <xTaskResumeAll+0x1d8>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c4c:	4b0a      	ldr	r3, [pc, #40]	; (8002c78 <xTaskResumeAll+0x1d4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c50:	f000 fb2e 	bl	80032b0 <vPortExitCritical>

    return xAlreadyYielded;
 8002c54:	697b      	ldr	r3, [r7, #20]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200001a0 	.word	0x200001a0
 8002c64:	20000178 	.word	0x20000178
 8002c68:	20000138 	.word	0x20000138
 8002c6c:	20000180 	.word	0x20000180
 8002c70:	200000a4 	.word	0x200000a4
 8002c74:	200000a0 	.word	0x200000a0
 8002c78:	2000018c 	.word	0x2000018c
 8002c7c:	20000188 	.word	0x20000188

08002c80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b08a      	sub	sp, #40	; 0x28
 8002c84:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c8a:	4b6e      	ldr	r3, [pc, #440]	; (8002e44 <xTaskIncrementTick+0x1c4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f040 80cd 	bne.w	8002e2e <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c94:	4b6c      	ldr	r3, [pc, #432]	; (8002e48 <xTaskIncrementTick+0x1c8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	3301      	adds	r3, #1
 8002c9a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002c9c:	4a6a      	ldr	r2, [pc, #424]	; (8002e48 <xTaskIncrementTick+0x1c8>)
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d120      	bne.n	8002cea <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ca8:	4b68      	ldr	r3, [pc, #416]	; (8002e4c <xTaskIncrementTick+0x1cc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <xTaskIncrementTick+0x48>
        __asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	607b      	str	r3, [r7, #4]
    }
 8002cc4:	bf00      	nop
 8002cc6:	e7fe      	b.n	8002cc6 <xTaskIncrementTick+0x46>
 8002cc8:	4b60      	ldr	r3, [pc, #384]	; (8002e4c <xTaskIncrementTick+0x1cc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	4b60      	ldr	r3, [pc, #384]	; (8002e50 <xTaskIncrementTick+0x1d0>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a5e      	ldr	r2, [pc, #376]	; (8002e4c <xTaskIncrementTick+0x1cc>)
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	4a5e      	ldr	r2, [pc, #376]	; (8002e50 <xTaskIncrementTick+0x1d0>)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	6013      	str	r3, [r2, #0]
 8002cdc:	4b5d      	ldr	r3, [pc, #372]	; (8002e54 <xTaskIncrementTick+0x1d4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	4a5c      	ldr	r2, [pc, #368]	; (8002e54 <xTaskIncrementTick+0x1d4>)
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	f000 f9a9 	bl	800303c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002cea:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <xTaskIncrementTick+0x1d8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6a3a      	ldr	r2, [r7, #32]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	f0c0 80a1 	bcc.w	8002e38 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cf6:	4b55      	ldr	r3, [pc, #340]	; (8002e4c <xTaskIncrementTick+0x1cc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d104      	bne.n	8002d0a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d00:	4b55      	ldr	r3, [pc, #340]	; (8002e58 <xTaskIncrementTick+0x1d8>)
 8002d02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d06:	601a      	str	r2, [r3, #0]
                    break;
 8002d08:	e096      	b.n	8002e38 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d0a:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <xTaskIncrementTick+0x1cc>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d1a:	6a3a      	ldr	r2, [r7, #32]
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d203      	bcs.n	8002d2a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d22:	4a4d      	ldr	r2, [pc, #308]	; (8002e58 <xTaskIncrementTick+0x1d8>)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002d28:	e086      	b.n	8002e38 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	68d2      	ldr	r2, [r2, #12]
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	69ba      	ldr	r2, [r7, #24]
 8002d40:	6892      	ldr	r2, [r2, #8]
 8002d42:	605a      	str	r2, [r3, #4]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	685a      	ldr	r2, [r3, #4]
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d103      	bne.n	8002d58 <xTaskIncrementTick+0xd8>
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	605a      	str	r2, [r3, #4]
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	615a      	str	r2, [r3, #20]
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	1e5a      	subs	r2, r3, #1
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d01e      	beq.n	8002dae <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d74:	60fb      	str	r3, [r7, #12]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	6a12      	ldr	r2, [r2, #32]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6a1b      	ldr	r3, [r3, #32]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	69d2      	ldr	r2, [r2, #28]
 8002d88:	605a      	str	r2, [r3, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	3318      	adds	r3, #24
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d103      	bne.n	8002d9e <xTaskIncrementTick+0x11e>
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	6a1a      	ldr	r2, [r3, #32]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	2200      	movs	r2, #0
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	1e5a      	subs	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db2:	2201      	movs	r2, #1
 8002db4:	409a      	lsls	r2, r3
 8002db6:	4b29      	ldr	r3, [pc, #164]	; (8002e5c <xTaskIncrementTick+0x1dc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	4a27      	ldr	r2, [pc, #156]	; (8002e5c <xTaskIncrementTick+0x1dc>)
 8002dbe:	6013      	str	r3, [r2, #0]
 8002dc0:	69bb      	ldr	r3, [r7, #24]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	4926      	ldr	r1, [pc, #152]	; (8002e60 <xTaskIncrementTick+0x1e0>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	60bb      	str	r3, [r7, #8]
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	60da      	str	r2, [r3, #12]
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	3204      	adds	r2, #4
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	1d1a      	adds	r2, r3, #4
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4a17      	ldr	r2, [pc, #92]	; (8002e60 <xTaskIncrementTick+0x1e0>)
 8002e04:	441a      	add	r2, r3
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	615a      	str	r2, [r3, #20]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e0e:	4914      	ldr	r1, [pc, #80]	; (8002e60 <xTaskIncrementTick+0x1e0>)
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	1c59      	adds	r1, r3, #1
 8002e1e:	4810      	ldr	r0, [pc, #64]	; (8002e60 <xTaskIncrementTick+0x1e0>)
 8002e20:	4613      	mov	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4403      	add	r3, r0
 8002e2a:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e2c:	e763      	b.n	8002cf6 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002e2e:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <xTaskIncrementTick+0x1e4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3301      	adds	r3, #1
 8002e34:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <xTaskIncrementTick+0x1e4>)
 8002e36:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3728      	adds	r7, #40	; 0x28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	200001a0 	.word	0x200001a0
 8002e48:	2000017c 	.word	0x2000017c
 8002e4c:	20000130 	.word	0x20000130
 8002e50:	20000134 	.word	0x20000134
 8002e54:	20000190 	.word	0x20000190
 8002e58:	20000198 	.word	0x20000198
 8002e5c:	20000180 	.word	0x20000180
 8002e60:	200000a4 	.word	0x200000a4
 8002e64:	20000188 	.word	0x20000188

08002e68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e6e:	4b26      	ldr	r3, [pc, #152]	; (8002f08 <vTaskSwitchContext+0xa0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002e76:	4b25      	ldr	r3, [pc, #148]	; (8002f0c <vTaskSwitchContext+0xa4>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002e7c:	e03f      	b.n	8002efe <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002e7e:	4b23      	ldr	r3, [pc, #140]	; (8002f0c <vTaskSwitchContext+0xa4>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002e84:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <vTaskSwitchContext+0xa8>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002e92:	7afb      	ldrb	r3, [r7, #11]
 8002e94:	f1c3 031f 	rsb	r3, r3, #31
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	491e      	ldr	r1, [pc, #120]	; (8002f14 <vTaskSwitchContext+0xac>)
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d10a      	bne.n	8002ec4 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	607b      	str	r3, [r7, #4]
    }
 8002ec0:	bf00      	nop
 8002ec2:	e7fe      	b.n	8002ec2 <vTaskSwitchContext+0x5a>
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	4413      	add	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <vTaskSwitchContext+0xac>)
 8002ed0:	4413      	add	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d104      	bne.n	8002ef4 <vTaskSwitchContext+0x8c>
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	605a      	str	r2, [r3, #4]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	4a07      	ldr	r2, [pc, #28]	; (8002f18 <vTaskSwitchContext+0xb0>)
 8002efc:	6013      	str	r3, [r2, #0]
}
 8002efe:	bf00      	nop
 8002f00:	371c      	adds	r7, #28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bc80      	pop	{r7}
 8002f06:	4770      	bx	lr
 8002f08:	200001a0 	.word	0x200001a0
 8002f0c:	2000018c 	.word	0x2000018c
 8002f10:	20000180 	.word	0x20000180
 8002f14:	200000a4 	.word	0x200000a4
 8002f18:	200000a0 	.word	0x200000a0

08002f1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002f24:	f000 f84c 	bl	8002fc0 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <prvIdleTask+0x20>)
 8002f2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	f3bf 8f4f 	dsb	sy
 8002f34:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002f38:	e7f4      	b.n	8002f24 <prvIdleTask+0x8>
 8002f3a:	bf00      	nop
 8002f3c:	e000ed04 	.word	0xe000ed04

08002f40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f46:	2300      	movs	r3, #0
 8002f48:	607b      	str	r3, [r7, #4]
 8002f4a:	e00c      	b.n	8002f66 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4a12      	ldr	r2, [pc, #72]	; (8002fa0 <prvInitialiseTaskLists+0x60>)
 8002f58:	4413      	add	r3, r2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff fb86 	bl	800266c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	3301      	adds	r3, #1
 8002f64:	607b      	str	r3, [r7, #4]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b04      	cmp	r3, #4
 8002f6a:	d9ef      	bls.n	8002f4c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002f6c:	480d      	ldr	r0, [pc, #52]	; (8002fa4 <prvInitialiseTaskLists+0x64>)
 8002f6e:	f7ff fb7d 	bl	800266c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002f72:	480d      	ldr	r0, [pc, #52]	; (8002fa8 <prvInitialiseTaskLists+0x68>)
 8002f74:	f7ff fb7a 	bl	800266c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002f78:	480c      	ldr	r0, [pc, #48]	; (8002fac <prvInitialiseTaskLists+0x6c>)
 8002f7a:	f7ff fb77 	bl	800266c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002f7e:	480c      	ldr	r0, [pc, #48]	; (8002fb0 <prvInitialiseTaskLists+0x70>)
 8002f80:	f7ff fb74 	bl	800266c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002f84:	480b      	ldr	r0, [pc, #44]	; (8002fb4 <prvInitialiseTaskLists+0x74>)
 8002f86:	f7ff fb71 	bl	800266c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002f8a:	4b0b      	ldr	r3, [pc, #44]	; (8002fb8 <prvInitialiseTaskLists+0x78>)
 8002f8c:	4a05      	ldr	r2, [pc, #20]	; (8002fa4 <prvInitialiseTaskLists+0x64>)
 8002f8e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f90:	4b0a      	ldr	r3, [pc, #40]	; (8002fbc <prvInitialiseTaskLists+0x7c>)
 8002f92:	4a05      	ldr	r2, [pc, #20]	; (8002fa8 <prvInitialiseTaskLists+0x68>)
 8002f94:	601a      	str	r2, [r3, #0]
}
 8002f96:	bf00      	nop
 8002f98:	3708      	adds	r7, #8
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	200000a4 	.word	0x200000a4
 8002fa4:	20000108 	.word	0x20000108
 8002fa8:	2000011c 	.word	0x2000011c
 8002fac:	20000138 	.word	0x20000138
 8002fb0:	2000014c 	.word	0x2000014c
 8002fb4:	20000164 	.word	0x20000164
 8002fb8:	20000130 	.word	0x20000130
 8002fbc:	20000134 	.word	0x20000134

08002fc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002fc6:	e019      	b.n	8002ffc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002fc8:	f000 f942 	bl	8003250 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fcc:	4b10      	ldr	r3, [pc, #64]	; (8003010 <prvCheckTasksWaitingTermination+0x50>)
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3304      	adds	r3, #4
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff fb72 	bl	80026c2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002fde:	4b0d      	ldr	r3, [pc, #52]	; (8003014 <prvCheckTasksWaitingTermination+0x54>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <prvCheckTasksWaitingTermination+0x54>)
 8002fe6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <prvCheckTasksWaitingTermination+0x58>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3b01      	subs	r3, #1
 8002fee:	4a0a      	ldr	r2, [pc, #40]	; (8003018 <prvCheckTasksWaitingTermination+0x58>)
 8002ff0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002ff2:	f000 f95d 	bl	80032b0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f810 	bl	800301c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ffc:	4b06      	ldr	r3, [pc, #24]	; (8003018 <prvCheckTasksWaitingTermination+0x58>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e1      	bne.n	8002fc8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003004:	bf00      	nop
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	2000014c 	.word	0x2000014c
 8003014:	20000178 	.word	0x20000178
 8003018:	20000160 	.word	0x20000160

0800301c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	4618      	mov	r0, r3
 800302a:	f000 fab1 	bl	8003590 <vPortFree>
                vPortFree( pxTCB );
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 faae 	bl	8003590 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003040:	4b09      	ldr	r3, [pc, #36]	; (8003068 <prvResetNextTaskUnblockTime+0x2c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d104      	bne.n	8003054 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800304a:	4b08      	ldr	r3, [pc, #32]	; (800306c <prvResetNextTaskUnblockTime+0x30>)
 800304c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003050:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003052:	e005      	b.n	8003060 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003054:	4b04      	ldr	r3, [pc, #16]	; (8003068 <prvResetNextTaskUnblockTime+0x2c>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a03      	ldr	r2, [pc, #12]	; (800306c <prvResetNextTaskUnblockTime+0x30>)
 800305e:	6013      	str	r3, [r2, #0]
}
 8003060:	bf00      	nop
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	20000130 	.word	0x20000130
 800306c:	20000198 	.word	0x20000198

08003070 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3b04      	subs	r3, #4
 8003080:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003088:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	3b04      	subs	r3, #4
 800308e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f023 0201 	bic.w	r2, r3, #1
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	3b04      	subs	r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80030a0:	4a08      	ldr	r2, [pc, #32]	; (80030c4 <pxPortInitialiseStack+0x54>)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	3b14      	subs	r3, #20
 80030aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	3b20      	subs	r3, #32
 80030b6:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80030b8:	68fb      	ldr	r3, [r7, #12]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	bc80      	pop	{r7}
 80030c2:	4770      	bx	lr
 80030c4:	080030c9 	.word	0x080030c9

080030c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80030d2:	4b12      	ldr	r3, [pc, #72]	; (800311c <prvTaskExitError+0x54>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030da:	d00a      	beq.n	80030f2 <prvTaskExitError+0x2a>
        __asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	60fb      	str	r3, [r7, #12]
    }
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <prvTaskExitError+0x28>
        __asm volatile
 80030f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030f6:	f383 8811 	msr	BASEPRI, r3
 80030fa:	f3bf 8f6f 	isb	sy
 80030fe:	f3bf 8f4f 	dsb	sy
 8003102:	60bb      	str	r3, [r7, #8]
    }
 8003104:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003106:	bf00      	nop
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d0fc      	beq.n	8003108 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800310e:	bf00      	nop
 8003110:	bf00      	nop
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	bc80      	pop	{r7}
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	20000010 	.word	0x20000010

08003120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003120:	4b07      	ldr	r3, [pc, #28]	; (8003140 <pxCurrentTCBConst2>)
 8003122:	6819      	ldr	r1, [r3, #0]
 8003124:	6808      	ldr	r0, [r1, #0]
 8003126:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800312a:	f380 8809 	msr	PSP, r0
 800312e:	f3bf 8f6f 	isb	sy
 8003132:	f04f 0000 	mov.w	r0, #0
 8003136:	f380 8811 	msr	BASEPRI, r0
 800313a:	f04e 0e0d 	orr.w	lr, lr, #13
 800313e:	4770      	bx	lr

08003140 <pxCurrentTCBConst2>:
 8003140:	200000a0 	.word	0x200000a0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003144:	bf00      	nop
 8003146:	bf00      	nop

08003148 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003148:	4806      	ldr	r0, [pc, #24]	; (8003164 <prvPortStartFirstTask+0x1c>)
 800314a:	6800      	ldr	r0, [r0, #0]
 800314c:	6800      	ldr	r0, [r0, #0]
 800314e:	f380 8808 	msr	MSP, r0
 8003152:	b662      	cpsie	i
 8003154:	b661      	cpsie	f
 8003156:	f3bf 8f4f 	dsb	sy
 800315a:	f3bf 8f6f 	isb	sy
 800315e:	df00      	svc	0
 8003160:	bf00      	nop
 8003162:	0000      	.short	0x0000
 8003164:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop

0800316c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003172:	4b32      	ldr	r3, [pc, #200]	; (800323c <xPortStartScheduler+0xd0>)
 8003174:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	781b      	ldrb	r3, [r3, #0]
 800317a:	b2db      	uxtb	r3, r3
 800317c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800318c:	78fb      	ldrb	r3, [r7, #3]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4b2a      	ldr	r3, [pc, #168]	; (8003240 <xPortStartScheduler+0xd4>)
 8003198:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800319a:	4b2a      	ldr	r3, [pc, #168]	; (8003244 <xPortStartScheduler+0xd8>)
 800319c:	2207      	movs	r2, #7
 800319e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031a0:	e009      	b.n	80031b6 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80031a2:	4b28      	ldr	r3, [pc, #160]	; (8003244 <xPortStartScheduler+0xd8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	3b01      	subs	r3, #1
 80031a8:	4a26      	ldr	r2, [pc, #152]	; (8003244 <xPortStartScheduler+0xd8>)
 80031aa:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031b6:	78fb      	ldrb	r3, [r7, #3]
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031be:	2b80      	cmp	r3, #128	; 0x80
 80031c0:	d0ef      	beq.n	80031a2 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031c2:	4b20      	ldr	r3, [pc, #128]	; (8003244 <xPortStartScheduler+0xd8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f1c3 0307 	rsb	r3, r3, #7
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d00a      	beq.n	80031e4 <xPortStartScheduler+0x78>
        __asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	60bb      	str	r3, [r7, #8]
    }
 80031e0:	bf00      	nop
 80031e2:	e7fe      	b.n	80031e2 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <xPortStartScheduler+0xd8>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	4a16      	ldr	r2, [pc, #88]	; (8003244 <xPortStartScheduler+0xd8>)
 80031ec:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80031ee:	4b15      	ldr	r3, [pc, #84]	; (8003244 <xPortStartScheduler+0xd8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031f6:	4a13      	ldr	r2, [pc, #76]	; (8003244 <xPortStartScheduler+0xd8>)
 80031f8:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003202:	4b11      	ldr	r3, [pc, #68]	; (8003248 <xPortStartScheduler+0xdc>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a10      	ldr	r2, [pc, #64]	; (8003248 <xPortStartScheduler+0xdc>)
 8003208:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800320c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800320e:	4b0e      	ldr	r3, [pc, #56]	; (8003248 <xPortStartScheduler+0xdc>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a0d      	ldr	r2, [pc, #52]	; (8003248 <xPortStartScheduler+0xdc>)
 8003214:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003218:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800321a:	f000 f8b7 	bl	800338c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800321e:	4b0b      	ldr	r3, [pc, #44]	; (800324c <xPortStartScheduler+0xe0>)
 8003220:	2200      	movs	r2, #0
 8003222:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003224:	f7ff ff90 	bl	8003148 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003228:	f7ff fe1e 	bl	8002e68 <vTaskSwitchContext>
    prvTaskExitError();
 800322c:	f7ff ff4c 	bl	80030c8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	e000e400 	.word	0xe000e400
 8003240:	200001a4 	.word	0x200001a4
 8003244:	200001a8 	.word	0x200001a8
 8003248:	e000ed20 	.word	0xe000ed20
 800324c:	20000010 	.word	0x20000010

08003250 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
        __asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	607b      	str	r3, [r7, #4]
    }
 8003268:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800326a:	4b0f      	ldr	r3, [pc, #60]	; (80032a8 <vPortEnterCritical+0x58>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	3301      	adds	r3, #1
 8003270:	4a0d      	ldr	r2, [pc, #52]	; (80032a8 <vPortEnterCritical+0x58>)
 8003272:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <vPortEnterCritical+0x58>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b01      	cmp	r3, #1
 800327a:	d10f      	bne.n	800329c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <vPortEnterCritical+0x5c>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <vPortEnterCritical+0x4c>
        __asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	603b      	str	r3, [r7, #0]
    }
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <vPortEnterCritical+0x4a>
    }
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	20000010 	.word	0x20000010
 80032ac:	e000ed04 	.word	0xe000ed04

080032b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032b0:	b480      	push	{r7}
 80032b2:	b083      	sub	sp, #12
 80032b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80032b6:	4b11      	ldr	r3, [pc, #68]	; (80032fc <vPortExitCritical+0x4c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d10a      	bne.n	80032d4 <vPortExitCritical+0x24>
        __asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	607b      	str	r3, [r7, #4]
    }
 80032d0:	bf00      	nop
 80032d2:	e7fe      	b.n	80032d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80032d4:	4b09      	ldr	r3, [pc, #36]	; (80032fc <vPortExitCritical+0x4c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3b01      	subs	r3, #1
 80032da:	4a08      	ldr	r2, [pc, #32]	; (80032fc <vPortExitCritical+0x4c>)
 80032dc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <vPortExitCritical+0x4c>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d105      	bne.n	80032f2 <vPortExitCritical+0x42>
 80032e6:	2300      	movs	r3, #0
 80032e8:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80032f0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	20000010 	.word	0x20000010

08003300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003300:	f3ef 8009 	mrs	r0, PSP
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <pxCurrentTCBConst>)
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003310:	6010      	str	r0, [r2, #0]
 8003312:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003316:	f04f 0050 	mov.w	r0, #80	; 0x50
 800331a:	f380 8811 	msr	BASEPRI, r0
 800331e:	f7ff fda3 	bl	8002e68 <vTaskSwitchContext>
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	f380 8811 	msr	BASEPRI, r0
 800332a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800332e:	6819      	ldr	r1, [r3, #0]
 8003330:	6808      	ldr	r0, [r1, #0]
 8003332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003336:	f380 8809 	msr	PSP, r0
 800333a:	f3bf 8f6f 	isb	sy
 800333e:	4770      	bx	lr

08003340 <pxCurrentTCBConst>:
 8003340:	200000a0 	.word	0x200000a0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003344:	bf00      	nop
 8003346:	bf00      	nop

08003348 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
        __asm volatile
 800334e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003352:	f383 8811 	msr	BASEPRI, r3
 8003356:	f3bf 8f6f 	isb	sy
 800335a:	f3bf 8f4f 	dsb	sy
 800335e:	607b      	str	r3, [r7, #4]
    }
 8003360:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003362:	f7ff fc8d 	bl	8002c80 <xTaskIncrementTick>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <SysTick_Handler+0x40>)
 800336e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	2300      	movs	r3, #0
 8003376:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	f383 8811 	msr	BASEPRI, r3
    }
 800337e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003380:	bf00      	nop
 8003382:	3708      	adds	r7, #8
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	e000ed04 	.word	0xe000ed04

0800338c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003390:	4b0a      	ldr	r3, [pc, #40]	; (80033bc <vPortSetupTimerInterrupt+0x30>)
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <vPortSetupTimerInterrupt+0x34>)
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800339c:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <vPortSetupTimerInterrupt+0x38>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <vPortSetupTimerInterrupt+0x3c>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	4a08      	ldr	r2, [pc, #32]	; (80033cc <vPortSetupTimerInterrupt+0x40>)
 80033aa:	3b01      	subs	r3, #1
 80033ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033ae:	4b03      	ldr	r3, [pc, #12]	; (80033bc <vPortSetupTimerInterrupt+0x30>)
 80033b0:	2207      	movs	r2, #7
 80033b2:	601a      	str	r2, [r3, #0]
}
 80033b4:	bf00      	nop
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bc80      	pop	{r7}
 80033ba:	4770      	bx	lr
 80033bc:	e000e010 	.word	0xe000e010
 80033c0:	e000e018 	.word	0xe000e018
 80033c4:	20000000 	.word	0x20000000
 80033c8:	10624dd3 	.word	0x10624dd3
 80033cc:	e000e014 	.word	0xe000e014

080033d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80033dc:	f7ff fb54 	bl	8002a88 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80033e0:	4b65      	ldr	r3, [pc, #404]	; (8003578 <pvPortMalloc+0x1a8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80033e8:	f000 f934 	bl	8003654 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80033ec:	4b63      	ldr	r3, [pc, #396]	; (800357c <pvPortMalloc+0x1ac>)
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4013      	ands	r3, r2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f040 80a7 	bne.w	8003548 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d02d      	beq.n	800345c <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8003400:	2208      	movs	r2, #8
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d227      	bcs.n	800345c <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800340c:	2208      	movs	r2, #8
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f003 0307 	and.w	r3, r3, #7
 800341a:	2b00      	cmp	r3, #0
 800341c:	d021      	beq.n	8003462 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f023 0307 	bic.w	r3, r3, #7
 8003424:	3308      	adds	r3, #8
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	429a      	cmp	r2, r3
 800342a:	d214      	bcs.n	8003456 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	3308      	adds	r3, #8
 8003434:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	2b00      	cmp	r3, #0
 800343e:	d010      	beq.n	8003462 <pvPortMalloc+0x92>
        __asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	617b      	str	r3, [r7, #20]
    }
 8003452:	bf00      	nop
 8003454:	e7fe      	b.n	8003454 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003456:	2300      	movs	r3, #0
 8003458:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800345a:	e002      	b.n	8003462 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800345c:	2300      	movs	r3, #0
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	e000      	b.n	8003464 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003462:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d06e      	beq.n	8003548 <pvPortMalloc+0x178>
 800346a:	4b45      	ldr	r3, [pc, #276]	; (8003580 <pvPortMalloc+0x1b0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	429a      	cmp	r2, r3
 8003472:	d869      	bhi.n	8003548 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003474:	4b43      	ldr	r3, [pc, #268]	; (8003584 <pvPortMalloc+0x1b4>)
 8003476:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003478:	4b42      	ldr	r3, [pc, #264]	; (8003584 <pvPortMalloc+0x1b4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800347e:	e004      	b.n	800348a <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	429a      	cmp	r2, r3
 8003492:	d903      	bls.n	800349c <pvPortMalloc+0xcc>
 8003494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f1      	bne.n	8003480 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800349c:	4b36      	ldr	r3, [pc, #216]	; (8003578 <pvPortMalloc+0x1a8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d050      	beq.n	8003548 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80034a6:	6a3b      	ldr	r3, [r7, #32]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2208      	movs	r2, #8
 80034ac:	4413      	add	r3, r2
 80034ae:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	6a3b      	ldr	r3, [r7, #32]
 80034b6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80034b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	1ad2      	subs	r2, r2, r3
 80034c0:	2308      	movs	r3, #8
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d91f      	bls.n	8003508 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80034c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4413      	add	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00a      	beq.n	80034f0 <pvPortMalloc+0x120>
        __asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	613b      	str	r3, [r7, #16]
    }
 80034ec:	bf00      	nop
 80034ee:	e7fe      	b.n	80034ee <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	1ad2      	subs	r2, r2, r3
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80034fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003502:	69b8      	ldr	r0, [r7, #24]
 8003504:	f000 f908 	bl	8003718 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <pvPortMalloc+0x1b0>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	4a1b      	ldr	r2, [pc, #108]	; (8003580 <pvPortMalloc+0x1b0>)
 8003514:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003516:	4b1a      	ldr	r3, [pc, #104]	; (8003580 <pvPortMalloc+0x1b0>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	4b1b      	ldr	r3, [pc, #108]	; (8003588 <pvPortMalloc+0x1b8>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d203      	bcs.n	800352a <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003522:	4b17      	ldr	r3, [pc, #92]	; (8003580 <pvPortMalloc+0x1b0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a18      	ldr	r2, [pc, #96]	; (8003588 <pvPortMalloc+0x1b8>)
 8003528:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	4b13      	ldr	r3, [pc, #76]	; (800357c <pvPortMalloc+0x1ac>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	431a      	orrs	r2, r3
 8003534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003536:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	2200      	movs	r2, #0
 800353c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800353e:	4b13      	ldr	r3, [pc, #76]	; (800358c <pvPortMalloc+0x1bc>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3301      	adds	r3, #1
 8003544:	4a11      	ldr	r2, [pc, #68]	; (800358c <pvPortMalloc+0x1bc>)
 8003546:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003548:	f7ff faac 	bl	8002aa4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	f003 0307 	and.w	r3, r3, #7
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <pvPortMalloc+0x19c>
        __asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	60fb      	str	r3, [r7, #12]
    }
 8003568:	bf00      	nop
 800356a:	e7fe      	b.n	800356a <pvPortMalloc+0x19a>
    return pvReturn;
 800356c:	69fb      	ldr	r3, [r7, #28]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3728      	adds	r7, #40	; 0x28
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000db4 	.word	0x20000db4
 800357c:	20000dc8 	.word	0x20000dc8
 8003580:	20000db8 	.word	0x20000db8
 8003584:	20000dac 	.word	0x20000dac
 8003588:	20000dbc 	.word	0x20000dbc
 800358c:	20000dc0 	.word	0x20000dc0

08003590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d04d      	beq.n	800363e <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80035a2:	2308      	movs	r3, #8
 80035a4:	425b      	negs	r3, r3
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	4413      	add	r3, r2
 80035aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	4b24      	ldr	r3, [pc, #144]	; (8003648 <vPortFree+0xb8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <vPortFree+0x44>
        __asm volatile
 80035be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c2:	f383 8811 	msr	BASEPRI, r3
 80035c6:	f3bf 8f6f 	isb	sy
 80035ca:	f3bf 8f4f 	dsb	sy
 80035ce:	60fb      	str	r3, [r7, #12]
    }
 80035d0:	bf00      	nop
 80035d2:	e7fe      	b.n	80035d2 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <vPortFree+0x62>
        __asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	60bb      	str	r3, [r7, #8]
    }
 80035ee:	bf00      	nop
 80035f0:	e7fe      	b.n	80035f0 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	4b14      	ldr	r3, [pc, #80]	; (8003648 <vPortFree+0xb8>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4013      	ands	r3, r2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d01e      	beq.n	800363e <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d11a      	bne.n	800363e <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <vPortFree+0xb8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	43db      	mvns	r3, r3
 8003612:	401a      	ands	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8003618:	f7ff fa36 	bl	8002a88 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	4b0a      	ldr	r3, [pc, #40]	; (800364c <vPortFree+0xbc>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4413      	add	r3, r2
 8003626:	4a09      	ldr	r2, [pc, #36]	; (800364c <vPortFree+0xbc>)
 8003628:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800362a:	6938      	ldr	r0, [r7, #16]
 800362c:	f000 f874 	bl	8003718 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003630:	4b07      	ldr	r3, [pc, #28]	; (8003650 <vPortFree+0xc0>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	4a06      	ldr	r2, [pc, #24]	; (8003650 <vPortFree+0xc0>)
 8003638:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800363a:	f7ff fa33 	bl	8002aa4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800363e:	bf00      	nop
 8003640:	3718      	adds	r7, #24
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000dc8 	.word	0x20000dc8
 800364c:	20000db8 	.word	0x20000db8
 8003650:	20000dc4 	.word	0x20000dc4

08003654 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003654:	b480      	push	{r7}
 8003656:	b085      	sub	sp, #20
 8003658:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800365a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800365e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <prvHeapInit+0xac>)
 8003662:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0307 	and.w	r3, r3, #7
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00c      	beq.n	8003688 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	3307      	adds	r3, #7
 8003672:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0307 	bic.w	r3, r3, #7
 800367a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	4a1f      	ldr	r2, [pc, #124]	; (8003700 <prvHeapInit+0xac>)
 8003684:	4413      	add	r3, r2
 8003686:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800368c:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <prvHeapInit+0xb0>)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003692:	4b1c      	ldr	r3, [pc, #112]	; (8003704 <prvHeapInit+0xb0>)
 8003694:	2200      	movs	r2, #0
 8003696:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	4413      	add	r3, r2
 800369e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80036a0:	2208      	movs	r2, #8
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f023 0307 	bic.w	r3, r3, #7
 80036ae:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a15      	ldr	r2, [pc, #84]	; (8003708 <prvHeapInit+0xb4>)
 80036b4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80036b6:	4b14      	ldr	r3, [pc, #80]	; (8003708 <prvHeapInit+0xb4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2200      	movs	r2, #0
 80036bc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80036be:	4b12      	ldr	r3, [pc, #72]	; (8003708 <prvHeapInit+0xb4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	1ad2      	subs	r2, r2, r3
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <prvHeapInit+0xb4>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	4a0a      	ldr	r2, [pc, #40]	; (800370c <prvHeapInit+0xb8>)
 80036e2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	4a09      	ldr	r2, [pc, #36]	; (8003710 <prvHeapInit+0xbc>)
 80036ea:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <prvHeapInit+0xc0>)
 80036ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80036f2:	601a      	str	r2, [r3, #0]
}
 80036f4:	bf00      	nop
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	200001ac 	.word	0x200001ac
 8003704:	20000dac 	.word	0x20000dac
 8003708:	20000db4 	.word	0x20000db4
 800370c:	20000dbc 	.word	0x20000dbc
 8003710:	20000db8 	.word	0x20000db8
 8003714:	20000dc8 	.word	0x20000dc8

08003718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003720:	4b27      	ldr	r3, [pc, #156]	; (80037c0 <prvInsertBlockIntoFreeList+0xa8>)
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	e002      	b.n	800372c <prvInsertBlockIntoFreeList+0x14>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	429a      	cmp	r2, r3
 8003734:	d8f7      	bhi.n	8003726 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	4413      	add	r3, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	d108      	bne.n	800375a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	441a      	add	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	441a      	add	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	429a      	cmp	r2, r3
 800376c:	d118      	bne.n	80037a0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <prvInsertBlockIntoFreeList+0xac>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d00d      	beq.n	8003796 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	441a      	add	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	601a      	str	r2, [r3, #0]
 8003794:	e008      	b.n	80037a8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003796:	4b0b      	ldr	r3, [pc, #44]	; (80037c4 <prvInsertBlockIntoFreeList+0xac>)
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	601a      	str	r2, [r3, #0]
 800379e:	e003      	b.n	80037a8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d002      	beq.n	80037b6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037b6:	bf00      	nop
 80037b8:	3714      	adds	r7, #20
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	20000dac 	.word	0x20000dac
 80037c4:	20000db4 	.word	0x20000db4

080037c8 <__libc_init_array>:
 80037c8:	b570      	push	{r4, r5, r6, lr}
 80037ca:	2600      	movs	r6, #0
 80037cc:	4d0c      	ldr	r5, [pc, #48]	; (8003800 <__libc_init_array+0x38>)
 80037ce:	4c0d      	ldr	r4, [pc, #52]	; (8003804 <__libc_init_array+0x3c>)
 80037d0:	1b64      	subs	r4, r4, r5
 80037d2:	10a4      	asrs	r4, r4, #2
 80037d4:	42a6      	cmp	r6, r4
 80037d6:	d109      	bne.n	80037ec <__libc_init_array+0x24>
 80037d8:	f000 fcf2 	bl	80041c0 <_init>
 80037dc:	2600      	movs	r6, #0
 80037de:	4d0a      	ldr	r5, [pc, #40]	; (8003808 <__libc_init_array+0x40>)
 80037e0:	4c0a      	ldr	r4, [pc, #40]	; (800380c <__libc_init_array+0x44>)
 80037e2:	1b64      	subs	r4, r4, r5
 80037e4:	10a4      	asrs	r4, r4, #2
 80037e6:	42a6      	cmp	r6, r4
 80037e8:	d105      	bne.n	80037f6 <__libc_init_array+0x2e>
 80037ea:	bd70      	pop	{r4, r5, r6, pc}
 80037ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f0:	4798      	blx	r3
 80037f2:	3601      	adds	r6, #1
 80037f4:	e7ee      	b.n	80037d4 <__libc_init_array+0xc>
 80037f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fa:	4798      	blx	r3
 80037fc:	3601      	adds	r6, #1
 80037fe:	e7f2      	b.n	80037e6 <__libc_init_array+0x1e>
 8003800:	080042dc 	.word	0x080042dc
 8003804:	080042dc 	.word	0x080042dc
 8003808:	080042dc 	.word	0x080042dc
 800380c:	080042e0 	.word	0x080042e0

08003810 <memset>:
 8003810:	4603      	mov	r3, r0
 8003812:	4402      	add	r2, r0
 8003814:	4293      	cmp	r3, r2
 8003816:	d100      	bne.n	800381a <memset+0xa>
 8003818:	4770      	bx	lr
 800381a:	f803 1b01 	strb.w	r1, [r3], #1
 800381e:	e7f9      	b.n	8003814 <memset+0x4>

08003820 <_puts_r>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	460e      	mov	r6, r1
 8003824:	4605      	mov	r5, r0
 8003826:	b118      	cbz	r0, 8003830 <_puts_r+0x10>
 8003828:	6983      	ldr	r3, [r0, #24]
 800382a:	b90b      	cbnz	r3, 8003830 <_puts_r+0x10>
 800382c:	f000 fa48 	bl	8003cc0 <__sinit>
 8003830:	69ab      	ldr	r3, [r5, #24]
 8003832:	68ac      	ldr	r4, [r5, #8]
 8003834:	b913      	cbnz	r3, 800383c <_puts_r+0x1c>
 8003836:	4628      	mov	r0, r5
 8003838:	f000 fa42 	bl	8003cc0 <__sinit>
 800383c:	4b2c      	ldr	r3, [pc, #176]	; (80038f0 <_puts_r+0xd0>)
 800383e:	429c      	cmp	r4, r3
 8003840:	d120      	bne.n	8003884 <_puts_r+0x64>
 8003842:	686c      	ldr	r4, [r5, #4]
 8003844:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003846:	07db      	lsls	r3, r3, #31
 8003848:	d405      	bmi.n	8003856 <_puts_r+0x36>
 800384a:	89a3      	ldrh	r3, [r4, #12]
 800384c:	0598      	lsls	r0, r3, #22
 800384e:	d402      	bmi.n	8003856 <_puts_r+0x36>
 8003850:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003852:	f000 fad3 	bl	8003dfc <__retarget_lock_acquire_recursive>
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	0719      	lsls	r1, r3, #28
 800385a:	d51d      	bpl.n	8003898 <_puts_r+0x78>
 800385c:	6923      	ldr	r3, [r4, #16]
 800385e:	b1db      	cbz	r3, 8003898 <_puts_r+0x78>
 8003860:	3e01      	subs	r6, #1
 8003862:	68a3      	ldr	r3, [r4, #8]
 8003864:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003868:	3b01      	subs	r3, #1
 800386a:	60a3      	str	r3, [r4, #8]
 800386c:	bb39      	cbnz	r1, 80038be <_puts_r+0x9e>
 800386e:	2b00      	cmp	r3, #0
 8003870:	da38      	bge.n	80038e4 <_puts_r+0xc4>
 8003872:	4622      	mov	r2, r4
 8003874:	210a      	movs	r1, #10
 8003876:	4628      	mov	r0, r5
 8003878:	f000 f848 	bl	800390c <__swbuf_r>
 800387c:	3001      	adds	r0, #1
 800387e:	d011      	beq.n	80038a4 <_puts_r+0x84>
 8003880:	250a      	movs	r5, #10
 8003882:	e011      	b.n	80038a8 <_puts_r+0x88>
 8003884:	4b1b      	ldr	r3, [pc, #108]	; (80038f4 <_puts_r+0xd4>)
 8003886:	429c      	cmp	r4, r3
 8003888:	d101      	bne.n	800388e <_puts_r+0x6e>
 800388a:	68ac      	ldr	r4, [r5, #8]
 800388c:	e7da      	b.n	8003844 <_puts_r+0x24>
 800388e:	4b1a      	ldr	r3, [pc, #104]	; (80038f8 <_puts_r+0xd8>)
 8003890:	429c      	cmp	r4, r3
 8003892:	bf08      	it	eq
 8003894:	68ec      	ldreq	r4, [r5, #12]
 8003896:	e7d5      	b.n	8003844 <_puts_r+0x24>
 8003898:	4621      	mov	r1, r4
 800389a:	4628      	mov	r0, r5
 800389c:	f000 f888 	bl	80039b0 <__swsetup_r>
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d0dd      	beq.n	8003860 <_puts_r+0x40>
 80038a4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80038a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038aa:	07da      	lsls	r2, r3, #31
 80038ac:	d405      	bmi.n	80038ba <_puts_r+0x9a>
 80038ae:	89a3      	ldrh	r3, [r4, #12]
 80038b0:	059b      	lsls	r3, r3, #22
 80038b2:	d402      	bmi.n	80038ba <_puts_r+0x9a>
 80038b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038b6:	f000 faa2 	bl	8003dfe <__retarget_lock_release_recursive>
 80038ba:	4628      	mov	r0, r5
 80038bc:	bd70      	pop	{r4, r5, r6, pc}
 80038be:	2b00      	cmp	r3, #0
 80038c0:	da04      	bge.n	80038cc <_puts_r+0xac>
 80038c2:	69a2      	ldr	r2, [r4, #24]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	dc06      	bgt.n	80038d6 <_puts_r+0xb6>
 80038c8:	290a      	cmp	r1, #10
 80038ca:	d004      	beq.n	80038d6 <_puts_r+0xb6>
 80038cc:	6823      	ldr	r3, [r4, #0]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	6022      	str	r2, [r4, #0]
 80038d2:	7019      	strb	r1, [r3, #0]
 80038d4:	e7c5      	b.n	8003862 <_puts_r+0x42>
 80038d6:	4622      	mov	r2, r4
 80038d8:	4628      	mov	r0, r5
 80038da:	f000 f817 	bl	800390c <__swbuf_r>
 80038de:	3001      	adds	r0, #1
 80038e0:	d1bf      	bne.n	8003862 <_puts_r+0x42>
 80038e2:	e7df      	b.n	80038a4 <_puts_r+0x84>
 80038e4:	250a      	movs	r5, #10
 80038e6:	6823      	ldr	r3, [r4, #0]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	6022      	str	r2, [r4, #0]
 80038ec:	701d      	strb	r5, [r3, #0]
 80038ee:	e7db      	b.n	80038a8 <_puts_r+0x88>
 80038f0:	0800429c 	.word	0x0800429c
 80038f4:	080042bc 	.word	0x080042bc
 80038f8:	0800427c 	.word	0x0800427c

080038fc <puts>:
 80038fc:	4b02      	ldr	r3, [pc, #8]	; (8003908 <puts+0xc>)
 80038fe:	4601      	mov	r1, r0
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	f7ff bf8d 	b.w	8003820 <_puts_r>
 8003906:	bf00      	nop
 8003908:	20000014 	.word	0x20000014

0800390c <__swbuf_r>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	460e      	mov	r6, r1
 8003910:	4614      	mov	r4, r2
 8003912:	4605      	mov	r5, r0
 8003914:	b118      	cbz	r0, 800391e <__swbuf_r+0x12>
 8003916:	6983      	ldr	r3, [r0, #24]
 8003918:	b90b      	cbnz	r3, 800391e <__swbuf_r+0x12>
 800391a:	f000 f9d1 	bl	8003cc0 <__sinit>
 800391e:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <__swbuf_r+0x98>)
 8003920:	429c      	cmp	r4, r3
 8003922:	d12b      	bne.n	800397c <__swbuf_r+0x70>
 8003924:	686c      	ldr	r4, [r5, #4]
 8003926:	69a3      	ldr	r3, [r4, #24]
 8003928:	60a3      	str	r3, [r4, #8]
 800392a:	89a3      	ldrh	r3, [r4, #12]
 800392c:	071a      	lsls	r2, r3, #28
 800392e:	d52f      	bpl.n	8003990 <__swbuf_r+0x84>
 8003930:	6923      	ldr	r3, [r4, #16]
 8003932:	b36b      	cbz	r3, 8003990 <__swbuf_r+0x84>
 8003934:	6923      	ldr	r3, [r4, #16]
 8003936:	6820      	ldr	r0, [r4, #0]
 8003938:	b2f6      	uxtb	r6, r6
 800393a:	1ac0      	subs	r0, r0, r3
 800393c:	6963      	ldr	r3, [r4, #20]
 800393e:	4637      	mov	r7, r6
 8003940:	4283      	cmp	r3, r0
 8003942:	dc04      	bgt.n	800394e <__swbuf_r+0x42>
 8003944:	4621      	mov	r1, r4
 8003946:	4628      	mov	r0, r5
 8003948:	f000 f926 	bl	8003b98 <_fflush_r>
 800394c:	bb30      	cbnz	r0, 800399c <__swbuf_r+0x90>
 800394e:	68a3      	ldr	r3, [r4, #8]
 8003950:	3001      	adds	r0, #1
 8003952:	3b01      	subs	r3, #1
 8003954:	60a3      	str	r3, [r4, #8]
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	6022      	str	r2, [r4, #0]
 800395c:	701e      	strb	r6, [r3, #0]
 800395e:	6963      	ldr	r3, [r4, #20]
 8003960:	4283      	cmp	r3, r0
 8003962:	d004      	beq.n	800396e <__swbuf_r+0x62>
 8003964:	89a3      	ldrh	r3, [r4, #12]
 8003966:	07db      	lsls	r3, r3, #31
 8003968:	d506      	bpl.n	8003978 <__swbuf_r+0x6c>
 800396a:	2e0a      	cmp	r6, #10
 800396c:	d104      	bne.n	8003978 <__swbuf_r+0x6c>
 800396e:	4621      	mov	r1, r4
 8003970:	4628      	mov	r0, r5
 8003972:	f000 f911 	bl	8003b98 <_fflush_r>
 8003976:	b988      	cbnz	r0, 800399c <__swbuf_r+0x90>
 8003978:	4638      	mov	r0, r7
 800397a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <__swbuf_r+0x9c>)
 800397e:	429c      	cmp	r4, r3
 8003980:	d101      	bne.n	8003986 <__swbuf_r+0x7a>
 8003982:	68ac      	ldr	r4, [r5, #8]
 8003984:	e7cf      	b.n	8003926 <__swbuf_r+0x1a>
 8003986:	4b09      	ldr	r3, [pc, #36]	; (80039ac <__swbuf_r+0xa0>)
 8003988:	429c      	cmp	r4, r3
 800398a:	bf08      	it	eq
 800398c:	68ec      	ldreq	r4, [r5, #12]
 800398e:	e7ca      	b.n	8003926 <__swbuf_r+0x1a>
 8003990:	4621      	mov	r1, r4
 8003992:	4628      	mov	r0, r5
 8003994:	f000 f80c 	bl	80039b0 <__swsetup_r>
 8003998:	2800      	cmp	r0, #0
 800399a:	d0cb      	beq.n	8003934 <__swbuf_r+0x28>
 800399c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80039a0:	e7ea      	b.n	8003978 <__swbuf_r+0x6c>
 80039a2:	bf00      	nop
 80039a4:	0800429c 	.word	0x0800429c
 80039a8:	080042bc 	.word	0x080042bc
 80039ac:	0800427c 	.word	0x0800427c

080039b0 <__swsetup_r>:
 80039b0:	4b32      	ldr	r3, [pc, #200]	; (8003a7c <__swsetup_r+0xcc>)
 80039b2:	b570      	push	{r4, r5, r6, lr}
 80039b4:	681d      	ldr	r5, [r3, #0]
 80039b6:	4606      	mov	r6, r0
 80039b8:	460c      	mov	r4, r1
 80039ba:	b125      	cbz	r5, 80039c6 <__swsetup_r+0x16>
 80039bc:	69ab      	ldr	r3, [r5, #24]
 80039be:	b913      	cbnz	r3, 80039c6 <__swsetup_r+0x16>
 80039c0:	4628      	mov	r0, r5
 80039c2:	f000 f97d 	bl	8003cc0 <__sinit>
 80039c6:	4b2e      	ldr	r3, [pc, #184]	; (8003a80 <__swsetup_r+0xd0>)
 80039c8:	429c      	cmp	r4, r3
 80039ca:	d10f      	bne.n	80039ec <__swsetup_r+0x3c>
 80039cc:	686c      	ldr	r4, [r5, #4]
 80039ce:	89a3      	ldrh	r3, [r4, #12]
 80039d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039d4:	0719      	lsls	r1, r3, #28
 80039d6:	d42c      	bmi.n	8003a32 <__swsetup_r+0x82>
 80039d8:	06dd      	lsls	r5, r3, #27
 80039da:	d411      	bmi.n	8003a00 <__swsetup_r+0x50>
 80039dc:	2309      	movs	r3, #9
 80039de:	6033      	str	r3, [r6, #0]
 80039e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80039e8:	81a3      	strh	r3, [r4, #12]
 80039ea:	e03e      	b.n	8003a6a <__swsetup_r+0xba>
 80039ec:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <__swsetup_r+0xd4>)
 80039ee:	429c      	cmp	r4, r3
 80039f0:	d101      	bne.n	80039f6 <__swsetup_r+0x46>
 80039f2:	68ac      	ldr	r4, [r5, #8]
 80039f4:	e7eb      	b.n	80039ce <__swsetup_r+0x1e>
 80039f6:	4b24      	ldr	r3, [pc, #144]	; (8003a88 <__swsetup_r+0xd8>)
 80039f8:	429c      	cmp	r4, r3
 80039fa:	bf08      	it	eq
 80039fc:	68ec      	ldreq	r4, [r5, #12]
 80039fe:	e7e6      	b.n	80039ce <__swsetup_r+0x1e>
 8003a00:	0758      	lsls	r0, r3, #29
 8003a02:	d512      	bpl.n	8003a2a <__swsetup_r+0x7a>
 8003a04:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a06:	b141      	cbz	r1, 8003a1a <__swsetup_r+0x6a>
 8003a08:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a0c:	4299      	cmp	r1, r3
 8003a0e:	d002      	beq.n	8003a16 <__swsetup_r+0x66>
 8003a10:	4630      	mov	r0, r6
 8003a12:	f000 fa59 	bl	8003ec8 <_free_r>
 8003a16:	2300      	movs	r3, #0
 8003a18:	6363      	str	r3, [r4, #52]	; 0x34
 8003a1a:	89a3      	ldrh	r3, [r4, #12]
 8003a1c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a20:	81a3      	strh	r3, [r4, #12]
 8003a22:	2300      	movs	r3, #0
 8003a24:	6063      	str	r3, [r4, #4]
 8003a26:	6923      	ldr	r3, [r4, #16]
 8003a28:	6023      	str	r3, [r4, #0]
 8003a2a:	89a3      	ldrh	r3, [r4, #12]
 8003a2c:	f043 0308 	orr.w	r3, r3, #8
 8003a30:	81a3      	strh	r3, [r4, #12]
 8003a32:	6923      	ldr	r3, [r4, #16]
 8003a34:	b94b      	cbnz	r3, 8003a4a <__swsetup_r+0x9a>
 8003a36:	89a3      	ldrh	r3, [r4, #12]
 8003a38:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a40:	d003      	beq.n	8003a4a <__swsetup_r+0x9a>
 8003a42:	4621      	mov	r1, r4
 8003a44:	4630      	mov	r0, r6
 8003a46:	f000 f9ff 	bl	8003e48 <__smakebuf_r>
 8003a4a:	89a0      	ldrh	r0, [r4, #12]
 8003a4c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a50:	f010 0301 	ands.w	r3, r0, #1
 8003a54:	d00a      	beq.n	8003a6c <__swsetup_r+0xbc>
 8003a56:	2300      	movs	r3, #0
 8003a58:	60a3      	str	r3, [r4, #8]
 8003a5a:	6963      	ldr	r3, [r4, #20]
 8003a5c:	425b      	negs	r3, r3
 8003a5e:	61a3      	str	r3, [r4, #24]
 8003a60:	6923      	ldr	r3, [r4, #16]
 8003a62:	b943      	cbnz	r3, 8003a76 <__swsetup_r+0xc6>
 8003a64:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a68:	d1ba      	bne.n	80039e0 <__swsetup_r+0x30>
 8003a6a:	bd70      	pop	{r4, r5, r6, pc}
 8003a6c:	0781      	lsls	r1, r0, #30
 8003a6e:	bf58      	it	pl
 8003a70:	6963      	ldrpl	r3, [r4, #20]
 8003a72:	60a3      	str	r3, [r4, #8]
 8003a74:	e7f4      	b.n	8003a60 <__swsetup_r+0xb0>
 8003a76:	2000      	movs	r0, #0
 8003a78:	e7f7      	b.n	8003a6a <__swsetup_r+0xba>
 8003a7a:	bf00      	nop
 8003a7c:	20000014 	.word	0x20000014
 8003a80:	0800429c 	.word	0x0800429c
 8003a84:	080042bc 	.word	0x080042bc
 8003a88:	0800427c 	.word	0x0800427c

08003a8c <__sflush_r>:
 8003a8c:	898a      	ldrh	r2, [r1, #12]
 8003a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a92:	4605      	mov	r5, r0
 8003a94:	0710      	lsls	r0, r2, #28
 8003a96:	460c      	mov	r4, r1
 8003a98:	d458      	bmi.n	8003b4c <__sflush_r+0xc0>
 8003a9a:	684b      	ldr	r3, [r1, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	dc05      	bgt.n	8003aac <__sflush_r+0x20>
 8003aa0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	dc02      	bgt.n	8003aac <__sflush_r+0x20>
 8003aa6:	2000      	movs	r0, #0
 8003aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003aac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003aae:	2e00      	cmp	r6, #0
 8003ab0:	d0f9      	beq.n	8003aa6 <__sflush_r+0x1a>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003ab8:	682f      	ldr	r7, [r5, #0]
 8003aba:	602b      	str	r3, [r5, #0]
 8003abc:	d032      	beq.n	8003b24 <__sflush_r+0x98>
 8003abe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	075a      	lsls	r2, r3, #29
 8003ac4:	d505      	bpl.n	8003ad2 <__sflush_r+0x46>
 8003ac6:	6863      	ldr	r3, [r4, #4]
 8003ac8:	1ac0      	subs	r0, r0, r3
 8003aca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003acc:	b10b      	cbz	r3, 8003ad2 <__sflush_r+0x46>
 8003ace:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003ad0:	1ac0      	subs	r0, r0, r3
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ad8:	4628      	mov	r0, r5
 8003ada:	6a21      	ldr	r1, [r4, #32]
 8003adc:	47b0      	blx	r6
 8003ade:	1c43      	adds	r3, r0, #1
 8003ae0:	89a3      	ldrh	r3, [r4, #12]
 8003ae2:	d106      	bne.n	8003af2 <__sflush_r+0x66>
 8003ae4:	6829      	ldr	r1, [r5, #0]
 8003ae6:	291d      	cmp	r1, #29
 8003ae8:	d82c      	bhi.n	8003b44 <__sflush_r+0xb8>
 8003aea:	4a2a      	ldr	r2, [pc, #168]	; (8003b94 <__sflush_r+0x108>)
 8003aec:	40ca      	lsrs	r2, r1
 8003aee:	07d6      	lsls	r6, r2, #31
 8003af0:	d528      	bpl.n	8003b44 <__sflush_r+0xb8>
 8003af2:	2200      	movs	r2, #0
 8003af4:	6062      	str	r2, [r4, #4]
 8003af6:	6922      	ldr	r2, [r4, #16]
 8003af8:	04d9      	lsls	r1, r3, #19
 8003afa:	6022      	str	r2, [r4, #0]
 8003afc:	d504      	bpl.n	8003b08 <__sflush_r+0x7c>
 8003afe:	1c42      	adds	r2, r0, #1
 8003b00:	d101      	bne.n	8003b06 <__sflush_r+0x7a>
 8003b02:	682b      	ldr	r3, [r5, #0]
 8003b04:	b903      	cbnz	r3, 8003b08 <__sflush_r+0x7c>
 8003b06:	6560      	str	r0, [r4, #84]	; 0x54
 8003b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b0a:	602f      	str	r7, [r5, #0]
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	d0ca      	beq.n	8003aa6 <__sflush_r+0x1a>
 8003b10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b14:	4299      	cmp	r1, r3
 8003b16:	d002      	beq.n	8003b1e <__sflush_r+0x92>
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f000 f9d5 	bl	8003ec8 <_free_r>
 8003b1e:	2000      	movs	r0, #0
 8003b20:	6360      	str	r0, [r4, #52]	; 0x34
 8003b22:	e7c1      	b.n	8003aa8 <__sflush_r+0x1c>
 8003b24:	6a21      	ldr	r1, [r4, #32]
 8003b26:	2301      	movs	r3, #1
 8003b28:	4628      	mov	r0, r5
 8003b2a:	47b0      	blx	r6
 8003b2c:	1c41      	adds	r1, r0, #1
 8003b2e:	d1c7      	bne.n	8003ac0 <__sflush_r+0x34>
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d0c4      	beq.n	8003ac0 <__sflush_r+0x34>
 8003b36:	2b1d      	cmp	r3, #29
 8003b38:	d001      	beq.n	8003b3e <__sflush_r+0xb2>
 8003b3a:	2b16      	cmp	r3, #22
 8003b3c:	d101      	bne.n	8003b42 <__sflush_r+0xb6>
 8003b3e:	602f      	str	r7, [r5, #0]
 8003b40:	e7b1      	b.n	8003aa6 <__sflush_r+0x1a>
 8003b42:	89a3      	ldrh	r3, [r4, #12]
 8003b44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b48:	81a3      	strh	r3, [r4, #12]
 8003b4a:	e7ad      	b.n	8003aa8 <__sflush_r+0x1c>
 8003b4c:	690f      	ldr	r7, [r1, #16]
 8003b4e:	2f00      	cmp	r7, #0
 8003b50:	d0a9      	beq.n	8003aa6 <__sflush_r+0x1a>
 8003b52:	0793      	lsls	r3, r2, #30
 8003b54:	bf18      	it	ne
 8003b56:	2300      	movne	r3, #0
 8003b58:	680e      	ldr	r6, [r1, #0]
 8003b5a:	bf08      	it	eq
 8003b5c:	694b      	ldreq	r3, [r1, #20]
 8003b5e:	eba6 0807 	sub.w	r8, r6, r7
 8003b62:	600f      	str	r7, [r1, #0]
 8003b64:	608b      	str	r3, [r1, #8]
 8003b66:	f1b8 0f00 	cmp.w	r8, #0
 8003b6a:	dd9c      	ble.n	8003aa6 <__sflush_r+0x1a>
 8003b6c:	4643      	mov	r3, r8
 8003b6e:	463a      	mov	r2, r7
 8003b70:	4628      	mov	r0, r5
 8003b72:	6a21      	ldr	r1, [r4, #32]
 8003b74:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003b76:	47b0      	blx	r6
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	dc06      	bgt.n	8003b8a <__sflush_r+0xfe>
 8003b7c:	89a3      	ldrh	r3, [r4, #12]
 8003b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b86:	81a3      	strh	r3, [r4, #12]
 8003b88:	e78e      	b.n	8003aa8 <__sflush_r+0x1c>
 8003b8a:	4407      	add	r7, r0
 8003b8c:	eba8 0800 	sub.w	r8, r8, r0
 8003b90:	e7e9      	b.n	8003b66 <__sflush_r+0xda>
 8003b92:	bf00      	nop
 8003b94:	20400001 	.word	0x20400001

08003b98 <_fflush_r>:
 8003b98:	b538      	push	{r3, r4, r5, lr}
 8003b9a:	690b      	ldr	r3, [r1, #16]
 8003b9c:	4605      	mov	r5, r0
 8003b9e:	460c      	mov	r4, r1
 8003ba0:	b913      	cbnz	r3, 8003ba8 <_fflush_r+0x10>
 8003ba2:	2500      	movs	r5, #0
 8003ba4:	4628      	mov	r0, r5
 8003ba6:	bd38      	pop	{r3, r4, r5, pc}
 8003ba8:	b118      	cbz	r0, 8003bb2 <_fflush_r+0x1a>
 8003baa:	6983      	ldr	r3, [r0, #24]
 8003bac:	b90b      	cbnz	r3, 8003bb2 <_fflush_r+0x1a>
 8003bae:	f000 f887 	bl	8003cc0 <__sinit>
 8003bb2:	4b14      	ldr	r3, [pc, #80]	; (8003c04 <_fflush_r+0x6c>)
 8003bb4:	429c      	cmp	r4, r3
 8003bb6:	d11b      	bne.n	8003bf0 <_fflush_r+0x58>
 8003bb8:	686c      	ldr	r4, [r5, #4]
 8003bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0ef      	beq.n	8003ba2 <_fflush_r+0xa>
 8003bc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003bc4:	07d0      	lsls	r0, r2, #31
 8003bc6:	d404      	bmi.n	8003bd2 <_fflush_r+0x3a>
 8003bc8:	0599      	lsls	r1, r3, #22
 8003bca:	d402      	bmi.n	8003bd2 <_fflush_r+0x3a>
 8003bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bce:	f000 f915 	bl	8003dfc <__retarget_lock_acquire_recursive>
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	4621      	mov	r1, r4
 8003bd6:	f7ff ff59 	bl	8003a8c <__sflush_r>
 8003bda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003bdc:	4605      	mov	r5, r0
 8003bde:	07da      	lsls	r2, r3, #31
 8003be0:	d4e0      	bmi.n	8003ba4 <_fflush_r+0xc>
 8003be2:	89a3      	ldrh	r3, [r4, #12]
 8003be4:	059b      	lsls	r3, r3, #22
 8003be6:	d4dd      	bmi.n	8003ba4 <_fflush_r+0xc>
 8003be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bea:	f000 f908 	bl	8003dfe <__retarget_lock_release_recursive>
 8003bee:	e7d9      	b.n	8003ba4 <_fflush_r+0xc>
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <_fflush_r+0x70>)
 8003bf2:	429c      	cmp	r4, r3
 8003bf4:	d101      	bne.n	8003bfa <_fflush_r+0x62>
 8003bf6:	68ac      	ldr	r4, [r5, #8]
 8003bf8:	e7df      	b.n	8003bba <_fflush_r+0x22>
 8003bfa:	4b04      	ldr	r3, [pc, #16]	; (8003c0c <_fflush_r+0x74>)
 8003bfc:	429c      	cmp	r4, r3
 8003bfe:	bf08      	it	eq
 8003c00:	68ec      	ldreq	r4, [r5, #12]
 8003c02:	e7da      	b.n	8003bba <_fflush_r+0x22>
 8003c04:	0800429c 	.word	0x0800429c
 8003c08:	080042bc 	.word	0x080042bc
 8003c0c:	0800427c 	.word	0x0800427c

08003c10 <std>:
 8003c10:	2300      	movs	r3, #0
 8003c12:	b510      	push	{r4, lr}
 8003c14:	4604      	mov	r4, r0
 8003c16:	e9c0 3300 	strd	r3, r3, [r0]
 8003c1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c1e:	6083      	str	r3, [r0, #8]
 8003c20:	8181      	strh	r1, [r0, #12]
 8003c22:	6643      	str	r3, [r0, #100]	; 0x64
 8003c24:	81c2      	strh	r2, [r0, #14]
 8003c26:	6183      	str	r3, [r0, #24]
 8003c28:	4619      	mov	r1, r3
 8003c2a:	2208      	movs	r2, #8
 8003c2c:	305c      	adds	r0, #92	; 0x5c
 8003c2e:	f7ff fdef 	bl	8003810 <memset>
 8003c32:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <std+0x38>)
 8003c34:	6224      	str	r4, [r4, #32]
 8003c36:	6263      	str	r3, [r4, #36]	; 0x24
 8003c38:	4b04      	ldr	r3, [pc, #16]	; (8003c4c <std+0x3c>)
 8003c3a:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c3c:	4b04      	ldr	r3, [pc, #16]	; (8003c50 <std+0x40>)
 8003c3e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c40:	4b04      	ldr	r3, [pc, #16]	; (8003c54 <std+0x44>)
 8003c42:	6323      	str	r3, [r4, #48]	; 0x30
 8003c44:	bd10      	pop	{r4, pc}
 8003c46:	bf00      	nop
 8003c48:	08004035 	.word	0x08004035
 8003c4c:	08004057 	.word	0x08004057
 8003c50:	0800408f 	.word	0x0800408f
 8003c54:	080040b3 	.word	0x080040b3

08003c58 <_cleanup_r>:
 8003c58:	4901      	ldr	r1, [pc, #4]	; (8003c60 <_cleanup_r+0x8>)
 8003c5a:	f000 b8af 	b.w	8003dbc <_fwalk_reent>
 8003c5e:	bf00      	nop
 8003c60:	08003b99 	.word	0x08003b99

08003c64 <__sfmoreglue>:
 8003c64:	b570      	push	{r4, r5, r6, lr}
 8003c66:	2568      	movs	r5, #104	; 0x68
 8003c68:	1e4a      	subs	r2, r1, #1
 8003c6a:	4355      	muls	r5, r2
 8003c6c:	460e      	mov	r6, r1
 8003c6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003c72:	f000 f975 	bl	8003f60 <_malloc_r>
 8003c76:	4604      	mov	r4, r0
 8003c78:	b140      	cbz	r0, 8003c8c <__sfmoreglue+0x28>
 8003c7a:	2100      	movs	r1, #0
 8003c7c:	e9c0 1600 	strd	r1, r6, [r0]
 8003c80:	300c      	adds	r0, #12
 8003c82:	60a0      	str	r0, [r4, #8]
 8003c84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003c88:	f7ff fdc2 	bl	8003810 <memset>
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	bd70      	pop	{r4, r5, r6, pc}

08003c90 <__sfp_lock_acquire>:
 8003c90:	4801      	ldr	r0, [pc, #4]	; (8003c98 <__sfp_lock_acquire+0x8>)
 8003c92:	f000 b8b3 	b.w	8003dfc <__retarget_lock_acquire_recursive>
 8003c96:	bf00      	nop
 8003c98:	20000e88 	.word	0x20000e88

08003c9c <__sfp_lock_release>:
 8003c9c:	4801      	ldr	r0, [pc, #4]	; (8003ca4 <__sfp_lock_release+0x8>)
 8003c9e:	f000 b8ae 	b.w	8003dfe <__retarget_lock_release_recursive>
 8003ca2:	bf00      	nop
 8003ca4:	20000e88 	.word	0x20000e88

08003ca8 <__sinit_lock_acquire>:
 8003ca8:	4801      	ldr	r0, [pc, #4]	; (8003cb0 <__sinit_lock_acquire+0x8>)
 8003caa:	f000 b8a7 	b.w	8003dfc <__retarget_lock_acquire_recursive>
 8003cae:	bf00      	nop
 8003cb0:	20000e83 	.word	0x20000e83

08003cb4 <__sinit_lock_release>:
 8003cb4:	4801      	ldr	r0, [pc, #4]	; (8003cbc <__sinit_lock_release+0x8>)
 8003cb6:	f000 b8a2 	b.w	8003dfe <__retarget_lock_release_recursive>
 8003cba:	bf00      	nop
 8003cbc:	20000e83 	.word	0x20000e83

08003cc0 <__sinit>:
 8003cc0:	b510      	push	{r4, lr}
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	f7ff fff0 	bl	8003ca8 <__sinit_lock_acquire>
 8003cc8:	69a3      	ldr	r3, [r4, #24]
 8003cca:	b11b      	cbz	r3, 8003cd4 <__sinit+0x14>
 8003ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cd0:	f7ff bff0 	b.w	8003cb4 <__sinit_lock_release>
 8003cd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003cd8:	6523      	str	r3, [r4, #80]	; 0x50
 8003cda:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <__sinit+0x68>)
 8003cdc:	4a13      	ldr	r2, [pc, #76]	; (8003d2c <__sinit+0x6c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	62a2      	str	r2, [r4, #40]	; 0x28
 8003ce2:	42a3      	cmp	r3, r4
 8003ce4:	bf08      	it	eq
 8003ce6:	2301      	moveq	r3, #1
 8003ce8:	4620      	mov	r0, r4
 8003cea:	bf08      	it	eq
 8003cec:	61a3      	streq	r3, [r4, #24]
 8003cee:	f000 f81f 	bl	8003d30 <__sfp>
 8003cf2:	6060      	str	r0, [r4, #4]
 8003cf4:	4620      	mov	r0, r4
 8003cf6:	f000 f81b 	bl	8003d30 <__sfp>
 8003cfa:	60a0      	str	r0, [r4, #8]
 8003cfc:	4620      	mov	r0, r4
 8003cfe:	f000 f817 	bl	8003d30 <__sfp>
 8003d02:	2200      	movs	r2, #0
 8003d04:	2104      	movs	r1, #4
 8003d06:	60e0      	str	r0, [r4, #12]
 8003d08:	6860      	ldr	r0, [r4, #4]
 8003d0a:	f7ff ff81 	bl	8003c10 <std>
 8003d0e:	2201      	movs	r2, #1
 8003d10:	2109      	movs	r1, #9
 8003d12:	68a0      	ldr	r0, [r4, #8]
 8003d14:	f7ff ff7c 	bl	8003c10 <std>
 8003d18:	2202      	movs	r2, #2
 8003d1a:	2112      	movs	r1, #18
 8003d1c:	68e0      	ldr	r0, [r4, #12]
 8003d1e:	f7ff ff77 	bl	8003c10 <std>
 8003d22:	2301      	movs	r3, #1
 8003d24:	61a3      	str	r3, [r4, #24]
 8003d26:	e7d1      	b.n	8003ccc <__sinit+0xc>
 8003d28:	08004278 	.word	0x08004278
 8003d2c:	08003c59 	.word	0x08003c59

08003d30 <__sfp>:
 8003d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d32:	4607      	mov	r7, r0
 8003d34:	f7ff ffac 	bl	8003c90 <__sfp_lock_acquire>
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <__sfp+0x84>)
 8003d3a:	681e      	ldr	r6, [r3, #0]
 8003d3c:	69b3      	ldr	r3, [r6, #24]
 8003d3e:	b913      	cbnz	r3, 8003d46 <__sfp+0x16>
 8003d40:	4630      	mov	r0, r6
 8003d42:	f7ff ffbd 	bl	8003cc0 <__sinit>
 8003d46:	3648      	adds	r6, #72	; 0x48
 8003d48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	d503      	bpl.n	8003d58 <__sfp+0x28>
 8003d50:	6833      	ldr	r3, [r6, #0]
 8003d52:	b30b      	cbz	r3, 8003d98 <__sfp+0x68>
 8003d54:	6836      	ldr	r6, [r6, #0]
 8003d56:	e7f7      	b.n	8003d48 <__sfp+0x18>
 8003d58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003d5c:	b9d5      	cbnz	r5, 8003d94 <__sfp+0x64>
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <__sfp+0x88>)
 8003d60:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003d64:	60e3      	str	r3, [r4, #12]
 8003d66:	6665      	str	r5, [r4, #100]	; 0x64
 8003d68:	f000 f847 	bl	8003dfa <__retarget_lock_init_recursive>
 8003d6c:	f7ff ff96 	bl	8003c9c <__sfp_lock_release>
 8003d70:	2208      	movs	r2, #8
 8003d72:	4629      	mov	r1, r5
 8003d74:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003d78:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003d7c:	6025      	str	r5, [r4, #0]
 8003d7e:	61a5      	str	r5, [r4, #24]
 8003d80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003d84:	f7ff fd44 	bl	8003810 <memset>
 8003d88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003d8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003d90:	4620      	mov	r0, r4
 8003d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d94:	3468      	adds	r4, #104	; 0x68
 8003d96:	e7d9      	b.n	8003d4c <__sfp+0x1c>
 8003d98:	2104      	movs	r1, #4
 8003d9a:	4638      	mov	r0, r7
 8003d9c:	f7ff ff62 	bl	8003c64 <__sfmoreglue>
 8003da0:	4604      	mov	r4, r0
 8003da2:	6030      	str	r0, [r6, #0]
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d1d5      	bne.n	8003d54 <__sfp+0x24>
 8003da8:	f7ff ff78 	bl	8003c9c <__sfp_lock_release>
 8003dac:	230c      	movs	r3, #12
 8003dae:	603b      	str	r3, [r7, #0]
 8003db0:	e7ee      	b.n	8003d90 <__sfp+0x60>
 8003db2:	bf00      	nop
 8003db4:	08004278 	.word	0x08004278
 8003db8:	ffff0001 	.word	0xffff0001

08003dbc <_fwalk_reent>:
 8003dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc0:	4606      	mov	r6, r0
 8003dc2:	4688      	mov	r8, r1
 8003dc4:	2700      	movs	r7, #0
 8003dc6:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003dca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003dce:	f1b9 0901 	subs.w	r9, r9, #1
 8003dd2:	d505      	bpl.n	8003de0 <_fwalk_reent+0x24>
 8003dd4:	6824      	ldr	r4, [r4, #0]
 8003dd6:	2c00      	cmp	r4, #0
 8003dd8:	d1f7      	bne.n	8003dca <_fwalk_reent+0xe>
 8003dda:	4638      	mov	r0, r7
 8003ddc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003de0:	89ab      	ldrh	r3, [r5, #12]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d907      	bls.n	8003df6 <_fwalk_reent+0x3a>
 8003de6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003dea:	3301      	adds	r3, #1
 8003dec:	d003      	beq.n	8003df6 <_fwalk_reent+0x3a>
 8003dee:	4629      	mov	r1, r5
 8003df0:	4630      	mov	r0, r6
 8003df2:	47c0      	blx	r8
 8003df4:	4307      	orrs	r7, r0
 8003df6:	3568      	adds	r5, #104	; 0x68
 8003df8:	e7e9      	b.n	8003dce <_fwalk_reent+0x12>

08003dfa <__retarget_lock_init_recursive>:
 8003dfa:	4770      	bx	lr

08003dfc <__retarget_lock_acquire_recursive>:
 8003dfc:	4770      	bx	lr

08003dfe <__retarget_lock_release_recursive>:
 8003dfe:	4770      	bx	lr

08003e00 <__swhatbuf_r>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	460e      	mov	r6, r1
 8003e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e08:	4614      	mov	r4, r2
 8003e0a:	2900      	cmp	r1, #0
 8003e0c:	461d      	mov	r5, r3
 8003e0e:	b096      	sub	sp, #88	; 0x58
 8003e10:	da07      	bge.n	8003e22 <__swhatbuf_r+0x22>
 8003e12:	2300      	movs	r3, #0
 8003e14:	602b      	str	r3, [r5, #0]
 8003e16:	89b3      	ldrh	r3, [r6, #12]
 8003e18:	061a      	lsls	r2, r3, #24
 8003e1a:	d410      	bmi.n	8003e3e <__swhatbuf_r+0x3e>
 8003e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003e20:	e00e      	b.n	8003e40 <__swhatbuf_r+0x40>
 8003e22:	466a      	mov	r2, sp
 8003e24:	f000 f96c 	bl	8004100 <_fstat_r>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	dbf2      	blt.n	8003e12 <__swhatbuf_r+0x12>
 8003e2c:	9a01      	ldr	r2, [sp, #4]
 8003e2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003e32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003e36:	425a      	negs	r2, r3
 8003e38:	415a      	adcs	r2, r3
 8003e3a:	602a      	str	r2, [r5, #0]
 8003e3c:	e7ee      	b.n	8003e1c <__swhatbuf_r+0x1c>
 8003e3e:	2340      	movs	r3, #64	; 0x40
 8003e40:	2000      	movs	r0, #0
 8003e42:	6023      	str	r3, [r4, #0]
 8003e44:	b016      	add	sp, #88	; 0x58
 8003e46:	bd70      	pop	{r4, r5, r6, pc}

08003e48 <__smakebuf_r>:
 8003e48:	898b      	ldrh	r3, [r1, #12]
 8003e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003e4c:	079d      	lsls	r5, r3, #30
 8003e4e:	4606      	mov	r6, r0
 8003e50:	460c      	mov	r4, r1
 8003e52:	d507      	bpl.n	8003e64 <__smakebuf_r+0x1c>
 8003e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003e58:	6023      	str	r3, [r4, #0]
 8003e5a:	6123      	str	r3, [r4, #16]
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	6163      	str	r3, [r4, #20]
 8003e60:	b002      	add	sp, #8
 8003e62:	bd70      	pop	{r4, r5, r6, pc}
 8003e64:	466a      	mov	r2, sp
 8003e66:	ab01      	add	r3, sp, #4
 8003e68:	f7ff ffca 	bl	8003e00 <__swhatbuf_r>
 8003e6c:	9900      	ldr	r1, [sp, #0]
 8003e6e:	4605      	mov	r5, r0
 8003e70:	4630      	mov	r0, r6
 8003e72:	f000 f875 	bl	8003f60 <_malloc_r>
 8003e76:	b948      	cbnz	r0, 8003e8c <__smakebuf_r+0x44>
 8003e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e7c:	059a      	lsls	r2, r3, #22
 8003e7e:	d4ef      	bmi.n	8003e60 <__smakebuf_r+0x18>
 8003e80:	f023 0303 	bic.w	r3, r3, #3
 8003e84:	f043 0302 	orr.w	r3, r3, #2
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	e7e3      	b.n	8003e54 <__smakebuf_r+0xc>
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <__smakebuf_r+0x7c>)
 8003e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003e90:	89a3      	ldrh	r3, [r4, #12]
 8003e92:	6020      	str	r0, [r4, #0]
 8003e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e98:	81a3      	strh	r3, [r4, #12]
 8003e9a:	9b00      	ldr	r3, [sp, #0]
 8003e9c:	6120      	str	r0, [r4, #16]
 8003e9e:	6163      	str	r3, [r4, #20]
 8003ea0:	9b01      	ldr	r3, [sp, #4]
 8003ea2:	b15b      	cbz	r3, 8003ebc <__smakebuf_r+0x74>
 8003ea4:	4630      	mov	r0, r6
 8003ea6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eaa:	f000 f93b 	bl	8004124 <_isatty_r>
 8003eae:	b128      	cbz	r0, 8003ebc <__smakebuf_r+0x74>
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	f023 0303 	bic.w	r3, r3, #3
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	81a3      	strh	r3, [r4, #12]
 8003ebc:	89a0      	ldrh	r0, [r4, #12]
 8003ebe:	4305      	orrs	r5, r0
 8003ec0:	81a5      	strh	r5, [r4, #12]
 8003ec2:	e7cd      	b.n	8003e60 <__smakebuf_r+0x18>
 8003ec4:	08003c59 	.word	0x08003c59

08003ec8 <_free_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4605      	mov	r5, r0
 8003ecc:	2900      	cmp	r1, #0
 8003ece:	d043      	beq.n	8003f58 <_free_r+0x90>
 8003ed0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003ed4:	1f0c      	subs	r4, r1, #4
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	bfb8      	it	lt
 8003eda:	18e4      	addlt	r4, r4, r3
 8003edc:	f000 f944 	bl	8004168 <__malloc_lock>
 8003ee0:	4a1e      	ldr	r2, [pc, #120]	; (8003f5c <_free_r+0x94>)
 8003ee2:	6813      	ldr	r3, [r2, #0]
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	b933      	cbnz	r3, 8003ef6 <_free_r+0x2e>
 8003ee8:	6063      	str	r3, [r4, #4]
 8003eea:	6014      	str	r4, [r2, #0]
 8003eec:	4628      	mov	r0, r5
 8003eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ef2:	f000 b93f 	b.w	8004174 <__malloc_unlock>
 8003ef6:	42a3      	cmp	r3, r4
 8003ef8:	d90a      	bls.n	8003f10 <_free_r+0x48>
 8003efa:	6821      	ldr	r1, [r4, #0]
 8003efc:	1862      	adds	r2, r4, r1
 8003efe:	4293      	cmp	r3, r2
 8003f00:	bf01      	itttt	eq
 8003f02:	681a      	ldreq	r2, [r3, #0]
 8003f04:	685b      	ldreq	r3, [r3, #4]
 8003f06:	1852      	addeq	r2, r2, r1
 8003f08:	6022      	streq	r2, [r4, #0]
 8003f0a:	6063      	str	r3, [r4, #4]
 8003f0c:	6004      	str	r4, [r0, #0]
 8003f0e:	e7ed      	b.n	8003eec <_free_r+0x24>
 8003f10:	461a      	mov	r2, r3
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	b10b      	cbz	r3, 8003f1a <_free_r+0x52>
 8003f16:	42a3      	cmp	r3, r4
 8003f18:	d9fa      	bls.n	8003f10 <_free_r+0x48>
 8003f1a:	6811      	ldr	r1, [r2, #0]
 8003f1c:	1850      	adds	r0, r2, r1
 8003f1e:	42a0      	cmp	r0, r4
 8003f20:	d10b      	bne.n	8003f3a <_free_r+0x72>
 8003f22:	6820      	ldr	r0, [r4, #0]
 8003f24:	4401      	add	r1, r0
 8003f26:	1850      	adds	r0, r2, r1
 8003f28:	4283      	cmp	r3, r0
 8003f2a:	6011      	str	r1, [r2, #0]
 8003f2c:	d1de      	bne.n	8003eec <_free_r+0x24>
 8003f2e:	6818      	ldr	r0, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	4401      	add	r1, r0
 8003f34:	6011      	str	r1, [r2, #0]
 8003f36:	6053      	str	r3, [r2, #4]
 8003f38:	e7d8      	b.n	8003eec <_free_r+0x24>
 8003f3a:	d902      	bls.n	8003f42 <_free_r+0x7a>
 8003f3c:	230c      	movs	r3, #12
 8003f3e:	602b      	str	r3, [r5, #0]
 8003f40:	e7d4      	b.n	8003eec <_free_r+0x24>
 8003f42:	6820      	ldr	r0, [r4, #0]
 8003f44:	1821      	adds	r1, r4, r0
 8003f46:	428b      	cmp	r3, r1
 8003f48:	bf01      	itttt	eq
 8003f4a:	6819      	ldreq	r1, [r3, #0]
 8003f4c:	685b      	ldreq	r3, [r3, #4]
 8003f4e:	1809      	addeq	r1, r1, r0
 8003f50:	6021      	streq	r1, [r4, #0]
 8003f52:	6063      	str	r3, [r4, #4]
 8003f54:	6054      	str	r4, [r2, #4]
 8003f56:	e7c9      	b.n	8003eec <_free_r+0x24>
 8003f58:	bd38      	pop	{r3, r4, r5, pc}
 8003f5a:	bf00      	nop
 8003f5c:	20000dcc 	.word	0x20000dcc

08003f60 <_malloc_r>:
 8003f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f62:	1ccd      	adds	r5, r1, #3
 8003f64:	f025 0503 	bic.w	r5, r5, #3
 8003f68:	3508      	adds	r5, #8
 8003f6a:	2d0c      	cmp	r5, #12
 8003f6c:	bf38      	it	cc
 8003f6e:	250c      	movcc	r5, #12
 8003f70:	2d00      	cmp	r5, #0
 8003f72:	4606      	mov	r6, r0
 8003f74:	db01      	blt.n	8003f7a <_malloc_r+0x1a>
 8003f76:	42a9      	cmp	r1, r5
 8003f78:	d903      	bls.n	8003f82 <_malloc_r+0x22>
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	6033      	str	r3, [r6, #0]
 8003f7e:	2000      	movs	r0, #0
 8003f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f82:	f000 f8f1 	bl	8004168 <__malloc_lock>
 8003f86:	4921      	ldr	r1, [pc, #132]	; (800400c <_malloc_r+0xac>)
 8003f88:	680a      	ldr	r2, [r1, #0]
 8003f8a:	4614      	mov	r4, r2
 8003f8c:	b99c      	cbnz	r4, 8003fb6 <_malloc_r+0x56>
 8003f8e:	4f20      	ldr	r7, [pc, #128]	; (8004010 <_malloc_r+0xb0>)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	b923      	cbnz	r3, 8003f9e <_malloc_r+0x3e>
 8003f94:	4621      	mov	r1, r4
 8003f96:	4630      	mov	r0, r6
 8003f98:	f000 f83c 	bl	8004014 <_sbrk_r>
 8003f9c:	6038      	str	r0, [r7, #0]
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	f000 f837 	bl	8004014 <_sbrk_r>
 8003fa6:	1c43      	adds	r3, r0, #1
 8003fa8:	d123      	bne.n	8003ff2 <_malloc_r+0x92>
 8003faa:	230c      	movs	r3, #12
 8003fac:	4630      	mov	r0, r6
 8003fae:	6033      	str	r3, [r6, #0]
 8003fb0:	f000 f8e0 	bl	8004174 <__malloc_unlock>
 8003fb4:	e7e3      	b.n	8003f7e <_malloc_r+0x1e>
 8003fb6:	6823      	ldr	r3, [r4, #0]
 8003fb8:	1b5b      	subs	r3, r3, r5
 8003fba:	d417      	bmi.n	8003fec <_malloc_r+0x8c>
 8003fbc:	2b0b      	cmp	r3, #11
 8003fbe:	d903      	bls.n	8003fc8 <_malloc_r+0x68>
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	441c      	add	r4, r3
 8003fc4:	6025      	str	r5, [r4, #0]
 8003fc6:	e004      	b.n	8003fd2 <_malloc_r+0x72>
 8003fc8:	6863      	ldr	r3, [r4, #4]
 8003fca:	42a2      	cmp	r2, r4
 8003fcc:	bf0c      	ite	eq
 8003fce:	600b      	streq	r3, [r1, #0]
 8003fd0:	6053      	strne	r3, [r2, #4]
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	f000 f8ce 	bl	8004174 <__malloc_unlock>
 8003fd8:	f104 000b 	add.w	r0, r4, #11
 8003fdc:	1d23      	adds	r3, r4, #4
 8003fde:	f020 0007 	bic.w	r0, r0, #7
 8003fe2:	1ac2      	subs	r2, r0, r3
 8003fe4:	d0cc      	beq.n	8003f80 <_malloc_r+0x20>
 8003fe6:	1a1b      	subs	r3, r3, r0
 8003fe8:	50a3      	str	r3, [r4, r2]
 8003fea:	e7c9      	b.n	8003f80 <_malloc_r+0x20>
 8003fec:	4622      	mov	r2, r4
 8003fee:	6864      	ldr	r4, [r4, #4]
 8003ff0:	e7cc      	b.n	8003f8c <_malloc_r+0x2c>
 8003ff2:	1cc4      	adds	r4, r0, #3
 8003ff4:	f024 0403 	bic.w	r4, r4, #3
 8003ff8:	42a0      	cmp	r0, r4
 8003ffa:	d0e3      	beq.n	8003fc4 <_malloc_r+0x64>
 8003ffc:	1a21      	subs	r1, r4, r0
 8003ffe:	4630      	mov	r0, r6
 8004000:	f000 f808 	bl	8004014 <_sbrk_r>
 8004004:	3001      	adds	r0, #1
 8004006:	d1dd      	bne.n	8003fc4 <_malloc_r+0x64>
 8004008:	e7cf      	b.n	8003faa <_malloc_r+0x4a>
 800400a:	bf00      	nop
 800400c:	20000dcc 	.word	0x20000dcc
 8004010:	20000dd0 	.word	0x20000dd0

08004014 <_sbrk_r>:
 8004014:	b538      	push	{r3, r4, r5, lr}
 8004016:	2300      	movs	r3, #0
 8004018:	4d05      	ldr	r5, [pc, #20]	; (8004030 <_sbrk_r+0x1c>)
 800401a:	4604      	mov	r4, r0
 800401c:	4608      	mov	r0, r1
 800401e:	602b      	str	r3, [r5, #0]
 8004020:	f000 f8c0 	bl	80041a4 <_sbrk>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d102      	bne.n	800402e <_sbrk_r+0x1a>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	b103      	cbz	r3, 800402e <_sbrk_r+0x1a>
 800402c:	6023      	str	r3, [r4, #0]
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	20000e8c 	.word	0x20000e8c

08004034 <__sread>:
 8004034:	b510      	push	{r4, lr}
 8004036:	460c      	mov	r4, r1
 8004038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800403c:	f000 f8a0 	bl	8004180 <_read_r>
 8004040:	2800      	cmp	r0, #0
 8004042:	bfab      	itete	ge
 8004044:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004046:	89a3      	ldrhlt	r3, [r4, #12]
 8004048:	181b      	addge	r3, r3, r0
 800404a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800404e:	bfac      	ite	ge
 8004050:	6563      	strge	r3, [r4, #84]	; 0x54
 8004052:	81a3      	strhlt	r3, [r4, #12]
 8004054:	bd10      	pop	{r4, pc}

08004056 <__swrite>:
 8004056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800405a:	461f      	mov	r7, r3
 800405c:	898b      	ldrh	r3, [r1, #12]
 800405e:	4605      	mov	r5, r0
 8004060:	05db      	lsls	r3, r3, #23
 8004062:	460c      	mov	r4, r1
 8004064:	4616      	mov	r6, r2
 8004066:	d505      	bpl.n	8004074 <__swrite+0x1e>
 8004068:	2302      	movs	r3, #2
 800406a:	2200      	movs	r2, #0
 800406c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004070:	f000 f868 	bl	8004144 <_lseek_r>
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	4632      	mov	r2, r6
 8004078:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800407c:	81a3      	strh	r3, [r4, #12]
 800407e:	4628      	mov	r0, r5
 8004080:	463b      	mov	r3, r7
 8004082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800408a:	f000 b817 	b.w	80040bc <_write_r>

0800408e <__sseek>:
 800408e:	b510      	push	{r4, lr}
 8004090:	460c      	mov	r4, r1
 8004092:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004096:	f000 f855 	bl	8004144 <_lseek_r>
 800409a:	1c43      	adds	r3, r0, #1
 800409c:	89a3      	ldrh	r3, [r4, #12]
 800409e:	bf15      	itete	ne
 80040a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80040a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040aa:	81a3      	strheq	r3, [r4, #12]
 80040ac:	bf18      	it	ne
 80040ae:	81a3      	strhne	r3, [r4, #12]
 80040b0:	bd10      	pop	{r4, pc}

080040b2 <__sclose>:
 80040b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040b6:	f000 b813 	b.w	80040e0 <_close_r>
	...

080040bc <_write_r>:
 80040bc:	b538      	push	{r3, r4, r5, lr}
 80040be:	4604      	mov	r4, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	4611      	mov	r1, r2
 80040c4:	2200      	movs	r2, #0
 80040c6:	4d05      	ldr	r5, [pc, #20]	; (80040dc <_write_r+0x20>)
 80040c8:	602a      	str	r2, [r5, #0]
 80040ca:	461a      	mov	r2, r3
 80040cc:	f7fc f97a 	bl	80003c4 <_write>
 80040d0:	1c43      	adds	r3, r0, #1
 80040d2:	d102      	bne.n	80040da <_write_r+0x1e>
 80040d4:	682b      	ldr	r3, [r5, #0]
 80040d6:	b103      	cbz	r3, 80040da <_write_r+0x1e>
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	bd38      	pop	{r3, r4, r5, pc}
 80040dc:	20000e8c 	.word	0x20000e8c

080040e0 <_close_r>:
 80040e0:	b538      	push	{r3, r4, r5, lr}
 80040e2:	2300      	movs	r3, #0
 80040e4:	4d05      	ldr	r5, [pc, #20]	; (80040fc <_close_r+0x1c>)
 80040e6:	4604      	mov	r4, r0
 80040e8:	4608      	mov	r0, r1
 80040ea:	602b      	str	r3, [r5, #0]
 80040ec:	f7fc fad1 	bl	8000692 <_close>
 80040f0:	1c43      	adds	r3, r0, #1
 80040f2:	d102      	bne.n	80040fa <_close_r+0x1a>
 80040f4:	682b      	ldr	r3, [r5, #0]
 80040f6:	b103      	cbz	r3, 80040fa <_close_r+0x1a>
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	bd38      	pop	{r3, r4, r5, pc}
 80040fc:	20000e8c 	.word	0x20000e8c

08004100 <_fstat_r>:
 8004100:	b538      	push	{r3, r4, r5, lr}
 8004102:	2300      	movs	r3, #0
 8004104:	4d06      	ldr	r5, [pc, #24]	; (8004120 <_fstat_r+0x20>)
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	4611      	mov	r1, r2
 800410c:	602b      	str	r3, [r5, #0]
 800410e:	f7fc facb 	bl	80006a8 <_fstat>
 8004112:	1c43      	adds	r3, r0, #1
 8004114:	d102      	bne.n	800411c <_fstat_r+0x1c>
 8004116:	682b      	ldr	r3, [r5, #0]
 8004118:	b103      	cbz	r3, 800411c <_fstat_r+0x1c>
 800411a:	6023      	str	r3, [r4, #0]
 800411c:	bd38      	pop	{r3, r4, r5, pc}
 800411e:	bf00      	nop
 8004120:	20000e8c 	.word	0x20000e8c

08004124 <_isatty_r>:
 8004124:	b538      	push	{r3, r4, r5, lr}
 8004126:	2300      	movs	r3, #0
 8004128:	4d05      	ldr	r5, [pc, #20]	; (8004140 <_isatty_r+0x1c>)
 800412a:	4604      	mov	r4, r0
 800412c:	4608      	mov	r0, r1
 800412e:	602b      	str	r3, [r5, #0]
 8004130:	f7fc fac9 	bl	80006c6 <_isatty>
 8004134:	1c43      	adds	r3, r0, #1
 8004136:	d102      	bne.n	800413e <_isatty_r+0x1a>
 8004138:	682b      	ldr	r3, [r5, #0]
 800413a:	b103      	cbz	r3, 800413e <_isatty_r+0x1a>
 800413c:	6023      	str	r3, [r4, #0]
 800413e:	bd38      	pop	{r3, r4, r5, pc}
 8004140:	20000e8c 	.word	0x20000e8c

08004144 <_lseek_r>:
 8004144:	b538      	push	{r3, r4, r5, lr}
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	4611      	mov	r1, r2
 800414c:	2200      	movs	r2, #0
 800414e:	4d05      	ldr	r5, [pc, #20]	; (8004164 <_lseek_r+0x20>)
 8004150:	602a      	str	r2, [r5, #0]
 8004152:	461a      	mov	r2, r3
 8004154:	f7fc fac1 	bl	80006da <_lseek>
 8004158:	1c43      	adds	r3, r0, #1
 800415a:	d102      	bne.n	8004162 <_lseek_r+0x1e>
 800415c:	682b      	ldr	r3, [r5, #0]
 800415e:	b103      	cbz	r3, 8004162 <_lseek_r+0x1e>
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	bd38      	pop	{r3, r4, r5, pc}
 8004164:	20000e8c 	.word	0x20000e8c

08004168 <__malloc_lock>:
 8004168:	4801      	ldr	r0, [pc, #4]	; (8004170 <__malloc_lock+0x8>)
 800416a:	f7ff be47 	b.w	8003dfc <__retarget_lock_acquire_recursive>
 800416e:	bf00      	nop
 8004170:	20000e84 	.word	0x20000e84

08004174 <__malloc_unlock>:
 8004174:	4801      	ldr	r0, [pc, #4]	; (800417c <__malloc_unlock+0x8>)
 8004176:	f7ff be42 	b.w	8003dfe <__retarget_lock_release_recursive>
 800417a:	bf00      	nop
 800417c:	20000e84 	.word	0x20000e84

08004180 <_read_r>:
 8004180:	b538      	push	{r3, r4, r5, lr}
 8004182:	4604      	mov	r4, r0
 8004184:	4608      	mov	r0, r1
 8004186:	4611      	mov	r1, r2
 8004188:	2200      	movs	r2, #0
 800418a:	4d05      	ldr	r5, [pc, #20]	; (80041a0 <_read_r+0x20>)
 800418c:	602a      	str	r2, [r5, #0]
 800418e:	461a      	mov	r2, r3
 8004190:	f7fc fa62 	bl	8000658 <_read>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d102      	bne.n	800419e <_read_r+0x1e>
 8004198:	682b      	ldr	r3, [r5, #0]
 800419a:	b103      	cbz	r3, 800419e <_read_r+0x1e>
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	bd38      	pop	{r3, r4, r5, pc}
 80041a0:	20000e8c 	.word	0x20000e8c

080041a4 <_sbrk>:
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <_sbrk+0x14>)
 80041a6:	4602      	mov	r2, r0
 80041a8:	6819      	ldr	r1, [r3, #0]
 80041aa:	b909      	cbnz	r1, 80041b0 <_sbrk+0xc>
 80041ac:	4903      	ldr	r1, [pc, #12]	; (80041bc <_sbrk+0x18>)
 80041ae:	6019      	str	r1, [r3, #0]
 80041b0:	6818      	ldr	r0, [r3, #0]
 80041b2:	4402      	add	r2, r0
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	4770      	bx	lr
 80041b8:	20000dd4 	.word	0x20000dd4
 80041bc:	20000e90 	.word	0x20000e90

080041c0 <_init>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	bf00      	nop
 80041c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c6:	bc08      	pop	{r3}
 80041c8:	469e      	mov	lr, r3
 80041ca:	4770      	bx	lr

080041cc <_fini>:
 80041cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041ce:	bf00      	nop
 80041d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041d2:	bc08      	pop	{r3}
 80041d4:	469e      	mov	lr, r3
 80041d6:	4770      	bx	lr
