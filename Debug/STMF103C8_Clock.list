
STMF103C8_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e20  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08006f30  08006f30  00016f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007188  08007188  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08007188  08007188  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007188  08007188  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007188  08007188  00017188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007190  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e24  20000090  08007220  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000eb4  08007220  00020eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015c48  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036c6  00000000  00000000  00035d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  000393c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  0003a6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0ed  00000000  00000000  0003b8a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015367  00000000  00000000  0005598d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096909  00000000  00000000  0006acf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001015fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005918  00000000  00000000  00101650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08006f18 	.word	0x08006f18

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08006f18 	.word	0x08006f18

08000150 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000156:	4b1a      	ldr	r3, [pc, #104]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000158:	699b      	ldr	r3, [r3, #24]
 800015a:	4a19      	ldr	r2, [pc, #100]	; (80001c0 <MX_GPIO_Init+0x70>)
 800015c:	f043 0310 	orr.w	r3, r3, #16
 8000160:	6193      	str	r3, [r2, #24]
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	f003 0310 	and.w	r3, r3, #16
 800016a:	60fb      	str	r3, [r7, #12]
 800016c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000174:	f043 0320 	orr.w	r3, r3, #32
 8000178:	6193      	str	r3, [r2, #24]
 800017a:	4b11      	ldr	r3, [pc, #68]	; (80001c0 <MX_GPIO_Init+0x70>)
 800017c:	699b      	ldr	r3, [r3, #24]
 800017e:	f003 0320 	and.w	r3, r3, #32
 8000182:	60bb      	str	r3, [r7, #8]
 8000184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000186:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <MX_GPIO_Init+0x70>)
 800018c:	f043 0304 	orr.w	r3, r3, #4
 8000190:	6193      	str	r3, [r2, #24]
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000194:	699b      	ldr	r3, [r3, #24]
 8000196:	f003 0304 	and.w	r3, r3, #4
 800019a:	607b      	str	r3, [r7, #4]
 800019c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a07      	ldr	r2, [pc, #28]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001a4:	f043 0308 	orr.w	r3, r3, #8
 80001a8:	6193      	str	r3, [r2, #24]
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	f003 0308 	and.w	r3, r3, #8
 80001b2:	603b      	str	r3, [r7, #0]
 80001b4:	683b      	ldr	r3, [r7, #0]

}
 80001b6:	bf00      	nop
 80001b8:	3714      	adds	r7, #20
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	40021000 	.word	0x40021000

080001c4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001d0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001d4:	f003 0301 	and.w	r3, r3, #1
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d013      	beq.n	8000204 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001e0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001e4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d00b      	beq.n	8000204 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001ec:	e000      	b.n	80001f0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80001ee:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d0f9      	beq.n	80001ee <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80001fa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	b2d2      	uxtb	r2, r2
 8000202:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000204:	687b      	ldr	r3, [r7, #4]
}
 8000206:	4618      	mov	r0, r3
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	bc80      	pop	{r7}
 800020e:	4770      	bx	lr

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000216:	f000 fcd7 	bl	8000bc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800021a:	f000 f859 	bl	80002d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021e:	f7ff ff97 	bl	8000150 <MX_GPIO_Init>
  MX_RTC_Init();
 8000222:	f000 fab9 	bl	8000798 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8000226:	f000 fc2b 	bl	8000a80 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Time_Queue_Handler = xQueueCreate(2,sizeof(TxUART));
 800022a:	2200      	movs	r2, #0
 800022c:	2118      	movs	r1, #24
 800022e:	2002      	movs	r0, #2
 8000230:	f003 fc75 	bl	8003b1e <xQueueGenericCreate>
 8000234:	4603      	mov	r3, r0
 8000236:	4a1a      	ldr	r2, [pc, #104]	; (80002a0 <main+0x90>)
 8000238:	6013      	str	r3, [r2, #0]
  Time_UART_Rx_Queue_Handler = xQueueCreate(1,sizeof(UART1_rxBuffer));
 800023a:	2200      	movs	r2, #0
 800023c:	2119      	movs	r1, #25
 800023e:	2001      	movs	r0, #1
 8000240:	f003 fc6d 	bl	8003b1e <xQueueGenericCreate>
 8000244:	4603      	mov	r3, r0
 8000246:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <main+0x94>)
 8000248:	6013      	str	r3, [r2, #0]

  Status = xTaskCreate(Get_RTC_Runnable, "Get Time ", 100, NULL, 2, &Get_Time_Handler);
 800024a:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <main+0x98>)
 800024c:	9301      	str	r3, [sp, #4]
 800024e:	2302      	movs	r3, #2
 8000250:	9300      	str	r3, [sp, #0]
 8000252:	2300      	movs	r3, #0
 8000254:	2264      	movs	r2, #100	; 0x64
 8000256:	4915      	ldr	r1, [pc, #84]	; (80002ac <main+0x9c>)
 8000258:	4815      	ldr	r0, [pc, #84]	; (80002b0 <main+0xa0>)
 800025a:	f003 ff6b 	bl	8004134 <xTaskCreate>
 800025e:	4603      	mov	r3, r0
 8000260:	4a14      	ldr	r2, [pc, #80]	; (80002b4 <main+0xa4>)
 8000262:	6013      	str	r3, [r2, #0]
  Status = xTaskCreate(Print_Time_Runnable, "Print Time", 100, NULL, 2, &Print_Time_Handler);
 8000264:	4b14      	ldr	r3, [pc, #80]	; (80002b8 <main+0xa8>)
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	2302      	movs	r3, #2
 800026a:	9300      	str	r3, [sp, #0]
 800026c:	2300      	movs	r3, #0
 800026e:	2264      	movs	r2, #100	; 0x64
 8000270:	4912      	ldr	r1, [pc, #72]	; (80002bc <main+0xac>)
 8000272:	4813      	ldr	r0, [pc, #76]	; (80002c0 <main+0xb0>)
 8000274:	f003 ff5e 	bl	8004134 <xTaskCreate>
 8000278:	4603      	mov	r3, r0
 800027a:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <main+0xa4>)
 800027c:	6013      	str	r3, [r2, #0]
  Status = xTaskCreate(Process_UART_Data_Runnable, "UART Rx", 200, NULL, 2, &Process_Rx_Data_Handler);
 800027e:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <main+0xb4>)
 8000280:	9301      	str	r3, [sp, #4]
 8000282:	2302      	movs	r3, #2
 8000284:	9300      	str	r3, [sp, #0]
 8000286:	2300      	movs	r3, #0
 8000288:	22c8      	movs	r2, #200	; 0xc8
 800028a:	490f      	ldr	r1, [pc, #60]	; (80002c8 <main+0xb8>)
 800028c:	480f      	ldr	r0, [pc, #60]	; (80002cc <main+0xbc>)
 800028e:	f003 ff51 	bl	8004134 <xTaskCreate>
 8000292:	4603      	mov	r3, r0
 8000294:	4a07      	ldr	r2, [pc, #28]	; (80002b4 <main+0xa4>)
 8000296:	6013      	str	r3, [r2, #0]


  vTaskStartScheduler();
 8000298:	f004 fa00 	bl	800469c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800029c:	e7fe      	b.n	800029c <main+0x8c>
 800029e:	bf00      	nop
 80002a0:	200000b8 	.word	0x200000b8
 80002a4:	200000bc 	.word	0x200000bc
 80002a8:	200000ac 	.word	0x200000ac
 80002ac:	08006f30 	.word	0x08006f30
 80002b0:	080005e1 	.word	0x080005e1
 80002b4:	20000dfc 	.word	0x20000dfc
 80002b8:	200000b0 	.word	0x200000b0
 80002bc:	08006f3c 	.word	0x08006f3c
 80002c0:	08000689 	.word	0x08000689
 80002c4:	200000b4 	.word	0x200000b4
 80002c8:	08006f48 	.word	0x08006f48
 80002cc:	080004d9 	.word	0x080004d9

080002d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b094      	sub	sp, #80	; 0x50
 80002d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002da:	2228      	movs	r2, #40	; 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f005 fbae 	bl	8005a40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002e4:	f107 0314 	add.w	r3, r7, #20
 80002e8:	2200      	movs	r2, #0
 80002ea:	601a      	str	r2, [r3, #0]
 80002ec:	605a      	str	r2, [r3, #4]
 80002ee:	609a      	str	r2, [r3, #8]
 80002f0:	60da      	str	r2, [r3, #12]
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002f4:	1d3b      	adds	r3, r7, #4
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000300:	2305      	movs	r3, #5
 8000302:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000308:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800030a:	2301      	movs	r3, #1
 800030c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800030e:	2300      	movs	r3, #0
 8000310:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000316:	4618      	mov	r0, r3
 8000318:	f000 ffa8 	bl	800126c <HAL_RCC_OscConfig>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d001      	beq.n	8000326 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000322:	f000 fa33 	bl	800078c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800033a:	f107 0314 	add.w	r3, r7, #20
 800033e:	2100      	movs	r1, #0
 8000340:	4618      	mov	r0, r3
 8000342:	f001 fa13 	bl	800176c <HAL_RCC_ClockConfig>
 8000346:	4603      	mov	r3, r0
 8000348:	2b00      	cmp	r3, #0
 800034a:	d001      	beq.n	8000350 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800034c:	f000 fa1e 	bl	800078c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000350:	2301      	movs	r3, #1
 8000352:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000354:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000358:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f001 fbcf 	bl	8001b00 <HAL_RCCEx_PeriphCLKConfig>
 8000362:	4603      	mov	r3, r0
 8000364:	2b00      	cmp	r3, #0
 8000366:	d001      	beq.n	800036c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000368:	f000 fa10 	bl	800078c <Error_Handler>
  }
}
 800036c:	bf00      	nop
 800036e:	3750      	adds	r7, #80	; 0x50
 8000370:	46bd      	mov	sp, r7
 8000372:	bd80      	pop	{r7, pc}

08000374 <Format_to_12>:

/* USER CODE BEGIN 4 */

static uint8_t Format_to_12(RTC_TimeTypeDef const *RTC_Struct_Info)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
	uint8_t hours_local_var = RTC_Struct_Info->Hours;
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	73fb      	strb	r3, [r7, #15]
	strcpy((char*)time_format,(char*)time_format_am);
 8000382:	4912      	ldr	r1, [pc, #72]	; (80003cc <Format_to_12+0x58>)
 8000384:	4812      	ldr	r0, [pc, #72]	; (80003d0 <Format_to_12+0x5c>)
 8000386:	f005 fc1e 	bl	8005bc6 <strcpy>
	if(RTC_Struct_Info->Hours == 0x00u)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d102      	bne.n	8000398 <Format_to_12+0x24>
	{
		hours_local_var = 12;
 8000392:	230c      	movs	r3, #12
 8000394:	73fb      	strb	r3, [r7, #15]
 8000396:	e014      	b.n	80003c2 <Format_to_12+0x4e>
	}
	else if(RTC_Struct_Info->Hours > 12u)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b0c      	cmp	r3, #12
 800039e:	d908      	bls.n	80003b2 <Format_to_12+0x3e>
	{
		hours_local_var = RTC_Struct_Info->Hours - 12u;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	3b0c      	subs	r3, #12
 80003a6:	73fb      	strb	r3, [r7, #15]
		strcpy((char*)time_format,(char*)time_format_pm);
 80003a8:	490a      	ldr	r1, [pc, #40]	; (80003d4 <Format_to_12+0x60>)
 80003aa:	4809      	ldr	r0, [pc, #36]	; (80003d0 <Format_to_12+0x5c>)
 80003ac:	f005 fc0b 	bl	8005bc6 <strcpy>
 80003b0:	e007      	b.n	80003c2 <Format_to_12+0x4e>
	}
	else if(RTC_Struct_Info->Hours == 12u)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	2b0c      	cmp	r3, #12
 80003b8:	d103      	bne.n	80003c2 <Format_to_12+0x4e>
	{
		strcpy((char*)time_format,(char*)time_format_am);
 80003ba:	4904      	ldr	r1, [pc, #16]	; (80003cc <Format_to_12+0x58>)
 80003bc:	4804      	ldr	r0, [pc, #16]	; (80003d0 <Format_to_12+0x5c>)
 80003be:	f005 fc02 	bl	8005bc6 <strcpy>
	}
	return hours_local_var;
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3710      	adds	r7, #16
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}
 80003cc:	20000010 	.word	0x20000010
 80003d0:	200000c0 	.word	0x200000c0
 80003d4:	20000014 	.word	0x20000014

080003d8 <Format_to_24>:
static RTC_TimeTypeDef Format_to_24(uint16_t Rx_buffer, uint8_t meridiem)
{
 80003d8:	b480      	push	{r7}
 80003da:	b085      	sub	sp, #20
 80003dc:	af00      	add	r7, sp, #0
 80003de:	4603      	mov	r3, r0
 80003e0:	460a      	mov	r2, r1
 80003e2:	80fb      	strh	r3, [r7, #6]
 80003e4:	4613      	mov	r3, r2
 80003e6:	717b      	strb	r3, [r7, #5]
	RTC_TimeTypeDef local_RTC;
	local_RTC.Minutes = Rx_buffer % 1000;
 80003e8:	88fb      	ldrh	r3, [r7, #6]
 80003ea:	4a1a      	ldr	r2, [pc, #104]	; (8000454 <Format_to_24+0x7c>)
 80003ec:	fba2 1203 	umull	r1, r2, r2, r3
 80003f0:	0992      	lsrs	r2, r2, #6
 80003f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003f6:	fb01 f202 	mul.w	r2, r1, r2
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	b29b      	uxth	r3, r3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	727b      	strb	r3, [r7, #9]
	local_RTC.Hours   = Rx_buffer / 1000;
 8000402:	88fb      	ldrh	r3, [r7, #6]
 8000404:	4a13      	ldr	r2, [pc, #76]	; (8000454 <Format_to_24+0x7c>)
 8000406:	fba2 2303 	umull	r2, r3, r2, r3
 800040a:	099b      	lsrs	r3, r3, #6
 800040c:	b29b      	uxth	r3, r3
 800040e:	b2db      	uxtb	r3, r3
 8000410:	723b      	strb	r3, [r7, #8]

	if(meridiem == 'p')
 8000412:	797b      	ldrb	r3, [r7, #5]
 8000414:	2b70      	cmp	r3, #112	; 0x70
 8000416:	d103      	bne.n	8000420 <Format_to_24+0x48>
	{
		local_RTC.Hours += 12U;
 8000418:	7a3b      	ldrb	r3, [r7, #8]
 800041a:	330c      	adds	r3, #12
 800041c:	b2db      	uxtb	r3, r3
 800041e:	723b      	strb	r3, [r7, #8]
	}

	return local_RTC;
 8000420:	f107 030c 	add.w	r3, r7, #12
 8000424:	f107 0208 	add.w	r2, r7, #8
 8000428:	6812      	ldr	r2, [r2, #0]
 800042a:	4611      	mov	r1, r2
 800042c:	8019      	strh	r1, [r3, #0]
 800042e:	3302      	adds	r3, #2
 8000430:	0c12      	lsrs	r2, r2, #16
 8000432:	701a      	strb	r2, [r3, #0]
 8000434:	2300      	movs	r3, #0
 8000436:	7b3a      	ldrb	r2, [r7, #12]
 8000438:	f362 0307 	bfi	r3, r2, #0, #8
 800043c:	7b7a      	ldrb	r2, [r7, #13]
 800043e:	f362 230f 	bfi	r3, r2, #8, #8
 8000442:	7bba      	ldrb	r2, [r7, #14]
 8000444:	f362 4317 	bfi	r3, r2, #16, #8
}
 8000448:	4618      	mov	r0, r3
 800044a:	3714      	adds	r7, #20
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	10624dd3 	.word	0x10624dd3

08000458 <wrapper_tx_data>:

void wrapper_tx_data(Local_RTC_T const *data, TxUART * buffer_data, data_type_T conversion_type)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b087      	sub	sp, #28
 800045c:	af02      	add	r7, sp, #8
 800045e:	60f8      	str	r0, [r7, #12]
 8000460:	60b9      	str	r1, [r7, #8]
 8000462:	4613      	mov	r3, r2
 8000464:	71fb      	strb	r3, [r7, #7]
	if(time == conversion_type)
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d117      	bne.n	800049c <wrapper_tx_data+0x44>
	{
		buffer_data->Message_Length = sprintf((char*)buffer_data->Message_Data, "t0.txt=\"%02d:%02d:%02d %s\"",data->Local_RTC_Time.Hours, data->Local_RTC_Time.Minutes, data->Local_RTC_Time.Seconds, time_format);
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	1c98      	adds	r0, r3, #2
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	4619      	mov	r1, r3
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	785b      	ldrb	r3, [r3, #1]
 800047a:	461c      	mov	r4, r3
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	789b      	ldrb	r3, [r3, #2]
 8000480:	461a      	mov	r2, r3
 8000482:	4b12      	ldr	r3, [pc, #72]	; (80004cc <wrapper_tx_data+0x74>)
 8000484:	9301      	str	r3, [sp, #4]
 8000486:	9200      	str	r2, [sp, #0]
 8000488:	4623      	mov	r3, r4
 800048a:	460a      	mov	r2, r1
 800048c:	4910      	ldr	r1, [pc, #64]	; (80004d0 <wrapper_tx_data+0x78>)
 800048e:	f005 fb6d 	bl	8005b6c <siprintf>
 8000492:	4603      	mov	r3, r0
 8000494:	b29a      	uxth	r2, r3
 8000496:	68bb      	ldr	r3, [r7, #8]
 8000498:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		buffer_data->Message_Length = sprintf((char*)buffer_data->Message_Data, "t0.txt=\"%d/%d/%d\"",data->Local_RTC_Date.Date, data->Local_RTC_Date.Month, data->Local_RTC_Date.Year);
	}
}
 800049a:	e012      	b.n	80004c2 <wrapper_tx_data+0x6a>
		buffer_data->Message_Length = sprintf((char*)buffer_data->Message_Data, "t0.txt=\"%d/%d/%d\"",data->Local_RTC_Date.Date, data->Local_RTC_Date.Month, data->Local_RTC_Date.Year);
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	1c98      	adds	r0, r3, #2
 80004a0:	68fb      	ldr	r3, [r7, #12]
 80004a2:	795b      	ldrb	r3, [r3, #5]
 80004a4:	461a      	mov	r2, r3
 80004a6:	68fb      	ldr	r3, [r7, #12]
 80004a8:	791b      	ldrb	r3, [r3, #4]
 80004aa:	4619      	mov	r1, r3
 80004ac:	68fb      	ldr	r3, [r7, #12]
 80004ae:	799b      	ldrb	r3, [r3, #6]
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	460b      	mov	r3, r1
 80004b4:	4907      	ldr	r1, [pc, #28]	; (80004d4 <wrapper_tx_data+0x7c>)
 80004b6:	f005 fb59 	bl	8005b6c <siprintf>
 80004ba:	4603      	mov	r3, r0
 80004bc:	b29a      	uxth	r2, r3
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	801a      	strh	r2, [r3, #0]
}
 80004c2:	bf00      	nop
 80004c4:	3714      	adds	r7, #20
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd90      	pop	{r4, r7, pc}
 80004ca:	bf00      	nop
 80004cc:	200000c0 	.word	0x200000c0
 80004d0:	08006f50 	.word	0x08006f50
 80004d4:	08006f6c 	.word	0x08006f6c

080004d8 <Process_UART_Data_Runnable>:
static void Process_UART_Data_Runnable(void * parameters)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08a      	sub	sp, #40	; 0x28
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	RxUART rx_buffer[max_buffer_tx] = {0};
 80004e0:	f107 0310 	add.w	r3, r7, #16
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
	char * found_str = NULL;
 80004f0:	2300      	movs	r3, #0
 80004f2:	627b      	str	r3, [r7, #36]	; 0x24
	for(;;)
	{
#if Debug_ITM
		printf("UART Rx alive\n");
#endif
		HAL_UART_Receive(&huart1, rx_buffer[time].Message_Data, SIZE_RX, 1000);
 80004f4:	f107 0310 	add.w	r3, r7, #16
 80004f8:	1c99      	adds	r1, r3, #2
 80004fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004fe:	2208      	movs	r2, #8
 8000500:	4831      	ldr	r0, [pc, #196]	; (80005c8 <Process_UART_Data_Runnable+0xf0>)
 8000502:	f002 fd52 	bl	8002faa <HAL_UART_Receive>
		found_str = strstr((char *)rx_buffer[time].Message_Data, (char *)String_Search_Nextion);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	3302      	adds	r3, #2
 800050c:	492f      	ldr	r1, [pc, #188]	; (80005cc <Process_UART_Data_Runnable+0xf4>)
 800050e:	4618      	mov	r0, r3
 8000510:	f005 fb61 	bl	8005bd6 <strstr>
 8000514:	6278      	str	r0, [r7, #36]	; 0x24
		if(found_str)
 8000516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000518:	2b00      	cmp	r3, #0
 800051a:	d010      	beq.n	800053e <Process_UART_Data_Runnable+0x66>
		{
#if Debug_ITM
			printf("Setting found\n");
#endif
			vTaskSuspend(Print_Time_Handler);
 800051c:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <Process_UART_Data_Runnable+0xf8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f003 ff75 	bl	8004410 <vTaskSuspend>
			printf("Suspending Print_Time\n");
 8000526:	482b      	ldr	r0, [pc, #172]	; (80005d4 <Process_UART_Data_Runnable+0xfc>)
 8000528:	f005 fb18 	bl	8005b5c <puts>
			memset(rx_buffer[time].Message_Data, 0x00, sizeof(rx_buffer[time].Message_Data));
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	3302      	adds	r3, #2
 8000532:	2208      	movs	r2, #8
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f005 fa82 	bl	8005a40 <memset>
 800053c:	e03a      	b.n	80005b4 <Process_UART_Data_Runnable+0xdc>
		}
		else if(strstr((char *)rx_buffer[time].Message_Data, "m"))
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	3302      	adds	r3, #2
 8000544:	216d      	movs	r1, #109	; 0x6d
 8000546:	4618      	mov	r0, r3
 8000548:	f005 fb30 	bl	8005bac <strchr>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d030      	beq.n	80005b4 <Process_UART_Data_Runnable+0xdc>
		{
			RTC_TimeTypeDef local_time = {0x00U};
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	2100      	movs	r1, #0
 8000558:	460a      	mov	r2, r1
 800055a:	801a      	strh	r2, [r3, #0]
 800055c:	460a      	mov	r2, r1
 800055e:	709a      	strb	r2, [r3, #2]
#if Debug_ITM
			printf("Current time to be set is %s\n", UART1_rxBuffer_Runnable);
#endif
			local_time = Format_to_24(atoi((const char *)rx_buffer[time].Message_Data), rx_buffer[time].Message_Data[6]);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	3302      	adds	r3, #2
 8000566:	4618      	mov	r0, r3
 8000568:	f005 fa2e 	bl	80059c8 <atoi>
 800056c:	4603      	mov	r3, r0
 800056e:	b29b      	uxth	r3, r3
 8000570:	7e3a      	ldrb	r2, [r7, #24]
 8000572:	4611      	mov	r1, r2
 8000574:	4618      	mov	r0, r3
 8000576:	f7ff ff2f 	bl	80003d8 <Format_to_24>
 800057a:	4603      	mov	r3, r0
 800057c:	461a      	mov	r2, r3
 800057e:	733a      	strb	r2, [r7, #12]
 8000580:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8000584:	737a      	strb	r2, [r7, #13]
 8000586:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800058a:	73bb      	strb	r3, [r7, #14]
				local_time.Hours += 12U;
				HAL_RTC_SetTime(&hrtc,&local_time,RTC_FORMAT_BIN);
			}
#endif

			HAL_RTC_SetTime(&hrtc,&local_time,RTC_FORMAT_BIN);
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	4619      	mov	r1, r3
 8000594:	4810      	ldr	r0, [pc, #64]	; (80005d8 <Process_UART_Data_Runnable+0x100>)
 8000596:	f001 fcc3 	bl	8001f20 <HAL_RTC_SetTime>
			vTaskResume(Print_Time_Handler);
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <Process_UART_Data_Runnable+0xf8>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 f806 	bl	80045b0 <vTaskResume>
#if Debug_ITM
			printf("Resuming Get_Time\n");
#endif
			memset(rx_buffer[time].Message_Data, 0x00, sizeof(rx_buffer[time].Message_Data));
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	3302      	adds	r3, #2
 80005aa:	2208      	movs	r2, #8
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 fa46 	bl	8005a40 <memset>
		}
		taskYIELD();
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <Process_UART_Data_Runnable+0x104>)
 80005b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	f3bf 8f4f 	dsb	sy
 80005c0:	f3bf 8f6f 	isb	sy
		HAL_UART_Receive(&huart1, rx_buffer[time].Message_Data, SIZE_RX, 1000);
 80005c4:	e796      	b.n	80004f4 <Process_UART_Data_Runnable+0x1c>
 80005c6:	bf00      	nop
 80005c8:	20000e5c 	.word	0x20000e5c
 80005cc:	20000004 	.word	0x20000004
 80005d0:	200000b0 	.word	0x200000b0
 80005d4:	08006f80 	.word	0x08006f80
 80005d8:	20000e00 	.word	0x20000e00
 80005dc:	e000ed04 	.word	0xe000ed04

080005e0 <Get_RTC_Runnable>:
  * @param  None
  * @retval None
  */

static void Get_RTC_Runnable(void * parameters)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b092      	sub	sp, #72	; 0x48
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	Local_RTC_T RTC_container;
	TxUART tx_buffer[max_buffer_tx];
	BaseType_t Queue_status = pdFALSE;
 80005e8:	2300      	movs	r3, #0
 80005ea:	647b      	str	r3, [r7, #68]	; 0x44
	for(;;)
	{
#if Debug_ITM
		printf("Getting Time Alive\n");
#endif
		HAL_RTC_GetTime(&hrtc, &RTC_container.Local_RTC_Time, RTC_FORMAT_BIN);
 80005ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005f0:	2200      	movs	r2, #0
 80005f2:	4619      	mov	r1, r3
 80005f4:	4821      	ldr	r0, [pc, #132]	; (800067c <Get_RTC_Runnable+0x9c>)
 80005f6:	f001 fd2b 	bl	8002050 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &RTC_container.Local_RTC_Date, RTC_FORMAT_BIN);
 80005fa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80005fe:	3303      	adds	r3, #3
 8000600:	2200      	movs	r2, #0
 8000602:	4619      	mov	r1, r3
 8000604:	481d      	ldr	r0, [pc, #116]	; (800067c <Get_RTC_Runnable+0x9c>)
 8000606:	f001 feb1 	bl	800236c <HAL_RTC_GetDate>
		//Updating Hours
		RTC_container.Local_RTC_Time.Hours = Format_to_12(&RTC_container.Local_RTC_Time);
 800060a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff feb0 	bl	8000374 <Format_to_12>
 8000614:	4603      	mov	r3, r0
 8000616:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
		wrapper_tx_data((Local_RTC_T const *)&RTC_container.Local_RTC_Time, &tx_buffer[time], time);
 800061a:	f107 010c 	add.w	r1, r7, #12
 800061e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000622:	2200      	movs	r2, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f7ff ff17 	bl	8000458 <wrapper_tx_data>
		wrapper_tx_data((Local_RTC_T const *)&RTC_container.Local_RTC_Date, &tx_buffer[date], date);
 800062a:	f107 030c 	add.w	r3, r7, #12
 800062e:	f103 0118 	add.w	r1, r3, #24
 8000632:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000636:	3303      	adds	r3, #3
 8000638:	2201      	movs	r2, #1
 800063a:	4618      	mov	r0, r3
 800063c:	f7ff ff0c 	bl	8000458 <wrapper_tx_data>

#if Debug_ITM
		printf("%s\n", tx_buffer[time].Message_Data);
#endif

		Queue_status = xQueueSend(Time_Queue_Handler, &tx_buffer[time], ( TickType_t )0);
 8000640:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <Get_RTC_Runnable+0xa0>)
 8000642:	6818      	ldr	r0, [r3, #0]
 8000644:	f107 010c 	add.w	r1, r7, #12
 8000648:	2300      	movs	r3, #0
 800064a:	2200      	movs	r2, #0
 800064c:	f003 fad8 	bl	8003c00 <xQueueGenericSend>
 8000650:	6478      	str	r0, [r7, #68]	; 0x44
		Queue_status = xQueueSend(Time_Queue_Handler, &tx_buffer[date], ( TickType_t )0);
 8000652:	4b0b      	ldr	r3, [pc, #44]	; (8000680 <Get_RTC_Runnable+0xa0>)
 8000654:	6818      	ldr	r0, [r3, #0]
 8000656:	f107 030c 	add.w	r3, r7, #12
 800065a:	f103 0118 	add.w	r1, r3, #24
 800065e:	2300      	movs	r3, #0
 8000660:	2200      	movs	r2, #0
 8000662:	f003 facd 	bl	8003c00 <xQueueGenericSend>
 8000666:	6478      	str	r0, [r7, #68]	; 0x44
		taskYIELD();
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <Get_RTC_Runnable+0xa4>)
 800066a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	f3bf 8f4f 	dsb	sy
 8000674:	f3bf 8f6f 	isb	sy
		HAL_RTC_GetTime(&hrtc, &RTC_container.Local_RTC_Time, RTC_FORMAT_BIN);
 8000678:	e7b8      	b.n	80005ec <Get_RTC_Runnable+0xc>
 800067a:	bf00      	nop
 800067c:	20000e00 	.word	0x20000e00
 8000680:	200000b8 	.word	0x200000b8
 8000684:	e000ed04 	.word	0xe000ed04

08000688 <Print_Time_Runnable>:
  * @param  None
  * @retval None
  */

static void Print_Time_Runnable(void * parameters)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08e      	sub	sp, #56	; 0x38
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	TxUART tx_buffer[max_buffer_tx];
	for(;;)
	{
		xQueueReceive(Time_Queue_Handler, &tx_buffer[time], ( TickType_t )0);
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <Print_Time_Runnable+0x6c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f107 0108 	add.w	r1, r7, #8
 8000698:	2200      	movs	r2, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f003 fb7e 	bl	8003d9c <xQueueReceive>
		xQueueReceive(Time_Queue_Handler, &tx_buffer[date], ( TickType_t )0);
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <Print_Time_Runnable+0x6c>)
 80006a2:	6818      	ldr	r0, [r3, #0]
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	3318      	adds	r3, #24
 80006aa:	2200      	movs	r2, #0
 80006ac:	4619      	mov	r1, r3
 80006ae:	f003 fb75 	bl	8003d9c <xQueueReceive>
#if 0
		HAL_UART_Transmit_IT(&huart1, &Buffer_time, 16);
		HAL_UART_Transmit_IT(&huart1, &fixed_end_nextion, 3);

#endif
		HAL_UART_Transmit(&huart1, tx_buffer[time].Message_Data, tx_buffer[time].Message_Length, 1000);
 80006b2:	893a      	ldrh	r2, [r7, #8]
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	1c99      	adds	r1, r3, #2
 80006ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006be:	480e      	ldr	r0, [pc, #56]	; (80006f8 <Print_Time_Runnable+0x70>)
 80006c0:	f002 fbe1 	bl	8002e86 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1, fixed_end_nextion, 3, 1000);
 80006c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c8:	2203      	movs	r2, #3
 80006ca:	490c      	ldr	r1, [pc, #48]	; (80006fc <Print_Time_Runnable+0x74>)
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <Print_Time_Runnable+0x70>)
 80006ce:	f002 fbda 	bl	8002e86 <HAL_UART_Transmit>
		printf("Nextion Time: %s\n", tx_buffer[time].Message_Data);
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	3302      	adds	r3, #2
 80006d8:	4619      	mov	r1, r3
 80006da:	4809      	ldr	r0, [pc, #36]	; (8000700 <Print_Time_Runnable+0x78>)
 80006dc:	f005 f9b8 	bl	8005a50 <iprintf>

		taskYIELD();
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <Print_Time_Runnable+0x7c>)
 80006e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	f3bf 8f4f 	dsb	sy
 80006ec:	f3bf 8f6f 	isb	sy
		xQueueReceive(Time_Queue_Handler, &tx_buffer[time], ( TickType_t )0);
 80006f0:	e7ce      	b.n	8000690 <Print_Time_Runnable+0x8>
 80006f2:	bf00      	nop
 80006f4:	200000b8 	.word	0x200000b8
 80006f8:	20000e5c 	.word	0x20000e5c
 80006fc:	20000000 	.word	0x20000000
 8000700:	08006f98 	.word	0x08006f98
 8000704:	e000ed04 	.word	0xe000ed04

08000708 <_write>:
	}
}


int _write(int file, char *ptr, int len)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b086      	sub	sp, #24
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	e009      	b.n	800072e <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800071a:	68bb      	ldr	r3, [r7, #8]
 800071c:	1c5a      	adds	r2, r3, #1
 800071e:	60ba      	str	r2, [r7, #8]
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff fd4e 	bl	80001c4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	3301      	adds	r3, #1
 800072c:	617b      	str	r3, [r7, #20]
 800072e:	697a      	ldr	r2, [r7, #20]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	429a      	cmp	r2, r3
 8000734:	dbf1      	blt.n	800071a <_write+0x12>
	}
	return len;
 8000736:	687b      	ldr	r3, [r7, #4]
}
 8000738:	4618      	mov	r0, r3
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}

08000740 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
   __NOP();// do nothing here
 8000748:	bf00      	nop
}
 800074a:	bf00      	nop
 800074c:	370c      	adds	r7, #12
 800074e:	46bd      	mov	sp, r7
 8000750:	bc80      	pop	{r7}
 8000752:	4770      	bx	lr

08000754 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	__NOP();// do nothing here
 800075c:	bf00      	nop
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a04      	ldr	r2, [pc, #16]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d101      	bne.n	800077e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800077a:	f000 fa3b 	bl	8000bf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40000800 	.word	0x40000800

0800078c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000790:	b672      	cpsid	i
}
 8000792:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000794:	e7fe      	b.n	8000794 <Error_Handler+0x8>
	...

08000798 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800079e:	1d3b      	adds	r3, r7, #4
 80007a0:	2100      	movs	r1, #0
 80007a2:	460a      	mov	r2, r1
 80007a4:	801a      	strh	r2, [r3, #0]
 80007a6:	460a      	mov	r2, r1
 80007a8:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 80007aa:	2300      	movs	r3, #0
 80007ac:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007ae:	4b1d      	ldr	r3, [pc, #116]	; (8000824 <MX_RTC_Init+0x8c>)
 80007b0:	4a1d      	ldr	r2, [pc, #116]	; (8000828 <MX_RTC_Init+0x90>)
 80007b2:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80007b4:	4b1b      	ldr	r3, [pc, #108]	; (8000824 <MX_RTC_Init+0x8c>)
 80007b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007ba:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 80007bc:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_RTC_Init+0x8c>)
 80007be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007c2:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007c4:	4817      	ldr	r0, [pc, #92]	; (8000824 <MX_RTC_Init+0x8c>)
 80007c6:	f001 fb15 	bl	8001df4 <HAL_RTC_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 80007d0:	f7ff ffdc 	bl	800078c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 11;
 80007d4:	230b      	movs	r3, #11
 80007d6:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 59;
 80007d8:	233b      	movs	r3, #59	; 0x3b
 80007da:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	4619      	mov	r1, r3
 80007e6:	480f      	ldr	r0, [pc, #60]	; (8000824 <MX_RTC_Init+0x8c>)
 80007e8:	f001 fb9a 	bl	8001f20 <HAL_RTC_SetTime>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80007f2:	f7ff ffcb 	bl	800078c <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007f6:	2301      	movs	r3, #1
 80007f8:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 80007fa:	2301      	movs	r3, #1
 80007fc:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 80007fe:	2301      	movs	r3, #1
 8000800:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	4805      	ldr	r0, [pc, #20]	; (8000824 <MX_RTC_Init+0x8c>)
 800080e:	f001 fcf7 	bl	8002200 <HAL_RTC_SetDate>
 8000812:	4603      	mov	r3, r0
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000818:	f7ff ffb8 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000e00 	.word	0x20000e00
 8000828:	40002800 	.word	0x40002800

0800082c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <HAL_RTC_MspInit+0x3c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d110      	bne.n	8000860 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 800083e:	f000 fd09 	bl	8001254 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8000842:	4b0a      	ldr	r3, [pc, #40]	; (800086c <HAL_RTC_MspInit+0x40>)
 8000844:	69db      	ldr	r3, [r3, #28]
 8000846:	4a09      	ldr	r2, [pc, #36]	; (800086c <HAL_RTC_MspInit+0x40>)
 8000848:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800084c:	61d3      	str	r3, [r2, #28]
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <HAL_RTC_MspInit+0x40>)
 8000850:	69db      	ldr	r3, [r3, #28]
 8000852:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800085a:	4b05      	ldr	r3, [pc, #20]	; (8000870 <HAL_RTC_MspInit+0x44>)
 800085c:	2201      	movs	r2, #1
 800085e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40002800 	.word	0x40002800
 800086c:	40021000 	.word	0x40021000
 8000870:	4242043c 	.word	0x4242043c

08000874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800087a:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_MspInit+0x5c>)
 800087c:	699b      	ldr	r3, [r3, #24]
 800087e:	4a14      	ldr	r2, [pc, #80]	; (80008d0 <HAL_MspInit+0x5c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6193      	str	r3, [r2, #24]
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <HAL_MspInit+0x5c>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <HAL_MspInit+0x5c>)
 8000894:	69db      	ldr	r3, [r3, #28]
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_MspInit+0x5c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	61d3      	str	r3, [r2, #28]
 800089e:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_MspInit+0x5c>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008aa:	4b0a      	ldr	r3, [pc, #40]	; (80008d4 <HAL_MspInit+0x60>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4a04      	ldr	r2, [pc, #16]	; (80008d4 <HAL_MspInit+0x60>)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bc80      	pop	{r7}
 80008ce:	4770      	bx	lr
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40010000 	.word	0x40010000

080008d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	201e      	movs	r0, #30
 80008ee:	f000 fa52 	bl	8000d96 <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80008f2:	201e      	movs	r0, #30
 80008f4:	f000 fa6b 	bl	8000dce <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80008f8:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <HAL_InitTick+0x9c>)
 80008fa:	69db      	ldr	r3, [r3, #28]
 80008fc:	4a1d      	ldr	r2, [pc, #116]	; (8000974 <HAL_InitTick+0x9c>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	61d3      	str	r3, [r2, #28]
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <HAL_InitTick+0x9c>)
 8000906:	69db      	ldr	r3, [r3, #28]
 8000908:	f003 0304 	and.w	r3, r3, #4
 800090c:	60fb      	str	r3, [r7, #12]
 800090e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000910:	f107 0210 	add.w	r2, r7, #16
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4611      	mov	r1, r2
 800091a:	4618      	mov	r0, r3
 800091c:	f001 f8a2 	bl	8001a64 <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000920:	f001 f878 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 8000924:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000928:	4a13      	ldr	r2, [pc, #76]	; (8000978 <HAL_InitTick+0xa0>)
 800092a:	fba2 2303 	umull	r2, r3, r2, r3
 800092e:	0c9b      	lsrs	r3, r3, #18
 8000930:	3b01      	subs	r3, #1
 8000932:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <HAL_InitTick+0xa4>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <HAL_InitTick+0xa8>)
 8000938:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <HAL_InitTick+0xa4>)
 800093c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000940:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <HAL_InitTick+0xa4>)
 8000944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000946:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <HAL_InitTick+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_InitTick+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <HAL_InitTick+0xa4>)
 8000956:	f001 ffff 	bl	8002958 <HAL_TIM_Base_Init>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d104      	bne.n	800096a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <HAL_InitTick+0xa4>)
 8000962:	f002 f851 	bl	8002a08 <HAL_TIM_Base_Start_IT>
 8000966:	4603      	mov	r3, r0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3730      	adds	r7, #48	; 0x30
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	40021000 	.word	0x40021000
 8000978:	431bde83 	.word	0x431bde83
 800097c:	20000e14 	.word	0x20000e14
 8000980:	40000800 	.word	0x40000800

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
	...

080009b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80009b4:	4802      	ldr	r0, [pc, #8]	; (80009c0 <TIM4_IRQHandler+0x10>)
 80009b6:	f002 f879 	bl	8002aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000e14 	.word	0x20000e14

080009c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009c8:	4802      	ldr	r0, [pc, #8]	; (80009d4 <USART1_IRQHandler+0x10>)
 80009ca:	f002 fb91 	bl	80030f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	20000e5c 	.word	0x20000e5c

080009d8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	60f8      	str	r0, [r7, #12]
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	e00a      	b.n	8000a00 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80009ea:	f3af 8000 	nop.w
 80009ee:	4601      	mov	r1, r0
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	1c5a      	adds	r2, r3, #1
 80009f4:	60ba      	str	r2, [r7, #8]
 80009f6:	b2ca      	uxtb	r2, r1
 80009f8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	3301      	adds	r3, #1
 80009fe:	617b      	str	r3, [r7, #20]
 8000a00:	697a      	ldr	r2, [r7, #20]
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	429a      	cmp	r2, r3
 8000a06:	dbf0      	blt.n	80009ea <_read+0x12>
	}

return len;
 8000a08:	687b      	ldr	r3, [r7, #4]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	return -1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	370c      	adds	r7, #12
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bc80      	pop	{r7}
 8000a26:	4770      	bx	lr

08000a28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a38:	605a      	str	r2, [r3, #4]
	return 0;
 8000a3a:	2300      	movs	r3, #0
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr

08000a46 <_isatty>:

int _isatty(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
	return 1;
 8000a4e:	2301      	movs	r3, #1
}
 8000a50:	4618      	mov	r0, r3
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr

08000a5a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b085      	sub	sp, #20
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	60f8      	str	r0, [r7, #12]
 8000a62:	60b9      	str	r1, [r7, #8]
 8000a64:	607a      	str	r2, [r7, #4]
	return 0;
 8000a66:	2300      	movs	r3, #0
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bc80      	pop	{r7}
 8000a70:	4770      	bx	lr

08000a72 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr
	...

08000a80 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a84:	4b11      	ldr	r3, [pc, #68]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a86:	4a12      	ldr	r2, [pc, #72]	; (8000ad0 <MX_USART1_UART_Init+0x50>)
 8000a88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000aa6:	220c      	movs	r2, #12
 8000aa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab6:	4805      	ldr	r0, [pc, #20]	; (8000acc <MX_USART1_UART_Init+0x4c>)
 8000ab8:	f002 f998 	bl	8002dec <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ac2:	f7ff fe63 	bl	800078c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000e5c 	.word	0x20000e5c
 8000ad0:	40013800 	.word	0x40013800

08000ad4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b088      	sub	sp, #32
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000adc:	f107 0310 	add.w	r3, r7, #16
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a20      	ldr	r2, [pc, #128]	; (8000b70 <HAL_UART_MspInit+0x9c>)
 8000af0:	4293      	cmp	r3, r2
 8000af2:	d139      	bne.n	8000b68 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000af4:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <HAL_UART_MspInit+0xa0>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a1e      	ldr	r2, [pc, #120]	; (8000b74 <HAL_UART_MspInit+0xa0>)
 8000afa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b1c      	ldr	r3, [pc, #112]	; (8000b74 <HAL_UART_MspInit+0xa0>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0c:	4b19      	ldr	r3, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0xa0>)
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	4a18      	ldr	r2, [pc, #96]	; (8000b74 <HAL_UART_MspInit+0xa0>)
 8000b12:	f043 0304 	orr.w	r3, r3, #4
 8000b16:	6193      	str	r3, [r2, #24]
 8000b18:	4b16      	ldr	r3, [pc, #88]	; (8000b74 <HAL_UART_MspInit+0xa0>)
 8000b1a:	699b      	ldr	r3, [r3, #24]
 8000b1c:	f003 0304 	and.w	r3, r3, #4
 8000b20:	60bb      	str	r3, [r7, #8]
 8000b22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000b24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0310 	add.w	r3, r7, #16
 8000b36:	4619      	mov	r1, r3
 8000b38:	480f      	ldr	r0, [pc, #60]	; (8000b78 <HAL_UART_MspInit+0xa4>)
 8000b3a:	f000 fa07 	bl	8000f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b42:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	4619      	mov	r1, r3
 8000b52:	4809      	ldr	r0, [pc, #36]	; (8000b78 <HAL_UART_MspInit+0xa4>)
 8000b54:	f000 f9fa 	bl	8000f4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2106      	movs	r1, #6
 8000b5c:	2025      	movs	r0, #37	; 0x25
 8000b5e:	f000 f91a 	bl	8000d96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b62:	2025      	movs	r0, #37	; 0x25
 8000b64:	f000 f933 	bl	8000dce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b68:	bf00      	nop
 8000b6a:	3720      	adds	r7, #32
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40013800 	.word	0x40013800
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010800 	.word	0x40010800

08000b7c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b7c:	480c      	ldr	r0, [pc, #48]	; (8000bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b7e:	490d      	ldr	r1, [pc, #52]	; (8000bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b84:	e002      	b.n	8000b8c <LoopCopyDataInit>

08000b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8a:	3304      	adds	r3, #4

08000b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b90:	d3f9      	bcc.n	8000b86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b94:	4c0a      	ldr	r4, [pc, #40]	; (8000bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b98:	e001      	b.n	8000b9e <LoopFillZerobss>

08000b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b9c:	3204      	adds	r2, #4

08000b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba0:	d3fb      	bcc.n	8000b9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ba2:	f7ff ff66 	bl	8000a72 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f004 ff19 	bl	80059dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000baa:	f7ff fb31 	bl	8000210 <main>
  bx lr
 8000bae:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000bb8:	08007190 	.word	0x08007190
  ldr r2, =_sbss
 8000bbc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000bc0:	20000eb4 	.word	0x20000eb4

08000bc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc4:	e7fe      	b.n	8000bc4 <ADC1_2_IRQHandler>
	...

08000bc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_Init+0x28>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_Init+0x28>)
 8000bd2:	f043 0310 	orr.w	r3, r3, #16
 8000bd6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f8d1 	bl	8000d80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bde:	200f      	movs	r0, #15
 8000be0:	f7ff fe7a 	bl	80008d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be4:	f7ff fe46 	bl	8000874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40022000 	.word	0x40022000

08000bf4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <HAL_IncTick+0x1c>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x20>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a03      	ldr	r2, [pc, #12]	; (8000c14 <HAL_IncTick+0x20>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bc80      	pop	{r7}
 8000c0e:	4770      	bx	lr
 8000c10:	20000020 	.word	0x20000020
 8000c14:	20000ea0 	.word	0x20000ea0

08000c18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b02      	ldr	r3, [pc, #8]	; (8000c28 <HAL_GetTick+0x10>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	20000ea0 	.word	0x20000ea0

08000c2c <__NVIC_SetPriorityGrouping>:
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f003 0307 	and.w	r3, r3, #7
 8000c3a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c42:	68ba      	ldr	r2, [r7, #8]
 8000c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <__NVIC_SetPriorityGrouping+0x44>)
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	60d3      	str	r3, [r2, #12]
}
 8000c64:	bf00      	nop
 8000c66:	3714      	adds	r7, #20
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <__NVIC_GetPriorityGrouping>:
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c78:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <__NVIC_GetPriorityGrouping+0x18>)
 8000c7a:	68db      	ldr	r3, [r3, #12]
 8000c7c:	0a1b      	lsrs	r3, r3, #8
 8000c7e:	f003 0307 	and.w	r3, r3, #7
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_EnableIRQ>:
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	db0b      	blt.n	8000cba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	f003 021f 	and.w	r2, r3, #31
 8000ca8:	4906      	ldr	r1, [pc, #24]	; (8000cc4 <__NVIC_EnableIRQ+0x34>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	095b      	lsrs	r3, r3, #5
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000cba:	bf00      	nop
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff4f 	bl	8000c2c <__NVIC_SetPriorityGrouping>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000da8:	f7ff ff64 	bl	8000c74 <__NVIC_GetPriorityGrouping>
 8000dac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	6978      	ldr	r0, [r7, #20]
 8000db4:	f7ff ffb2 	bl	8000d1c <NVIC_EncodePriority>
 8000db8:	4602      	mov	r2, r0
 8000dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff81 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000dc6:	bf00      	nop
 8000dc8:	3718      	adds	r7, #24
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff57 	bl	8000c90 <__NVIC_EnableIRQ>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b085      	sub	sp, #20
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d008      	beq.n	8000e12 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2204      	movs	r2, #4
 8000e04:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e020      	b.n	8000e54 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f022 020e 	bic.w	r2, r2, #14
 8000e20:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f022 0201 	bic.w	r2, r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e40:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
	...

08000e60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d005      	beq.n	8000e82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2204      	movs	r2, #4
 8000e7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	73fb      	strb	r3, [r7, #15]
 8000e80:	e051      	b.n	8000f26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 020e 	bic.w	r2, r2, #14
 8000e90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f022 0201 	bic.w	r2, r2, #1
 8000ea0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a22      	ldr	r2, [pc, #136]	; (8000f30 <HAL_DMA_Abort_IT+0xd0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d029      	beq.n	8000f00 <HAL_DMA_Abort_IT+0xa0>
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a20      	ldr	r2, [pc, #128]	; (8000f34 <HAL_DMA_Abort_IT+0xd4>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d022      	beq.n	8000efc <HAL_DMA_Abort_IT+0x9c>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1f      	ldr	r2, [pc, #124]	; (8000f38 <HAL_DMA_Abort_IT+0xd8>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d01a      	beq.n	8000ef6 <HAL_DMA_Abort_IT+0x96>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <HAL_DMA_Abort_IT+0xdc>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d012      	beq.n	8000ef0 <HAL_DMA_Abort_IT+0x90>
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <HAL_DMA_Abort_IT+0xe0>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d00a      	beq.n	8000eea <HAL_DMA_Abort_IT+0x8a>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a1a      	ldr	r2, [pc, #104]	; (8000f44 <HAL_DMA_Abort_IT+0xe4>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d102      	bne.n	8000ee4 <HAL_DMA_Abort_IT+0x84>
 8000ede:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ee2:	e00e      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000ee4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ee8:	e00b      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000eea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000eee:	e008      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef4:	e005      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000efa:	e002      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000efc:	2310      	movs	r3, #16
 8000efe:	e000      	b.n	8000f02 <HAL_DMA_Abort_IT+0xa2>
 8000f00:	2301      	movs	r3, #1
 8000f02:	4a11      	ldr	r2, [pc, #68]	; (8000f48 <HAL_DMA_Abort_IT+0xe8>)
 8000f04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d003      	beq.n	8000f26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	4798      	blx	r3
    } 
  }
  return status;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40020008 	.word	0x40020008
 8000f34:	4002001c 	.word	0x4002001c
 8000f38:	40020030 	.word	0x40020030
 8000f3c:	40020044 	.word	0x40020044
 8000f40:	40020058 	.word	0x40020058
 8000f44:	4002006c 	.word	0x4002006c
 8000f48:	40020000 	.word	0x40020000

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b08b      	sub	sp, #44	; 0x2c
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5e:	e169      	b.n	8001234 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f60:	2201      	movs	r2, #1
 8000f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	69fa      	ldr	r2, [r7, #28]
 8000f70:	4013      	ands	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8158 	bne.w	800122e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	4a9a      	ldr	r2, [pc, #616]	; (80011ec <HAL_GPIO_Init+0x2a0>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d05e      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000f88:	4a98      	ldr	r2, [pc, #608]	; (80011ec <HAL_GPIO_Init+0x2a0>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d875      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000f8e:	4a98      	ldr	r2, [pc, #608]	; (80011f0 <HAL_GPIO_Init+0x2a4>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d058      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000f94:	4a96      	ldr	r2, [pc, #600]	; (80011f0 <HAL_GPIO_Init+0x2a4>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d86f      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000f9a:	4a96      	ldr	r2, [pc, #600]	; (80011f4 <HAL_GPIO_Init+0x2a8>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d052      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fa0:	4a94      	ldr	r2, [pc, #592]	; (80011f4 <HAL_GPIO_Init+0x2a8>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d869      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fa6:	4a94      	ldr	r2, [pc, #592]	; (80011f8 <HAL_GPIO_Init+0x2ac>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d04c      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fac:	4a92      	ldr	r2, [pc, #584]	; (80011f8 <HAL_GPIO_Init+0x2ac>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d863      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fb2:	4a92      	ldr	r2, [pc, #584]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d046      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
 8000fb8:	4a90      	ldr	r2, [pc, #576]	; (80011fc <HAL_GPIO_Init+0x2b0>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d85d      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fbe:	2b12      	cmp	r3, #18
 8000fc0:	d82a      	bhi.n	8001018 <HAL_GPIO_Init+0xcc>
 8000fc2:	2b12      	cmp	r3, #18
 8000fc4:	d859      	bhi.n	800107a <HAL_GPIO_Init+0x12e>
 8000fc6:	a201      	add	r2, pc, #4	; (adr r2, 8000fcc <HAL_GPIO_Init+0x80>)
 8000fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fcc:	08001047 	.word	0x08001047
 8000fd0:	08001021 	.word	0x08001021
 8000fd4:	08001033 	.word	0x08001033
 8000fd8:	08001075 	.word	0x08001075
 8000fdc:	0800107b 	.word	0x0800107b
 8000fe0:	0800107b 	.word	0x0800107b
 8000fe4:	0800107b 	.word	0x0800107b
 8000fe8:	0800107b 	.word	0x0800107b
 8000fec:	0800107b 	.word	0x0800107b
 8000ff0:	0800107b 	.word	0x0800107b
 8000ff4:	0800107b 	.word	0x0800107b
 8000ff8:	0800107b 	.word	0x0800107b
 8000ffc:	0800107b 	.word	0x0800107b
 8001000:	0800107b 	.word	0x0800107b
 8001004:	0800107b 	.word	0x0800107b
 8001008:	0800107b 	.word	0x0800107b
 800100c:	0800107b 	.word	0x0800107b
 8001010:	08001029 	.word	0x08001029
 8001014:	0800103d 	.word	0x0800103d
 8001018:	4a79      	ldr	r2, [pc, #484]	; (8001200 <HAL_GPIO_Init+0x2b4>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800101e:	e02c      	b.n	800107a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	623b      	str	r3, [r7, #32]
          break;
 8001026:	e029      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	3304      	adds	r3, #4
 800102e:	623b      	str	r3, [r7, #32]
          break;
 8001030:	e024      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	68db      	ldr	r3, [r3, #12]
 8001036:	3308      	adds	r3, #8
 8001038:	623b      	str	r3, [r7, #32]
          break;
 800103a:	e01f      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	330c      	adds	r3, #12
 8001042:	623b      	str	r3, [r7, #32]
          break;
 8001044:	e01a      	b.n	800107c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800104e:	2304      	movs	r3, #4
 8001050:	623b      	str	r3, [r7, #32]
          break;
 8001052:	e013      	b.n	800107c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d105      	bne.n	8001068 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800105c:	2308      	movs	r3, #8
 800105e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	69fa      	ldr	r2, [r7, #28]
 8001064:	611a      	str	r2, [r3, #16]
          break;
 8001066:	e009      	b.n	800107c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001068:	2308      	movs	r3, #8
 800106a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69fa      	ldr	r2, [r7, #28]
 8001070:	615a      	str	r2, [r3, #20]
          break;
 8001072:	e003      	b.n	800107c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
          break;
 8001078:	e000      	b.n	800107c <HAL_GPIO_Init+0x130>
          break;
 800107a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2bff      	cmp	r3, #255	; 0xff
 8001080:	d801      	bhi.n	8001086 <HAL_GPIO_Init+0x13a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	e001      	b.n	800108a <HAL_GPIO_Init+0x13e>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3304      	adds	r3, #4
 800108a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	2bff      	cmp	r3, #255	; 0xff
 8001090:	d802      	bhi.n	8001098 <HAL_GPIO_Init+0x14c>
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	e002      	b.n	800109e <HAL_GPIO_Init+0x152>
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	3b08      	subs	r3, #8
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	210f      	movs	r1, #15
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	fa01 f303 	lsl.w	r3, r1, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	401a      	ands	r2, r3
 80010b0:	6a39      	ldr	r1, [r7, #32]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	fa01 f303 	lsl.w	r3, r1, r3
 80010b8:	431a      	orrs	r2, r3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 80b1 	beq.w	800122e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010cc:	4b4d      	ldr	r3, [pc, #308]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a4c      	ldr	r2, [pc, #304]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b4a      	ldr	r3, [pc, #296]	; (8001204 <HAL_GPIO_Init+0x2b8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010e4:	4a48      	ldr	r2, [pc, #288]	; (8001208 <HAL_GPIO_Init+0x2bc>)
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	220f      	movs	r2, #15
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	68fa      	ldr	r2, [r7, #12]
 8001104:	4013      	ands	r3, r2
 8001106:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a40      	ldr	r2, [pc, #256]	; (800120c <HAL_GPIO_Init+0x2c0>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d013      	beq.n	8001138 <HAL_GPIO_Init+0x1ec>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a3f      	ldr	r2, [pc, #252]	; (8001210 <HAL_GPIO_Init+0x2c4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d00d      	beq.n	8001134 <HAL_GPIO_Init+0x1e8>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4a3e      	ldr	r2, [pc, #248]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d007      	beq.n	8001130 <HAL_GPIO_Init+0x1e4>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a3d      	ldr	r2, [pc, #244]	; (8001218 <HAL_GPIO_Init+0x2cc>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d101      	bne.n	800112c <HAL_GPIO_Init+0x1e0>
 8001128:	2303      	movs	r3, #3
 800112a:	e006      	b.n	800113a <HAL_GPIO_Init+0x1ee>
 800112c:	2304      	movs	r3, #4
 800112e:	e004      	b.n	800113a <HAL_GPIO_Init+0x1ee>
 8001130:	2302      	movs	r3, #2
 8001132:	e002      	b.n	800113a <HAL_GPIO_Init+0x1ee>
 8001134:	2301      	movs	r3, #1
 8001136:	e000      	b.n	800113a <HAL_GPIO_Init+0x1ee>
 8001138:	2300      	movs	r3, #0
 800113a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800113c:	f002 0203 	and.w	r2, r2, #3
 8001140:	0092      	lsls	r2, r2, #2
 8001142:	4093      	lsls	r3, r2
 8001144:	68fa      	ldr	r2, [r7, #12]
 8001146:	4313      	orrs	r3, r2
 8001148:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800114a:	492f      	ldr	r1, [pc, #188]	; (8001208 <HAL_GPIO_Init+0x2bc>)
 800114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114e:	089b      	lsrs	r3, r3, #2
 8001150:	3302      	adds	r3, #2
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d006      	beq.n	8001172 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001164:	4b2d      	ldr	r3, [pc, #180]	; (800121c <HAL_GPIO_Init+0x2d0>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	492c      	ldr	r1, [pc, #176]	; (800121c <HAL_GPIO_Init+0x2d0>)
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
 8001170:	e006      	b.n	8001180 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <HAL_GPIO_Init+0x2d0>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	43db      	mvns	r3, r3
 800117a:	4928      	ldr	r1, [pc, #160]	; (800121c <HAL_GPIO_Init+0x2d0>)
 800117c:	4013      	ands	r3, r2
 800117e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d006      	beq.n	800119a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800118c:	4b23      	ldr	r3, [pc, #140]	; (800121c <HAL_GPIO_Init+0x2d0>)
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	4922      	ldr	r1, [pc, #136]	; (800121c <HAL_GPIO_Init+0x2d0>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	4313      	orrs	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
 8001198:	e006      	b.n	80011a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_GPIO_Init+0x2d0>)
 800119c:	685a      	ldr	r2, [r3, #4]
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	491e      	ldr	r1, [pc, #120]	; (800121c <HAL_GPIO_Init+0x2d0>)
 80011a4:	4013      	ands	r3, r2
 80011a6:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d006      	beq.n	80011c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011b4:	4b19      	ldr	r3, [pc, #100]	; (800121c <HAL_GPIO_Init+0x2d0>)
 80011b6:	689a      	ldr	r2, [r3, #8]
 80011b8:	4918      	ldr	r1, [pc, #96]	; (800121c <HAL_GPIO_Init+0x2d0>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	4313      	orrs	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
 80011c0:	e006      	b.n	80011d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011c2:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_GPIO_Init+0x2d0>)
 80011c4:	689a      	ldr	r2, [r3, #8]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	4914      	ldr	r1, [pc, #80]	; (800121c <HAL_GPIO_Init+0x2d0>)
 80011cc:	4013      	ands	r3, r2
 80011ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d021      	beq.n	8001220 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011dc:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_GPIO_Init+0x2d0>)
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	490e      	ldr	r1, [pc, #56]	; (800121c <HAL_GPIO_Init+0x2d0>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
 80011e8:	e021      	b.n	800122e <HAL_GPIO_Init+0x2e2>
 80011ea:	bf00      	nop
 80011ec:	10320000 	.word	0x10320000
 80011f0:	10310000 	.word	0x10310000
 80011f4:	10220000 	.word	0x10220000
 80011f8:	10210000 	.word	0x10210000
 80011fc:	10120000 	.word	0x10120000
 8001200:	10110000 	.word	0x10110000
 8001204:	40021000 	.word	0x40021000
 8001208:	40010000 	.word	0x40010000
 800120c:	40010800 	.word	0x40010800
 8001210:	40010c00 	.word	0x40010c00
 8001214:	40011000 	.word	0x40011000
 8001218:	40011400 	.word	0x40011400
 800121c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001220:	4b0b      	ldr	r3, [pc, #44]	; (8001250 <HAL_GPIO_Init+0x304>)
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	43db      	mvns	r3, r3
 8001228:	4909      	ldr	r1, [pc, #36]	; (8001250 <HAL_GPIO_Init+0x304>)
 800122a:	4013      	ands	r3, r2
 800122c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	3301      	adds	r3, #1
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	fa22 f303 	lsr.w	r3, r2, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	f47f ae8e 	bne.w	8000f60 <HAL_GPIO_Init+0x14>
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	372c      	adds	r7, #44	; 0x2c
 800124a:	46bd      	mov	sp, r7
 800124c:	bc80      	pop	{r7}
 800124e:	4770      	bx	lr
 8001250:	40010400 	.word	0x40010400

08001254 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001258:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_PWR_EnableBkUpAccess+0x14>)
 800125a:	2201      	movs	r2, #1
 800125c:	601a      	str	r2, [r3, #0]
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	420e0020 	.word	0x420e0020

0800126c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d101      	bne.n	800127e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e26c      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 8087 	beq.w	800139a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800128c:	4b92      	ldr	r3, [pc, #584]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b04      	cmp	r3, #4
 8001296:	d00c      	beq.n	80012b2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001298:	4b8f      	ldr	r3, [pc, #572]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d112      	bne.n	80012ca <HAL_RCC_OscConfig+0x5e>
 80012a4:	4b8c      	ldr	r3, [pc, #560]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d10b      	bne.n	80012ca <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b2:	4b89      	ldr	r3, [pc, #548]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d06c      	beq.n	8001398 <HAL_RCC_OscConfig+0x12c>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d168      	bne.n	8001398 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e246      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d2:	d106      	bne.n	80012e2 <HAL_RCC_OscConfig+0x76>
 80012d4:	4b80      	ldr	r3, [pc, #512]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a7f      	ldr	r2, [pc, #508]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	e02e      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x98>
 80012ea:	4b7b      	ldr	r3, [pc, #492]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a7a      	ldr	r2, [pc, #488]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b78      	ldr	r3, [pc, #480]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a77      	ldr	r2, [pc, #476]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80012fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0xbc>
 800130e:	4b72      	ldr	r3, [pc, #456]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a71      	ldr	r2, [pc, #452]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b6f      	ldr	r3, [pc, #444]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a6e      	ldr	r2, [pc, #440]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0xd4>
 8001328:	4b6b      	ldr	r3, [pc, #428]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a6a      	ldr	r2, [pc, #424]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b68      	ldr	r3, [pc, #416]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a67      	ldr	r2, [pc, #412]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fc66 	bl	8000c18 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fc62 	bl	8000c18 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e1fa      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0xe4>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fc52 	bl	8000c18 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fc4e 	bl	8000c18 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1e6      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	4b53      	ldr	r3, [pc, #332]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x10c>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d063      	beq.n	800146e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013a6:	4b4c      	ldr	r3, [pc, #304]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d00b      	beq.n	80013ca <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013b2:	4b49      	ldr	r3, [pc, #292]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 030c 	and.w	r3, r3, #12
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d11c      	bne.n	80013f8 <HAL_RCC_OscConfig+0x18c>
 80013be:	4b46      	ldr	r3, [pc, #280]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d116      	bne.n	80013f8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ca:	4b43      	ldr	r3, [pc, #268]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <HAL_RCC_OscConfig+0x176>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	2b01      	cmp	r3, #1
 80013dc:	d001      	beq.n	80013e2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e1ba      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	4939      	ldr	r1, [pc, #228]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	e03a      	b.n	800146e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	691b      	ldr	r3, [r3, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d020      	beq.n	8001442 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001400:	4b36      	ldr	r3, [pc, #216]	; (80014dc <HAL_RCC_OscConfig+0x270>)
 8001402:	2201      	movs	r2, #1
 8001404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001406:	f7ff fc07 	bl	8000c18 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140e:	f7ff fc03 	bl	8000c18 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e19b      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	4b2d      	ldr	r3, [pc, #180]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d0f0      	beq.n	800140e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	695b      	ldr	r3, [r3, #20]
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4927      	ldr	r1, [pc, #156]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 800143c:	4313      	orrs	r3, r2
 800143e:	600b      	str	r3, [r1, #0]
 8001440:	e015      	b.n	800146e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001442:	4b26      	ldr	r3, [pc, #152]	; (80014dc <HAL_RCC_OscConfig+0x270>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fbe6 	bl	8000c18 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001450:	f7ff fbe2 	bl	8000c18 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e17a      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	4b1d      	ldr	r3, [pc, #116]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	2b00      	cmp	r3, #0
 8001478:	d03a      	beq.n	80014f0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d019      	beq.n	80014b6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001482:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <HAL_RCC_OscConfig+0x274>)
 8001484:	2201      	movs	r2, #1
 8001486:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001488:	f7ff fbc6 	bl	8000c18 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001490:	f7ff fbc2 	bl	8000c18 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b02      	cmp	r3, #2
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e15a      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	4b0d      	ldr	r3, [pc, #52]	; (80014d8 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014ae:	2001      	movs	r0, #1
 80014b0:	f000 fb08 	bl	8001ac4 <RCC_Delay>
 80014b4:	e01c      	b.n	80014f0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_RCC_OscConfig+0x274>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff fbac 	bl	8000c18 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c2:	e00f      	b.n	80014e4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fba8 	bl	8000c18 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d908      	bls.n	80014e4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e140      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000
 80014dc:	42420000 	.word	0x42420000
 80014e0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e4:	4b9e      	ldr	r3, [pc, #632]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80014e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1e9      	bne.n	80014c4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f000 80a6 	beq.w	800164a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001502:	4b97      	ldr	r3, [pc, #604]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800150e:	4b94      	ldr	r3, [pc, #592]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	4a93      	ldr	r2, [pc, #588]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001518:	61d3      	str	r3, [r2, #28]
 800151a:	4b91      	ldr	r3, [pc, #580]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800151c:	69db      	ldr	r3, [r3, #28]
 800151e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001526:	2301      	movs	r3, #1
 8001528:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800152a:	4b8e      	ldr	r3, [pc, #568]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001532:	2b00      	cmp	r3, #0
 8001534:	d118      	bne.n	8001568 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001536:	4b8b      	ldr	r3, [pc, #556]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a8a      	ldr	r2, [pc, #552]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 800153c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001540:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001542:	f7ff fb69 	bl	8000c18 <HAL_GetTick>
 8001546:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800154a:	f7ff fb65 	bl	8000c18 <HAL_GetTick>
 800154e:	4602      	mov	r2, r0
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	; 0x64
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e0fd      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	4b81      	ldr	r3, [pc, #516]	; (8001764 <HAL_RCC_OscConfig+0x4f8>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0f0      	beq.n	800154a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d106      	bne.n	800157e <HAL_RCC_OscConfig+0x312>
 8001570:	4b7b      	ldr	r3, [pc, #492]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a7a      	ldr	r2, [pc, #488]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e02d      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10c      	bne.n	80015a0 <HAL_RCC_OscConfig+0x334>
 8001586:	4b76      	ldr	r3, [pc, #472]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4a75      	ldr	r2, [pc, #468]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800158c:	f023 0301 	bic.w	r3, r3, #1
 8001590:	6213      	str	r3, [r2, #32]
 8001592:	4b73      	ldr	r3, [pc, #460]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001594:	6a1b      	ldr	r3, [r3, #32]
 8001596:	4a72      	ldr	r2, [pc, #456]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001598:	f023 0304 	bic.w	r3, r3, #4
 800159c:	6213      	str	r3, [r2, #32]
 800159e:	e01c      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d10c      	bne.n	80015c2 <HAL_RCC_OscConfig+0x356>
 80015a8:	4b6d      	ldr	r3, [pc, #436]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a6c      	ldr	r2, [pc, #432]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015ae:	f043 0304 	orr.w	r3, r3, #4
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	4b6a      	ldr	r3, [pc, #424]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015b6:	6a1b      	ldr	r3, [r3, #32]
 80015b8:	4a69      	ldr	r2, [pc, #420]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	6213      	str	r3, [r2, #32]
 80015c0:	e00b      	b.n	80015da <HAL_RCC_OscConfig+0x36e>
 80015c2:	4b67      	ldr	r3, [pc, #412]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4a66      	ldr	r2, [pc, #408]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015c8:	f023 0301 	bic.w	r3, r3, #1
 80015cc:	6213      	str	r3, [r2, #32]
 80015ce:	4b64      	ldr	r3, [pc, #400]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015d0:	6a1b      	ldr	r3, [r3, #32]
 80015d2:	4a63      	ldr	r2, [pc, #396]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80015d4:	f023 0304 	bic.w	r3, r3, #4
 80015d8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d015      	beq.n	800160e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e2:	f7ff fb19 	bl	8000c18 <HAL_GetTick>
 80015e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015e8:	e00a      	b.n	8001600 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015ea:	f7ff fb15 	bl	8000c18 <HAL_GetTick>
 80015ee:	4602      	mov	r2, r0
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	1ad3      	subs	r3, r2, r3
 80015f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e0ab      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001600:	4b57      	ldr	r3, [pc, #348]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001602:	6a1b      	ldr	r3, [r3, #32]
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0ee      	beq.n	80015ea <HAL_RCC_OscConfig+0x37e>
 800160c:	e014      	b.n	8001638 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800160e:	f7ff fb03 	bl	8000c18 <HAL_GetTick>
 8001612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001614:	e00a      	b.n	800162c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001616:	f7ff faff 	bl	8000c18 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	f241 3288 	movw	r2, #5000	; 0x1388
 8001624:	4293      	cmp	r3, r2
 8001626:	d901      	bls.n	800162c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001628:	2303      	movs	r3, #3
 800162a:	e095      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800162c:	4b4c      	ldr	r3, [pc, #304]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	f003 0302 	and.w	r3, r3, #2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1ee      	bne.n	8001616 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d105      	bne.n	800164a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163e:	4b48      	ldr	r3, [pc, #288]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	4a47      	ldr	r2, [pc, #284]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001644:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001648:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	69db      	ldr	r3, [r3, #28]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8081 	beq.w	8001756 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	4b42      	ldr	r3, [pc, #264]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d061      	beq.n	8001724 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	2b02      	cmp	r3, #2
 8001666:	d146      	bne.n	80016f6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <HAL_RCC_OscConfig+0x4fc>)
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166e:	f7ff fad3 	bl	8000c18 <HAL_GetTick>
 8001672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001674:	e008      	b.n	8001688 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001676:	f7ff facf 	bl	8000c18 <HAL_GetTick>
 800167a:	4602      	mov	r2, r0
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e067      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001688:	4b35      	ldr	r3, [pc, #212]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1f0      	bne.n	8001676 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800169c:	d108      	bne.n	80016b0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	492d      	ldr	r1, [pc, #180]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b0:	4b2b      	ldr	r3, [pc, #172]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a19      	ldr	r1, [r3, #32]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	430b      	orrs	r3, r1
 80016c2:	4927      	ldr	r1, [pc, #156]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016c4:	4313      	orrs	r3, r2
 80016c6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c8:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_RCC_OscConfig+0x4fc>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ce:	f7ff faa3 	bl	8000c18 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d6:	f7ff fa9f 	bl	8000c18 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e037      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e8:	4b1d      	ldr	r3, [pc, #116]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x46a>
 80016f4:	e02f      	b.n	8001756 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f6:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <HAL_RCC_OscConfig+0x4fc>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016fc:	f7ff fa8c 	bl	8000c18 <HAL_GetTick>
 8001700:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001704:	f7ff fa88 	bl	8000c18 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e020      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d1f0      	bne.n	8001704 <HAL_RCC_OscConfig+0x498>
 8001722:	e018      	b.n	8001756 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e013      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001730:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <HAL_RCC_OscConfig+0x4f4>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	429a      	cmp	r2, r3
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000
 8001764:	40007000 	.word	0x40007000
 8001768:	42420060 	.word	0x42420060

0800176c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0d0      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001780:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0307 	and.w	r3, r3, #7
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	429a      	cmp	r2, r3
 800178c:	d910      	bls.n	80017b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800178e:	4b67      	ldr	r3, [pc, #412]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f023 0207 	bic.w	r2, r3, #7
 8001796:	4965      	ldr	r1, [pc, #404]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	4313      	orrs	r3, r2
 800179c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800179e:	4b63      	ldr	r3, [pc, #396]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d001      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e0b8      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d005      	beq.n	80017d4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c8:	4b59      	ldr	r3, [pc, #356]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017d2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a52      	ldr	r2, [pc, #328]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017ea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b50      	ldr	r3, [pc, #320]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	494d      	ldr	r1, [pc, #308]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d040      	beq.n	800188c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b47      	ldr	r3, [pc, #284]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d115      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07f      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b41      	ldr	r3, [pc, #260]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d109      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e073      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800183a:	4b3d      	ldr	r3, [pc, #244]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06b      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800184a:	4b39      	ldr	r3, [pc, #228]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f023 0203 	bic.w	r2, r3, #3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4936      	ldr	r1, [pc, #216]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800185c:	f7ff f9dc 	bl	8000c18 <HAL_GetTick>
 8001860:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001862:	e00a      	b.n	800187a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001864:	f7ff f9d8 	bl	8000c18 <HAL_GetTick>
 8001868:	4602      	mov	r2, r0
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001872:	4293      	cmp	r3, r2
 8001874:	d901      	bls.n	800187a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e053      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 020c 	and.w	r2, r3, #12
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	429a      	cmp	r2, r3
 800188a:	d1eb      	bne.n	8001864 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800188c:	4b27      	ldr	r3, [pc, #156]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	683a      	ldr	r2, [r7, #0]
 8001896:	429a      	cmp	r2, r3
 8001898:	d210      	bcs.n	80018bc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800189a:	4b24      	ldr	r3, [pc, #144]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 0207 	bic.w	r2, r3, #7
 80018a2:	4922      	ldr	r1, [pc, #136]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018aa:	4b20      	ldr	r3, [pc, #128]	; (800192c <HAL_RCC_ClockConfig+0x1c0>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d001      	beq.n	80018bc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e032      	b.n	8001922 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0304 	and.w	r3, r3, #4
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d008      	beq.n	80018da <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c8:	4b19      	ldr	r3, [pc, #100]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4916      	ldr	r1, [pc, #88]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d009      	beq.n	80018fa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018e6:	4b12      	ldr	r3, [pc, #72]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	00db      	lsls	r3, r3, #3
 80018f4:	490e      	ldr	r1, [pc, #56]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018fa:	f000 f821 	bl	8001940 <HAL_RCC_GetSysClockFreq>
 80018fe:	4602      	mov	r2, r0
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	091b      	lsrs	r3, r3, #4
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	490a      	ldr	r1, [pc, #40]	; (8001934 <HAL_RCC_ClockConfig+0x1c8>)
 800190c:	5ccb      	ldrb	r3, [r1, r3]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	4a09      	ldr	r2, [pc, #36]	; (8001938 <HAL_RCC_ClockConfig+0x1cc>)
 8001914:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001916:	4b09      	ldr	r3, [pc, #36]	; (800193c <HAL_RCC_ClockConfig+0x1d0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe ffdc 	bl	80008d8 <HAL_InitTick>

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40022000 	.word	0x40022000
 8001930:	40021000 	.word	0x40021000
 8001934:	08006fd4 	.word	0x08006fd4
 8001938:	20000018 	.word	0x20000018
 800193c:	2000001c 	.word	0x2000001c

08001940 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001940:	b490      	push	{r4, r7}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001946:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001948:	1d3c      	adds	r4, r7, #4
 800194a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800194c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001950:	f240 2301 	movw	r3, #513	; 0x201
 8001954:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f003 030c 	and.w	r3, r3, #12
 8001976:	2b04      	cmp	r3, #4
 8001978:	d002      	beq.n	8001980 <HAL_RCC_GetSysClockFreq+0x40>
 800197a:	2b08      	cmp	r3, #8
 800197c:	d003      	beq.n	8001986 <HAL_RCC_GetSysClockFreq+0x46>
 800197e:	e02d      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001980:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001982:	623b      	str	r3, [r7, #32]
      break;
 8001984:	e02d      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	0c9b      	lsrs	r3, r3, #18
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001992:	4413      	add	r3, r2
 8001994:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001998:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d013      	beq.n	80019cc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a4:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	0c5b      	lsrs	r3, r3, #17
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019b2:	4413      	add	r3, r2
 80019b4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019b8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	4a0e      	ldr	r2, [pc, #56]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019be:	fb02 f203 	mul.w	r2, r2, r3
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ca:	e004      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	4a0b      	ldr	r2, [pc, #44]	; (80019fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80019d0:	fb02 f303 	mul.w	r3, r2, r3
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d8:	623b      	str	r3, [r7, #32]
      break;
 80019da:	e002      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019de:	623b      	str	r3, [r7, #32]
      break;
 80019e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019e2:	6a3b      	ldr	r3, [r7, #32]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3728      	adds	r7, #40	; 0x28
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc90      	pop	{r4, r7}
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	08006fac 	.word	0x08006fac
 80019f4:	40021000 	.word	0x40021000
 80019f8:	007a1200 	.word	0x007a1200
 80019fc:	003d0900 	.word	0x003d0900

08001a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000018 	.word	0x20000018

08001a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a18:	f7ff fff2 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4903      	ldr	r1, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	08006fe4 	.word	0x08006fe4

08001a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	0adb      	lsrs	r3, r3, #11
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4903      	ldr	r1, [pc, #12]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	08006fe4 	.word	0x08006fe4

08001a64 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	220f      	movs	r2, #15
 8001a72:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a74:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_RCC_GetClockConfig+0x58>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 0203 	and.w	r2, r3, #3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_RCC_GetClockConfig+0x58>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <HAL_RCC_GetClockConfig+0x58>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001a98:	4b08      	ldr	r3, [pc, #32]	; (8001abc <HAL_RCC_GetClockConfig+0x58>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	08db      	lsrs	r3, r3, #3
 8001a9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_GetClockConfig+0x5c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0207 	and.w	r2, r3, #7
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40022000 	.word	0x40022000

08001ac4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b085      	sub	sp, #20
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001acc:	4b0a      	ldr	r3, [pc, #40]	; (8001af8 <RCC_Delay+0x34>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a0a      	ldr	r2, [pc, #40]	; (8001afc <RCC_Delay+0x38>)
 8001ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad6:	0a5b      	lsrs	r3, r3, #9
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	fb02 f303 	mul.w	r3, r2, r3
 8001ade:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ae0:	bf00      	nop
  }
  while (Delay --);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1e5a      	subs	r2, r3, #1
 8001ae6:	60fa      	str	r2, [r7, #12]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d1f9      	bne.n	8001ae0 <RCC_Delay+0x1c>
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3714      	adds	r7, #20
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000018 	.word	0x20000018
 8001afc:	10624dd3 	.word	0x10624dd3

08001b00 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d07d      	beq.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b20:	4b4f      	ldr	r3, [pc, #316]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d10d      	bne.n	8001b48 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b2c:	4b4c      	ldr	r3, [pc, #304]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b2e:	69db      	ldr	r3, [r3, #28]
 8001b30:	4a4b      	ldr	r2, [pc, #300]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b36:	61d3      	str	r3, [r2, #28]
 8001b38:	4b49      	ldr	r3, [pc, #292]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b3a:	69db      	ldr	r3, [r3, #28]
 8001b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b40:	60bb      	str	r3, [r7, #8]
 8001b42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b44:	2301      	movs	r3, #1
 8001b46:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b48:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d118      	bne.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b54:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a42      	ldr	r2, [pc, #264]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b5e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b60:	f7ff f85a 	bl	8000c18 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b66:	e008      	b.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b68:	f7ff f856 	bl	8000c18 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e06d      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b86:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b8e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d02e      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d027      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ba4:	4b2e      	ldr	r3, [pc, #184]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
 8001ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bae:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bb4:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bba:	4a29      	ldr	r2, [pc, #164]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d014      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7ff f825 	bl	8000c18 <HAL_GetTick>
 8001bce:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bd0:	e00a      	b.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd2:	f7ff f821 	bl	8000c18 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e036      	b.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be8:	4b1d      	ldr	r3, [pc, #116]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	f003 0302 	and.w	r3, r3, #2
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d0ee      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bf4:	4b1a      	ldr	r3, [pc, #104]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	4917      	ldr	r1, [pc, #92]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c06:	7dfb      	ldrb	r3, [r7, #23]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d105      	bne.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c0c:	4b14      	ldr	r3, [pc, #80]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0302 	and.w	r3, r3, #2
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	490b      	ldr	r1, [pc, #44]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0310 	and.w	r3, r3, #16
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d008      	beq.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c42:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	4904      	ldr	r1, [pc, #16]	; (8001c60 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40007000 	.word	0x40007000
 8001c68:	42420440 	.word	0x42420440

08001c6c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b08d      	sub	sp, #52	; 0x34
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c74:	4b5a      	ldr	r3, [pc, #360]	; (8001de0 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8001c76:	f107 040c 	add.w	r4, r7, #12
 8001c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c80:	f240 2301 	movw	r3, #513	; 0x201
 8001c84:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b10      	cmp	r3, #16
 8001c9e:	d00a      	beq.n	8001cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	f200 8091 	bhi.w	8001dca <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d04c      	beq.n	8001d48 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d07c      	beq.n	8001dae <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8001cb4:	e089      	b.n	8001dca <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8001cb6:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001cbc:	4b49      	ldr	r3, [pc, #292]	; (8001de4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 8082 	beq.w	8001dce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	0c9b      	lsrs	r3, r3, #18
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cd6:	4413      	add	r3, r2
 8001cd8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001cdc:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d018      	beq.n	8001d1a <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	0c5b      	lsrs	r3, r3, #17
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00d      	beq.n	8001d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001d08:	4a37      	ldr	r2, [pc, #220]	; (8001de8 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d18:	e004      	b.n	8001d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	4a33      	ldr	r2, [pc, #204]	; (8001dec <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001d1e:	fb02 f303 	mul.w	r3, r2, r3
 8001d22:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001d24:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d30:	d102      	bne.n	8001d38 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 8001d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d34:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d36:	e04a      	b.n	8001dce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4a2c      	ldr	r2, [pc, #176]	; (8001df0 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001d46:	e042      	b.n	8001dce <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001d48:	4b26      	ldr	r3, [pc, #152]	; (8001de4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
 8001d4c:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d58:	d108      	bne.n	8001d6c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d003      	beq.n	8001d6c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 8001d64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d6a:	e01f      	b.n	8001dac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d76:	d109      	bne.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8001d84:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d8a:	e00f      	b.n	8001dac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d96:	d11c      	bne.n	8001dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001d98:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d016      	beq.n	8001dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8001da4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001daa:	e012      	b.n	8001dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8001dac:	e011      	b.n	8001dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001dae:	f7ff fe45 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 8001db2:	4602      	mov	r2, r0
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	0b9b      	lsrs	r3, r3, #14
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001dc8:	e004      	b.n	8001dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001dca:	bf00      	nop
 8001dcc:	e002      	b.n	8001dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001dce:	bf00      	nop
 8001dd0:	e000      	b.n	8001dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001dd2:	bf00      	nop
    }
  }
  return (frequency);
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3734      	adds	r7, #52	; 0x34
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	bf00      	nop
 8001de0:	08006fbc 	.word	0x08006fbc
 8001de4:	40021000 	.word	0x40021000
 8001de8:	007a1200 	.word	0x007a1200
 8001dec:	003d0900 	.word	0x003d0900
 8001df0:	aaaaaaab 	.word	0xaaaaaaab

08001df4 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d101      	bne.n	8001e0a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e084      	b.n	8001f14 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	7c5b      	ldrb	r3, [r3, #17]
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d105      	bne.n	8001e20 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2200      	movs	r2, #0
 8001e18:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fd06 	bl	800082c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f000 faf4 	bl	8002414 <HAL_RTC_WaitForSynchro>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d004      	beq.n	8001e3c <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2204      	movs	r2, #4
 8001e36:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e06b      	b.n	8001f14 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fbad 	bl	800259c <RTC_EnterInitMode>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d004      	beq.n	8001e52 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e060      	b.n	8001f14 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	685a      	ldr	r2, [r3, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f022 0207 	bic.w	r2, r2, #7
 8001e60:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d005      	beq.n	8001e76 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001e6a:	4b2c      	ldr	r3, [pc, #176]	; (8001f1c <HAL_RTC_Init+0x128>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4a2b      	ldr	r2, [pc, #172]	; (8001f1c <HAL_RTC_Init+0x128>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001e76:	4b29      	ldr	r3, [pc, #164]	; (8001f1c <HAL_RTC_Init+0x128>)
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4926      	ldr	r1, [pc, #152]	; (8001f1c <HAL_RTC_Init+0x128>)
 8001e84:	4313      	orrs	r3, r2
 8001e86:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e90:	d003      	beq.n	8001e9a <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	e00e      	b.n	8001eb8 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f7ff fee6 	bl	8001c6c <HAL_RCCEx_GetPeriphCLKFreq>
 8001ea0:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d104      	bne.n	8001eb2 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e030      	b.n	8001f14 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f023 010f 	bic.w	r1, r3, #15
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	0c1a      	lsrs	r2, r3, #16
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
 8001ed6:	041b      	lsls	r3, r3, #16
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	b291      	uxth	r1, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	6812      	ldr	r2, [r2, #0]
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fb81 	bl	80025ec <RTC_ExitInitMode>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d004      	beq.n	8001efa <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00c      	b.n	8001f14 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8001f12:	2300      	movs	r3, #0
  }
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40006c00 	.word	0x40006c00

08001f20 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <HAL_RTC_SetTime+0x20>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d101      	bne.n	8001f44 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e080      	b.n	8002046 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	7c1b      	ldrb	r3, [r3, #16]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d101      	bne.n	8001f50 <HAL_RTC_SetTime+0x30>
 8001f4c:	2302      	movs	r3, #2
 8001f4e:	e07a      	b.n	8002046 <HAL_RTC_SetTime+0x126>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2201      	movs	r2, #1
 8001f54:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d113      	bne.n	8001f8a <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	461a      	mov	r2, r3
 8001f68:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001f6c:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	785b      	ldrb	r3, [r3, #1]
 8001f74:	4619      	mov	r1, r3
 8001f76:	460b      	mov	r3, r1
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a5b      	subs	r3, r3, r1
 8001f7c:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f7e:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001f84:	4413      	add	r3, r2
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	e01e      	b.n	8001fc8 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f000 fb71 	bl	8002676 <RTC_Bcd2ToByte>
 8001f94:	4603      	mov	r3, r0
 8001f96:	461a      	mov	r2, r3
 8001f98:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001f9c:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	785b      	ldrb	r3, [r3, #1]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f000 fb66 	bl	8002676 <RTC_Bcd2ToByte>
 8001faa:	4603      	mov	r3, r0
 8001fac:	461a      	mov	r2, r3
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001fb6:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	789b      	ldrb	r3, [r3, #2]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f000 fb5a 	bl	8002676 <RTC_Bcd2ToByte>
 8001fc2:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001fc4:	4423      	add	r3, r4
 8001fc6:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001fc8:	6979      	ldr	r1, [r7, #20]
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f000 fa7f 	bl	80024ce <RTC_WriteTimeCounter>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d007      	beq.n	8001fe6 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2200      	movs	r2, #0
 8001fe0:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e02f      	b.n	8002046 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f022 0205 	bic.w	r2, r2, #5
 8001ff4:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 fa90 	bl	800251c <RTC_ReadAlarmCounter>
 8001ffc:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002004:	d018      	beq.n	8002038 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	429a      	cmp	r2, r3
 800200c:	d214      	bcs.n	8002038 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002014:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002018:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800201a:	6939      	ldr	r1, [r7, #16]
 800201c:	68f8      	ldr	r0, [r7, #12]
 800201e:	f000 fa96 	bl	800254e <RTC_WriteAlarmCounter>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2204      	movs	r2, #4
 800202c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e006      	b.n	8002046 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2201      	movs	r2, #1
 800203c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002044:	2300      	movs	r3, #0
  }
}
 8002046:	4618      	mov	r0, r3
 8002048:	371c      	adds	r7, #28
 800204a:	46bd      	mov	sp, r7
 800204c:	bd90      	pop	{r4, r7, pc}
	...

08002050 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	61bb      	str	r3, [r7, #24]
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
 8002068:	2300      	movs	r3, #0
 800206a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_RTC_GetTime+0x28>
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e0b5      	b.n	80021e8 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0ac      	b.n	80021e8 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 f9ed 	bl	800246e <RTC_ReadTimeCounter>
 8002094:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	4a55      	ldr	r2, [pc, #340]	; (80021f0 <HAL_RTC_GetTime+0x1a0>)
 800209a:	fba2 2303 	umull	r2, r3, r2, r3
 800209e:	0adb      	lsrs	r3, r3, #11
 80020a0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4b52      	ldr	r3, [pc, #328]	; (80021f0 <HAL_RTC_GetTime+0x1a0>)
 80020a6:	fba3 1302 	umull	r1, r3, r3, r2
 80020aa:	0adb      	lsrs	r3, r3, #11
 80020ac:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80020b0:	fb01 f303 	mul.w	r3, r1, r3
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	4a4f      	ldr	r2, [pc, #316]	; (80021f4 <HAL_RTC_GetTime+0x1a4>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	095b      	lsrs	r3, r3, #5
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	4a4a      	ldr	r2, [pc, #296]	; (80021f0 <HAL_RTC_GetTime+0x1a0>)
 80020c8:	fba2 1203 	umull	r1, r2, r2, r3
 80020cc:	0ad2      	lsrs	r2, r2, #11
 80020ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80020d2:	fb01 f202 	mul.w	r2, r1, r2
 80020d6:	1a9a      	subs	r2, r3, r2
 80020d8:	4b46      	ldr	r3, [pc, #280]	; (80021f4 <HAL_RTC_GetTime+0x1a4>)
 80020da:	fba3 1302 	umull	r1, r3, r3, r2
 80020de:	0959      	lsrs	r1, r3, #5
 80020e0:	460b      	mov	r3, r1
 80020e2:	011b      	lsls	r3, r3, #4
 80020e4:	1a5b      	subs	r3, r3, r1
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	1ad1      	subs	r1, r2, r3
 80020ea:	b2ca      	uxtb	r2, r1
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b17      	cmp	r3, #23
 80020f4:	d955      	bls.n	80021a2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4a3f      	ldr	r2, [pc, #252]	; (80021f8 <HAL_RTC_GetTime+0x1a8>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002102:	6939      	ldr	r1, [r7, #16]
 8002104:	4b3c      	ldr	r3, [pc, #240]	; (80021f8 <HAL_RTC_GetTime+0x1a8>)
 8002106:	fba3 2301 	umull	r2, r3, r3, r1
 800210a:	091a      	lsrs	r2, r3, #4
 800210c:	4613      	mov	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	1aca      	subs	r2, r1, r3
 8002116:	b2d2      	uxtb	r2, r2
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800211c:	68f8      	ldr	r0, [r7, #12]
 800211e:	f000 f9fd 	bl	800251c <RTC_ReadAlarmCounter>
 8002122:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800212a:	d008      	beq.n	800213e <HAL_RTC_GetTime+0xee>
 800212c:	69fa      	ldr	r2, [r7, #28]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	429a      	cmp	r2, r3
 8002132:	d904      	bls.n	800213e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	e002      	b.n	8002144 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002142:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	4a2d      	ldr	r2, [pc, #180]	; (80021fc <HAL_RTC_GetTime+0x1ac>)
 8002148:	fb02 f303 	mul.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002152:	69b9      	ldr	r1, [r7, #24]
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f9ba 	bl	80024ce <RTC_WriteTimeCounter>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e041      	b.n	80021e8 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800216a:	d00c      	beq.n	8002186 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 800216c:	69fa      	ldr	r2, [r7, #28]
 800216e:	69bb      	ldr	r3, [r7, #24]
 8002170:	4413      	add	r3, r2
 8002172:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002174:	69f9      	ldr	r1, [r7, #28]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 f9e9 	bl	800254e <RTC_WriteAlarmCounter>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e030      	b.n	80021e8 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002186:	69f9      	ldr	r1, [r7, #28]
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f9e0 	bl	800254e <RTC_WriteAlarmCounter>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e027      	b.n	80021e8 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002198:	6979      	ldr	r1, [r7, #20]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fa88 	bl	80026b0 <RTC_DateUpdate>
 80021a0:	e003      	b.n	80021aa <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d01a      	beq.n	80021e6 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 fa41 	bl	800263c <RTC_ByteToBcd2>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	785b      	ldrb	r3, [r3, #1]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fa38 	bl	800263c <RTC_ByteToBcd2>
 80021cc:	4603      	mov	r3, r0
 80021ce:	461a      	mov	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	789b      	ldrb	r3, [r3, #2]
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 fa2f 	bl	800263c <RTC_ByteToBcd2>
 80021de:	4603      	mov	r3, r0
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	91a2b3c5 	.word	0x91a2b3c5
 80021f4:	88888889 	.word	0x88888889
 80021f8:	aaaaaaab 	.word	0xaaaaaaab
 80021fc:	00015180 	.word	0x00015180

08002200 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 800220c:	2300      	movs	r3, #0
 800220e:	61fb      	str	r3, [r7, #28]
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_RTC_SetDate+0x24>
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e097      	b.n	8002358 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	7c1b      	ldrb	r3, [r3, #16]
 800222c:	2b01      	cmp	r3, #1
 800222e:	d101      	bne.n	8002234 <HAL_RTC_SetDate+0x34>
 8002230:	2302      	movs	r3, #2
 8002232:	e091      	b.n	8002358 <HAL_RTC_SetDate+0x158>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2202      	movs	r2, #2
 800223e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d10c      	bne.n	8002260 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	78da      	ldrb	r2, [r3, #3]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	785a      	ldrb	r2, [r3, #1]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	789a      	ldrb	r2, [r3, #2]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	739a      	strb	r2, [r3, #14]
 800225e:	e01a      	b.n	8002296 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	78db      	ldrb	r3, [r3, #3]
 8002264:	4618      	mov	r0, r3
 8002266:	f000 fa06 	bl	8002676 <RTC_Bcd2ToByte>
 800226a:	4603      	mov	r3, r0
 800226c:	461a      	mov	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	785b      	ldrb	r3, [r3, #1]
 8002276:	4618      	mov	r0, r3
 8002278:	f000 f9fd 	bl	8002676 <RTC_Bcd2ToByte>
 800227c:	4603      	mov	r3, r0
 800227e:	461a      	mov	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	789b      	ldrb	r3, [r3, #2]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 f9f4 	bl	8002676 <RTC_Bcd2ToByte>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	7bdb      	ldrb	r3, [r3, #15]
 800229a:	4618      	mov	r0, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	7b59      	ldrb	r1, [r3, #13]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	7b9b      	ldrb	r3, [r3, #14]
 80022a4:	461a      	mov	r2, r3
 80022a6:	f000 fadf 	bl	8002868 <RTC_WeekDayNum>
 80022aa:	4603      	mov	r3, r0
 80022ac:	461a      	mov	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	7b1a      	ldrb	r2, [r3, #12]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f000 f8d7 	bl	800246e <RTC_ReadTimeCounter>
 80022c0:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4a26      	ldr	r2, [pc, #152]	; (8002360 <HAL_RTC_SetDate+0x160>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0adb      	lsrs	r3, r3, #11
 80022cc:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	2b18      	cmp	r3, #24
 80022d2:	d93a      	bls.n	800234a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	4a23      	ldr	r2, [pc, #140]	; (8002364 <HAL_RTC_SetDate+0x164>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	4a22      	ldr	r2, [pc, #136]	; (8002368 <HAL_RTC_SetDate+0x168>)
 80022e0:	fb02 f303 	mul.w	r3, r2, r3
 80022e4:	69fa      	ldr	r2, [r7, #28]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80022ea:	69f9      	ldr	r1, [r7, #28]
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 f8ee 	bl	80024ce <RTC_WriteTimeCounter>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d007      	beq.n	8002308 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2204      	movs	r2, #4
 80022fc:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e027      	b.n	8002358 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 f907 	bl	800251c <RTC_ReadAlarmCounter>
 800230e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002316:	d018      	beq.n	800234a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	429a      	cmp	r2, r3
 800231e:	d214      	bcs.n	800234a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8002326:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800232a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800232c:	69b9      	ldr	r1, [r7, #24]
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f000 f90d 	bl	800254e <RTC_WriteAlarmCounter>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d007      	beq.n	800234a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2204      	movs	r2, #4
 800233e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e006      	b.n	8002358 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	91a2b3c5 	.word	0x91a2b3c5
 8002364:	aaaaaaab 	.word	0xaaaaaaab
 8002368:	00015180 	.word	0x00015180

0800236c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	2100      	movs	r1, #0
 800237e:	460a      	mov	r2, r1
 8002380:	801a      	strh	r2, [r3, #0]
 8002382:	460a      	mov	r2, r1
 8002384:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <HAL_RTC_GetDate+0x26>
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e03a      	b.n	800240c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	2200      	movs	r2, #0
 800239c:	4619      	mov	r1, r3
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f7ff fe56 	bl	8002050 <HAL_RTC_GetTime>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e02e      	b.n	800240c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	7b1a      	ldrb	r2, [r3, #12]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	7bda      	ldrb	r2, [r3, #15]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	7b5a      	ldrb	r2, [r3, #13]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	7b9a      	ldrb	r2, [r3, #14]
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d01a      	beq.n	800240a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	78db      	ldrb	r3, [r3, #3]
 80023d8:	4618      	mov	r0, r3
 80023da:	f000 f92f 	bl	800263c <RTC_ByteToBcd2>
 80023de:	4603      	mov	r3, r0
 80023e0:	461a      	mov	r2, r3
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	785b      	ldrb	r3, [r3, #1]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f926 	bl	800263c <RTC_ByteToBcd2>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	789b      	ldrb	r3, [r3, #2]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f91d 	bl	800263c <RTC_ByteToBcd2>
 8002402:	4603      	mov	r3, r0
 8002404:	461a      	mov	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d101      	bne.n	800242a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e01d      	b.n	8002466 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0208 	bic.w	r2, r2, #8
 8002438:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800243a:	f7fe fbed 	bl	8000c18 <HAL_GetTick>
 800243e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002440:	e009      	b.n	8002456 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002442:	f7fe fbe9 	bl	8000c18 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002450:	d901      	bls.n	8002456 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e007      	b.n	8002466 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0ee      	beq.n	8002442 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 800246e:	b480      	push	{r7}
 8002470:	b087      	sub	sp, #28
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002476:	2300      	movs	r3, #0
 8002478:	827b      	strh	r3, [r7, #18]
 800247a:	2300      	movs	r3, #0
 800247c:	823b      	strh	r3, [r7, #16]
 800247e:	2300      	movs	r3, #0
 8002480:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800249e:	8a7a      	ldrh	r2, [r7, #18]
 80024a0:	8a3b      	ldrh	r3, [r7, #16]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d008      	beq.n	80024b8 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80024a6:	8a3b      	ldrh	r3, [r7, #16]
 80024a8:	041a      	lsls	r2, r3, #16
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	4313      	orrs	r3, r2
 80024b4:	617b      	str	r3, [r7, #20]
 80024b6:	e004      	b.n	80024c2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80024b8:	8a7b      	ldrh	r3, [r7, #18]
 80024ba:	041a      	lsls	r2, r3, #16
 80024bc:	89fb      	ldrh	r3, [r7, #14]
 80024be:	4313      	orrs	r3, r2
 80024c0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80024c2:	697b      	ldr	r3, [r7, #20]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	371c      	adds	r7, #28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bc80      	pop	{r7}
 80024cc:	4770      	bx	lr

080024ce <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024d8:	2300      	movs	r3, #0
 80024da:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f85d 	bl	800259c <RTC_EnterInitMode>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d002      	beq.n	80024ee <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	e011      	b.n	8002512 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	683a      	ldr	r2, [r7, #0]
 80024f4:	0c12      	lsrs	r2, r2, #16
 80024f6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	b292      	uxth	r2, r2
 8002500:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002502:	6878      	ldr	r0, [r7, #4]
 8002504:	f000 f872 	bl	80025ec <RTC_ExitInitMode>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002512:	7bfb      	ldrb	r3, [r7, #15]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	81fb      	strh	r3, [r7, #14]
 8002528:	2300      	movs	r3, #0
 800252a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800253c:	89fb      	ldrh	r3, [r7, #14]
 800253e:	041a      	lsls	r2, r3, #16
 8002540:	89bb      	ldrh	r3, [r7, #12]
 8002542:	4313      	orrs	r3, r2
}
 8002544:	4618      	mov	r0, r3
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	bc80      	pop	{r7}
 800254c:	4770      	bx	lr

0800254e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b084      	sub	sp, #16
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
 8002556:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f000 f81d 	bl	800259c <RTC_EnterInitMode>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e011      	b.n	8002592 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	0c12      	lsrs	r2, r2, #16
 8002576:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	b292      	uxth	r2, r2
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f832 	bl	80025ec <RTC_ExitInitMode>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002592:	7bfb      	ldrb	r3, [r7, #15]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3710      	adds	r7, #16
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}

0800259c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80025a8:	f7fe fb36 	bl	8000c18 <HAL_GetTick>
 80025ac:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80025ae:	e009      	b.n	80025c4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80025b0:	f7fe fb32 	bl	8000c18 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025be:	d901      	bls.n	80025c4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e00f      	b.n	80025e4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d0ee      	beq.n	80025b0 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0210 	orr.w	r2, r2, #16
 80025e0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685a      	ldr	r2, [r3, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0210 	bic.w	r2, r2, #16
 8002606:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002608:	f7fe fb06 	bl	8000c18 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800260e:	e009      	b.n	8002624 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002610:	f7fe fb02 	bl	8000c18 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800261e:	d901      	bls.n	8002624 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8002620:	2303      	movs	r3, #3
 8002622:	e007      	b.n	8002634 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f003 0320 	and.w	r3, r3, #32
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0ee      	beq.n	8002610 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800264a:	e005      	b.n	8002658 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3301      	adds	r3, #1
 8002650:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8002652:	79fb      	ldrb	r3, [r7, #7]
 8002654:	3b0a      	subs	r3, #10
 8002656:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	2b09      	cmp	r3, #9
 800265c:	d8f6      	bhi.n	800264c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	011b      	lsls	r3, r3, #4
 8002664:	b2da      	uxtb	r2, r3
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	4313      	orrs	r3, r2
 800266a:	b2db      	uxtb	r3, r3
}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002676:	b480      	push	{r7}
 8002678:	b085      	sub	sp, #20
 800267a:	af00      	add	r7, sp, #0
 800267c:	4603      	mov	r3, r0
 800267e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8002684:	79fb      	ldrb	r3, [r7, #7]
 8002686:	091b      	lsrs	r3, r3, #4
 8002688:	b2db      	uxtb	r3, r3
 800268a:	461a      	mov	r2, r3
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f003 030f 	and.w	r3, r3, #15
 800269c:	b2da      	uxtb	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4413      	add	r3, r2
 80026a4:	b2db      	uxtb	r3, r3
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3714      	adds	r7, #20
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	2300      	movs	r3, #0
 80026c4:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80026c6:	2300      	movs	r3, #0
 80026c8:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	7bdb      	ldrb	r3, [r3, #15]
 80026ce:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7b5b      	ldrb	r3, [r3, #13]
 80026d4:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7b9b      	ldrb	r3, [r3, #14]
 80026da:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80026dc:	2300      	movs	r3, #0
 80026de:	60bb      	str	r3, [r7, #8]
 80026e0:	e06f      	b.n	80027c2 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d011      	beq.n	800270c <RTC_DateUpdate+0x5c>
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	2b03      	cmp	r3, #3
 80026ec:	d00e      	beq.n	800270c <RTC_DateUpdate+0x5c>
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d00b      	beq.n	800270c <RTC_DateUpdate+0x5c>
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	2b07      	cmp	r3, #7
 80026f8:	d008      	beq.n	800270c <RTC_DateUpdate+0x5c>
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d005      	beq.n	800270c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	2b0a      	cmp	r3, #10
 8002704:	d002      	beq.n	800270c <RTC_DateUpdate+0x5c>
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	2b0c      	cmp	r3, #12
 800270a:	d117      	bne.n	800273c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2b1e      	cmp	r3, #30
 8002710:	d803      	bhi.n	800271a <RTC_DateUpdate+0x6a>
      {
        day++;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	3301      	adds	r3, #1
 8002716:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8002718:	e050      	b.n	80027bc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b0c      	cmp	r3, #12
 800271e:	d005      	beq.n	800272c <RTC_DateUpdate+0x7c>
        {
          month++;
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	3301      	adds	r3, #1
 8002724:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002726:	2301      	movs	r3, #1
 8002728:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800272a:	e047      	b.n	80027bc <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800272c:	2301      	movs	r3, #1
 800272e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8002730:	2301      	movs	r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
          year++;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3301      	adds	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800273a:	e03f      	b.n	80027bc <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	2b04      	cmp	r3, #4
 8002740:	d008      	beq.n	8002754 <RTC_DateUpdate+0xa4>
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	2b06      	cmp	r3, #6
 8002746:	d005      	beq.n	8002754 <RTC_DateUpdate+0xa4>
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	2b09      	cmp	r3, #9
 800274c:	d002      	beq.n	8002754 <RTC_DateUpdate+0xa4>
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	2b0b      	cmp	r3, #11
 8002752:	d10c      	bne.n	800276e <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2b1d      	cmp	r3, #29
 8002758:	d803      	bhi.n	8002762 <RTC_DateUpdate+0xb2>
      {
        day++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	3301      	adds	r3, #1
 800275e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8002760:	e02c      	b.n	80027bc <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	3301      	adds	r3, #1
 8002766:	613b      	str	r3, [r7, #16]
        day = 1U;
 8002768:	2301      	movs	r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 800276c:	e026      	b.n	80027bc <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b02      	cmp	r3, #2
 8002772:	d123      	bne.n	80027bc <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2b1b      	cmp	r3, #27
 8002778:	d803      	bhi.n	8002782 <RTC_DateUpdate+0xd2>
      {
        day++;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	3301      	adds	r3, #1
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e01c      	b.n	80027bc <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2b1c      	cmp	r3, #28
 8002786:	d111      	bne.n	80027ac <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	b29b      	uxth	r3, r3
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f839 	bl	8002804 <RTC_IsLeapYear>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <RTC_DateUpdate+0xf0>
        {
          day++;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	3301      	adds	r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	e00d      	b.n	80027bc <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	3301      	adds	r3, #1
 80027a4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80027a6:	2301      	movs	r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	e007      	b.n	80027bc <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2b1d      	cmp	r3, #29
 80027b0:	d104      	bne.n	80027bc <RTC_DateUpdate+0x10c>
      {
        month++;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	3301      	adds	r3, #1
 80027b6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80027b8:	2301      	movs	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	3301      	adds	r3, #1
 80027c0:	60bb      	str	r3, [r7, #8]
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d38b      	bcc.n	80026e2 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	b2da      	uxtb	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	b2da      	uxtb	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	4619      	mov	r1, r3
 80027ec:	6978      	ldr	r0, [r7, #20]
 80027ee:	f000 f83b 	bl	8002868 <RTC_WeekDayNum>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	731a      	strb	r2, [r3, #12]
}
 80027fa:	bf00      	nop
 80027fc:	3718      	adds	r7, #24
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	b29b      	uxth	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	e01d      	b.n	800285a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	4a10      	ldr	r2, [pc, #64]	; (8002864 <RTC_IsLeapYear+0x60>)
 8002822:	fba2 1203 	umull	r1, r2, r2, r3
 8002826:	0952      	lsrs	r2, r2, #5
 8002828:	2164      	movs	r1, #100	; 0x64
 800282a:	fb01 f202 	mul.w	r2, r1, r2
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	b29b      	uxth	r3, r3
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8002836:	2301      	movs	r3, #1
 8002838:	e00f      	b.n	800285a <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	4a09      	ldr	r2, [pc, #36]	; (8002864 <RTC_IsLeapYear+0x60>)
 800283e:	fba2 1203 	umull	r1, r2, r2, r3
 8002842:	09d2      	lsrs	r2, r2, #7
 8002844:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8002848:	fb01 f202 	mul.w	r2, r1, r2
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	b29b      	uxth	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8002858:	2300      	movs	r3, #0
  }
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	51eb851f 	.word	0x51eb851f

08002868 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	460b      	mov	r3, r1
 8002872:	70fb      	strb	r3, [r7, #3]
 8002874:	4613      	mov	r3, r2
 8002876:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8002886:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d82d      	bhi.n	80028ea <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 800288e:	78fa      	ldrb	r2, [r7, #3]
 8002890:	4613      	mov	r3, r2
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4413      	add	r3, r2
 8002896:	00db      	lsls	r3, r3, #3
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	4a2c      	ldr	r2, [pc, #176]	; (800294c <RTC_WeekDayNum+0xe4>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	085a      	lsrs	r2, r3, #1
 80028a2:	78bb      	ldrb	r3, [r7, #2]
 80028a4:	441a      	add	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	441a      	add	r2, r3
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	441a      	add	r2, r3
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	4926      	ldr	r1, [pc, #152]	; (8002950 <RTC_WeekDayNum+0xe8>)
 80028b8:	fba1 1303 	umull	r1, r3, r1, r3
 80028bc:	095b      	lsrs	r3, r3, #5
 80028be:	1ad2      	subs	r2, r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	4922      	ldr	r1, [pc, #136]	; (8002950 <RTC_WeekDayNum+0xe8>)
 80028c6:	fba1 1303 	umull	r1, r3, r1, r3
 80028ca:	09db      	lsrs	r3, r3, #7
 80028cc:	4413      	add	r3, r2
 80028ce:	1d1a      	adds	r2, r3, #4
 80028d0:	4b20      	ldr	r3, [pc, #128]	; (8002954 <RTC_WeekDayNum+0xec>)
 80028d2:	fba3 1302 	umull	r1, r3, r3, r2
 80028d6:	1ad1      	subs	r1, r2, r3
 80028d8:	0849      	lsrs	r1, r1, #1
 80028da:	440b      	add	r3, r1
 80028dc:	0899      	lsrs	r1, r3, #2
 80028de:	460b      	mov	r3, r1
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	1a5b      	subs	r3, r3, r1
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	60fb      	str	r3, [r7, #12]
 80028e8:	e029      	b.n	800293e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	4613      	mov	r3, r2
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	4413      	add	r3, r2
 80028f2:	00db      	lsls	r3, r3, #3
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	4a15      	ldr	r2, [pc, #84]	; (800294c <RTC_WeekDayNum+0xe4>)
 80028f8:	fba2 2303 	umull	r2, r3, r2, r3
 80028fc:	085a      	lsrs	r2, r3, #1
 80028fe:	78bb      	ldrb	r3, [r7, #2]
 8002900:	441a      	add	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	441a      	add	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	441a      	add	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4910      	ldr	r1, [pc, #64]	; (8002950 <RTC_WeekDayNum+0xe8>)
 8002910:	fba1 1303 	umull	r1, r3, r1, r3
 8002914:	095b      	lsrs	r3, r3, #5
 8002916:	1ad2      	subs	r2, r2, r3
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	490d      	ldr	r1, [pc, #52]	; (8002950 <RTC_WeekDayNum+0xe8>)
 800291c:	fba1 1303 	umull	r1, r3, r1, r3
 8002920:	09db      	lsrs	r3, r3, #7
 8002922:	4413      	add	r3, r2
 8002924:	1c9a      	adds	r2, r3, #2
 8002926:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <RTC_WeekDayNum+0xec>)
 8002928:	fba3 1302 	umull	r1, r3, r3, r2
 800292c:	1ad1      	subs	r1, r2, r3
 800292e:	0849      	lsrs	r1, r1, #1
 8002930:	440b      	add	r3, r1
 8002932:	0899      	lsrs	r1, r3, #2
 8002934:	460b      	mov	r3, r1
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	1a5b      	subs	r3, r3, r1
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	b2db      	uxtb	r3, r3
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr
 800294c:	38e38e39 	.word	0x38e38e39
 8002950:	51eb851f 	.word	0x51eb851f
 8002954:	24924925 	.word	0x24924925

08002958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e041      	b.n	80029ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f839 	bl	80029f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3304      	adds	r3, #4
 8002994:	4619      	mov	r1, r3
 8002996:	4610      	mov	r0, r2
 8002998:	f000 f9b4 	bl	8002d04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bc80      	pop	{r7}
 8002a06:	4770      	bx	lr

08002a08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d001      	beq.n	8002a20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e03a      	b.n	8002a96 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <HAL_TIM_Base_Start_IT+0x98>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00e      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x58>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a4a:	d009      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x58>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d004      	beq.n	8002a60 <HAL_TIM_Base_Start_IT+0x58>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d111      	bne.n	8002a84 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0307 	and.w	r3, r3, #7
 8002a6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2b06      	cmp	r3, #6
 8002a70:	d010      	beq.n	8002a94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f042 0201 	orr.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a82:	e007      	b.n	8002a94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800

08002aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0202 	mvn.w	r2, #2
 8002ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f8ed 	bl	8002cce <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8e0 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 f8ef 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0204 	mvn.w	r2, #4
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8c3 	bl	8002cce <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f8b6 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f8c5 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0208 	mvn.w	r2, #8
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2204      	movs	r2, #4
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 f899 	bl	8002cce <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f88c 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 f89b 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0210 	mvn.w	r2, #16
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 f86f 	bl	8002cce <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f862 	bl	8002cbc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f871 	bl	8002ce0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0201 	mvn.w	r2, #1
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7fd fd9c 	bl	8000768 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3a:	2b80      	cmp	r3, #128	; 0x80
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c48:	2b80      	cmp	r3, #128	; 0x80
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f8bf 	bl	8002dda <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c66:	2b40      	cmp	r3, #64	; 0x40
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c74:	2b40      	cmp	r3, #64	; 0x40
 8002c76:	d107      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f835 	bl	8002cf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d10e      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d107      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0220 	mvn.w	r2, #32
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 f88a 	bl	8002dc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b083      	sub	sp, #12
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cd6:	bf00      	nop
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc80      	pop	{r7}
 8002cde:	4770      	bx	lr

08002ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ce8:	bf00      	nop
 8002cea:	370c      	adds	r7, #12
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr

08002cf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bc80      	pop	{r7}
 8002d02:	4770      	bx	lr

08002d04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a29      	ldr	r2, [pc, #164]	; (8002dbc <TIM_Base_SetConfig+0xb8>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d00b      	beq.n	8002d34 <TIM_Base_SetConfig+0x30>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d22:	d007      	beq.n	8002d34 <TIM_Base_SetConfig+0x30>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a26      	ldr	r2, [pc, #152]	; (8002dc0 <TIM_Base_SetConfig+0xbc>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <TIM_Base_SetConfig+0x30>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a25      	ldr	r2, [pc, #148]	; (8002dc4 <TIM_Base_SetConfig+0xc0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d108      	bne.n	8002d46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a1c      	ldr	r2, [pc, #112]	; (8002dbc <TIM_Base_SetConfig+0xb8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d00b      	beq.n	8002d66 <TIM_Base_SetConfig+0x62>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d54:	d007      	beq.n	8002d66 <TIM_Base_SetConfig+0x62>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a19      	ldr	r2, [pc, #100]	; (8002dc0 <TIM_Base_SetConfig+0xbc>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d003      	beq.n	8002d66 <TIM_Base_SetConfig+0x62>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <TIM_Base_SetConfig+0xc0>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d108      	bne.n	8002d78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	68fa      	ldr	r2, [r7, #12]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <TIM_Base_SetConfig+0xb8>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d103      	bne.n	8002dac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	615a      	str	r2, [r3, #20]
}
 8002db2:	bf00      	nop
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bc80      	pop	{r7}
 8002dba:	4770      	bx	lr
 8002dbc:	40012c00 	.word	0x40012c00
 8002dc0:	40000400 	.word	0x40000400
 8002dc4:	40000800 	.word	0x40000800

08002dc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bc80      	pop	{r7}
 8002dd8:	4770      	bx	lr

08002dda <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr

08002dec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d101      	bne.n	8002dfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e03f      	b.n	8002e7e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d106      	bne.n	8002e18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7fd fe5e 	bl	8000ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2224      	movs	r2, #36	; 0x24
 8002e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fcb5 	bl	80037a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	691a      	ldr	r2, [r3, #16]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	695a      	ldr	r2, [r3, #20]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68da      	ldr	r2, [r3, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3708      	adds	r7, #8
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b08a      	sub	sp, #40	; 0x28
 8002e8a:	af02      	add	r7, sp, #8
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	d17c      	bne.n	8002fa0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d002      	beq.n	8002eb2 <HAL_UART_Transmit+0x2c>
 8002eac:	88fb      	ldrh	r3, [r7, #6]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e075      	b.n	8002fa2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_UART_Transmit+0x3e>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e06e      	b.n	8002fa2 <HAL_UART_Transmit+0x11c>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2221      	movs	r2, #33	; 0x21
 8002ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eda:	f7fd fe9d 	bl	8000c18 <HAL_GetTick>
 8002ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	88fa      	ldrh	r2, [r7, #6]
 8002ee4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	88fa      	ldrh	r2, [r7, #6]
 8002eea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ef4:	d108      	bne.n	8002f08 <HAL_UART_Transmit+0x82>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d104      	bne.n	8002f08 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e003      	b.n	8002f10 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002f18:	e02a      	b.n	8002f70 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2200      	movs	r2, #0
 8002f22:	2180      	movs	r1, #128	; 0x80
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 faa1 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e036      	b.n	8002fa2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10b      	bne.n	8002f52 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	3302      	adds	r3, #2
 8002f4e:	61bb      	str	r3, [r7, #24]
 8002f50:	e007      	b.n	8002f62 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	781a      	ldrb	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1cf      	bne.n	8002f1a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	9300      	str	r3, [sp, #0]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	2200      	movs	r2, #0
 8002f82:	2140      	movs	r1, #64	; 0x40
 8002f84:	68f8      	ldr	r0, [r7, #12]
 8002f86:	f000 fa71 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d001      	beq.n	8002f94 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e006      	b.n	8002fa2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	e000      	b.n	8002fa2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002fa0:	2302      	movs	r3, #2
  }
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3720      	adds	r7, #32
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b08a      	sub	sp, #40	; 0x28
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	603b      	str	r3, [r7, #0]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	f040 808c 	bne.w	80030e4 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d002      	beq.n	8002fd8 <HAL_UART_Receive+0x2e>
 8002fd2:	88fb      	ldrh	r3, [r7, #6]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e084      	b.n	80030e6 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d101      	bne.n	8002fea <HAL_UART_Receive+0x40>
 8002fe6:	2302      	movs	r3, #2
 8002fe8:	e07d      	b.n	80030e6 <HAL_UART_Receive+0x13c>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2222      	movs	r2, #34	; 0x22
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003006:	f7fd fe07 	bl	8000c18 <HAL_GetTick>
 800300a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	88fa      	ldrh	r2, [r7, #6]
 8003010:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003020:	d108      	bne.n	8003034 <HAL_UART_Receive+0x8a>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d104      	bne.n	8003034 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e003      	b.n	800303c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003038:	2300      	movs	r3, #0
 800303a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003044:	e043      	b.n	80030ce <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	2200      	movs	r2, #0
 800304e:	2120      	movs	r1, #32
 8003050:	68f8      	ldr	r0, [r7, #12]
 8003052:	f000 fa0b 	bl	800346c <UART_WaitOnFlagUntilTimeout>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e042      	b.n	80030e6 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d10c      	bne.n	8003080 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	b29b      	uxth	r3, r3
 800306e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003072:	b29a      	uxth	r2, r3
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	3302      	adds	r3, #2
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	e01f      	b.n	80030c0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003088:	d007      	beq.n	800309a <HAL_UART_Receive+0xf0>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10a      	bne.n	80030a8 <HAL_UART_Receive+0xfe>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	701a      	strb	r2, [r3, #0]
 80030a6:	e008      	b.n	80030ba <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3301      	adds	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	3b01      	subs	r3, #1
 80030c8:	b29a      	uxth	r2, r3
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1b6      	bne.n	8003046 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80030e0:	2300      	movs	r3, #0
 80030e2:	e000      	b.n	80030e6 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80030e4:	2302      	movs	r3, #2
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3720      	adds	r7, #32
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10d      	bne.n	8003142 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d008      	beq.n	8003142 <HAL_UART_IRQHandler+0x52>
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fa87 	bl	800364e <UART_Receive_IT>
      return;
 8003140:	e17b      	b.n	800343a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80b1 	beq.w	80032ac <HAL_UART_IRQHandler+0x1bc>
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b00      	cmp	r3, #0
 8003152:	d105      	bne.n	8003160 <HAL_UART_IRQHandler+0x70>
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80a6 	beq.w	80032ac <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00a      	beq.n	8003180 <HAL_UART_IRQHandler+0x90>
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d005      	beq.n	8003180 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f043 0201 	orr.w	r2, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_UART_IRQHandler+0xb0>
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f043 0202 	orr.w	r2, r3, #2
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_UART_IRQHandler+0xd0>
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f043 0204 	orr.w	r2, r3, #4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00f      	beq.n	80031ea <HAL_UART_IRQHandler+0xfa>
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <HAL_UART_IRQHandler+0xee>
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	f043 0208 	orr.w	r2, r3, #8
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 811e 	beq.w	8003430 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80031f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f6:	f003 0320 	and.w	r3, r3, #32
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d007      	beq.n	800320e <HAL_UART_IRQHandler+0x11e>
 80031fe:	6a3b      	ldr	r3, [r7, #32]
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 fa20 	bl	800364e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003228:	f003 0308 	and.w	r3, r3, #8
 800322c:	2b00      	cmp	r3, #0
 800322e:	d102      	bne.n	8003236 <HAL_UART_IRQHandler+0x146>
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d031      	beq.n	800329a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f962 	bl	8003500 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d023      	beq.n	8003292 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003258:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325e:	2b00      	cmp	r3, #0
 8003260:	d013      	beq.n	800328a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003266:	4a76      	ldr	r2, [pc, #472]	; (8003440 <HAL_UART_IRQHandler+0x350>)
 8003268:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800326e:	4618      	mov	r0, r3
 8003270:	f7fd fdf6 	bl	8000e60 <HAL_DMA_Abort_IT>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003284:	4610      	mov	r0, r2
 8003286:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003288:	e00e      	b.n	80032a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f000 f8da 	bl	8003444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003290:	e00a      	b.n	80032a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 f8d6 	bl	8003444 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003298:	e006      	b.n	80032a8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 f8d2 	bl	8003444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80032a6:	e0c3      	b.n	8003430 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a8:	bf00      	nop
    return;
 80032aa:	e0c1      	b.n	8003430 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	f040 80a1 	bne.w	80033f8 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80032b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b8:	f003 0310 	and.w	r3, r3, #16
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 809b 	beq.w	80033f8 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	f000 8095 	beq.w	80033f8 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032ce:	2300      	movs	r3, #0
 80032d0:	60fb      	str	r3, [r7, #12]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d04e      	beq.n	8003390 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80032fc:	8a3b      	ldrh	r3, [r7, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	f000 8098 	beq.w	8003434 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003308:	8a3a      	ldrh	r2, [r7, #16]
 800330a:	429a      	cmp	r2, r3
 800330c:	f080 8092 	bcs.w	8003434 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	8a3a      	ldrh	r2, [r7, #16]
 8003314:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b20      	cmp	r3, #32
 800331e:	d02b      	beq.n	8003378 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800332e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800334e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0210 	bic.w	r2, r2, #16
 800336c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003372:	4618      	mov	r0, r3
 8003374:	f7fd fd39 	bl	8000dea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003380:	b29b      	uxth	r3, r3
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	b29b      	uxth	r3, r3
 8003386:	4619      	mov	r1, r3
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f864 	bl	8003456 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800338e:	e051      	b.n	8003434 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003398:	b29b      	uxth	r3, r3
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d047      	beq.n	8003438 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80033a8:	8a7b      	ldrh	r3, [r7, #18]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d044      	beq.n	8003438 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68da      	ldr	r2, [r3, #12]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80033bc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 0201 	bic.w	r2, r2, #1
 80033cc:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68da      	ldr	r2, [r3, #12]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0210 	bic.w	r2, r2, #16
 80033ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033ec:	8a7b      	ldrh	r3, [r7, #18]
 80033ee:	4619      	mov	r1, r3
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f000 f830 	bl	8003456 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80033f6:	e01f      	b.n	8003438 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d008      	beq.n	8003414 <HAL_UART_IRQHandler+0x324>
 8003402:	6a3b      	ldr	r3, [r7, #32]
 8003404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003408:	2b00      	cmp	r3, #0
 800340a:	d003      	beq.n	8003414 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8b7 	bl	8003580 <UART_Transmit_IT>
    return;
 8003412:	e012      	b.n	800343a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00d      	beq.n	800343a <HAL_UART_IRQHandler+0x34a>
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d008      	beq.n	800343a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f8f8 	bl	800361e <UART_EndTransmit_IT>
    return;
 800342e:	e004      	b.n	800343a <HAL_UART_IRQHandler+0x34a>
    return;
 8003430:	bf00      	nop
 8003432:	e002      	b.n	800343a <HAL_UART_IRQHandler+0x34a>
      return;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <HAL_UART_IRQHandler+0x34a>
      return;
 8003438:	bf00      	nop
  }
}
 800343a:	3728      	adds	r7, #40	; 0x28
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	08003559 	.word	0x08003559

08003444 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003462:	bf00      	nop
 8003464:	370c      	adds	r7, #12
 8003466:	46bd      	mov	sp, r7
 8003468:	bc80      	pop	{r7}
 800346a:	4770      	bx	lr

0800346c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	603b      	str	r3, [r7, #0]
 8003478:	4613      	mov	r3, r2
 800347a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800347c:	e02c      	b.n	80034d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003484:	d028      	beq.n	80034d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d007      	beq.n	800349c <UART_WaitOnFlagUntilTimeout+0x30>
 800348c:	f7fd fbc4 	bl	8000c18 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	429a      	cmp	r2, r3
 800349a:	d21d      	bcs.n	80034d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	695a      	ldr	r2, [r3, #20]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0201 	bic.w	r2, r2, #1
 80034ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e00f      	b.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	4013      	ands	r3, r2
 80034e2:	68ba      	ldr	r2, [r7, #8]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	bf0c      	ite	eq
 80034e8:	2301      	moveq	r3, #1
 80034ea:	2300      	movne	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d0c3      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3710      	adds	r7, #16
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003516:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695a      	ldr	r2, [r3, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0201 	bic.w	r2, r2, #1
 8003526:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800352c:	2b01      	cmp	r3, #1
 800352e:	d107      	bne.n	8003540 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0210 	bic.w	r2, r2, #16
 800353e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2220      	movs	r2, #32
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr

08003558 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f7ff ff66 	bl	8003444 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b21      	cmp	r3, #33	; 0x21
 8003592:	d13e      	bne.n	8003612 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800359c:	d114      	bne.n	80035c8 <UART_Transmit_IT+0x48>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d110      	bne.n	80035c8 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a1b      	ldr	r3, [r3, #32]
 80035c0:	1c9a      	adds	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]
 80035c6:	e008      	b.n	80035da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	1c59      	adds	r1, r3, #1
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6211      	str	r1, [r2, #32]
 80035d2:	781a      	ldrb	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29b      	uxth	r3, r3
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	4619      	mov	r1, r3
 80035e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10f      	bne.n	800360e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	68da      	ldr	r2, [r3, #12]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800360c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800360e:	2300      	movs	r3, #0
 8003610:	e000      	b.n	8003614 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003612:	2302      	movs	r3, #2
  }
}
 8003614:	4618      	mov	r0, r3
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	bc80      	pop	{r7}
 800361c:	4770      	bx	lr

0800361e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b082      	sub	sp, #8
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003634:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd f87e 	bl	8000740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b086      	sub	sp, #24
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b22      	cmp	r3, #34	; 0x22
 8003660:	f040 8099 	bne.w	8003796 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366c:	d117      	bne.n	800369e <UART_Receive_IT+0x50>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d113      	bne.n	800369e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800368c:	b29a      	uxth	r2, r3
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	1c9a      	adds	r2, r3, #2
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28
 800369c:	e026      	b.n	80036ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80036a4:	2300      	movs	r3, #0
 80036a6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036b0:	d007      	beq.n	80036c2 <UART_Receive_IT+0x74>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <UART_Receive_IT+0x82>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d106      	bne.n	80036d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	701a      	strb	r2, [r3, #0]
 80036ce:	e008      	b.n	80036e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e6:	1c5a      	adds	r2, r3, #1
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	3b01      	subs	r3, #1
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	4619      	mov	r1, r3
 80036fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d148      	bne.n	8003792 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f022 0220 	bic.w	r2, r2, #32
 800370e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68da      	ldr	r2, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800371e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695a      	ldr	r2, [r3, #20]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f022 0201 	bic.w	r2, r2, #1
 800372e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373c:	2b01      	cmp	r3, #1
 800373e:	d123      	bne.n	8003788 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	68da      	ldr	r2, [r3, #12]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f022 0210 	bic.w	r2, r2, #16
 8003754:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0310 	and.w	r3, r3, #16
 8003760:	2b10      	cmp	r3, #16
 8003762:	d10a      	bne.n	800377a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800377e:	4619      	mov	r1, r3
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff fe68 	bl	8003456 <HAL_UARTEx_RxEventCallback>
 8003786:	e002      	b.n	800378e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7fc ffe3 	bl	8000754 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800378e:	2300      	movs	r3, #0
 8003790:	e002      	b.n	8003798 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	e000      	b.n	8003798 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003796:	2302      	movs	r3, #2
  }
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}

080037a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	691b      	ldr	r3, [r3, #16]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	695b      	ldr	r3, [r3, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80037da:	f023 030c 	bic.w	r3, r3, #12
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	6812      	ldr	r2, [r2, #0]
 80037e2:	68b9      	ldr	r1, [r7, #8]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	699a      	ldr	r2, [r3, #24]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a2c      	ldr	r2, [pc, #176]	; (80038b4 <UART_SetConfig+0x114>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d103      	bne.n	8003810 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003808:	f7fe f918 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	e002      	b.n	8003816 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003810:	f7fe f900 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 8003814:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009a      	lsls	r2, r3, #2
 8003820:	441a      	add	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	fbb2 f3f3 	udiv	r3, r2, r3
 800382c:	4a22      	ldr	r2, [pc, #136]	; (80038b8 <UART_SetConfig+0x118>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	095b      	lsrs	r3, r3, #5
 8003834:	0119      	lsls	r1, r3, #4
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	009a      	lsls	r2, r3, #2
 8003840:	441a      	add	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	fbb2 f2f3 	udiv	r2, r2, r3
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <UART_SetConfig+0x118>)
 800384e:	fba3 0302 	umull	r0, r3, r3, r2
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	2064      	movs	r0, #100	; 0x64
 8003856:	fb00 f303 	mul.w	r3, r0, r3
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	011b      	lsls	r3, r3, #4
 800385e:	3332      	adds	r3, #50	; 0x32
 8003860:	4a15      	ldr	r2, [pc, #84]	; (80038b8 <UART_SetConfig+0x118>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	095b      	lsrs	r3, r3, #5
 8003868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800386c:	4419      	add	r1, r3
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	009a      	lsls	r2, r3, #2
 8003878:	441a      	add	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	fbb2 f2f3 	udiv	r2, r2, r3
 8003884:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <UART_SetConfig+0x118>)
 8003886:	fba3 0302 	umull	r0, r3, r3, r2
 800388a:	095b      	lsrs	r3, r3, #5
 800388c:	2064      	movs	r0, #100	; 0x64
 800388e:	fb00 f303 	mul.w	r3, r0, r3
 8003892:	1ad3      	subs	r3, r2, r3
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	3332      	adds	r3, #50	; 0x32
 8003898:	4a07      	ldr	r2, [pc, #28]	; (80038b8 <UART_SetConfig+0x118>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	095b      	lsrs	r3, r3, #5
 80038a0:	f003 020f 	and.w	r2, r3, #15
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	440a      	add	r2, r1
 80038aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	40013800 	.word	0x40013800
 80038b8:	51eb851f 	.word	0x51eb851f

080038bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f103 0208 	add.w	r2, r3, #8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f103 0208 	add.w	r2, r3, #8
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f103 0208 	add.w	r2, r3, #8
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003912:	b480      	push	{r7}
 8003914:	b085      	sub	sp, #20
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
 800391a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	1c5a      	adds	r2, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	3714      	adds	r7, #20
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800396e:	d103      	bne.n	8003978 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e00c      	b.n	8003992 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3308      	adds	r3, #8
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	e002      	b.n	8003986 <vListInsert+0x2e>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	429a      	cmp	r2, r3
 8003990:	d2f6      	bcs.n	8003980 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	683a      	ldr	r2, [r7, #0]
 80039a0:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	683a      	ldr	r2, [r7, #0]
 80039ac:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	601a      	str	r2, [r3, #0]
}
 80039be:	bf00      	nop
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bc80      	pop	{r7}
 80039c6:	4770      	bx	lr

080039c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039c8:	b480      	push	{r7}
 80039ca:	b085      	sub	sp, #20
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6892      	ldr	r2, [r2, #8]
 80039de:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	687a      	ldr	r2, [r7, #4]
 80039e6:	6852      	ldr	r2, [r2, #4]
 80039e8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d103      	bne.n	80039fc <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	1e5a      	subs	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bc80      	pop	{r7}
 8003a18:	4770      	bx	lr

08003a1a <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b086      	sub	sp, #24
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
 8003a22:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8003a24:	2301      	movs	r3, #1
 8003a26:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <xQueueGenericReset+0x2e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8003a44:	bf00      	nop
 8003a46:	e7fe      	b.n	8003a46 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d052      	beq.n	8003af4 <xQueueGenericReset+0xda>
        ( pxQueue->uxLength >= 1U ) &&
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d04e      	beq.n	8003af4 <xQueueGenericReset+0xda>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5e:	2100      	movs	r1, #0
 8003a60:	fba3 2302 	umull	r2, r3, r3, r2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d000      	beq.n	8003a6a <xQueueGenericReset+0x50>
 8003a68:	2101      	movs	r1, #1
 8003a6a:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d141      	bne.n	8003af4 <xQueueGenericReset+0xda>
    {
        taskENTER_CRITICAL();
 8003a70:	f001 fcee 	bl	8005450 <vPortEnterCritical>

        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a7c:	6939      	ldr	r1, [r7, #16]
 8003a7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	441a      	add	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	6939      	ldr	r1, [r7, #16]
 8003aa4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003aa6:	fb01 f303 	mul.w	r3, r1, r3
 8003aaa:	441a      	add	r2, r3
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	22ff      	movs	r2, #255	; 0xff
 8003ab4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	22ff      	movs	r2, #255	; 0xff
 8003abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d109      	bne.n	8003ada <xQueueGenericReset+0xc0>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00f      	beq.n	8003aee <xQueueGenericReset+0xd4>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	3310      	adds	r3, #16
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f001 f89c 	bl	8004c10 <xTaskRemoveFromEventList>
 8003ad8:	e009      	b.n	8003aee <xQueueGenericReset+0xd4>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	3310      	adds	r3, #16
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff feec 	bl	80038bc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	3324      	adds	r3, #36	; 0x24
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff fee7 	bl	80038bc <vListInitialise>
        }
        taskEXIT_CRITICAL();
 8003aee:	f001 fcdf 	bl	80054b0 <vPortExitCritical>
 8003af2:	e001      	b.n	8003af8 <xQueueGenericReset+0xde>
    }
    else
    {
        xReturn = pdFAIL;
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d10a      	bne.n	8003b14 <xQueueGenericReset+0xfa>
        __asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	60bb      	str	r3, [r7, #8]
    }
 8003b10:	bf00      	nop
 8003b12:	e7fe      	b.n	8003b12 <xQueueGenericReset+0xf8>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8003b14:	697b      	ldr	r3, [r7, #20]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3718      	adds	r7, #24
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b08a      	sub	sp, #40	; 0x28
 8003b22:	af02      	add	r7, sp, #8
 8003b24:	60f8      	str	r0, [r7, #12]
 8003b26:	60b9      	str	r1, [r7, #8]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d02e      	beq.n	8003b94 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003b36:	2100      	movs	r1, #0
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d000      	beq.n	8003b46 <xQueueGenericCreate+0x28>
 8003b44:	2101      	movs	r1, #1
 8003b46:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d123      	bne.n	8003b94 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	68ba      	ldr	r2, [r7, #8]
 8003b50:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003b54:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8003b58:	d81c      	bhi.n	8003b94 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	fb02 f303 	mul.w	r3, r2, r3
 8003b62:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	3350      	adds	r3, #80	; 0x50
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f001 fd31 	bl	80055d0 <pvPortMalloc>
 8003b6e:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d01c      	beq.n	8003bb0 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	3350      	adds	r3, #80	; 0x50
 8003b7e:	617b      	str	r3, [r7, #20]
                         * deleted. */
                        pxNewQueue->ucStaticallyAllocated = pdFALSE;
                    }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b80:	79fa      	ldrb	r2, [r7, #7]
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	4613      	mov	r3, r2
 8003b88:	697a      	ldr	r2, [r7, #20]
 8003b8a:	68b9      	ldr	r1, [r7, #8]
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f814 	bl	8003bba <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8003b92:	e00d      	b.n	8003bb0 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <xQueueGenericCreate+0x92>
        __asm volatile
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	613b      	str	r3, [r7, #16]
    }
 8003bac:	bf00      	nop
 8003bae:	e7fe      	b.n	8003bae <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003bb0:	69fb      	ldr	r3, [r7, #28]
    }
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}

08003bba <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003bba:	b580      	push	{r7, lr}
 8003bbc:	b084      	sub	sp, #16
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	e002      	b.n	8003bdc <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	68ba      	ldr	r2, [r7, #8]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003be8:	2101      	movs	r1, #1
 8003bea:	69b8      	ldr	r0, [r7, #24]
 8003bec:	f7ff ff15 	bl	8003a1a <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08c      	sub	sp, #48	; 0x30
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28

    configASSERT( pxQueue );
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10a      	bne.n	8003c32 <xQueueGenericSend+0x32>
        __asm volatile
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	623b      	str	r3, [r7, #32]
    }
 8003c2e:	bf00      	nop
 8003c30:	e7fe      	b.n	8003c30 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d103      	bne.n	8003c40 <xQueueGenericSend+0x40>
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <xQueueGenericSend+0x44>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <xQueueGenericSend+0x46>
 8003c44:	2300      	movs	r3, #0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10a      	bne.n	8003c60 <xQueueGenericSend+0x60>
        __asm volatile
 8003c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c4e:	f383 8811 	msr	BASEPRI, r3
 8003c52:	f3bf 8f6f 	isb	sy
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	61fb      	str	r3, [r7, #28]
    }
 8003c5c:	bf00      	nop
 8003c5e:	e7fe      	b.n	8003c5e <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d103      	bne.n	8003c6e <xQueueGenericSend+0x6e>
 8003c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <xQueueGenericSend+0x72>
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e000      	b.n	8003c74 <xQueueGenericSend+0x74>
 8003c72:	2300      	movs	r3, #0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <xQueueGenericSend+0x8e>
        __asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	61bb      	str	r3, [r7, #24]
    }
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <xQueueGenericSend+0x8c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c8e:	f001 fbdf 	bl	8005450 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d302      	bcc.n	8003ca4 <xQueueGenericSend+0xa4>
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d112      	bne.n	8003cca <xQueueGenericSend+0xca>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ca4:	683a      	ldr	r2, [r7, #0]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003caa:	f000 f933 	bl	8003f14 <prvCopyDataToQueue>
 8003cae:	6278      	str	r0, [r7, #36]	; 0x24

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d004      	beq.n	8003cc2 <xQueueGenericSend+0xc2>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cba:	3324      	adds	r3, #36	; 0x24
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f000 ffa7 	bl	8004c10 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003cc2:	f001 fbf5 	bl	80054b0 <vPortExitCritical>
                return pdPASS;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e062      	b.n	8003d90 <xQueueGenericSend+0x190>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d103      	bne.n	8003cd8 <xQueueGenericSend+0xd8>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003cd0:	f001 fbee 	bl	80054b0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e05b      	b.n	8003d90 <xQueueGenericSend+0x190>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <xQueueGenericSend+0xec>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003cde:	f107 0310 	add.w	r3, r7, #16
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f001 f86a 	bl	8004dbc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003cec:	f001 fbe0 	bl	80054b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003cf0:	f000 fd20 	bl	8004734 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003cf4:	f001 fbac 	bl	8005450 <vPortEnterCritical>
 8003cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cfe:	b25b      	sxtb	r3, r3
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d04:	d103      	bne.n	8003d0e <xQueueGenericSend+0x10e>
 8003d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d14:	b25b      	sxtb	r3, r3
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1a:	d103      	bne.n	8003d24 <xQueueGenericSend+0x124>
 8003d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d24:	f001 fbc4 	bl	80054b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d28:	1d3a      	adds	r2, r7, #4
 8003d2a:	f107 0310 	add.w	r3, r7, #16
 8003d2e:	4611      	mov	r1, r2
 8003d30:	4618      	mov	r0, r3
 8003d32:	f001 f859 	bl	8004de8 <xTaskCheckForTimeOut>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d123      	bne.n	8003d84 <xQueueGenericSend+0x184>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d3e:	f000 f9e1 	bl	8004104 <prvIsQueueFull>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d017      	beq.n	8003d78 <xQueueGenericSend+0x178>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d4a:	3310      	adds	r3, #16
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	4611      	mov	r1, r2
 8003d50:	4618      	mov	r0, r3
 8003d52:	f000 ff39 	bl	8004bc8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003d56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d58:	f000 f96c 	bl	8004034 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003d5c:	f000 fcf8 	bl	8004750 <xTaskResumeAll>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d193      	bne.n	8003c8e <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8003d66:	4b0c      	ldr	r3, [pc, #48]	; (8003d98 <xQueueGenericSend+0x198>)
 8003d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d6c:	601a      	str	r2, [r3, #0]
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	f3bf 8f6f 	isb	sy
 8003d76:	e78a      	b.n	8003c8e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003d78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d7a:	f000 f95b 	bl	8004034 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d7e:	f000 fce7 	bl	8004750 <xTaskResumeAll>
 8003d82:	e784      	b.n	8003c8e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d86:	f000 f955 	bl	8004034 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d8a:	f000 fce1 	bl	8004750 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003d8e:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3730      	adds	r7, #48	; 0x30
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	e000ed04 	.word	0xe000ed04

08003d9c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b08c      	sub	sp, #48	; 0x30
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003da8:	2300      	movs	r3, #0
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10a      	bne.n	8003dcc <xQueueReceive+0x30>
        __asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	623b      	str	r3, [r7, #32]
    }
 8003dc8:	bf00      	nop
 8003dca:	e7fe      	b.n	8003dca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <xQueueReceive+0x3e>
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <xQueueReceive+0x42>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e000      	b.n	8003de0 <xQueueReceive+0x44>
 8003dde:	2300      	movs	r3, #0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d10a      	bne.n	8003dfa <xQueueReceive+0x5e>
        __asm volatile
 8003de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de8:	f383 8811 	msr	BASEPRI, r3
 8003dec:	f3bf 8f6f 	isb	sy
 8003df0:	f3bf 8f4f 	dsb	sy
 8003df4:	61fb      	str	r3, [r7, #28]
    }
 8003df6:	bf00      	nop
 8003df8:	e7fe      	b.n	8003df8 <xQueueReceive+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003dfa:	f001 fb29 	bl	8005450 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d014      	beq.n	8003e34 <xQueueReceive+0x98>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e0a:	68b9      	ldr	r1, [r7, #8]
 8003e0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e0e:	f000 f8eb 	bl	8003fe8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	1e5a      	subs	r2, r3, #1
 8003e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d004      	beq.n	8003e2c <xQueueReceive+0x90>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e24:	3310      	adds	r3, #16
 8003e26:	4618      	mov	r0, r3
 8003e28:	f000 fef2 	bl	8004c10 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003e2c:	f001 fb40 	bl	80054b0 <vPortExitCritical>
                return pdPASS;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e069      	b.n	8003f08 <xQueueReceive+0x16c>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d103      	bne.n	8003e42 <xQueueReceive+0xa6>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003e3a:	f001 fb39 	bl	80054b0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e062      	b.n	8003f08 <xQueueReceive+0x16c>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <xQueueReceive+0xba>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e48:	f107 0314 	add.w	r3, r7, #20
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f000 ffb5 	bl	8004dbc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003e52:	2301      	movs	r3, #1
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003e56:	f001 fb2b 	bl	80054b0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003e5a:	f000 fc6b 	bl	8004734 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e5e:	f001 faf7 	bl	8005450 <vPortEnterCritical>
 8003e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e68:	b25b      	sxtb	r3, r3
 8003e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e6e:	d103      	bne.n	8003e78 <xQueueReceive+0xdc>
 8003e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e7e:	b25b      	sxtb	r3, r3
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e84:	d103      	bne.n	8003e8e <xQueueReceive+0xf2>
 8003e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e8e:	f001 fb0f 	bl	80054b0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e92:	1d3a      	adds	r2, r7, #4
 8003e94:	f107 0314 	add.w	r3, r7, #20
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 ffa4 	bl	8004de8 <xTaskCheckForTimeOut>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d123      	bne.n	8003eee <xQueueReceive+0x152>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ea8:	f000 f916 	bl	80040d8 <prvIsQueueEmpty>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d017      	beq.n	8003ee2 <xQueueReceive+0x146>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb4:	3324      	adds	r3, #36	; 0x24
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4611      	mov	r1, r2
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fe84 	bl	8004bc8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ec2:	f000 f8b7 	bl	8004034 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003ec6:	f000 fc43 	bl	8004750 <xTaskResumeAll>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d194      	bne.n	8003dfa <xQueueReceive+0x5e>
                {
                    portYIELD_WITHIN_API();
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	; (8003f10 <xQueueReceive+0x174>)
 8003ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed6:	601a      	str	r2, [r3, #0]
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	e78b      	b.n	8003dfa <xQueueReceive+0x5e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003ee2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ee4:	f000 f8a6 	bl	8004034 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003ee8:	f000 fc32 	bl	8004750 <xTaskResumeAll>
 8003eec:	e785      	b.n	8003dfa <xQueueReceive+0x5e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003eee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ef0:	f000 f8a0 	bl	8004034 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003ef4:	f000 fc2c 	bl	8004750 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003efa:	f000 f8ed 	bl	80040d8 <prvIsQueueEmpty>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f43f af7a 	beq.w	8003dfa <xQueueReceive+0x5e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003f06:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3730      	adds	r7, #48	; 0x30
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}
 8003f10:	e000ed04 	.word	0xe000ed04

08003f14 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003f20:	2300      	movs	r3, #0
 8003f22:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10d      	bne.n	8003f4e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d14d      	bne.n	8003fd6 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f001 f86e 	bl	8005020 <xTaskPriorityDisinherit>
 8003f44:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	609a      	str	r2, [r3, #8]
 8003f4c:	e043      	b.n	8003fd6 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d119      	bne.n	8003f88 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6858      	ldr	r0, [r3, #4]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	461a      	mov	r2, r3
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	f001 fd60 	bl	8005a24 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	685a      	ldr	r2, [r3, #4]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d32b      	bcc.n	8003fd6 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	e026      	b.n	8003fd6 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	68d8      	ldr	r0, [r3, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	461a      	mov	r2, r3
 8003f92:	68b9      	ldr	r1, [r7, #8]
 8003f94:	f001 fd46 	bl	8005a24 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa0:	425b      	negs	r3, r3
 8003fa2:	441a      	add	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d207      	bcs.n	8003fc4 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	689a      	ldr	r2, [r3, #8]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	425b      	negs	r3, r3
 8003fbe:	441a      	add	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d105      	bne.n	8003fd6 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1c5a      	adds	r2, r3, #1
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003fde:	697b      	ldr	r3, [r7, #20]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d018      	beq.n	800402c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	441a      	add	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	68da      	ldr	r2, [r3, #12]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	429a      	cmp	r2, r3
 8004012:	d303      	bcc.n	800401c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68d9      	ldr	r1, [r3, #12]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004024:	461a      	mov	r2, r3
 8004026:	6838      	ldr	r0, [r7, #0]
 8004028:	f001 fcfc 	bl	8005a24 <memcpy>
    }
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800403c:	f001 fa08 	bl	8005450 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004046:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004048:	e011      	b.n	800406e <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d012      	beq.n	8004078 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3324      	adds	r3, #36	; 0x24
 8004056:	4618      	mov	r0, r3
 8004058:	f000 fdda 	bl	8004c10 <xTaskRemoveFromEventList>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004062:	f000 ff27 	bl	8004eb4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	3b01      	subs	r3, #1
 800406a:	b2db      	uxtb	r3, r3
 800406c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800406e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	dce9      	bgt.n	800404a <prvUnlockQueue+0x16>
 8004076:	e000      	b.n	800407a <prvUnlockQueue+0x46>
                        break;
 8004078:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	22ff      	movs	r2, #255	; 0xff
 800407e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8004082:	f001 fa15 	bl	80054b0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004086:	f001 f9e3 	bl	8005450 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004090:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004092:	e011      	b.n	80040b8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d012      	beq.n	80040c2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3310      	adds	r3, #16
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fdb5 	bl	8004c10 <xTaskRemoveFromEventList>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d001      	beq.n	80040b0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80040ac:	f000 ff02 	bl	8004eb4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80040b0:	7bbb      	ldrb	r3, [r7, #14]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80040b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	dce9      	bgt.n	8004094 <prvUnlockQueue+0x60>
 80040c0:	e000      	b.n	80040c4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80040c2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	22ff      	movs	r2, #255	; 0xff
 80040c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80040cc:	f001 f9f0 	bl	80054b0 <vPortExitCritical>
}
 80040d0:	bf00      	nop
 80040d2:	3710      	adds	r7, #16
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80040e0:	f001 f9b6 	bl	8005450 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d102      	bne.n	80040f2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80040ec:	2301      	movs	r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	e001      	b.n	80040f6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80040f6:	f001 f9db 	bl	80054b0 <vPortExitCritical>

    return xReturn;
 80040fa:	68fb      	ldr	r3, [r7, #12]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3710      	adds	r7, #16
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800410c:	f001 f9a0 	bl	8005450 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	429a      	cmp	r2, r3
 800411a:	d102      	bne.n	8004122 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800411c:	2301      	movs	r3, #1
 800411e:	60fb      	str	r3, [r7, #12]
 8004120:	e001      	b.n	8004126 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004126:	f001 f9c3 	bl	80054b0 <vPortExitCritical>

    return xReturn;
 800412a:	68fb      	ldr	r3, [r7, #12]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004134:	b580      	push	{r7, lr}
 8004136:	b08c      	sub	sp, #48	; 0x30
 8004138:	af04      	add	r7, sp, #16
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004144:	88fb      	ldrh	r3, [r7, #6]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4618      	mov	r0, r3
 800414a:	f001 fa41 	bl	80055d0 <pvPortMalloc>
 800414e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00e      	beq.n	8004174 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004156:	2058      	movs	r0, #88	; 0x58
 8004158:	f001 fa3a 	bl	80055d0 <pvPortMalloc>
 800415c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	697a      	ldr	r2, [r7, #20]
 8004168:	631a      	str	r2, [r3, #48]	; 0x30
 800416a:	e005      	b.n	8004178 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 800416c:	6978      	ldr	r0, [r7, #20]
 800416e:	f001 fb0f 	bl	8005790 <vPortFree>
 8004172:	e001      	b.n	8004178 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d013      	beq.n	80041a6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	2300      	movs	r3, #0
 8004182:	9303      	str	r3, [sp, #12]
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	9302      	str	r3, [sp, #8]
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	68b9      	ldr	r1, [r7, #8]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f80e 	bl	80041b6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800419a:	69f8      	ldr	r0, [r7, #28]
 800419c:	f000 f8b0 	bl	8004300 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80041a0:	2301      	movs	r3, #1
 80041a2:	61bb      	str	r3, [r7, #24]
 80041a4:	e002      	b.n	80041ac <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041aa:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80041ac:	69bb      	ldr	r3, [r7, #24]
    }
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b088      	sub	sp, #32
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	60f8      	str	r0, [r7, #12]
 80041be:	60b9      	str	r1, [r7, #8]
 80041c0:	607a      	str	r2, [r7, #4]
 80041c2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	461a      	mov	r2, r3
 80041ce:	21a5      	movs	r1, #165	; 0xa5
 80041d0:	f001 fc36 	bl	8005a40 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80041d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80041de:	3b01      	subs	r3, #1
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	4413      	add	r3, r2
 80041e4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	f023 0307 	bic.w	r3, r3, #7
 80041ec:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00a      	beq.n	800420e <prvInitialiseNewTask+0x58>
        __asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	617b      	str	r3, [r7, #20]
    }
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01f      	beq.n	8004254 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004214:	2300      	movs	r3, #0
 8004216:	61fb      	str	r3, [r7, #28]
 8004218:	e012      	b.n	8004240 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	4413      	add	r3, r2
 8004220:	7819      	ldrb	r1, [r3, #0]
 8004222:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	4413      	add	r3, r2
 8004228:	3334      	adds	r3, #52	; 0x34
 800422a:	460a      	mov	r2, r1
 800422c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d006      	beq.n	8004248 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3301      	adds	r3, #1
 800423e:	61fb      	str	r3, [r7, #28]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	2b09      	cmp	r3, #9
 8004244:	d9e9      	bls.n	800421a <prvInitialiseNewTask+0x64>
 8004246:	e000      	b.n	800424a <prvInitialiseNewTask+0x94>
            {
                break;
 8004248:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800424a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800424c:	2200      	movs	r2, #0
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004252:	e003      	b.n	800425c <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	2b04      	cmp	r3, #4
 8004260:	d90a      	bls.n	8004278 <prvInitialiseNewTask+0xc2>
        __asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	613b      	str	r3, [r7, #16]
    }
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	2b04      	cmp	r3, #4
 800427c:	d901      	bls.n	8004282 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800427e:	2304      	movs	r3, #4
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004286:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800428a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800428c:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	2200      	movs	r2, #0
 8004292:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	3304      	adds	r3, #4
 8004298:	4618      	mov	r0, r3
 800429a:	f7ff fb2e 	bl	80038fa <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	3318      	adds	r3, #24
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff fb29 	bl	80038fa <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042ac:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042b0:	f1c3 0205 	rsb	r2, r3, #5
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042bc:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80042be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c0:	3350      	adds	r3, #80	; 0x50
 80042c2:	2204      	movs	r2, #4
 80042c4:	2100      	movs	r1, #0
 80042c6:	4618      	mov	r0, r3
 80042c8:	f001 fbba 	bl	8005a40 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	3354      	adds	r3, #84	; 0x54
 80042d0:	2201      	movs	r2, #1
 80042d2:	2100      	movs	r1, #0
 80042d4:	4618      	mov	r0, r3
 80042d6:	f001 fbb3 	bl	8005a40 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	68f9      	ldr	r1, [r7, #12]
 80042de:	69b8      	ldr	r0, [r7, #24]
 80042e0:	f000 ffc2 	bl	8005268 <pxPortInitialiseStack>
 80042e4:	4602      	mov	r2, r0
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80042ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d002      	beq.n	80042f6 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80042f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80042f6:	bf00      	nop
 80042f8:	3720      	adds	r7, #32
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004308:	f001 f8a2 	bl	8005450 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800430c:	4b3a      	ldr	r3, [pc, #232]	; (80043f8 <prvAddNewTaskToReadyList+0xf8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	3301      	adds	r3, #1
 8004312:	4a39      	ldr	r2, [pc, #228]	; (80043f8 <prvAddNewTaskToReadyList+0xf8>)
 8004314:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <prvAddNewTaskToReadyList+0xfc>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d109      	bne.n	8004332 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800431e:	4a37      	ldr	r2, [pc, #220]	; (80043fc <prvAddNewTaskToReadyList+0xfc>)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004324:	4b34      	ldr	r3, [pc, #208]	; (80043f8 <prvAddNewTaskToReadyList+0xf8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b01      	cmp	r3, #1
 800432a:	d110      	bne.n	800434e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800432c:	f000 fde0 	bl	8004ef0 <prvInitialiseTaskLists>
 8004330:	e00d      	b.n	800434e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004332:	4b33      	ldr	r3, [pc, #204]	; (8004400 <prvAddNewTaskToReadyList+0x100>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d109      	bne.n	800434e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800433a:	4b30      	ldr	r3, [pc, #192]	; (80043fc <prvAddNewTaskToReadyList+0xfc>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004344:	429a      	cmp	r2, r3
 8004346:	d802      	bhi.n	800434e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004348:	4a2c      	ldr	r2, [pc, #176]	; (80043fc <prvAddNewTaskToReadyList+0xfc>)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800434e:	4b2d      	ldr	r3, [pc, #180]	; (8004404 <prvAddNewTaskToReadyList+0x104>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	3301      	adds	r3, #1
 8004354:	4a2b      	ldr	r2, [pc, #172]	; (8004404 <prvAddNewTaskToReadyList+0x104>)
 8004356:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004358:	4b2a      	ldr	r3, [pc, #168]	; (8004404 <prvAddNewTaskToReadyList+0x104>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	2201      	movs	r2, #1
 8004366:	409a      	lsls	r2, r3
 8004368:	4b27      	ldr	r3, [pc, #156]	; (8004408 <prvAddNewTaskToReadyList+0x108>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4313      	orrs	r3, r2
 800436e:	4a26      	ldr	r2, [pc, #152]	; (8004408 <prvAddNewTaskToReadyList+0x108>)
 8004370:	6013      	str	r3, [r2, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004376:	4925      	ldr	r1, [pc, #148]	; (800440c <prvAddNewTaskToReadyList+0x10c>)
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	3304      	adds	r3, #4
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	609a      	str	r2, [r3, #8]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	689a      	ldr	r2, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	60da      	str	r2, [r3, #12]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	3204      	adds	r2, #4
 800439e:	605a      	str	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	1d1a      	adds	r2, r3, #4
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	609a      	str	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <prvAddNewTaskToReadyList+0x10c>)
 80043b6:	441a      	add	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	615a      	str	r2, [r3, #20]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043c0:	4912      	ldr	r1, [pc, #72]	; (800440c <prvAddNewTaskToReadyList+0x10c>)
 80043c2:	4613      	mov	r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	4413      	add	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	1c59      	adds	r1, r3, #1
 80043d0:	480e      	ldr	r0, [pc, #56]	; (800440c <prvAddNewTaskToReadyList+0x10c>)
 80043d2:	4613      	mov	r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4403      	add	r3, r0
 80043dc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80043de:	f001 f867 	bl	80054b0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80043e2:	4b07      	ldr	r3, [pc, #28]	; (8004400 <prvAddNewTaskToReadyList+0x100>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <prvAddNewTaskToReadyList+0xee>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043ea:	4b04      	ldr	r3, [pc, #16]	; (80043fc <prvAddNewTaskToReadyList+0xfc>)
 80043ec:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2000019c 	.word	0x2000019c
 80043fc:	200000c4 	.word	0x200000c4
 8004400:	200001a8 	.word	0x200001a8
 8004404:	200001b8 	.word	0x200001b8
 8004408:	200001a4 	.word	0x200001a4
 800440c:	200000c8 	.word	0x200000c8

08004410 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8004418:	f001 f81a 	bl	8005450 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d102      	bne.n	8004428 <vTaskSuspend+0x18>
 8004422:	4b43      	ldr	r3, [pc, #268]	; (8004530 <vTaskSuspend+0x120>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	e000      	b.n	800442a <vTaskSuspend+0x1a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	3304      	adds	r3, #4
 8004430:	4618      	mov	r0, r3
 8004432:	f7ff fac9 	bl	80039c8 <uxListRemove>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d115      	bne.n	8004468 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004440:	493c      	ldr	r1, [pc, #240]	; (8004534 <vTaskSuspend+0x124>)
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	440b      	add	r3, r1
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <vTaskSuspend+0x58>
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	2201      	movs	r2, #1
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	43da      	mvns	r2, r3
 800445e:	4b36      	ldr	r3, [pc, #216]	; (8004538 <vTaskSuspend+0x128>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4013      	ands	r3, r2
 8004464:	4a34      	ldr	r2, [pc, #208]	; (8004538 <vTaskSuspend+0x128>)
 8004466:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	2b00      	cmp	r3, #0
 800446e:	d004      	beq.n	800447a <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	3318      	adds	r3, #24
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff faa7 	bl	80039c8 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	3304      	adds	r3, #4
 800447e:	4619      	mov	r1, r3
 8004480:	482e      	ldr	r0, [pc, #184]	; (800453c <vTaskSuspend+0x12c>)
 8004482:	f7ff fa46 	bl	8003912 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
                {
                    BaseType_t x;

                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8004486:	2300      	movs	r3, #0
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	e010      	b.n	80044ae <vTaskSuspend+0x9e>
                    {
                        if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 800448c:	693a      	ldr	r2, [r7, #16]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	3354      	adds	r3, #84	; 0x54
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d105      	bne.n	80044a8 <vTaskSuspend+0x98>
                        {
                            /* The task was blocked to wait for a notification, but is
                             * now suspended, so no notification was received. */
                            pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 800449c:	693a      	ldr	r2, [r7, #16]
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	4413      	add	r3, r2
 80044a2:	3354      	adds	r3, #84	; 0x54
 80044a4:	2200      	movs	r2, #0
 80044a6:	701a      	strb	r2, [r3, #0]
                    for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	3301      	adds	r3, #1
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	ddeb      	ble.n	800448c <vTaskSuspend+0x7c>
                        }
                    }
                }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 80044b4:	f000 fffc 	bl	80054b0 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80044b8:	4b21      	ldr	r3, [pc, #132]	; (8004540 <vTaskSuspend+0x130>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d005      	beq.n	80044cc <vTaskSuspend+0xbc>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 80044c0:	f000 ffc6 	bl	8005450 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 80044c4:	f000 fd92 	bl	8004fec <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 80044c8:	f000 fff2 	bl	80054b0 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 80044cc:	4b18      	ldr	r3, [pc, #96]	; (8004530 <vTaskSuspend+0x120>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d127      	bne.n	8004526 <vTaskSuspend+0x116>
        {
            if( xSchedulerRunning != pdFALSE )
 80044d6:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <vTaskSuspend+0x130>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d017      	beq.n	800450e <vTaskSuspend+0xfe>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 80044de:	4b19      	ldr	r3, [pc, #100]	; (8004544 <vTaskSuspend+0x134>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <vTaskSuspend+0xec>
        __asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	60fb      	str	r3, [r7, #12]
    }
 80044f8:	bf00      	nop
 80044fa:	e7fe      	b.n	80044fa <vTaskSuspend+0xea>
                portYIELD_WITHIN_API();
 80044fc:	4b12      	ldr	r3, [pc, #72]	; (8004548 <vTaskSuspend+0x138>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800450c:	e00b      	b.n	8004526 <vTaskSuspend+0x116>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800450e:	4b0b      	ldr	r3, [pc, #44]	; (800453c <vTaskSuspend+0x12c>)
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b0e      	ldr	r3, [pc, #56]	; (800454c <vTaskSuspend+0x13c>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d103      	bne.n	8004522 <vTaskSuspend+0x112>
                    pxCurrentTCB = NULL;
 800451a:	4b05      	ldr	r3, [pc, #20]	; (8004530 <vTaskSuspend+0x120>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
    }
 8004520:	e001      	b.n	8004526 <vTaskSuspend+0x116>
                    vTaskSwitchContext();
 8004522:	f000 faf7 	bl	8004b14 <vTaskSwitchContext>
    }
 8004526:	bf00      	nop
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	200000c4 	.word	0x200000c4
 8004534:	200000c8 	.word	0x200000c8
 8004538:	200001a4 	.word	0x200001a4
 800453c:	20000188 	.word	0x20000188
 8004540:	200001a8 	.word	0x200001a8
 8004544:	200001c4 	.word	0x200001c4
 8004548:	e000ed04 	.word	0xe000ed04
 800454c:	2000019c 	.word	0x2000019c

08004550 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8004550:	b480      	push	{r7}
 8004552:	b087      	sub	sp, #28
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10a      	bne.n	800457c <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	60fb      	str	r3, [r7, #12]
    }
 8004578:	bf00      	nop
 800457a:	e7fe      	b.n	800457a <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	4a09      	ldr	r2, [pc, #36]	; (80045a8 <prvTaskIsTaskSuspended+0x58>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d10a      	bne.n	800459c <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458a:	4a08      	ldr	r2, [pc, #32]	; (80045ac <prvTaskIsTaskSuspended+0x5c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d005      	beq.n	800459c <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 8004598:	2301      	movs	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800459c:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800459e:	4618      	mov	r0, r3
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr
 80045a8:	20000188 	.word	0x20000188
 80045ac:	2000015c 	.word	0x2000015c

080045b0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <vTaskResume+0x28>
        __asm volatile
 80045c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c6:	f383 8811 	msr	BASEPRI, r3
 80045ca:	f3bf 8f6f 	isb	sy
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	60fb      	str	r3, [r7, #12]
    }
 80045d4:	bf00      	nop
 80045d6:	e7fe      	b.n	80045d6 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80045d8:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <vTaskResume+0xe0>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d052      	beq.n	8004688 <vTaskResume+0xd8>
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d04f      	beq.n	8004688 <vTaskResume+0xd8>
        {
            taskENTER_CRITICAL();
 80045e8:	f000 ff32 	bl	8005450 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f7ff ffaf 	bl	8004550 <prvTaskIsTaskSuspended>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d045      	beq.n	8004684 <vTaskResume+0xd4>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4618      	mov	r0, r3
 80045fe:	f7ff f9e3 	bl	80039c8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	2201      	movs	r2, #1
 8004608:	409a      	lsls	r2, r3
 800460a:	4b22      	ldr	r3, [pc, #136]	; (8004694 <vTaskResume+0xe4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4313      	orrs	r3, r2
 8004610:	4a20      	ldr	r2, [pc, #128]	; (8004694 <vTaskResume+0xe4>)
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004618:	491f      	ldr	r1, [pc, #124]	; (8004698 <vTaskResume+0xe8>)
 800461a:	4613      	mov	r3, r2
 800461c:	009b      	lsls	r3, r3, #2
 800461e:	4413      	add	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	440b      	add	r3, r1
 8004624:	3304      	adds	r3, #4
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	613b      	str	r3, [r7, #16]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	609a      	str	r2, [r3, #8]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	60da      	str	r2, [r3, #12]
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	3204      	adds	r2, #4
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	1d1a      	adds	r2, r3, #4
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	609a      	str	r2, [r3, #8]
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464e:	4613      	mov	r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	4a10      	ldr	r2, [pc, #64]	; (8004698 <vTaskResume+0xe8>)
 8004658:	441a      	add	r2, r3
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	615a      	str	r2, [r3, #20]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004662:	490d      	ldr	r1, [pc, #52]	; (8004698 <vTaskResume+0xe8>)
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	1c59      	adds	r1, r3, #1
 8004672:	4809      	ldr	r0, [pc, #36]	; (8004698 <vTaskResume+0xe8>)
 8004674:	4613      	mov	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4403      	add	r3, r0
 800467e:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004680:	4b03      	ldr	r3, [pc, #12]	; (8004690 <vTaskResume+0xe0>)
 8004682:	681b      	ldr	r3, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004684:	f000 ff14 	bl	80054b0 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004688:	bf00      	nop
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}
 8004690:	200000c4 	.word	0x200000c4
 8004694:	200001a4 	.word	0x200001a4
 8004698:	200000c8 	.word	0x200000c8

0800469c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80046a2:	4b1d      	ldr	r3, [pc, #116]	; (8004718 <vTaskStartScheduler+0x7c>)
 80046a4:	9301      	str	r3, [sp, #4]
 80046a6:	2300      	movs	r3, #0
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	2300      	movs	r3, #0
 80046ac:	2282      	movs	r2, #130	; 0x82
 80046ae:	491b      	ldr	r1, [pc, #108]	; (800471c <vTaskStartScheduler+0x80>)
 80046b0:	481b      	ldr	r0, [pc, #108]	; (8004720 <vTaskStartScheduler+0x84>)
 80046b2:	f7ff fd3f 	bl	8004134 <xTaskCreate>
 80046b6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d116      	bne.n	80046ec <vTaskStartScheduler+0x50>
        __asm volatile
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	60bb      	str	r3, [r7, #8]
    }
 80046d0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80046d2:	4b14      	ldr	r3, [pc, #80]	; (8004724 <vTaskStartScheduler+0x88>)
 80046d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80046da:	4b13      	ldr	r3, [pc, #76]	; (8004728 <vTaskStartScheduler+0x8c>)
 80046dc:	2201      	movs	r2, #1
 80046de:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046e0:	4b12      	ldr	r3, [pc, #72]	; (800472c <vTaskStartScheduler+0x90>)
 80046e2:	2200      	movs	r2, #0
 80046e4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80046e6:	f000 fe41 	bl	800536c <xPortStartScheduler>
 80046ea:	e00e      	b.n	800470a <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f2:	d10a      	bne.n	800470a <vTaskStartScheduler+0x6e>
        __asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	607b      	str	r3, [r7, #4]
    }
 8004706:	bf00      	nop
 8004708:	e7fe      	b.n	8004708 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <vTaskStartScheduler+0x94>)
 800470c:	681b      	ldr	r3, [r3, #0]
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	200001c0 	.word	0x200001c0
 800471c:	08006fcc 	.word	0x08006fcc
 8004720:	08004ecd 	.word	0x08004ecd
 8004724:	200001bc 	.word	0x200001bc
 8004728:	200001a8 	.word	0x200001a8
 800472c:	200001a0 	.word	0x200001a0
 8004730:	20000024 	.word	0x20000024

08004734 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <vTaskSuspendAll+0x18>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	3301      	adds	r3, #1
 800473e:	4a03      	ldr	r2, [pc, #12]	; (800474c <vTaskSuspendAll+0x18>)
 8004740:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004742:	bf00      	nop
 8004744:	46bd      	mov	sp, r7
 8004746:	bc80      	pop	{r7}
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	200001c4 	.word	0x200001c4

08004750 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800475a:	2300      	movs	r3, #0
 800475c:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800475e:	4b6b      	ldr	r3, [pc, #428]	; (800490c <xTaskResumeAll+0x1bc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <xTaskResumeAll+0x2c>
        __asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
 8004776:	607b      	str	r3, [r7, #4]
    }
 8004778:	bf00      	nop
 800477a:	e7fe      	b.n	800477a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800477c:	f000 fe68 	bl	8005450 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004780:	4b62      	ldr	r3, [pc, #392]	; (800490c <xTaskResumeAll+0x1bc>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3b01      	subs	r3, #1
 8004786:	4a61      	ldr	r2, [pc, #388]	; (800490c <xTaskResumeAll+0x1bc>)
 8004788:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800478a:	4b60      	ldr	r3, [pc, #384]	; (800490c <xTaskResumeAll+0x1bc>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	f040 80b4 	bne.w	80048fc <xTaskResumeAll+0x1ac>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004794:	4b5e      	ldr	r3, [pc, #376]	; (8004910 <xTaskResumeAll+0x1c0>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 80af 	beq.w	80048fc <xTaskResumeAll+0x1ac>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800479e:	e08a      	b.n	80048b6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a0:	4b5c      	ldr	r3, [pc, #368]	; (8004914 <xTaskResumeAll+0x1c4>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	69fa      	ldr	r2, [r7, #28]
 80047b4:	6a12      	ldr	r2, [r2, #32]
 80047b6:	609a      	str	r2, [r3, #8]
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	69fa      	ldr	r2, [r7, #28]
 80047be:	69d2      	ldr	r2, [r2, #28]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	3318      	adds	r3, #24
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d103      	bne.n	80047d6 <xTaskResumeAll+0x86>
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	6a1a      	ldr	r2, [r3, #32]
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	605a      	str	r2, [r3, #4]
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	2200      	movs	r2, #0
 80047da:	629a      	str	r2, [r3, #40]	; 0x28
 80047dc:	693b      	ldr	r3, [r7, #16]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	1e5a      	subs	r2, r3, #1
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	68d2      	ldr	r2, [r2, #12]
 80047f4:	609a      	str	r2, [r3, #8]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	6892      	ldr	r2, [r2, #8]
 80047fe:	605a      	str	r2, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	3304      	adds	r3, #4
 8004808:	429a      	cmp	r2, r3
 800480a:	d103      	bne.n	8004814 <xTaskResumeAll+0xc4>
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	605a      	str	r2, [r3, #4]
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2200      	movs	r2, #0
 8004818:	615a      	str	r2, [r3, #20]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	1e5a      	subs	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004828:	2201      	movs	r2, #1
 800482a:	409a      	lsls	r2, r3
 800482c:	4b3a      	ldr	r3, [pc, #232]	; (8004918 <xTaskResumeAll+0x1c8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4313      	orrs	r3, r2
 8004832:	4a39      	ldr	r2, [pc, #228]	; (8004918 <xTaskResumeAll+0x1c8>)
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800483a:	4938      	ldr	r1, [pc, #224]	; (800491c <xTaskResumeAll+0x1cc>)
 800483c:	4613      	mov	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	4413      	add	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	440b      	add	r3, r1
 8004846:	3304      	adds	r3, #4
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	609a      	str	r2, [r3, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	689a      	ldr	r2, [r3, #8]
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	60da      	str	r2, [r3, #12]
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	3204      	adds	r2, #4
 8004862:	605a      	str	r2, [r3, #4]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	1d1a      	adds	r2, r3, #4
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	609a      	str	r2, [r3, #8]
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4a28      	ldr	r2, [pc, #160]	; (800491c <xTaskResumeAll+0x1cc>)
 800487a:	441a      	add	r2, r3
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	615a      	str	r2, [r3, #20]
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004884:	4925      	ldr	r1, [pc, #148]	; (800491c <xTaskResumeAll+0x1cc>)
 8004886:	4613      	mov	r3, r2
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	1c59      	adds	r1, r3, #1
 8004894:	4821      	ldr	r0, [pc, #132]	; (800491c <xTaskResumeAll+0x1cc>)
 8004896:	4613      	mov	r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	4413      	add	r3, r2
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4403      	add	r3, r0
 80048a0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a6:	4b1e      	ldr	r3, [pc, #120]	; (8004920 <xTaskResumeAll+0x1d0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d302      	bcc.n	80048b6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80048b0:	4b1c      	ldr	r3, [pc, #112]	; (8004924 <xTaskResumeAll+0x1d4>)
 80048b2:	2201      	movs	r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048b6:	4b17      	ldr	r3, [pc, #92]	; (8004914 <xTaskResumeAll+0x1c4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f47f af70 	bne.w	80047a0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80048c6:	f000 fb91 	bl	8004fec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80048ca:	4b17      	ldr	r3, [pc, #92]	; (8004928 <xTaskResumeAll+0x1d8>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d010      	beq.n	80048f8 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80048d6:	f000 f829 	bl	800492c <xTaskIncrementTick>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d002      	beq.n	80048e6 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80048e0:	4b10      	ldr	r3, [pc, #64]	; (8004924 <xTaskResumeAll+0x1d4>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	3b01      	subs	r3, #1
 80048ea:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1f1      	bne.n	80048d6 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80048f2:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <xTaskResumeAll+0x1d8>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80048f8:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <xTaskResumeAll+0x1d4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80048fc:	f000 fdd8 	bl	80054b0 <vPortExitCritical>

    return xAlreadyYielded;
 8004900:	697b      	ldr	r3, [r7, #20]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3720      	adds	r7, #32
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	200001c4 	.word	0x200001c4
 8004910:	2000019c 	.word	0x2000019c
 8004914:	2000015c 	.word	0x2000015c
 8004918:	200001a4 	.word	0x200001a4
 800491c:	200000c8 	.word	0x200000c8
 8004920:	200000c4 	.word	0x200000c4
 8004924:	200001b0 	.word	0x200001b0
 8004928:	200001ac 	.word	0x200001ac

0800492c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	; 0x28
 8004930:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004932:	2300      	movs	r3, #0
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004936:	4b6e      	ldr	r3, [pc, #440]	; (8004af0 <xTaskIncrementTick+0x1c4>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2b00      	cmp	r3, #0
 800493c:	f040 80cd 	bne.w	8004ada <xTaskIncrementTick+0x1ae>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004940:	4b6c      	ldr	r3, [pc, #432]	; (8004af4 <xTaskIncrementTick+0x1c8>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3301      	adds	r3, #1
 8004946:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004948:	4a6a      	ldr	r2, [pc, #424]	; (8004af4 <xTaskIncrementTick+0x1c8>)
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800494e:	6a3b      	ldr	r3, [r7, #32]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d120      	bne.n	8004996 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004954:	4b68      	ldr	r3, [pc, #416]	; (8004af8 <xTaskIncrementTick+0x1cc>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00a      	beq.n	8004974 <xTaskIncrementTick+0x48>
        __asm volatile
 800495e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004962:	f383 8811 	msr	BASEPRI, r3
 8004966:	f3bf 8f6f 	isb	sy
 800496a:	f3bf 8f4f 	dsb	sy
 800496e:	607b      	str	r3, [r7, #4]
    }
 8004970:	bf00      	nop
 8004972:	e7fe      	b.n	8004972 <xTaskIncrementTick+0x46>
 8004974:	4b60      	ldr	r3, [pc, #384]	; (8004af8 <xTaskIncrementTick+0x1cc>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	61fb      	str	r3, [r7, #28]
 800497a:	4b60      	ldr	r3, [pc, #384]	; (8004afc <xTaskIncrementTick+0x1d0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a5e      	ldr	r2, [pc, #376]	; (8004af8 <xTaskIncrementTick+0x1cc>)
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	4a5e      	ldr	r2, [pc, #376]	; (8004afc <xTaskIncrementTick+0x1d0>)
 8004984:	69fb      	ldr	r3, [r7, #28]
 8004986:	6013      	str	r3, [r2, #0]
 8004988:	4b5d      	ldr	r3, [pc, #372]	; (8004b00 <xTaskIncrementTick+0x1d4>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3301      	adds	r3, #1
 800498e:	4a5c      	ldr	r2, [pc, #368]	; (8004b00 <xTaskIncrementTick+0x1d4>)
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	f000 fb2b 	bl	8004fec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004996:	4b5b      	ldr	r3, [pc, #364]	; (8004b04 <xTaskIncrementTick+0x1d8>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6a3a      	ldr	r2, [r7, #32]
 800499c:	429a      	cmp	r2, r3
 800499e:	f0c0 80a1 	bcc.w	8004ae4 <xTaskIncrementTick+0x1b8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049a2:	4b55      	ldr	r3, [pc, #340]	; (8004af8 <xTaskIncrementTick+0x1cc>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d104      	bne.n	80049b6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049ac:	4b55      	ldr	r3, [pc, #340]	; (8004b04 <xTaskIncrementTick+0x1d8>)
 80049ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049b2:	601a      	str	r2, [r3, #0]
                    break;
 80049b4:	e096      	b.n	8004ae4 <xTaskIncrementTick+0x1b8>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049b6:	4b50      	ldr	r3, [pc, #320]	; (8004af8 <xTaskIncrementTick+0x1cc>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80049c6:	6a3a      	ldr	r2, [r7, #32]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d203      	bcs.n	80049d6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80049ce:	4a4d      	ldr	r2, [pc, #308]	; (8004b04 <xTaskIncrementTick+0x1d8>)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80049d4:	e086      	b.n	8004ae4 <xTaskIncrementTick+0x1b8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	68d2      	ldr	r2, [r2, #12]
 80049e4:	609a      	str	r2, [r3, #8]
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	6892      	ldr	r2, [r2, #8]
 80049ee:	605a      	str	r2, [r3, #4]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	3304      	adds	r3, #4
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d103      	bne.n	8004a04 <xTaskIncrementTick+0xd8>
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	605a      	str	r2, [r3, #4]
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2200      	movs	r2, #0
 8004a08:	615a      	str	r2, [r3, #20]
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d01e      	beq.n	8004a5a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	6a12      	ldr	r2, [r2, #32]
 8004a2a:	609a      	str	r2, [r3, #8]
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	69d2      	ldr	r2, [r2, #28]
 8004a34:	605a      	str	r2, [r3, #4]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685a      	ldr	r2, [r3, #4]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	3318      	adds	r3, #24
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d103      	bne.n	8004a4a <xTaskIncrementTick+0x11e>
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	6a1a      	ldr	r2, [r3, #32]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	629a      	str	r2, [r3, #40]	; 0x28
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	1e5a      	subs	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	2201      	movs	r2, #1
 8004a60:	409a      	lsls	r2, r3
 8004a62:	4b29      	ldr	r3, [pc, #164]	; (8004b08 <xTaskIncrementTick+0x1dc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	4a27      	ldr	r2, [pc, #156]	; (8004b08 <xTaskIncrementTick+0x1dc>)
 8004a6a:	6013      	str	r3, [r2, #0]
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a70:	4926      	ldr	r1, [pc, #152]	; (8004b0c <xTaskIncrementTick+0x1e0>)
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	609a      	str	r2, [r3, #8]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	689a      	ldr	r2, [r3, #8]
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	60da      	str	r2, [r3, #12]
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	3204      	adds	r2, #4
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	69bb      	ldr	r3, [r7, #24]
 8004a9c:	1d1a      	adds	r2, r3, #4
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4a17      	ldr	r2, [pc, #92]	; (8004b0c <xTaskIncrementTick+0x1e0>)
 8004ab0:	441a      	add	r2, r3
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	615a      	str	r2, [r3, #20]
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aba:	4914      	ldr	r1, [pc, #80]	; (8004b0c <xTaskIncrementTick+0x1e0>)
 8004abc:	4613      	mov	r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	1c59      	adds	r1, r3, #1
 8004aca:	4810      	ldr	r0, [pc, #64]	; (8004b0c <xTaskIncrementTick+0x1e0>)
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4403      	add	r3, r0
 8004ad6:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ad8:	e763      	b.n	80049a2 <xTaskIncrementTick+0x76>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <xTaskIncrementTick+0x1e4>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	4a0b      	ldr	r2, [pc, #44]	; (8004b10 <xTaskIncrementTick+0x1e4>)
 8004ae2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3728      	adds	r7, #40	; 0x28
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
 8004aee:	bf00      	nop
 8004af0:	200001c4 	.word	0x200001c4
 8004af4:	200001a0 	.word	0x200001a0
 8004af8:	20000154 	.word	0x20000154
 8004afc:	20000158 	.word	0x20000158
 8004b00:	200001b4 	.word	0x200001b4
 8004b04:	200001bc 	.word	0x200001bc
 8004b08:	200001a4 	.word	0x200001a4
 8004b0c:	200000c8 	.word	0x200000c8
 8004b10:	200001ac 	.word	0x200001ac

08004b14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b14:	b480      	push	{r7}
 8004b16:	b087      	sub	sp, #28
 8004b18:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b1a:	4b26      	ldr	r3, [pc, #152]	; (8004bb4 <vTaskSwitchContext+0xa0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d003      	beq.n	8004b2a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004b22:	4b25      	ldr	r3, [pc, #148]	; (8004bb8 <vTaskSwitchContext+0xa4>)
 8004b24:	2201      	movs	r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004b28:	e03f      	b.n	8004baa <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8004b2a:	4b23      	ldr	r3, [pc, #140]	; (8004bb8 <vTaskSwitchContext+0xa4>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b30:	4b22      	ldr	r3, [pc, #136]	; (8004bbc <vTaskSwitchContext+0xa8>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	fab3 f383 	clz	r3, r3
 8004b3c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004b3e:	7afb      	ldrb	r3, [r7, #11]
 8004b40:	f1c3 031f 	rsb	r3, r3, #31
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	491e      	ldr	r1, [pc, #120]	; (8004bc0 <vTaskSwitchContext+0xac>)
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	009b      	lsls	r3, r3, #2
 8004b52:	440b      	add	r3, r1
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10a      	bne.n	8004b70 <vTaskSwitchContext+0x5c>
        __asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	607b      	str	r3, [r7, #4]
    }
 8004b6c:	bf00      	nop
 8004b6e:	e7fe      	b.n	8004b6e <vTaskSwitchContext+0x5a>
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	4a11      	ldr	r2, [pc, #68]	; (8004bc0 <vTaskSwitchContext+0xac>)
 8004b7c:	4413      	add	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	3308      	adds	r3, #8
 8004b92:	429a      	cmp	r2, r3
 8004b94:	d104      	bne.n	8004ba0 <vTaskSwitchContext+0x8c>
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	605a      	str	r2, [r3, #4]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <vTaskSwitchContext+0xb0>)
 8004ba8:	6013      	str	r3, [r2, #0]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bc80      	pop	{r7}
 8004bb2:	4770      	bx	lr
 8004bb4:	200001c4 	.word	0x200001c4
 8004bb8:	200001b0 	.word	0x200001b0
 8004bbc:	200001a4 	.word	0x200001a4
 8004bc0:	200000c8 	.word	0x200000c8
 8004bc4:	200000c4 	.word	0x200000c4

08004bc8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10a      	bne.n	8004bee <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8004bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bdc:	f383 8811 	msr	BASEPRI, r3
 8004be0:	f3bf 8f6f 	isb	sy
 8004be4:	f3bf 8f4f 	dsb	sy
 8004be8:	60fb      	str	r3, [r7, #12]
    }
 8004bea:	bf00      	nop
 8004bec:	e7fe      	b.n	8004bec <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bee:	4b07      	ldr	r3, [pc, #28]	; (8004c0c <vTaskPlaceOnEventList+0x44>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3318      	adds	r3, #24
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fe feae 	bl	8003958 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	6838      	ldr	r0, [r7, #0]
 8004c00:	f000 fab2 	bl	8005168 <prvAddCurrentTaskToDelayedList>
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	200000c4 	.word	0x200000c4

08004c10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c10:	b480      	push	{r7}
 8004c12:	b08b      	sub	sp, #44	; 0x2c
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10a      	bne.n	8004c3c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60fb      	str	r3, [r7, #12]
    }
 8004c38:	bf00      	nop
 8004c3a:	e7fe      	b.n	8004c3a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	6a3a      	ldr	r2, [r7, #32]
 8004c48:	6a12      	ldr	r2, [r2, #32]
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	6a3a      	ldr	r2, [r7, #32]
 8004c52:	69d2      	ldr	r2, [r2, #28]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	685a      	ldr	r2, [r3, #4]
 8004c5a:	6a3b      	ldr	r3, [r7, #32]
 8004c5c:	3318      	adds	r3, #24
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d103      	bne.n	8004c6a <xTaskRemoveFromEventList+0x5a>
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	6a1a      	ldr	r2, [r3, #32]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	605a      	str	r2, [r3, #4]
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	629a      	str	r2, [r3, #40]	; 0x28
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	1e5a      	subs	r2, r3, #1
 8004c76:	69fb      	ldr	r3, [r7, #28]
 8004c78:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c7a:	4b4a      	ldr	r3, [pc, #296]	; (8004da4 <xTaskRemoveFromEventList+0x194>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d15e      	bne.n	8004d40 <xTaskRemoveFromEventList+0x130>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	695b      	ldr	r3, [r3, #20]
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	6a3a      	ldr	r2, [r7, #32]
 8004c8e:	68d2      	ldr	r2, [r2, #12]
 8004c90:	609a      	str	r2, [r3, #8]
 8004c92:	6a3b      	ldr	r3, [r7, #32]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	6a3a      	ldr	r2, [r7, #32]
 8004c98:	6892      	ldr	r2, [r2, #8]
 8004c9a:	605a      	str	r2, [r3, #4]
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	3304      	adds	r3, #4
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d103      	bne.n	8004cb0 <xTaskRemoveFromEventList+0xa0>
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	68da      	ldr	r2, [r3, #12]
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	605a      	str	r2, [r3, #4]
 8004cb0:	6a3b      	ldr	r3, [r7, #32]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	615a      	str	r2, [r3, #20]
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	1e5a      	subs	r2, r3, #1
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	409a      	lsls	r2, r3
 8004cc8:	4b37      	ldr	r3, [pc, #220]	; (8004da8 <xTaskRemoveFromEventList+0x198>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	4a36      	ldr	r2, [pc, #216]	; (8004da8 <xTaskRemoveFromEventList+0x198>)
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	6a3b      	ldr	r3, [r7, #32]
 8004cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd6:	4935      	ldr	r1, [pc, #212]	; (8004dac <xTaskRemoveFromEventList+0x19c>)
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	3304      	adds	r3, #4
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	613b      	str	r3, [r7, #16]
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	693a      	ldr	r2, [r7, #16]
 8004cec:	609a      	str	r2, [r3, #8]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	689a      	ldr	r2, [r3, #8]
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	60da      	str	r2, [r3, #12]
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	6a3a      	ldr	r2, [r7, #32]
 8004cfc:	3204      	adds	r2, #4
 8004cfe:	605a      	str	r2, [r3, #4]
 8004d00:	6a3b      	ldr	r3, [r7, #32]
 8004d02:	1d1a      	adds	r2, r3, #4
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	609a      	str	r2, [r3, #8]
 8004d08:	6a3b      	ldr	r3, [r7, #32]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4a25      	ldr	r2, [pc, #148]	; (8004dac <xTaskRemoveFromEventList+0x19c>)
 8004d16:	441a      	add	r2, r3
 8004d18:	6a3b      	ldr	r3, [r7, #32]
 8004d1a:	615a      	str	r2, [r3, #20]
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d20:	4922      	ldr	r1, [pc, #136]	; (8004dac <xTaskRemoveFromEventList+0x19c>)
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	1c59      	adds	r1, r3, #1
 8004d30:	481e      	ldr	r0, [pc, #120]	; (8004dac <xTaskRemoveFromEventList+0x19c>)
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4403      	add	r3, r0
 8004d3c:	6019      	str	r1, [r3, #0]
 8004d3e:	e01b      	b.n	8004d78 <xTaskRemoveFromEventList+0x168>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d40:	4b1b      	ldr	r3, [pc, #108]	; (8004db0 <xTaskRemoveFromEventList+0x1a0>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	6a3b      	ldr	r3, [r7, #32]
 8004d48:	69ba      	ldr	r2, [r7, #24]
 8004d4a:	61da      	str	r2, [r3, #28]
 8004d4c:	69bb      	ldr	r3, [r7, #24]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	621a      	str	r2, [r3, #32]
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	6a3a      	ldr	r2, [r7, #32]
 8004d5a:	3218      	adds	r2, #24
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	f103 0218 	add.w	r2, r3, #24
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	609a      	str	r2, [r3, #8]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	4a11      	ldr	r2, [pc, #68]	; (8004db0 <xTaskRemoveFromEventList+0x1a0>)
 8004d6c:	629a      	str	r2, [r3, #40]	; 0x28
 8004d6e:	4b10      	ldr	r3, [pc, #64]	; (8004db0 <xTaskRemoveFromEventList+0x1a0>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3301      	adds	r3, #1
 8004d74:	4a0e      	ldr	r2, [pc, #56]	; (8004db0 <xTaskRemoveFromEventList+0x1a0>)
 8004d76:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <xTaskRemoveFromEventList+0x1a4>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d905      	bls.n	8004d92 <xTaskRemoveFromEventList+0x182>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004d86:	2301      	movs	r3, #1
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004d8a:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <xTaskRemoveFromEventList+0x1a8>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	e001      	b.n	8004d96 <xTaskRemoveFromEventList+0x186>
    }
    else
    {
        xReturn = pdFALSE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8004d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	372c      	adds	r7, #44	; 0x2c
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bc80      	pop	{r7}
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	200001c4 	.word	0x200001c4
 8004da8:	200001a4 	.word	0x200001a4
 8004dac:	200000c8 	.word	0x200000c8
 8004db0:	2000015c 	.word	0x2000015c
 8004db4:	200000c4 	.word	0x200000c4
 8004db8:	200001b0 	.word	0x200001b0

08004dbc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dc4:	4b06      	ldr	r3, [pc, #24]	; (8004de0 <vTaskInternalSetTimeOutState+0x24>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <vTaskInternalSetTimeOutState+0x28>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	605a      	str	r2, [r3, #4]
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	200001b4 	.word	0x200001b4
 8004de4:	200001a0 	.word	0x200001a0

08004de8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	613b      	str	r3, [r7, #16]
    }
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d10a      	bne.n	8004e2a <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	60fb      	str	r3, [r7, #12]
    }
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8004e2a:	f000 fb11 	bl	8005450 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004e2e:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <xTaskCheckForTimeOut+0xc4>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e46:	d102      	bne.n	8004e4e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]
 8004e4c:	e026      	b.n	8004e9c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <xTaskCheckForTimeOut+0xc8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d00a      	beq.n	8004e70 <xTaskCheckForTimeOut+0x88>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d305      	bcc.n	8004e70 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e015      	b.n	8004e9c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d20b      	bcs.n	8004e92 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	1ad2      	subs	r2, r2, r3
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f7ff ff98 	bl	8004dbc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	e004      	b.n	8004e9c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004e9c:	f000 fb08 	bl	80054b0 <vPortExitCritical>

    return xReturn;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3720      	adds	r7, #32
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	200001a0 	.word	0x200001a0
 8004eb0:	200001b4 	.word	0x200001b4

08004eb4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004eb8:	4b03      	ldr	r3, [pc, #12]	; (8004ec8 <vTaskMissedYield+0x14>)
 8004eba:	2201      	movs	r2, #1
 8004ebc:	601a      	str	r2, [r3, #0]
}
 8004ebe:	bf00      	nop
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	200001b0 	.word	0x200001b0

08004ecc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004ed4:	f000 f84c 	bl	8004f70 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8004ed8:	4b04      	ldr	r3, [pc, #16]	; (8004eec <prvIdleTask+0x20>)
 8004eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004ee8:	e7f4      	b.n	8004ed4 <prvIdleTask+0x8>
 8004eea:	bf00      	nop
 8004eec:	e000ed04 	.word	0xe000ed04

08004ef0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	607b      	str	r3, [r7, #4]
 8004efa:	e00c      	b.n	8004f16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	4613      	mov	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	4413      	add	r3, r2
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <prvInitialiseTaskLists+0x60>)
 8004f08:	4413      	add	r3, r2
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fe fcd6 	bl	80038bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	3301      	adds	r3, #1
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d9ef      	bls.n	8004efc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004f1c:	480d      	ldr	r0, [pc, #52]	; (8004f54 <prvInitialiseTaskLists+0x64>)
 8004f1e:	f7fe fccd 	bl	80038bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004f22:	480d      	ldr	r0, [pc, #52]	; (8004f58 <prvInitialiseTaskLists+0x68>)
 8004f24:	f7fe fcca 	bl	80038bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004f28:	480c      	ldr	r0, [pc, #48]	; (8004f5c <prvInitialiseTaskLists+0x6c>)
 8004f2a:	f7fe fcc7 	bl	80038bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004f2e:	480c      	ldr	r0, [pc, #48]	; (8004f60 <prvInitialiseTaskLists+0x70>)
 8004f30:	f7fe fcc4 	bl	80038bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004f34:	480b      	ldr	r0, [pc, #44]	; (8004f64 <prvInitialiseTaskLists+0x74>)
 8004f36:	f7fe fcc1 	bl	80038bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004f3a:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <prvInitialiseTaskLists+0x78>)
 8004f3c:	4a05      	ldr	r2, [pc, #20]	; (8004f54 <prvInitialiseTaskLists+0x64>)
 8004f3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f40:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <prvInitialiseTaskLists+0x7c>)
 8004f42:	4a05      	ldr	r2, [pc, #20]	; (8004f58 <prvInitialiseTaskLists+0x68>)
 8004f44:	601a      	str	r2, [r3, #0]
}
 8004f46:	bf00      	nop
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	200000c8 	.word	0x200000c8
 8004f54:	2000012c 	.word	0x2000012c
 8004f58:	20000140 	.word	0x20000140
 8004f5c:	2000015c 	.word	0x2000015c
 8004f60:	20000170 	.word	0x20000170
 8004f64:	20000188 	.word	0x20000188
 8004f68:	20000154 	.word	0x20000154
 8004f6c:	20000158 	.word	0x20000158

08004f70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f76:	e019      	b.n	8004fac <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004f78:	f000 fa6a 	bl	8005450 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f7c:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <prvCheckTasksWaitingTermination+0x50>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3304      	adds	r3, #4
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fe fd1d 	bl	80039c8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004f8e:	4b0d      	ldr	r3, [pc, #52]	; (8004fc4 <prvCheckTasksWaitingTermination+0x54>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	3b01      	subs	r3, #1
 8004f94:	4a0b      	ldr	r2, [pc, #44]	; (8004fc4 <prvCheckTasksWaitingTermination+0x54>)
 8004f96:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004f98:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <prvCheckTasksWaitingTermination+0x58>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <prvCheckTasksWaitingTermination+0x58>)
 8004fa0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004fa2:	f000 fa85 	bl	80054b0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f810 	bl	8004fcc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <prvCheckTasksWaitingTermination+0x58>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e1      	bne.n	8004f78 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004fb4:	bf00      	nop
 8004fb6:	bf00      	nop
 8004fb8:	3708      	adds	r7, #8
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20000170 	.word	0x20000170
 8004fc4:	2000019c 	.word	0x2000019c
 8004fc8:	20000184 	.word	0x20000184

08004fcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fbd9 	bl	8005790 <vPortFree>
                vPortFree( pxTCB );
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fbd6 	bl	8005790 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004fe4:	bf00      	nop
 8004fe6:	3708      	adds	r7, #8
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ff0:	4b09      	ldr	r3, [pc, #36]	; (8005018 <prvResetNextTaskUnblockTime+0x2c>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d104      	bne.n	8005004 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004ffa:	4b08      	ldr	r3, [pc, #32]	; (800501c <prvResetNextTaskUnblockTime+0x30>)
 8004ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005000:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005002:	e005      	b.n	8005010 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005004:	4b04      	ldr	r3, [pc, #16]	; (8005018 <prvResetNextTaskUnblockTime+0x2c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a03      	ldr	r2, [pc, #12]	; (800501c <prvResetNextTaskUnblockTime+0x30>)
 800500e:	6013      	str	r3, [r2, #0]
}
 8005010:	bf00      	nop
 8005012:	46bd      	mov	sp, r7
 8005014:	bc80      	pop	{r7}
 8005016:	4770      	bx	lr
 8005018:	20000154 	.word	0x20000154
 800501c:	200001bc 	.word	0x200001bc

08005020 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 800502c:	2300      	movs	r3, #0
 800502e:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 808c 	beq.w	8005150 <xTaskPriorityDisinherit+0x130>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005038:	4b48      	ldr	r3, [pc, #288]	; (800515c <xTaskPriorityDisinherit+0x13c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69ba      	ldr	r2, [r7, #24]
 800503e:	429a      	cmp	r2, r3
 8005040:	d00a      	beq.n	8005058 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	613b      	str	r3, [r7, #16]
    }
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505c:	2b00      	cmp	r3, #0
 800505e:	d10a      	bne.n	8005076 <xTaskPriorityDisinherit+0x56>
        __asm volatile
 8005060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
 800506c:	f3bf 8f4f 	dsb	sy
 8005070:	60fb      	str	r3, [r7, #12]
    }
 8005072:	bf00      	nop
 8005074:	e7fe      	b.n	8005074 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005088:	429a      	cmp	r2, r3
 800508a:	d061      	beq.n	8005150 <xTaskPriorityDisinherit+0x130>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005090:	2b00      	cmp	r3, #0
 8005092:	d15d      	bne.n	8005150 <xTaskPriorityDisinherit+0x130>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	3304      	adds	r3, #4
 8005098:	4618      	mov	r0, r3
 800509a:	f7fe fc95 	bl	80039c8 <uxListRemove>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10a      	bne.n	80050ba <xTaskPriorityDisinherit+0x9a>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	2201      	movs	r2, #1
 80050aa:	fa02 f303 	lsl.w	r3, r2, r3
 80050ae:	43da      	mvns	r2, r3
 80050b0:	4b2b      	ldr	r3, [pc, #172]	; (8005160 <xTaskPriorityDisinherit+0x140>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4013      	ands	r3, r2
 80050b6:	4a2a      	ldr	r2, [pc, #168]	; (8005160 <xTaskPriorityDisinherit+0x140>)
 80050b8:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c6:	f1c3 0205 	rsb	r2, r3, #5
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	2201      	movs	r2, #1
 80050d4:	409a      	lsls	r2, r3
 80050d6:	4b22      	ldr	r3, [pc, #136]	; (8005160 <xTaskPriorityDisinherit+0x140>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4313      	orrs	r3, r2
 80050dc:	4a20      	ldr	r2, [pc, #128]	; (8005160 <xTaskPriorityDisinherit+0x140>)
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	491f      	ldr	r1, [pc, #124]	; (8005164 <xTaskPriorityDisinherit+0x144>)
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	3304      	adds	r3, #4
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	697a      	ldr	r2, [r7, #20]
 80050fa:	609a      	str	r2, [r3, #8]
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	689a      	ldr	r2, [r3, #8]
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	60da      	str	r2, [r3, #12]
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	3204      	adds	r2, #4
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	1d1a      	adds	r2, r3, #4
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	609a      	str	r2, [r3, #8]
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511a:	4613      	mov	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	4a10      	ldr	r2, [pc, #64]	; (8005164 <xTaskPriorityDisinherit+0x144>)
 8005124:	441a      	add	r2, r3
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	615a      	str	r2, [r3, #20]
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512e:	490d      	ldr	r1, [pc, #52]	; (8005164 <xTaskPriorityDisinherit+0x144>)
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	1c59      	adds	r1, r3, #1
 800513e:	4809      	ldr	r0, [pc, #36]	; (8005164 <xTaskPriorityDisinherit+0x144>)
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4403      	add	r3, r0
 800514a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800514c:	2301      	movs	r3, #1
 800514e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005150:	69fb      	ldr	r3, [r7, #28]
    }
 8005152:	4618      	mov	r0, r3
 8005154:	3720      	adds	r7, #32
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	200000c4 	.word	0x200000c4
 8005160:	200001a4 	.word	0x200001a4
 8005164:	200000c8 	.word	0x200000c8

08005168 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8005172:	4b36      	ldr	r3, [pc, #216]	; (800524c <prvAddCurrentTaskToDelayedList+0xe4>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	617b      	str	r3, [r7, #20]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005178:	4b35      	ldr	r3, [pc, #212]	; (8005250 <prvAddCurrentTaskToDelayedList+0xe8>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3304      	adds	r3, #4
 800517e:	4618      	mov	r0, r3
 8005180:	f7fe fc22 	bl	80039c8 <uxListRemove>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d10b      	bne.n	80051a2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800518a:	4b31      	ldr	r3, [pc, #196]	; (8005250 <prvAddCurrentTaskToDelayedList+0xe8>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005190:	2201      	movs	r2, #1
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43da      	mvns	r2, r3
 8005198:	4b2e      	ldr	r3, [pc, #184]	; (8005254 <prvAddCurrentTaskToDelayedList+0xec>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4013      	ands	r3, r2
 800519e:	4a2d      	ldr	r2, [pc, #180]	; (8005254 <prvAddCurrentTaskToDelayedList+0xec>)
 80051a0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051a8:	d124      	bne.n	80051f4 <prvAddCurrentTaskToDelayedList+0x8c>
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d021      	beq.n	80051f4 <prvAddCurrentTaskToDelayedList+0x8c>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051b0:	4b29      	ldr	r3, [pc, #164]	; (8005258 <prvAddCurrentTaskToDelayedList+0xf0>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	4b26      	ldr	r3, [pc, #152]	; (8005250 <prvAddCurrentTaskToDelayedList+0xe8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	609a      	str	r2, [r3, #8]
 80051be:	4b24      	ldr	r3, [pc, #144]	; (8005250 <prvAddCurrentTaskToDelayedList+0xe8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	693a      	ldr	r2, [r7, #16]
 80051c4:	6892      	ldr	r2, [r2, #8]
 80051c6:	60da      	str	r2, [r3, #12]
 80051c8:	4b21      	ldr	r3, [pc, #132]	; (8005250 <prvAddCurrentTaskToDelayedList+0xe8>)
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	3204      	adds	r2, #4
 80051d2:	605a      	str	r2, [r3, #4]
 80051d4:	4b1e      	ldr	r3, [pc, #120]	; (8005250 <prvAddCurrentTaskToDelayedList+0xe8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	1d1a      	adds	r2, r3, #4
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	609a      	str	r2, [r3, #8]
 80051de:	4b1c      	ldr	r3, [pc, #112]	; (8005250 <prvAddCurrentTaskToDelayedList+0xe8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1d      	ldr	r2, [pc, #116]	; (8005258 <prvAddCurrentTaskToDelayedList+0xf0>)
 80051e4:	615a      	str	r2, [r3, #20]
 80051e6:	4b1c      	ldr	r3, [pc, #112]	; (8005258 <prvAddCurrentTaskToDelayedList+0xf0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	3301      	adds	r3, #1
 80051ec:	4a1a      	ldr	r2, [pc, #104]	; (8005258 <prvAddCurrentTaskToDelayedList+0xf0>)
 80051ee:	6013      	str	r3, [r2, #0]
 80051f0:	bf00      	nop

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80051f2:	e026      	b.n	8005242 <prvAddCurrentTaskToDelayedList+0xda>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4413      	add	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051fc:	4b14      	ldr	r3, [pc, #80]	; (8005250 <prvAddCurrentTaskToDelayedList+0xe8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	429a      	cmp	r2, r3
 800520a:	d209      	bcs.n	8005220 <prvAddCurrentTaskToDelayedList+0xb8>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800520c:	4b13      	ldr	r3, [pc, #76]	; (800525c <prvAddCurrentTaskToDelayedList+0xf4>)
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	4b0f      	ldr	r3, [pc, #60]	; (8005250 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3304      	adds	r3, #4
 8005216:	4619      	mov	r1, r3
 8005218:	4610      	mov	r0, r2
 800521a:	f7fe fb9d 	bl	8003958 <vListInsert>
}
 800521e:	e010      	b.n	8005242 <prvAddCurrentTaskToDelayedList+0xda>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005220:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <prvAddCurrentTaskToDelayedList+0xe8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	3304      	adds	r3, #4
 800522a:	4619      	mov	r1, r3
 800522c:	4610      	mov	r0, r2
 800522e:	f7fe fb93 	bl	8003958 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005232:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	429a      	cmp	r2, r3
 800523a:	d202      	bcs.n	8005242 <prvAddCurrentTaskToDelayedList+0xda>
                        xNextTaskUnblockTime = xTimeToWake;
 800523c:	4a09      	ldr	r2, [pc, #36]	; (8005264 <prvAddCurrentTaskToDelayedList+0xfc>)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	6013      	str	r3, [r2, #0]
}
 8005242:	bf00      	nop
 8005244:	3718      	adds	r7, #24
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	200001a0 	.word	0x200001a0
 8005250:	200000c4 	.word	0x200000c4
 8005254:	200001a4 	.word	0x200001a4
 8005258:	20000188 	.word	0x20000188
 800525c:	20000158 	.word	0x20000158
 8005260:	20000154 	.word	0x20000154
 8005264:	200001bc 	.word	0x200001bc

08005268 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	3b04      	subs	r3, #4
 8005278:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005280:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	3b04      	subs	r3, #4
 8005286:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f023 0201 	bic.w	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	3b04      	subs	r3, #4
 8005296:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005298:	4a08      	ldr	r2, [pc, #32]	; (80052bc <pxPortInitialiseStack+0x54>)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3b14      	subs	r3, #20
 80052a2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	3b20      	subs	r3, #32
 80052ae:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80052b0:	68fb      	ldr	r3, [r7, #12]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3714      	adds	r7, #20
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bc80      	pop	{r7}
 80052ba:	4770      	bx	lr
 80052bc:	080052c1 	.word	0x080052c1

080052c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80052ca:	4b12      	ldr	r3, [pc, #72]	; (8005314 <prvTaskExitError+0x54>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052d2:	d00a      	beq.n	80052ea <prvTaskExitError+0x2a>
        __asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	60fb      	str	r3, [r7, #12]
    }
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <prvTaskExitError+0x28>
        __asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	60bb      	str	r3, [r7, #8]
    }
 80052fc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80052fe:	bf00      	nop
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d0fc      	beq.n	8005300 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	3714      	adds	r7, #20
 800530c:	46bd      	mov	sp, r7
 800530e:	bc80      	pop	{r7}
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000028 	.word	0x20000028
	...

08005320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <pxCurrentTCBConst2>)
 8005322:	6819      	ldr	r1, [r3, #0]
 8005324:	6808      	ldr	r0, [r1, #0]
 8005326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800532a:	f380 8809 	msr	PSP, r0
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f04f 0000 	mov.w	r0, #0
 8005336:	f380 8811 	msr	BASEPRI, r0
 800533a:	f04e 0e0d 	orr.w	lr, lr, #13
 800533e:	4770      	bx	lr

08005340 <pxCurrentTCBConst2>:
 8005340:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005344:	bf00      	nop
 8005346:	bf00      	nop

08005348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8005348:	4806      	ldr	r0, [pc, #24]	; (8005364 <prvPortStartFirstTask+0x1c>)
 800534a:	6800      	ldr	r0, [r0, #0]
 800534c:	6800      	ldr	r0, [r0, #0]
 800534e:	f380 8808 	msr	MSP, r0
 8005352:	b662      	cpsie	i
 8005354:	b661      	cpsie	f
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	df00      	svc	0
 8005360:	bf00      	nop
 8005362:	0000      	.short	0x0000
 8005364:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005368:	bf00      	nop
 800536a:	bf00      	nop

0800536c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005372:	4b32      	ldr	r3, [pc, #200]	; (800543c <xPortStartScheduler+0xd0>)
 8005374:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	781b      	ldrb	r3, [r3, #0]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	22ff      	movs	r2, #255	; 0xff
 8005382:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	b2db      	uxtb	r3, r3
 8005390:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005394:	b2da      	uxtb	r2, r3
 8005396:	4b2a      	ldr	r3, [pc, #168]	; (8005440 <xPortStartScheduler+0xd4>)
 8005398:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800539a:	4b2a      	ldr	r3, [pc, #168]	; (8005444 <xPortStartScheduler+0xd8>)
 800539c:	2207      	movs	r2, #7
 800539e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053a0:	e009      	b.n	80053b6 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80053a2:	4b28      	ldr	r3, [pc, #160]	; (8005444 <xPortStartScheduler+0xd8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	4a26      	ldr	r2, [pc, #152]	; (8005444 <xPortStartScheduler+0xd8>)
 80053aa:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80053ac:	78fb      	ldrb	r3, [r7, #3]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80053b6:	78fb      	ldrb	r3, [r7, #3]
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053be:	2b80      	cmp	r3, #128	; 0x80
 80053c0:	d0ef      	beq.n	80053a2 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80053c2:	4b20      	ldr	r3, [pc, #128]	; (8005444 <xPortStartScheduler+0xd8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f1c3 0307 	rsb	r3, r3, #7
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d00a      	beq.n	80053e4 <xPortStartScheduler+0x78>
        __asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	60bb      	str	r3, [r7, #8]
    }
 80053e0:	bf00      	nop
 80053e2:	e7fe      	b.n	80053e2 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80053e4:	4b17      	ldr	r3, [pc, #92]	; (8005444 <xPortStartScheduler+0xd8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	021b      	lsls	r3, r3, #8
 80053ea:	4a16      	ldr	r2, [pc, #88]	; (8005444 <xPortStartScheduler+0xd8>)
 80053ec:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80053ee:	4b15      	ldr	r3, [pc, #84]	; (8005444 <xPortStartScheduler+0xd8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80053f6:	4a13      	ldr	r2, [pc, #76]	; (8005444 <xPortStartScheduler+0xd8>)
 80053f8:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005402:	4b11      	ldr	r3, [pc, #68]	; (8005448 <xPortStartScheduler+0xdc>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a10      	ldr	r2, [pc, #64]	; (8005448 <xPortStartScheduler+0xdc>)
 8005408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800540c:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800540e:	4b0e      	ldr	r3, [pc, #56]	; (8005448 <xPortStartScheduler+0xdc>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a0d      	ldr	r2, [pc, #52]	; (8005448 <xPortStartScheduler+0xdc>)
 8005414:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005418:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800541a:	f000 f8b7 	bl	800558c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800541e:	4b0b      	ldr	r3, [pc, #44]	; (800544c <xPortStartScheduler+0xe0>)
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005424:	f7ff ff90 	bl	8005348 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005428:	f7ff fb74 	bl	8004b14 <vTaskSwitchContext>
    prvTaskExitError();
 800542c:	f7ff ff48 	bl	80052c0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	3710      	adds	r7, #16
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	e000e400 	.word	0xe000e400
 8005440:	200001c8 	.word	0x200001c8
 8005444:	200001cc 	.word	0x200001cc
 8005448:	e000ed20 	.word	0xe000ed20
 800544c:	20000028 	.word	0x20000028

08005450 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
        __asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	607b      	str	r3, [r7, #4]
    }
 8005468:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800546a:	4b0f      	ldr	r3, [pc, #60]	; (80054a8 <vPortEnterCritical+0x58>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	3301      	adds	r3, #1
 8005470:	4a0d      	ldr	r2, [pc, #52]	; (80054a8 <vPortEnterCritical+0x58>)
 8005472:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005474:	4b0c      	ldr	r3, [pc, #48]	; (80054a8 <vPortEnterCritical+0x58>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d10f      	bne.n	800549c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <vPortEnterCritical+0x5c>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <vPortEnterCritical+0x4c>
        __asm volatile
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	603b      	str	r3, [r7, #0]
    }
 8005498:	bf00      	nop
 800549a:	e7fe      	b.n	800549a <vPortEnterCritical+0x4a>
    }
}
 800549c:	bf00      	nop
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bc80      	pop	{r7}
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	20000028 	.word	0x20000028
 80054ac:	e000ed04 	.word	0xe000ed04

080054b0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80054b6:	4b11      	ldr	r3, [pc, #68]	; (80054fc <vPortExitCritical+0x4c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d10a      	bne.n	80054d4 <vPortExitCritical+0x24>
        __asm volatile
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	f383 8811 	msr	BASEPRI, r3
 80054c6:	f3bf 8f6f 	isb	sy
 80054ca:	f3bf 8f4f 	dsb	sy
 80054ce:	607b      	str	r3, [r7, #4]
    }
 80054d0:	bf00      	nop
 80054d2:	e7fe      	b.n	80054d2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80054d4:	4b09      	ldr	r3, [pc, #36]	; (80054fc <vPortExitCritical+0x4c>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3b01      	subs	r3, #1
 80054da:	4a08      	ldr	r2, [pc, #32]	; (80054fc <vPortExitCritical+0x4c>)
 80054dc:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80054de:	4b07      	ldr	r3, [pc, #28]	; (80054fc <vPortExitCritical+0x4c>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d105      	bne.n	80054f2 <vPortExitCritical+0x42>
 80054e6:	2300      	movs	r3, #0
 80054e8:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80054f0:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80054f2:	bf00      	nop
 80054f4:	370c      	adds	r7, #12
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bc80      	pop	{r7}
 80054fa:	4770      	bx	lr
 80054fc:	20000028 	.word	0x20000028

08005500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005500:	f3ef 8009 	mrs	r0, PSP
 8005504:	f3bf 8f6f 	isb	sy
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <pxCurrentTCBConst>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005510:	6010      	str	r0, [r2, #0]
 8005512:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005516:	f04f 0050 	mov.w	r0, #80	; 0x50
 800551a:	f380 8811 	msr	BASEPRI, r0
 800551e:	f7ff faf9 	bl	8004b14 <vTaskSwitchContext>
 8005522:	f04f 0000 	mov.w	r0, #0
 8005526:	f380 8811 	msr	BASEPRI, r0
 800552a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800552e:	6819      	ldr	r1, [r3, #0]
 8005530:	6808      	ldr	r0, [r1, #0]
 8005532:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005536:	f380 8809 	msr	PSP, r0
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	4770      	bx	lr

08005540 <pxCurrentTCBConst>:
 8005540:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop

08005548 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
        __asm volatile
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
    }
 8005560:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005562:	f7ff f9e3 	bl	800492c <xTaskIncrementTick>
 8005566:	4603      	mov	r3, r0
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <SysTick_Handler+0x40>)
 800556e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	2300      	movs	r3, #0
 8005576:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	f383 8811 	msr	BASEPRI, r3
    }
 800557e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005580:	bf00      	nop
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	e000ed04 	.word	0xe000ed04

0800558c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <vPortSetupTimerInterrupt+0x30>)
 8005592:	2200      	movs	r2, #0
 8005594:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <vPortSetupTimerInterrupt+0x34>)
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800559c:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <vPortSetupTimerInterrupt+0x38>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a09      	ldr	r2, [pc, #36]	; (80055c8 <vPortSetupTimerInterrupt+0x3c>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	4a08      	ldr	r2, [pc, #32]	; (80055cc <vPortSetupTimerInterrupt+0x40>)
 80055aa:	3b01      	subs	r3, #1
 80055ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80055ae:	4b03      	ldr	r3, [pc, #12]	; (80055bc <vPortSetupTimerInterrupt+0x30>)
 80055b0:	2207      	movs	r2, #7
 80055b2:	601a      	str	r2, [r3, #0]
}
 80055b4:	bf00      	nop
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr
 80055bc:	e000e010 	.word	0xe000e010
 80055c0:	e000e018 	.word	0xe000e018
 80055c4:	20000018 	.word	0x20000018
 80055c8:	10624dd3 	.word	0x10624dd3
 80055cc:	e000e014 	.word	0xe000e014

080055d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08a      	sub	sp, #40	; 0x28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80055d8:	2300      	movs	r3, #0
 80055da:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80055dc:	f7ff f8aa 	bl	8004734 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80055e0:	4b65      	ldr	r3, [pc, #404]	; (8005778 <pvPortMalloc+0x1a8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80055e8:	f000 f934 	bl	8005854 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80055ec:	4b63      	ldr	r3, [pc, #396]	; (800577c <pvPortMalloc+0x1ac>)
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f040 80a7 	bne.w	8005748 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d02d      	beq.n	800565c <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005600:	2208      	movs	r2, #8
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	429a      	cmp	r2, r3
 800560a:	d227      	bcs.n	800565c <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 800560c:	2208      	movs	r2, #8
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4413      	add	r3, r2
 8005612:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	2b00      	cmp	r3, #0
 800561c:	d021      	beq.n	8005662 <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f023 0307 	bic.w	r3, r3, #7
 8005624:	3308      	adds	r3, #8
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d214      	bcs.n	8005656 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f023 0307 	bic.w	r3, r3, #7
 8005632:	3308      	adds	r3, #8
 8005634:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	2b00      	cmp	r3, #0
 800563e:	d010      	beq.n	8005662 <pvPortMalloc+0x92>
        __asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	617b      	str	r3, [r7, #20]
    }
 8005652:	bf00      	nop
 8005654:	e7fe      	b.n	8005654 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005656:	2300      	movs	r3, #0
 8005658:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800565a:	e002      	b.n	8005662 <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 800565c:	2300      	movs	r3, #0
 800565e:	607b      	str	r3, [r7, #4]
 8005660:	e000      	b.n	8005664 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005662:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d06e      	beq.n	8005748 <pvPortMalloc+0x178>
 800566a:	4b45      	ldr	r3, [pc, #276]	; (8005780 <pvPortMalloc+0x1b0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	429a      	cmp	r2, r3
 8005672:	d869      	bhi.n	8005748 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005674:	4b43      	ldr	r3, [pc, #268]	; (8005784 <pvPortMalloc+0x1b4>)
 8005676:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005678:	4b42      	ldr	r3, [pc, #264]	; (8005784 <pvPortMalloc+0x1b4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800567e:	e004      	b.n	800568a <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	429a      	cmp	r2, r3
 8005692:	d903      	bls.n	800569c <pvPortMalloc+0xcc>
 8005694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f1      	bne.n	8005680 <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800569c:	4b36      	ldr	r3, [pc, #216]	; (8005778 <pvPortMalloc+0x1a8>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d050      	beq.n	8005748 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2208      	movs	r2, #8
 80056ac:	4413      	add	r3, r2
 80056ae:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80056b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	6a3b      	ldr	r3, [r7, #32]
 80056b6:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80056b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	1ad2      	subs	r2, r2, r3
 80056c0:	2308      	movs	r3, #8
 80056c2:	005b      	lsls	r3, r3, #1
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d91f      	bls.n	8005708 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80056c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4413      	add	r3, r2
 80056ce:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	f003 0307 	and.w	r3, r3, #7
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00a      	beq.n	80056f0 <pvPortMalloc+0x120>
        __asm volatile
 80056da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056de:	f383 8811 	msr	BASEPRI, r3
 80056e2:	f3bf 8f6f 	isb	sy
 80056e6:	f3bf 8f4f 	dsb	sy
 80056ea:	613b      	str	r3, [r7, #16]
    }
 80056ec:	bf00      	nop
 80056ee:	e7fe      	b.n	80056ee <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80056f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	1ad2      	subs	r2, r2, r3
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005702:	69b8      	ldr	r0, [r7, #24]
 8005704:	f000 f908 	bl	8005918 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005708:	4b1d      	ldr	r3, [pc, #116]	; (8005780 <pvPortMalloc+0x1b0>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <pvPortMalloc+0x1b0>)
 8005714:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005716:	4b1a      	ldr	r3, [pc, #104]	; (8005780 <pvPortMalloc+0x1b0>)
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <pvPortMalloc+0x1b8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d203      	bcs.n	800572a <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005722:	4b17      	ldr	r3, [pc, #92]	; (8005780 <pvPortMalloc+0x1b0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a18      	ldr	r2, [pc, #96]	; (8005788 <pvPortMalloc+0x1b8>)
 8005728:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	4b13      	ldr	r3, [pc, #76]	; (800577c <pvPortMalloc+0x1ac>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	431a      	orrs	r2, r3
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573a:	2200      	movs	r2, #0
 800573c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800573e:	4b13      	ldr	r3, [pc, #76]	; (800578c <pvPortMalloc+0x1bc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3301      	adds	r3, #1
 8005744:	4a11      	ldr	r2, [pc, #68]	; (800578c <pvPortMalloc+0x1bc>)
 8005746:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005748:	f7ff f802 	bl	8004750 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <pvPortMalloc+0x19c>
        __asm volatile
 8005756:	f04f 0350 	mov.w	r3, #80	; 0x50
 800575a:	f383 8811 	msr	BASEPRI, r3
 800575e:	f3bf 8f6f 	isb	sy
 8005762:	f3bf 8f4f 	dsb	sy
 8005766:	60fb      	str	r3, [r7, #12]
    }
 8005768:	bf00      	nop
 800576a:	e7fe      	b.n	800576a <pvPortMalloc+0x19a>
    return pvReturn;
 800576c:	69fb      	ldr	r3, [r7, #28]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3728      	adds	r7, #40	; 0x28
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000dd8 	.word	0x20000dd8
 800577c:	20000dec 	.word	0x20000dec
 8005780:	20000ddc 	.word	0x20000ddc
 8005784:	20000dd0 	.word	0x20000dd0
 8005788:	20000de0 	.word	0x20000de0
 800578c:	20000de4 	.word	0x20000de4

08005790 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b086      	sub	sp, #24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d04d      	beq.n	800583e <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80057a2:	2308      	movs	r3, #8
 80057a4:	425b      	negs	r3, r3
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	4413      	add	r3, r2
 80057aa:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	4b24      	ldr	r3, [pc, #144]	; (8005848 <vPortFree+0xb8>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4013      	ands	r3, r2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <vPortFree+0x44>
        __asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	60fb      	str	r3, [r7, #12]
    }
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00a      	beq.n	80057f2 <vPortFree+0x62>
        __asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	60bb      	str	r3, [r7, #8]
    }
 80057ee:	bf00      	nop
 80057f0:	e7fe      	b.n	80057f0 <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	4b14      	ldr	r3, [pc, #80]	; (8005848 <vPortFree+0xb8>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4013      	ands	r3, r2
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d01e      	beq.n	800583e <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d11a      	bne.n	800583e <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <vPortFree+0xb8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	43db      	mvns	r3, r3
 8005812:	401a      	ands	r2, r3
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005818:	f7fe ff8c 	bl	8004734 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	685a      	ldr	r2, [r3, #4]
 8005820:	4b0a      	ldr	r3, [pc, #40]	; (800584c <vPortFree+0xbc>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4413      	add	r3, r2
 8005826:	4a09      	ldr	r2, [pc, #36]	; (800584c <vPortFree+0xbc>)
 8005828:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800582a:	6938      	ldr	r0, [r7, #16]
 800582c:	f000 f874 	bl	8005918 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005830:	4b07      	ldr	r3, [pc, #28]	; (8005850 <vPortFree+0xc0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3301      	adds	r3, #1
 8005836:	4a06      	ldr	r2, [pc, #24]	; (8005850 <vPortFree+0xc0>)
 8005838:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800583a:	f7fe ff89 	bl	8004750 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800583e:	bf00      	nop
 8005840:	3718      	adds	r7, #24
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000dec 	.word	0x20000dec
 800584c:	20000ddc 	.word	0x20000ddc
 8005850:	20000de8 	.word	0x20000de8

08005854 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005854:	b480      	push	{r7}
 8005856:	b085      	sub	sp, #20
 8005858:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800585a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800585e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005860:	4b27      	ldr	r3, [pc, #156]	; (8005900 <prvHeapInit+0xac>)
 8005862:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	2b00      	cmp	r3, #0
 800586c:	d00c      	beq.n	8005888 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3307      	adds	r3, #7
 8005872:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0307 	bic.w	r3, r3, #7
 800587a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	4a1f      	ldr	r2, [pc, #124]	; (8005900 <prvHeapInit+0xac>)
 8005884:	4413      	add	r3, r2
 8005886:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800588c:	4a1d      	ldr	r2, [pc, #116]	; (8005904 <prvHeapInit+0xb0>)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005892:	4b1c      	ldr	r3, [pc, #112]	; (8005904 <prvHeapInit+0xb0>)
 8005894:	2200      	movs	r2, #0
 8005896:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	4413      	add	r3, r2
 800589e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80058a0:	2208      	movs	r2, #8
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 0307 	bic.w	r3, r3, #7
 80058ae:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	4a15      	ldr	r2, [pc, #84]	; (8005908 <prvHeapInit+0xb4>)
 80058b4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80058b6:	4b14      	ldr	r3, [pc, #80]	; (8005908 <prvHeapInit+0xb4>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2200      	movs	r2, #0
 80058bc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <prvHeapInit+0xb4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	2200      	movs	r2, #0
 80058c4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	1ad2      	subs	r2, r2, r3
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80058d4:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <prvHeapInit+0xb4>)
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	4a0a      	ldr	r2, [pc, #40]	; (800590c <prvHeapInit+0xb8>)
 80058e2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4a09      	ldr	r2, [pc, #36]	; (8005910 <prvHeapInit+0xbc>)
 80058ea:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80058ec:	4b09      	ldr	r3, [pc, #36]	; (8005914 <prvHeapInit+0xc0>)
 80058ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80058f2:	601a      	str	r2, [r3, #0]
}
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bc80      	pop	{r7}
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	200001d0 	.word	0x200001d0
 8005904:	20000dd0 	.word	0x20000dd0
 8005908:	20000dd8 	.word	0x20000dd8
 800590c:	20000de0 	.word	0x20000de0
 8005910:	20000ddc 	.word	0x20000ddc
 8005914:	20000dec 	.word	0x20000dec

08005918 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005920:	4b27      	ldr	r3, [pc, #156]	; (80059c0 <prvInsertBlockIntoFreeList+0xa8>)
 8005922:	60fb      	str	r3, [r7, #12]
 8005924:	e002      	b.n	800592c <prvInsertBlockIntoFreeList+0x14>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	429a      	cmp	r2, r3
 8005934:	d8f7      	bhi.n	8005926 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	68ba      	ldr	r2, [r7, #8]
 8005940:	4413      	add	r3, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	429a      	cmp	r2, r3
 8005946:	d108      	bne.n	800595a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	685a      	ldr	r2, [r3, #4]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	441a      	add	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	441a      	add	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	429a      	cmp	r2, r3
 800596c:	d118      	bne.n	80059a0 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681a      	ldr	r2, [r3, #0]
 8005972:	4b14      	ldr	r3, [pc, #80]	; (80059c4 <prvInsertBlockIntoFreeList+0xac>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d00d      	beq.n	8005996 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685a      	ldr	r2, [r3, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	441a      	add	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	601a      	str	r2, [r3, #0]
 8005994:	e008      	b.n	80059a8 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <prvInsertBlockIntoFreeList+0xac>)
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
 800599e:	e003      	b.n	80059a8 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d002      	beq.n	80059b6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80059b6:	bf00      	nop
 80059b8:	3714      	adds	r7, #20
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bc80      	pop	{r7}
 80059be:	4770      	bx	lr
 80059c0:	20000dd0 	.word	0x20000dd0
 80059c4:	20000dd8 	.word	0x20000dd8

080059c8 <atoi>:
 80059c8:	220a      	movs	r2, #10
 80059ca:	2100      	movs	r1, #0
 80059cc:	f000 b9a0 	b.w	8005d10 <strtol>

080059d0 <__errno>:
 80059d0:	4b01      	ldr	r3, [pc, #4]	; (80059d8 <__errno+0x8>)
 80059d2:	6818      	ldr	r0, [r3, #0]
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	2000002c 	.word	0x2000002c

080059dc <__libc_init_array>:
 80059dc:	b570      	push	{r4, r5, r6, lr}
 80059de:	2600      	movs	r6, #0
 80059e0:	4d0c      	ldr	r5, [pc, #48]	; (8005a14 <__libc_init_array+0x38>)
 80059e2:	4c0d      	ldr	r4, [pc, #52]	; (8005a18 <__libc_init_array+0x3c>)
 80059e4:	1b64      	subs	r4, r4, r5
 80059e6:	10a4      	asrs	r4, r4, #2
 80059e8:	42a6      	cmp	r6, r4
 80059ea:	d109      	bne.n	8005a00 <__libc_init_array+0x24>
 80059ec:	f001 fa94 	bl	8006f18 <_init>
 80059f0:	2600      	movs	r6, #0
 80059f2:	4d0a      	ldr	r5, [pc, #40]	; (8005a1c <__libc_init_array+0x40>)
 80059f4:	4c0a      	ldr	r4, [pc, #40]	; (8005a20 <__libc_init_array+0x44>)
 80059f6:	1b64      	subs	r4, r4, r5
 80059f8:	10a4      	asrs	r4, r4, #2
 80059fa:	42a6      	cmp	r6, r4
 80059fc:	d105      	bne.n	8005a0a <__libc_init_array+0x2e>
 80059fe:	bd70      	pop	{r4, r5, r6, pc}
 8005a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a04:	4798      	blx	r3
 8005a06:	3601      	adds	r6, #1
 8005a08:	e7ee      	b.n	80059e8 <__libc_init_array+0xc>
 8005a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a0e:	4798      	blx	r3
 8005a10:	3601      	adds	r6, #1
 8005a12:	e7f2      	b.n	80059fa <__libc_init_array+0x1e>
 8005a14:	08007188 	.word	0x08007188
 8005a18:	08007188 	.word	0x08007188
 8005a1c:	08007188 	.word	0x08007188
 8005a20:	0800718c 	.word	0x0800718c

08005a24 <memcpy>:
 8005a24:	440a      	add	r2, r1
 8005a26:	4291      	cmp	r1, r2
 8005a28:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a2c:	d100      	bne.n	8005a30 <memcpy+0xc>
 8005a2e:	4770      	bx	lr
 8005a30:	b510      	push	{r4, lr}
 8005a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a36:	4291      	cmp	r1, r2
 8005a38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a3c:	d1f9      	bne.n	8005a32 <memcpy+0xe>
 8005a3e:	bd10      	pop	{r4, pc}

08005a40 <memset>:
 8005a40:	4603      	mov	r3, r0
 8005a42:	4402      	add	r2, r0
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d100      	bne.n	8005a4a <memset+0xa>
 8005a48:	4770      	bx	lr
 8005a4a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a4e:	e7f9      	b.n	8005a44 <memset+0x4>

08005a50 <iprintf>:
 8005a50:	b40f      	push	{r0, r1, r2, r3}
 8005a52:	4b0a      	ldr	r3, [pc, #40]	; (8005a7c <iprintf+0x2c>)
 8005a54:	b513      	push	{r0, r1, r4, lr}
 8005a56:	681c      	ldr	r4, [r3, #0]
 8005a58:	b124      	cbz	r4, 8005a64 <iprintf+0x14>
 8005a5a:	69a3      	ldr	r3, [r4, #24]
 8005a5c:	b913      	cbnz	r3, 8005a64 <iprintf+0x14>
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f000 fb3a 	bl	80060d8 <__sinit>
 8005a64:	ab05      	add	r3, sp, #20
 8005a66:	4620      	mov	r0, r4
 8005a68:	9a04      	ldr	r2, [sp, #16]
 8005a6a:	68a1      	ldr	r1, [r4, #8]
 8005a6c:	9301      	str	r3, [sp, #4]
 8005a6e:	f000 fe61 	bl	8006734 <_vfiprintf_r>
 8005a72:	b002      	add	sp, #8
 8005a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a78:	b004      	add	sp, #16
 8005a7a:	4770      	bx	lr
 8005a7c:	2000002c 	.word	0x2000002c

08005a80 <_puts_r>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	460e      	mov	r6, r1
 8005a84:	4605      	mov	r5, r0
 8005a86:	b118      	cbz	r0, 8005a90 <_puts_r+0x10>
 8005a88:	6983      	ldr	r3, [r0, #24]
 8005a8a:	b90b      	cbnz	r3, 8005a90 <_puts_r+0x10>
 8005a8c:	f000 fb24 	bl	80060d8 <__sinit>
 8005a90:	69ab      	ldr	r3, [r5, #24]
 8005a92:	68ac      	ldr	r4, [r5, #8]
 8005a94:	b913      	cbnz	r3, 8005a9c <_puts_r+0x1c>
 8005a96:	4628      	mov	r0, r5
 8005a98:	f000 fb1e 	bl	80060d8 <__sinit>
 8005a9c:	4b2c      	ldr	r3, [pc, #176]	; (8005b50 <_puts_r+0xd0>)
 8005a9e:	429c      	cmp	r4, r3
 8005aa0:	d120      	bne.n	8005ae4 <_puts_r+0x64>
 8005aa2:	686c      	ldr	r4, [r5, #4]
 8005aa4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005aa6:	07db      	lsls	r3, r3, #31
 8005aa8:	d405      	bmi.n	8005ab6 <_puts_r+0x36>
 8005aaa:	89a3      	ldrh	r3, [r4, #12]
 8005aac:	0598      	lsls	r0, r3, #22
 8005aae:	d402      	bmi.n	8005ab6 <_puts_r+0x36>
 8005ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ab2:	f000 fbaf 	bl	8006214 <__retarget_lock_acquire_recursive>
 8005ab6:	89a3      	ldrh	r3, [r4, #12]
 8005ab8:	0719      	lsls	r1, r3, #28
 8005aba:	d51d      	bpl.n	8005af8 <_puts_r+0x78>
 8005abc:	6923      	ldr	r3, [r4, #16]
 8005abe:	b1db      	cbz	r3, 8005af8 <_puts_r+0x78>
 8005ac0:	3e01      	subs	r6, #1
 8005ac2:	68a3      	ldr	r3, [r4, #8]
 8005ac4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	60a3      	str	r3, [r4, #8]
 8005acc:	bb39      	cbnz	r1, 8005b1e <_puts_r+0x9e>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	da38      	bge.n	8005b44 <_puts_r+0xc4>
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	210a      	movs	r1, #10
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f000 f924 	bl	8005d24 <__swbuf_r>
 8005adc:	3001      	adds	r0, #1
 8005ade:	d011      	beq.n	8005b04 <_puts_r+0x84>
 8005ae0:	250a      	movs	r5, #10
 8005ae2:	e011      	b.n	8005b08 <_puts_r+0x88>
 8005ae4:	4b1b      	ldr	r3, [pc, #108]	; (8005b54 <_puts_r+0xd4>)
 8005ae6:	429c      	cmp	r4, r3
 8005ae8:	d101      	bne.n	8005aee <_puts_r+0x6e>
 8005aea:	68ac      	ldr	r4, [r5, #8]
 8005aec:	e7da      	b.n	8005aa4 <_puts_r+0x24>
 8005aee:	4b1a      	ldr	r3, [pc, #104]	; (8005b58 <_puts_r+0xd8>)
 8005af0:	429c      	cmp	r4, r3
 8005af2:	bf08      	it	eq
 8005af4:	68ec      	ldreq	r4, [r5, #12]
 8005af6:	e7d5      	b.n	8005aa4 <_puts_r+0x24>
 8005af8:	4621      	mov	r1, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 f964 	bl	8005dc8 <__swsetup_r>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d0dd      	beq.n	8005ac0 <_puts_r+0x40>
 8005b04:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b08:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b0a:	07da      	lsls	r2, r3, #31
 8005b0c:	d405      	bmi.n	8005b1a <_puts_r+0x9a>
 8005b0e:	89a3      	ldrh	r3, [r4, #12]
 8005b10:	059b      	lsls	r3, r3, #22
 8005b12:	d402      	bmi.n	8005b1a <_puts_r+0x9a>
 8005b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b16:	f000 fb7e 	bl	8006216 <__retarget_lock_release_recursive>
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	bd70      	pop	{r4, r5, r6, pc}
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	da04      	bge.n	8005b2c <_puts_r+0xac>
 8005b22:	69a2      	ldr	r2, [r4, #24]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	dc06      	bgt.n	8005b36 <_puts_r+0xb6>
 8005b28:	290a      	cmp	r1, #10
 8005b2a:	d004      	beq.n	8005b36 <_puts_r+0xb6>
 8005b2c:	6823      	ldr	r3, [r4, #0]
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	6022      	str	r2, [r4, #0]
 8005b32:	7019      	strb	r1, [r3, #0]
 8005b34:	e7c5      	b.n	8005ac2 <_puts_r+0x42>
 8005b36:	4622      	mov	r2, r4
 8005b38:	4628      	mov	r0, r5
 8005b3a:	f000 f8f3 	bl	8005d24 <__swbuf_r>
 8005b3e:	3001      	adds	r0, #1
 8005b40:	d1bf      	bne.n	8005ac2 <_puts_r+0x42>
 8005b42:	e7df      	b.n	8005b04 <_puts_r+0x84>
 8005b44:	250a      	movs	r5, #10
 8005b46:	6823      	ldr	r3, [r4, #0]
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	6022      	str	r2, [r4, #0]
 8005b4c:	701d      	strb	r5, [r3, #0]
 8005b4e:	e7db      	b.n	8005b08 <_puts_r+0x88>
 8005b50:	08007114 	.word	0x08007114
 8005b54:	08007134 	.word	0x08007134
 8005b58:	080070f4 	.word	0x080070f4

08005b5c <puts>:
 8005b5c:	4b02      	ldr	r3, [pc, #8]	; (8005b68 <puts+0xc>)
 8005b5e:	4601      	mov	r1, r0
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	f7ff bf8d 	b.w	8005a80 <_puts_r>
 8005b66:	bf00      	nop
 8005b68:	2000002c 	.word	0x2000002c

08005b6c <siprintf>:
 8005b6c:	b40e      	push	{r1, r2, r3}
 8005b6e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b72:	b500      	push	{lr}
 8005b74:	b09c      	sub	sp, #112	; 0x70
 8005b76:	ab1d      	add	r3, sp, #116	; 0x74
 8005b78:	9002      	str	r0, [sp, #8]
 8005b7a:	9006      	str	r0, [sp, #24]
 8005b7c:	9107      	str	r1, [sp, #28]
 8005b7e:	9104      	str	r1, [sp, #16]
 8005b80:	4808      	ldr	r0, [pc, #32]	; (8005ba4 <siprintf+0x38>)
 8005b82:	4909      	ldr	r1, [pc, #36]	; (8005ba8 <siprintf+0x3c>)
 8005b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b88:	9105      	str	r1, [sp, #20]
 8005b8a:	6800      	ldr	r0, [r0, #0]
 8005b8c:	a902      	add	r1, sp, #8
 8005b8e:	9301      	str	r3, [sp, #4]
 8005b90:	f000 fca8 	bl	80064e4 <_svfiprintf_r>
 8005b94:	2200      	movs	r2, #0
 8005b96:	9b02      	ldr	r3, [sp, #8]
 8005b98:	701a      	strb	r2, [r3, #0]
 8005b9a:	b01c      	add	sp, #112	; 0x70
 8005b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ba0:	b003      	add	sp, #12
 8005ba2:	4770      	bx	lr
 8005ba4:	2000002c 	.word	0x2000002c
 8005ba8:	ffff0208 	.word	0xffff0208

08005bac <strchr>:
 8005bac:	4603      	mov	r3, r0
 8005bae:	b2c9      	uxtb	r1, r1
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bb6:	b112      	cbz	r2, 8005bbe <strchr+0x12>
 8005bb8:	428a      	cmp	r2, r1
 8005bba:	d1f9      	bne.n	8005bb0 <strchr+0x4>
 8005bbc:	4770      	bx	lr
 8005bbe:	2900      	cmp	r1, #0
 8005bc0:	bf18      	it	ne
 8005bc2:	2000      	movne	r0, #0
 8005bc4:	4770      	bx	lr

08005bc6 <strcpy>:
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005bcc:	f803 2b01 	strb.w	r2, [r3], #1
 8005bd0:	2a00      	cmp	r2, #0
 8005bd2:	d1f9      	bne.n	8005bc8 <strcpy+0x2>
 8005bd4:	4770      	bx	lr

08005bd6 <strstr>:
 8005bd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bd8:	780c      	ldrb	r4, [r1, #0]
 8005bda:	b164      	cbz	r4, 8005bf6 <strstr+0x20>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	781a      	ldrb	r2, [r3, #0]
 8005be0:	4618      	mov	r0, r3
 8005be2:	1c5e      	adds	r6, r3, #1
 8005be4:	b90a      	cbnz	r2, 8005bea <strstr+0x14>
 8005be6:	4610      	mov	r0, r2
 8005be8:	e005      	b.n	8005bf6 <strstr+0x20>
 8005bea:	4294      	cmp	r4, r2
 8005bec:	d108      	bne.n	8005c00 <strstr+0x2a>
 8005bee:	460d      	mov	r5, r1
 8005bf0:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005bf4:	b902      	cbnz	r2, 8005bf8 <strstr+0x22>
 8005bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bf8:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005bfc:	4297      	cmp	r7, r2
 8005bfe:	d0f7      	beq.n	8005bf0 <strstr+0x1a>
 8005c00:	4633      	mov	r3, r6
 8005c02:	e7ec      	b.n	8005bde <strstr+0x8>

08005c04 <_strtol_l.isra.0>:
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0a:	4686      	mov	lr, r0
 8005c0c:	d001      	beq.n	8005c12 <_strtol_l.isra.0+0xe>
 8005c0e:	2b24      	cmp	r3, #36	; 0x24
 8005c10:	d906      	bls.n	8005c20 <_strtol_l.isra.0+0x1c>
 8005c12:	f7ff fedd 	bl	80059d0 <__errno>
 8005c16:	2316      	movs	r3, #22
 8005c18:	6003      	str	r3, [r0, #0]
 8005c1a:	2000      	movs	r0, #0
 8005c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c20:	468c      	mov	ip, r1
 8005c22:	4e3a      	ldr	r6, [pc, #232]	; (8005d0c <_strtol_l.isra.0+0x108>)
 8005c24:	4660      	mov	r0, ip
 8005c26:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005c2a:	5da5      	ldrb	r5, [r4, r6]
 8005c2c:	f015 0508 	ands.w	r5, r5, #8
 8005c30:	d1f8      	bne.n	8005c24 <_strtol_l.isra.0+0x20>
 8005c32:	2c2d      	cmp	r4, #45	; 0x2d
 8005c34:	d133      	bne.n	8005c9e <_strtol_l.isra.0+0x9a>
 8005c36:	f04f 0801 	mov.w	r8, #1
 8005c3a:	f89c 4000 	ldrb.w	r4, [ip]
 8005c3e:	f100 0c02 	add.w	ip, r0, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d05d      	beq.n	8005d02 <_strtol_l.isra.0+0xfe>
 8005c46:	2b10      	cmp	r3, #16
 8005c48:	d10c      	bne.n	8005c64 <_strtol_l.isra.0+0x60>
 8005c4a:	2c30      	cmp	r4, #48	; 0x30
 8005c4c:	d10a      	bne.n	8005c64 <_strtol_l.isra.0+0x60>
 8005c4e:	f89c 0000 	ldrb.w	r0, [ip]
 8005c52:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005c56:	2858      	cmp	r0, #88	; 0x58
 8005c58:	d14e      	bne.n	8005cf8 <_strtol_l.isra.0+0xf4>
 8005c5a:	2310      	movs	r3, #16
 8005c5c:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005c60:	f10c 0c02 	add.w	ip, ip, #2
 8005c64:	2500      	movs	r5, #0
 8005c66:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
 8005c6a:	3f01      	subs	r7, #1
 8005c6c:	fbb7 f9f3 	udiv	r9, r7, r3
 8005c70:	4628      	mov	r0, r5
 8005c72:	fb03 7a19 	mls	sl, r3, r9, r7
 8005c76:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005c7a:	2e09      	cmp	r6, #9
 8005c7c:	d818      	bhi.n	8005cb0 <_strtol_l.isra.0+0xac>
 8005c7e:	4634      	mov	r4, r6
 8005c80:	42a3      	cmp	r3, r4
 8005c82:	dd24      	ble.n	8005cce <_strtol_l.isra.0+0xca>
 8005c84:	2d00      	cmp	r5, #0
 8005c86:	db1f      	blt.n	8005cc8 <_strtol_l.isra.0+0xc4>
 8005c88:	4581      	cmp	r9, r0
 8005c8a:	d31d      	bcc.n	8005cc8 <_strtol_l.isra.0+0xc4>
 8005c8c:	d101      	bne.n	8005c92 <_strtol_l.isra.0+0x8e>
 8005c8e:	45a2      	cmp	sl, r4
 8005c90:	db1a      	blt.n	8005cc8 <_strtol_l.isra.0+0xc4>
 8005c92:	2501      	movs	r5, #1
 8005c94:	fb00 4003 	mla	r0, r0, r3, r4
 8005c98:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005c9c:	e7eb      	b.n	8005c76 <_strtol_l.isra.0+0x72>
 8005c9e:	2c2b      	cmp	r4, #43	; 0x2b
 8005ca0:	bf08      	it	eq
 8005ca2:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005ca6:	46a8      	mov	r8, r5
 8005ca8:	bf08      	it	eq
 8005caa:	f100 0c02 	addeq.w	ip, r0, #2
 8005cae:	e7c8      	b.n	8005c42 <_strtol_l.isra.0+0x3e>
 8005cb0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005cb4:	2e19      	cmp	r6, #25
 8005cb6:	d801      	bhi.n	8005cbc <_strtol_l.isra.0+0xb8>
 8005cb8:	3c37      	subs	r4, #55	; 0x37
 8005cba:	e7e1      	b.n	8005c80 <_strtol_l.isra.0+0x7c>
 8005cbc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005cc0:	2e19      	cmp	r6, #25
 8005cc2:	d804      	bhi.n	8005cce <_strtol_l.isra.0+0xca>
 8005cc4:	3c57      	subs	r4, #87	; 0x57
 8005cc6:	e7db      	b.n	8005c80 <_strtol_l.isra.0+0x7c>
 8005cc8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005ccc:	e7e4      	b.n	8005c98 <_strtol_l.isra.0+0x94>
 8005cce:	2d00      	cmp	r5, #0
 8005cd0:	da08      	bge.n	8005ce4 <_strtol_l.isra.0+0xe0>
 8005cd2:	2322      	movs	r3, #34	; 0x22
 8005cd4:	4638      	mov	r0, r7
 8005cd6:	f8ce 3000 	str.w	r3, [lr]
 8005cda:	2a00      	cmp	r2, #0
 8005cdc:	d09e      	beq.n	8005c1c <_strtol_l.isra.0+0x18>
 8005cde:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 8005ce2:	e007      	b.n	8005cf4 <_strtol_l.isra.0+0xf0>
 8005ce4:	f1b8 0f00 	cmp.w	r8, #0
 8005ce8:	d000      	beq.n	8005cec <_strtol_l.isra.0+0xe8>
 8005cea:	4240      	negs	r0, r0
 8005cec:	2a00      	cmp	r2, #0
 8005cee:	d095      	beq.n	8005c1c <_strtol_l.isra.0+0x18>
 8005cf0:	2d00      	cmp	r5, #0
 8005cf2:	d1f4      	bne.n	8005cde <_strtol_l.isra.0+0xda>
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	e791      	b.n	8005c1c <_strtol_l.isra.0+0x18>
 8005cf8:	2430      	movs	r4, #48	; 0x30
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1b2      	bne.n	8005c64 <_strtol_l.isra.0+0x60>
 8005cfe:	2308      	movs	r3, #8
 8005d00:	e7b0      	b.n	8005c64 <_strtol_l.isra.0+0x60>
 8005d02:	2c30      	cmp	r4, #48	; 0x30
 8005d04:	d0a3      	beq.n	8005c4e <_strtol_l.isra.0+0x4a>
 8005d06:	230a      	movs	r3, #10
 8005d08:	e7ac      	b.n	8005c64 <_strtol_l.isra.0+0x60>
 8005d0a:	bf00      	nop
 8005d0c:	08006ff1 	.word	0x08006ff1

08005d10 <strtol>:
 8005d10:	4613      	mov	r3, r2
 8005d12:	460a      	mov	r2, r1
 8005d14:	4601      	mov	r1, r0
 8005d16:	4802      	ldr	r0, [pc, #8]	; (8005d20 <strtol+0x10>)
 8005d18:	6800      	ldr	r0, [r0, #0]
 8005d1a:	f7ff bf73 	b.w	8005c04 <_strtol_l.isra.0>
 8005d1e:	bf00      	nop
 8005d20:	2000002c 	.word	0x2000002c

08005d24 <__swbuf_r>:
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d26:	460e      	mov	r6, r1
 8005d28:	4614      	mov	r4, r2
 8005d2a:	4605      	mov	r5, r0
 8005d2c:	b118      	cbz	r0, 8005d36 <__swbuf_r+0x12>
 8005d2e:	6983      	ldr	r3, [r0, #24]
 8005d30:	b90b      	cbnz	r3, 8005d36 <__swbuf_r+0x12>
 8005d32:	f000 f9d1 	bl	80060d8 <__sinit>
 8005d36:	4b21      	ldr	r3, [pc, #132]	; (8005dbc <__swbuf_r+0x98>)
 8005d38:	429c      	cmp	r4, r3
 8005d3a:	d12b      	bne.n	8005d94 <__swbuf_r+0x70>
 8005d3c:	686c      	ldr	r4, [r5, #4]
 8005d3e:	69a3      	ldr	r3, [r4, #24]
 8005d40:	60a3      	str	r3, [r4, #8]
 8005d42:	89a3      	ldrh	r3, [r4, #12]
 8005d44:	071a      	lsls	r2, r3, #28
 8005d46:	d52f      	bpl.n	8005da8 <__swbuf_r+0x84>
 8005d48:	6923      	ldr	r3, [r4, #16]
 8005d4a:	b36b      	cbz	r3, 8005da8 <__swbuf_r+0x84>
 8005d4c:	6923      	ldr	r3, [r4, #16]
 8005d4e:	6820      	ldr	r0, [r4, #0]
 8005d50:	b2f6      	uxtb	r6, r6
 8005d52:	1ac0      	subs	r0, r0, r3
 8005d54:	6963      	ldr	r3, [r4, #20]
 8005d56:	4637      	mov	r7, r6
 8005d58:	4283      	cmp	r3, r0
 8005d5a:	dc04      	bgt.n	8005d66 <__swbuf_r+0x42>
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f000 f926 	bl	8005fb0 <_fflush_r>
 8005d64:	bb30      	cbnz	r0, 8005db4 <__swbuf_r+0x90>
 8005d66:	68a3      	ldr	r3, [r4, #8]
 8005d68:	3001      	adds	r0, #1
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	60a3      	str	r3, [r4, #8]
 8005d6e:	6823      	ldr	r3, [r4, #0]
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	6022      	str	r2, [r4, #0]
 8005d74:	701e      	strb	r6, [r3, #0]
 8005d76:	6963      	ldr	r3, [r4, #20]
 8005d78:	4283      	cmp	r3, r0
 8005d7a:	d004      	beq.n	8005d86 <__swbuf_r+0x62>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	07db      	lsls	r3, r3, #31
 8005d80:	d506      	bpl.n	8005d90 <__swbuf_r+0x6c>
 8005d82:	2e0a      	cmp	r6, #10
 8005d84:	d104      	bne.n	8005d90 <__swbuf_r+0x6c>
 8005d86:	4621      	mov	r1, r4
 8005d88:	4628      	mov	r0, r5
 8005d8a:	f000 f911 	bl	8005fb0 <_fflush_r>
 8005d8e:	b988      	cbnz	r0, 8005db4 <__swbuf_r+0x90>
 8005d90:	4638      	mov	r0, r7
 8005d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d94:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <__swbuf_r+0x9c>)
 8005d96:	429c      	cmp	r4, r3
 8005d98:	d101      	bne.n	8005d9e <__swbuf_r+0x7a>
 8005d9a:	68ac      	ldr	r4, [r5, #8]
 8005d9c:	e7cf      	b.n	8005d3e <__swbuf_r+0x1a>
 8005d9e:	4b09      	ldr	r3, [pc, #36]	; (8005dc4 <__swbuf_r+0xa0>)
 8005da0:	429c      	cmp	r4, r3
 8005da2:	bf08      	it	eq
 8005da4:	68ec      	ldreq	r4, [r5, #12]
 8005da6:	e7ca      	b.n	8005d3e <__swbuf_r+0x1a>
 8005da8:	4621      	mov	r1, r4
 8005daa:	4628      	mov	r0, r5
 8005dac:	f000 f80c 	bl	8005dc8 <__swsetup_r>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	d0cb      	beq.n	8005d4c <__swbuf_r+0x28>
 8005db4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005db8:	e7ea      	b.n	8005d90 <__swbuf_r+0x6c>
 8005dba:	bf00      	nop
 8005dbc:	08007114 	.word	0x08007114
 8005dc0:	08007134 	.word	0x08007134
 8005dc4:	080070f4 	.word	0x080070f4

08005dc8 <__swsetup_r>:
 8005dc8:	4b32      	ldr	r3, [pc, #200]	; (8005e94 <__swsetup_r+0xcc>)
 8005dca:	b570      	push	{r4, r5, r6, lr}
 8005dcc:	681d      	ldr	r5, [r3, #0]
 8005dce:	4606      	mov	r6, r0
 8005dd0:	460c      	mov	r4, r1
 8005dd2:	b125      	cbz	r5, 8005dde <__swsetup_r+0x16>
 8005dd4:	69ab      	ldr	r3, [r5, #24]
 8005dd6:	b913      	cbnz	r3, 8005dde <__swsetup_r+0x16>
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f000 f97d 	bl	80060d8 <__sinit>
 8005dde:	4b2e      	ldr	r3, [pc, #184]	; (8005e98 <__swsetup_r+0xd0>)
 8005de0:	429c      	cmp	r4, r3
 8005de2:	d10f      	bne.n	8005e04 <__swsetup_r+0x3c>
 8005de4:	686c      	ldr	r4, [r5, #4]
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005dec:	0719      	lsls	r1, r3, #28
 8005dee:	d42c      	bmi.n	8005e4a <__swsetup_r+0x82>
 8005df0:	06dd      	lsls	r5, r3, #27
 8005df2:	d411      	bmi.n	8005e18 <__swsetup_r+0x50>
 8005df4:	2309      	movs	r3, #9
 8005df6:	6033      	str	r3, [r6, #0]
 8005df8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005dfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e00:	81a3      	strh	r3, [r4, #12]
 8005e02:	e03e      	b.n	8005e82 <__swsetup_r+0xba>
 8005e04:	4b25      	ldr	r3, [pc, #148]	; (8005e9c <__swsetup_r+0xd4>)
 8005e06:	429c      	cmp	r4, r3
 8005e08:	d101      	bne.n	8005e0e <__swsetup_r+0x46>
 8005e0a:	68ac      	ldr	r4, [r5, #8]
 8005e0c:	e7eb      	b.n	8005de6 <__swsetup_r+0x1e>
 8005e0e:	4b24      	ldr	r3, [pc, #144]	; (8005ea0 <__swsetup_r+0xd8>)
 8005e10:	429c      	cmp	r4, r3
 8005e12:	bf08      	it	eq
 8005e14:	68ec      	ldreq	r4, [r5, #12]
 8005e16:	e7e6      	b.n	8005de6 <__swsetup_r+0x1e>
 8005e18:	0758      	lsls	r0, r3, #29
 8005e1a:	d512      	bpl.n	8005e42 <__swsetup_r+0x7a>
 8005e1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e1e:	b141      	cbz	r1, 8005e32 <__swsetup_r+0x6a>
 8005e20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e24:	4299      	cmp	r1, r3
 8005e26:	d002      	beq.n	8005e2e <__swsetup_r+0x66>
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f000 fa59 	bl	80062e0 <_free_r>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	6363      	str	r3, [r4, #52]	; 0x34
 8005e32:	89a3      	ldrh	r3, [r4, #12]
 8005e34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	6063      	str	r3, [r4, #4]
 8005e3e:	6923      	ldr	r3, [r4, #16]
 8005e40:	6023      	str	r3, [r4, #0]
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	f043 0308 	orr.w	r3, r3, #8
 8005e48:	81a3      	strh	r3, [r4, #12]
 8005e4a:	6923      	ldr	r3, [r4, #16]
 8005e4c:	b94b      	cbnz	r3, 8005e62 <__swsetup_r+0x9a>
 8005e4e:	89a3      	ldrh	r3, [r4, #12]
 8005e50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e58:	d003      	beq.n	8005e62 <__swsetup_r+0x9a>
 8005e5a:	4621      	mov	r1, r4
 8005e5c:	4630      	mov	r0, r6
 8005e5e:	f000 f9ff 	bl	8006260 <__smakebuf_r>
 8005e62:	89a0      	ldrh	r0, [r4, #12]
 8005e64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e68:	f010 0301 	ands.w	r3, r0, #1
 8005e6c:	d00a      	beq.n	8005e84 <__swsetup_r+0xbc>
 8005e6e:	2300      	movs	r3, #0
 8005e70:	60a3      	str	r3, [r4, #8]
 8005e72:	6963      	ldr	r3, [r4, #20]
 8005e74:	425b      	negs	r3, r3
 8005e76:	61a3      	str	r3, [r4, #24]
 8005e78:	6923      	ldr	r3, [r4, #16]
 8005e7a:	b943      	cbnz	r3, 8005e8e <__swsetup_r+0xc6>
 8005e7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005e80:	d1ba      	bne.n	8005df8 <__swsetup_r+0x30>
 8005e82:	bd70      	pop	{r4, r5, r6, pc}
 8005e84:	0781      	lsls	r1, r0, #30
 8005e86:	bf58      	it	pl
 8005e88:	6963      	ldrpl	r3, [r4, #20]
 8005e8a:	60a3      	str	r3, [r4, #8]
 8005e8c:	e7f4      	b.n	8005e78 <__swsetup_r+0xb0>
 8005e8e:	2000      	movs	r0, #0
 8005e90:	e7f7      	b.n	8005e82 <__swsetup_r+0xba>
 8005e92:	bf00      	nop
 8005e94:	2000002c 	.word	0x2000002c
 8005e98:	08007114 	.word	0x08007114
 8005e9c:	08007134 	.word	0x08007134
 8005ea0:	080070f4 	.word	0x080070f4

08005ea4 <__sflush_r>:
 8005ea4:	898a      	ldrh	r2, [r1, #12]
 8005ea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eaa:	4605      	mov	r5, r0
 8005eac:	0710      	lsls	r0, r2, #28
 8005eae:	460c      	mov	r4, r1
 8005eb0:	d458      	bmi.n	8005f64 <__sflush_r+0xc0>
 8005eb2:	684b      	ldr	r3, [r1, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dc05      	bgt.n	8005ec4 <__sflush_r+0x20>
 8005eb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	dc02      	bgt.n	8005ec4 <__sflush_r+0x20>
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ec6:	2e00      	cmp	r6, #0
 8005ec8:	d0f9      	beq.n	8005ebe <__sflush_r+0x1a>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005ed0:	682f      	ldr	r7, [r5, #0]
 8005ed2:	602b      	str	r3, [r5, #0]
 8005ed4:	d032      	beq.n	8005f3c <__sflush_r+0x98>
 8005ed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	075a      	lsls	r2, r3, #29
 8005edc:	d505      	bpl.n	8005eea <__sflush_r+0x46>
 8005ede:	6863      	ldr	r3, [r4, #4]
 8005ee0:	1ac0      	subs	r0, r0, r3
 8005ee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ee4:	b10b      	cbz	r3, 8005eea <__sflush_r+0x46>
 8005ee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ee8:	1ac0      	subs	r0, r0, r3
 8005eea:	2300      	movs	r3, #0
 8005eec:	4602      	mov	r2, r0
 8005eee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ef0:	4628      	mov	r0, r5
 8005ef2:	6a21      	ldr	r1, [r4, #32]
 8005ef4:	47b0      	blx	r6
 8005ef6:	1c43      	adds	r3, r0, #1
 8005ef8:	89a3      	ldrh	r3, [r4, #12]
 8005efa:	d106      	bne.n	8005f0a <__sflush_r+0x66>
 8005efc:	6829      	ldr	r1, [r5, #0]
 8005efe:	291d      	cmp	r1, #29
 8005f00:	d82c      	bhi.n	8005f5c <__sflush_r+0xb8>
 8005f02:	4a2a      	ldr	r2, [pc, #168]	; (8005fac <__sflush_r+0x108>)
 8005f04:	40ca      	lsrs	r2, r1
 8005f06:	07d6      	lsls	r6, r2, #31
 8005f08:	d528      	bpl.n	8005f5c <__sflush_r+0xb8>
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	6062      	str	r2, [r4, #4]
 8005f0e:	6922      	ldr	r2, [r4, #16]
 8005f10:	04d9      	lsls	r1, r3, #19
 8005f12:	6022      	str	r2, [r4, #0]
 8005f14:	d504      	bpl.n	8005f20 <__sflush_r+0x7c>
 8005f16:	1c42      	adds	r2, r0, #1
 8005f18:	d101      	bne.n	8005f1e <__sflush_r+0x7a>
 8005f1a:	682b      	ldr	r3, [r5, #0]
 8005f1c:	b903      	cbnz	r3, 8005f20 <__sflush_r+0x7c>
 8005f1e:	6560      	str	r0, [r4, #84]	; 0x54
 8005f20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f22:	602f      	str	r7, [r5, #0]
 8005f24:	2900      	cmp	r1, #0
 8005f26:	d0ca      	beq.n	8005ebe <__sflush_r+0x1a>
 8005f28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f2c:	4299      	cmp	r1, r3
 8005f2e:	d002      	beq.n	8005f36 <__sflush_r+0x92>
 8005f30:	4628      	mov	r0, r5
 8005f32:	f000 f9d5 	bl	80062e0 <_free_r>
 8005f36:	2000      	movs	r0, #0
 8005f38:	6360      	str	r0, [r4, #52]	; 0x34
 8005f3a:	e7c1      	b.n	8005ec0 <__sflush_r+0x1c>
 8005f3c:	6a21      	ldr	r1, [r4, #32]
 8005f3e:	2301      	movs	r3, #1
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b0      	blx	r6
 8005f44:	1c41      	adds	r1, r0, #1
 8005f46:	d1c7      	bne.n	8005ed8 <__sflush_r+0x34>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d0c4      	beq.n	8005ed8 <__sflush_r+0x34>
 8005f4e:	2b1d      	cmp	r3, #29
 8005f50:	d001      	beq.n	8005f56 <__sflush_r+0xb2>
 8005f52:	2b16      	cmp	r3, #22
 8005f54:	d101      	bne.n	8005f5a <__sflush_r+0xb6>
 8005f56:	602f      	str	r7, [r5, #0]
 8005f58:	e7b1      	b.n	8005ebe <__sflush_r+0x1a>
 8005f5a:	89a3      	ldrh	r3, [r4, #12]
 8005f5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f60:	81a3      	strh	r3, [r4, #12]
 8005f62:	e7ad      	b.n	8005ec0 <__sflush_r+0x1c>
 8005f64:	690f      	ldr	r7, [r1, #16]
 8005f66:	2f00      	cmp	r7, #0
 8005f68:	d0a9      	beq.n	8005ebe <__sflush_r+0x1a>
 8005f6a:	0793      	lsls	r3, r2, #30
 8005f6c:	bf18      	it	ne
 8005f6e:	2300      	movne	r3, #0
 8005f70:	680e      	ldr	r6, [r1, #0]
 8005f72:	bf08      	it	eq
 8005f74:	694b      	ldreq	r3, [r1, #20]
 8005f76:	eba6 0807 	sub.w	r8, r6, r7
 8005f7a:	600f      	str	r7, [r1, #0]
 8005f7c:	608b      	str	r3, [r1, #8]
 8005f7e:	f1b8 0f00 	cmp.w	r8, #0
 8005f82:	dd9c      	ble.n	8005ebe <__sflush_r+0x1a>
 8005f84:	4643      	mov	r3, r8
 8005f86:	463a      	mov	r2, r7
 8005f88:	4628      	mov	r0, r5
 8005f8a:	6a21      	ldr	r1, [r4, #32]
 8005f8c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f8e:	47b0      	blx	r6
 8005f90:	2800      	cmp	r0, #0
 8005f92:	dc06      	bgt.n	8005fa2 <__sflush_r+0xfe>
 8005f94:	89a3      	ldrh	r3, [r4, #12]
 8005f96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f9e:	81a3      	strh	r3, [r4, #12]
 8005fa0:	e78e      	b.n	8005ec0 <__sflush_r+0x1c>
 8005fa2:	4407      	add	r7, r0
 8005fa4:	eba8 0800 	sub.w	r8, r8, r0
 8005fa8:	e7e9      	b.n	8005f7e <__sflush_r+0xda>
 8005faa:	bf00      	nop
 8005fac:	20400001 	.word	0x20400001

08005fb0 <_fflush_r>:
 8005fb0:	b538      	push	{r3, r4, r5, lr}
 8005fb2:	690b      	ldr	r3, [r1, #16]
 8005fb4:	4605      	mov	r5, r0
 8005fb6:	460c      	mov	r4, r1
 8005fb8:	b913      	cbnz	r3, 8005fc0 <_fflush_r+0x10>
 8005fba:	2500      	movs	r5, #0
 8005fbc:	4628      	mov	r0, r5
 8005fbe:	bd38      	pop	{r3, r4, r5, pc}
 8005fc0:	b118      	cbz	r0, 8005fca <_fflush_r+0x1a>
 8005fc2:	6983      	ldr	r3, [r0, #24]
 8005fc4:	b90b      	cbnz	r3, 8005fca <_fflush_r+0x1a>
 8005fc6:	f000 f887 	bl	80060d8 <__sinit>
 8005fca:	4b14      	ldr	r3, [pc, #80]	; (800601c <_fflush_r+0x6c>)
 8005fcc:	429c      	cmp	r4, r3
 8005fce:	d11b      	bne.n	8006008 <_fflush_r+0x58>
 8005fd0:	686c      	ldr	r4, [r5, #4]
 8005fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d0ef      	beq.n	8005fba <_fflush_r+0xa>
 8005fda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005fdc:	07d0      	lsls	r0, r2, #31
 8005fde:	d404      	bmi.n	8005fea <_fflush_r+0x3a>
 8005fe0:	0599      	lsls	r1, r3, #22
 8005fe2:	d402      	bmi.n	8005fea <_fflush_r+0x3a>
 8005fe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fe6:	f000 f915 	bl	8006214 <__retarget_lock_acquire_recursive>
 8005fea:	4628      	mov	r0, r5
 8005fec:	4621      	mov	r1, r4
 8005fee:	f7ff ff59 	bl	8005ea4 <__sflush_r>
 8005ff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ff4:	4605      	mov	r5, r0
 8005ff6:	07da      	lsls	r2, r3, #31
 8005ff8:	d4e0      	bmi.n	8005fbc <_fflush_r+0xc>
 8005ffa:	89a3      	ldrh	r3, [r4, #12]
 8005ffc:	059b      	lsls	r3, r3, #22
 8005ffe:	d4dd      	bmi.n	8005fbc <_fflush_r+0xc>
 8006000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006002:	f000 f908 	bl	8006216 <__retarget_lock_release_recursive>
 8006006:	e7d9      	b.n	8005fbc <_fflush_r+0xc>
 8006008:	4b05      	ldr	r3, [pc, #20]	; (8006020 <_fflush_r+0x70>)
 800600a:	429c      	cmp	r4, r3
 800600c:	d101      	bne.n	8006012 <_fflush_r+0x62>
 800600e:	68ac      	ldr	r4, [r5, #8]
 8006010:	e7df      	b.n	8005fd2 <_fflush_r+0x22>
 8006012:	4b04      	ldr	r3, [pc, #16]	; (8006024 <_fflush_r+0x74>)
 8006014:	429c      	cmp	r4, r3
 8006016:	bf08      	it	eq
 8006018:	68ec      	ldreq	r4, [r5, #12]
 800601a:	e7da      	b.n	8005fd2 <_fflush_r+0x22>
 800601c:	08007114 	.word	0x08007114
 8006020:	08007134 	.word	0x08007134
 8006024:	080070f4 	.word	0x080070f4

08006028 <std>:
 8006028:	2300      	movs	r3, #0
 800602a:	b510      	push	{r4, lr}
 800602c:	4604      	mov	r4, r0
 800602e:	e9c0 3300 	strd	r3, r3, [r0]
 8006032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006036:	6083      	str	r3, [r0, #8]
 8006038:	8181      	strh	r1, [r0, #12]
 800603a:	6643      	str	r3, [r0, #100]	; 0x64
 800603c:	81c2      	strh	r2, [r0, #14]
 800603e:	6183      	str	r3, [r0, #24]
 8006040:	4619      	mov	r1, r3
 8006042:	2208      	movs	r2, #8
 8006044:	305c      	adds	r0, #92	; 0x5c
 8006046:	f7ff fcfb 	bl	8005a40 <memset>
 800604a:	4b05      	ldr	r3, [pc, #20]	; (8006060 <std+0x38>)
 800604c:	6224      	str	r4, [r4, #32]
 800604e:	6263      	str	r3, [r4, #36]	; 0x24
 8006050:	4b04      	ldr	r3, [pc, #16]	; (8006064 <std+0x3c>)
 8006052:	62a3      	str	r3, [r4, #40]	; 0x28
 8006054:	4b04      	ldr	r3, [pc, #16]	; (8006068 <std+0x40>)
 8006056:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006058:	4b04      	ldr	r3, [pc, #16]	; (800606c <std+0x44>)
 800605a:	6323      	str	r3, [r4, #48]	; 0x30
 800605c:	bd10      	pop	{r4, pc}
 800605e:	bf00      	nop
 8006060:	08006ce1 	.word	0x08006ce1
 8006064:	08006d03 	.word	0x08006d03
 8006068:	08006d3b 	.word	0x08006d3b
 800606c:	08006d5f 	.word	0x08006d5f

08006070 <_cleanup_r>:
 8006070:	4901      	ldr	r1, [pc, #4]	; (8006078 <_cleanup_r+0x8>)
 8006072:	f000 b8af 	b.w	80061d4 <_fwalk_reent>
 8006076:	bf00      	nop
 8006078:	08005fb1 	.word	0x08005fb1

0800607c <__sfmoreglue>:
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	2568      	movs	r5, #104	; 0x68
 8006080:	1e4a      	subs	r2, r1, #1
 8006082:	4355      	muls	r5, r2
 8006084:	460e      	mov	r6, r1
 8006086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800608a:	f000 f975 	bl	8006378 <_malloc_r>
 800608e:	4604      	mov	r4, r0
 8006090:	b140      	cbz	r0, 80060a4 <__sfmoreglue+0x28>
 8006092:	2100      	movs	r1, #0
 8006094:	e9c0 1600 	strd	r1, r6, [r0]
 8006098:	300c      	adds	r0, #12
 800609a:	60a0      	str	r0, [r4, #8]
 800609c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80060a0:	f7ff fcce 	bl	8005a40 <memset>
 80060a4:	4620      	mov	r0, r4
 80060a6:	bd70      	pop	{r4, r5, r6, pc}

080060a8 <__sfp_lock_acquire>:
 80060a8:	4801      	ldr	r0, [pc, #4]	; (80060b0 <__sfp_lock_acquire+0x8>)
 80060aa:	f000 b8b3 	b.w	8006214 <__retarget_lock_acquire_recursive>
 80060ae:	bf00      	nop
 80060b0:	20000eac 	.word	0x20000eac

080060b4 <__sfp_lock_release>:
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <__sfp_lock_release+0x8>)
 80060b6:	f000 b8ae 	b.w	8006216 <__retarget_lock_release_recursive>
 80060ba:	bf00      	nop
 80060bc:	20000eac 	.word	0x20000eac

080060c0 <__sinit_lock_acquire>:
 80060c0:	4801      	ldr	r0, [pc, #4]	; (80060c8 <__sinit_lock_acquire+0x8>)
 80060c2:	f000 b8a7 	b.w	8006214 <__retarget_lock_acquire_recursive>
 80060c6:	bf00      	nop
 80060c8:	20000ea7 	.word	0x20000ea7

080060cc <__sinit_lock_release>:
 80060cc:	4801      	ldr	r0, [pc, #4]	; (80060d4 <__sinit_lock_release+0x8>)
 80060ce:	f000 b8a2 	b.w	8006216 <__retarget_lock_release_recursive>
 80060d2:	bf00      	nop
 80060d4:	20000ea7 	.word	0x20000ea7

080060d8 <__sinit>:
 80060d8:	b510      	push	{r4, lr}
 80060da:	4604      	mov	r4, r0
 80060dc:	f7ff fff0 	bl	80060c0 <__sinit_lock_acquire>
 80060e0:	69a3      	ldr	r3, [r4, #24]
 80060e2:	b11b      	cbz	r3, 80060ec <__sinit+0x14>
 80060e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e8:	f7ff bff0 	b.w	80060cc <__sinit_lock_release>
 80060ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80060f0:	6523      	str	r3, [r4, #80]	; 0x50
 80060f2:	4b13      	ldr	r3, [pc, #76]	; (8006140 <__sinit+0x68>)
 80060f4:	4a13      	ldr	r2, [pc, #76]	; (8006144 <__sinit+0x6c>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80060fa:	42a3      	cmp	r3, r4
 80060fc:	bf08      	it	eq
 80060fe:	2301      	moveq	r3, #1
 8006100:	4620      	mov	r0, r4
 8006102:	bf08      	it	eq
 8006104:	61a3      	streq	r3, [r4, #24]
 8006106:	f000 f81f 	bl	8006148 <__sfp>
 800610a:	6060      	str	r0, [r4, #4]
 800610c:	4620      	mov	r0, r4
 800610e:	f000 f81b 	bl	8006148 <__sfp>
 8006112:	60a0      	str	r0, [r4, #8]
 8006114:	4620      	mov	r0, r4
 8006116:	f000 f817 	bl	8006148 <__sfp>
 800611a:	2200      	movs	r2, #0
 800611c:	2104      	movs	r1, #4
 800611e:	60e0      	str	r0, [r4, #12]
 8006120:	6860      	ldr	r0, [r4, #4]
 8006122:	f7ff ff81 	bl	8006028 <std>
 8006126:	2201      	movs	r2, #1
 8006128:	2109      	movs	r1, #9
 800612a:	68a0      	ldr	r0, [r4, #8]
 800612c:	f7ff ff7c 	bl	8006028 <std>
 8006130:	2202      	movs	r2, #2
 8006132:	2112      	movs	r1, #18
 8006134:	68e0      	ldr	r0, [r4, #12]
 8006136:	f7ff ff77 	bl	8006028 <std>
 800613a:	2301      	movs	r3, #1
 800613c:	61a3      	str	r3, [r4, #24]
 800613e:	e7d1      	b.n	80060e4 <__sinit+0xc>
 8006140:	08006fec 	.word	0x08006fec
 8006144:	08006071 	.word	0x08006071

08006148 <__sfp>:
 8006148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800614a:	4607      	mov	r7, r0
 800614c:	f7ff ffac 	bl	80060a8 <__sfp_lock_acquire>
 8006150:	4b1e      	ldr	r3, [pc, #120]	; (80061cc <__sfp+0x84>)
 8006152:	681e      	ldr	r6, [r3, #0]
 8006154:	69b3      	ldr	r3, [r6, #24]
 8006156:	b913      	cbnz	r3, 800615e <__sfp+0x16>
 8006158:	4630      	mov	r0, r6
 800615a:	f7ff ffbd 	bl	80060d8 <__sinit>
 800615e:	3648      	adds	r6, #72	; 0x48
 8006160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006164:	3b01      	subs	r3, #1
 8006166:	d503      	bpl.n	8006170 <__sfp+0x28>
 8006168:	6833      	ldr	r3, [r6, #0]
 800616a:	b30b      	cbz	r3, 80061b0 <__sfp+0x68>
 800616c:	6836      	ldr	r6, [r6, #0]
 800616e:	e7f7      	b.n	8006160 <__sfp+0x18>
 8006170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006174:	b9d5      	cbnz	r5, 80061ac <__sfp+0x64>
 8006176:	4b16      	ldr	r3, [pc, #88]	; (80061d0 <__sfp+0x88>)
 8006178:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800617c:	60e3      	str	r3, [r4, #12]
 800617e:	6665      	str	r5, [r4, #100]	; 0x64
 8006180:	f000 f847 	bl	8006212 <__retarget_lock_init_recursive>
 8006184:	f7ff ff96 	bl	80060b4 <__sfp_lock_release>
 8006188:	2208      	movs	r2, #8
 800618a:	4629      	mov	r1, r5
 800618c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006190:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006194:	6025      	str	r5, [r4, #0]
 8006196:	61a5      	str	r5, [r4, #24]
 8006198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800619c:	f7ff fc50 	bl	8005a40 <memset>
 80061a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80061a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80061a8:	4620      	mov	r0, r4
 80061aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061ac:	3468      	adds	r4, #104	; 0x68
 80061ae:	e7d9      	b.n	8006164 <__sfp+0x1c>
 80061b0:	2104      	movs	r1, #4
 80061b2:	4638      	mov	r0, r7
 80061b4:	f7ff ff62 	bl	800607c <__sfmoreglue>
 80061b8:	4604      	mov	r4, r0
 80061ba:	6030      	str	r0, [r6, #0]
 80061bc:	2800      	cmp	r0, #0
 80061be:	d1d5      	bne.n	800616c <__sfp+0x24>
 80061c0:	f7ff ff78 	bl	80060b4 <__sfp_lock_release>
 80061c4:	230c      	movs	r3, #12
 80061c6:	603b      	str	r3, [r7, #0]
 80061c8:	e7ee      	b.n	80061a8 <__sfp+0x60>
 80061ca:	bf00      	nop
 80061cc:	08006fec 	.word	0x08006fec
 80061d0:	ffff0001 	.word	0xffff0001

080061d4 <_fwalk_reent>:
 80061d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061d8:	4606      	mov	r6, r0
 80061da:	4688      	mov	r8, r1
 80061dc:	2700      	movs	r7, #0
 80061de:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80061e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061e6:	f1b9 0901 	subs.w	r9, r9, #1
 80061ea:	d505      	bpl.n	80061f8 <_fwalk_reent+0x24>
 80061ec:	6824      	ldr	r4, [r4, #0]
 80061ee:	2c00      	cmp	r4, #0
 80061f0:	d1f7      	bne.n	80061e2 <_fwalk_reent+0xe>
 80061f2:	4638      	mov	r0, r7
 80061f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061f8:	89ab      	ldrh	r3, [r5, #12]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d907      	bls.n	800620e <_fwalk_reent+0x3a>
 80061fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006202:	3301      	adds	r3, #1
 8006204:	d003      	beq.n	800620e <_fwalk_reent+0x3a>
 8006206:	4629      	mov	r1, r5
 8006208:	4630      	mov	r0, r6
 800620a:	47c0      	blx	r8
 800620c:	4307      	orrs	r7, r0
 800620e:	3568      	adds	r5, #104	; 0x68
 8006210:	e7e9      	b.n	80061e6 <_fwalk_reent+0x12>

08006212 <__retarget_lock_init_recursive>:
 8006212:	4770      	bx	lr

08006214 <__retarget_lock_acquire_recursive>:
 8006214:	4770      	bx	lr

08006216 <__retarget_lock_release_recursive>:
 8006216:	4770      	bx	lr

08006218 <__swhatbuf_r>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	460e      	mov	r6, r1
 800621c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006220:	4614      	mov	r4, r2
 8006222:	2900      	cmp	r1, #0
 8006224:	461d      	mov	r5, r3
 8006226:	b096      	sub	sp, #88	; 0x58
 8006228:	da07      	bge.n	800623a <__swhatbuf_r+0x22>
 800622a:	2300      	movs	r3, #0
 800622c:	602b      	str	r3, [r5, #0]
 800622e:	89b3      	ldrh	r3, [r6, #12]
 8006230:	061a      	lsls	r2, r3, #24
 8006232:	d410      	bmi.n	8006256 <__swhatbuf_r+0x3e>
 8006234:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006238:	e00e      	b.n	8006258 <__swhatbuf_r+0x40>
 800623a:	466a      	mov	r2, sp
 800623c:	f000 fdb6 	bl	8006dac <_fstat_r>
 8006240:	2800      	cmp	r0, #0
 8006242:	dbf2      	blt.n	800622a <__swhatbuf_r+0x12>
 8006244:	9a01      	ldr	r2, [sp, #4]
 8006246:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800624a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800624e:	425a      	negs	r2, r3
 8006250:	415a      	adcs	r2, r3
 8006252:	602a      	str	r2, [r5, #0]
 8006254:	e7ee      	b.n	8006234 <__swhatbuf_r+0x1c>
 8006256:	2340      	movs	r3, #64	; 0x40
 8006258:	2000      	movs	r0, #0
 800625a:	6023      	str	r3, [r4, #0]
 800625c:	b016      	add	sp, #88	; 0x58
 800625e:	bd70      	pop	{r4, r5, r6, pc}

08006260 <__smakebuf_r>:
 8006260:	898b      	ldrh	r3, [r1, #12]
 8006262:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006264:	079d      	lsls	r5, r3, #30
 8006266:	4606      	mov	r6, r0
 8006268:	460c      	mov	r4, r1
 800626a:	d507      	bpl.n	800627c <__smakebuf_r+0x1c>
 800626c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006270:	6023      	str	r3, [r4, #0]
 8006272:	6123      	str	r3, [r4, #16]
 8006274:	2301      	movs	r3, #1
 8006276:	6163      	str	r3, [r4, #20]
 8006278:	b002      	add	sp, #8
 800627a:	bd70      	pop	{r4, r5, r6, pc}
 800627c:	466a      	mov	r2, sp
 800627e:	ab01      	add	r3, sp, #4
 8006280:	f7ff ffca 	bl	8006218 <__swhatbuf_r>
 8006284:	9900      	ldr	r1, [sp, #0]
 8006286:	4605      	mov	r5, r0
 8006288:	4630      	mov	r0, r6
 800628a:	f000 f875 	bl	8006378 <_malloc_r>
 800628e:	b948      	cbnz	r0, 80062a4 <__smakebuf_r+0x44>
 8006290:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006294:	059a      	lsls	r2, r3, #22
 8006296:	d4ef      	bmi.n	8006278 <__smakebuf_r+0x18>
 8006298:	f023 0303 	bic.w	r3, r3, #3
 800629c:	f043 0302 	orr.w	r3, r3, #2
 80062a0:	81a3      	strh	r3, [r4, #12]
 80062a2:	e7e3      	b.n	800626c <__smakebuf_r+0xc>
 80062a4:	4b0d      	ldr	r3, [pc, #52]	; (80062dc <__smakebuf_r+0x7c>)
 80062a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80062a8:	89a3      	ldrh	r3, [r4, #12]
 80062aa:	6020      	str	r0, [r4, #0]
 80062ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062b0:	81a3      	strh	r3, [r4, #12]
 80062b2:	9b00      	ldr	r3, [sp, #0]
 80062b4:	6120      	str	r0, [r4, #16]
 80062b6:	6163      	str	r3, [r4, #20]
 80062b8:	9b01      	ldr	r3, [sp, #4]
 80062ba:	b15b      	cbz	r3, 80062d4 <__smakebuf_r+0x74>
 80062bc:	4630      	mov	r0, r6
 80062be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062c2:	f000 fd85 	bl	8006dd0 <_isatty_r>
 80062c6:	b128      	cbz	r0, 80062d4 <__smakebuf_r+0x74>
 80062c8:	89a3      	ldrh	r3, [r4, #12]
 80062ca:	f023 0303 	bic.w	r3, r3, #3
 80062ce:	f043 0301 	orr.w	r3, r3, #1
 80062d2:	81a3      	strh	r3, [r4, #12]
 80062d4:	89a0      	ldrh	r0, [r4, #12]
 80062d6:	4305      	orrs	r5, r0
 80062d8:	81a5      	strh	r5, [r4, #12]
 80062da:	e7cd      	b.n	8006278 <__smakebuf_r+0x18>
 80062dc:	08006071 	.word	0x08006071

080062e0 <_free_r>:
 80062e0:	b538      	push	{r3, r4, r5, lr}
 80062e2:	4605      	mov	r5, r0
 80062e4:	2900      	cmp	r1, #0
 80062e6:	d043      	beq.n	8006370 <_free_r+0x90>
 80062e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062ec:	1f0c      	subs	r4, r1, #4
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	bfb8      	it	lt
 80062f2:	18e4      	addlt	r4, r4, r3
 80062f4:	f000 fdb6 	bl	8006e64 <__malloc_lock>
 80062f8:	4a1e      	ldr	r2, [pc, #120]	; (8006374 <_free_r+0x94>)
 80062fa:	6813      	ldr	r3, [r2, #0]
 80062fc:	4610      	mov	r0, r2
 80062fe:	b933      	cbnz	r3, 800630e <_free_r+0x2e>
 8006300:	6063      	str	r3, [r4, #4]
 8006302:	6014      	str	r4, [r2, #0]
 8006304:	4628      	mov	r0, r5
 8006306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800630a:	f000 bdb1 	b.w	8006e70 <__malloc_unlock>
 800630e:	42a3      	cmp	r3, r4
 8006310:	d90a      	bls.n	8006328 <_free_r+0x48>
 8006312:	6821      	ldr	r1, [r4, #0]
 8006314:	1862      	adds	r2, r4, r1
 8006316:	4293      	cmp	r3, r2
 8006318:	bf01      	itttt	eq
 800631a:	681a      	ldreq	r2, [r3, #0]
 800631c:	685b      	ldreq	r3, [r3, #4]
 800631e:	1852      	addeq	r2, r2, r1
 8006320:	6022      	streq	r2, [r4, #0]
 8006322:	6063      	str	r3, [r4, #4]
 8006324:	6004      	str	r4, [r0, #0]
 8006326:	e7ed      	b.n	8006304 <_free_r+0x24>
 8006328:	461a      	mov	r2, r3
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	b10b      	cbz	r3, 8006332 <_free_r+0x52>
 800632e:	42a3      	cmp	r3, r4
 8006330:	d9fa      	bls.n	8006328 <_free_r+0x48>
 8006332:	6811      	ldr	r1, [r2, #0]
 8006334:	1850      	adds	r0, r2, r1
 8006336:	42a0      	cmp	r0, r4
 8006338:	d10b      	bne.n	8006352 <_free_r+0x72>
 800633a:	6820      	ldr	r0, [r4, #0]
 800633c:	4401      	add	r1, r0
 800633e:	1850      	adds	r0, r2, r1
 8006340:	4283      	cmp	r3, r0
 8006342:	6011      	str	r1, [r2, #0]
 8006344:	d1de      	bne.n	8006304 <_free_r+0x24>
 8006346:	6818      	ldr	r0, [r3, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	4401      	add	r1, r0
 800634c:	6011      	str	r1, [r2, #0]
 800634e:	6053      	str	r3, [r2, #4]
 8006350:	e7d8      	b.n	8006304 <_free_r+0x24>
 8006352:	d902      	bls.n	800635a <_free_r+0x7a>
 8006354:	230c      	movs	r3, #12
 8006356:	602b      	str	r3, [r5, #0]
 8006358:	e7d4      	b.n	8006304 <_free_r+0x24>
 800635a:	6820      	ldr	r0, [r4, #0]
 800635c:	1821      	adds	r1, r4, r0
 800635e:	428b      	cmp	r3, r1
 8006360:	bf01      	itttt	eq
 8006362:	6819      	ldreq	r1, [r3, #0]
 8006364:	685b      	ldreq	r3, [r3, #4]
 8006366:	1809      	addeq	r1, r1, r0
 8006368:	6021      	streq	r1, [r4, #0]
 800636a:	6063      	str	r3, [r4, #4]
 800636c:	6054      	str	r4, [r2, #4]
 800636e:	e7c9      	b.n	8006304 <_free_r+0x24>
 8006370:	bd38      	pop	{r3, r4, r5, pc}
 8006372:	bf00      	nop
 8006374:	20000df0 	.word	0x20000df0

08006378 <_malloc_r>:
 8006378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637a:	1ccd      	adds	r5, r1, #3
 800637c:	f025 0503 	bic.w	r5, r5, #3
 8006380:	3508      	adds	r5, #8
 8006382:	2d0c      	cmp	r5, #12
 8006384:	bf38      	it	cc
 8006386:	250c      	movcc	r5, #12
 8006388:	2d00      	cmp	r5, #0
 800638a:	4606      	mov	r6, r0
 800638c:	db01      	blt.n	8006392 <_malloc_r+0x1a>
 800638e:	42a9      	cmp	r1, r5
 8006390:	d903      	bls.n	800639a <_malloc_r+0x22>
 8006392:	230c      	movs	r3, #12
 8006394:	6033      	str	r3, [r6, #0]
 8006396:	2000      	movs	r0, #0
 8006398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800639a:	f000 fd63 	bl	8006e64 <__malloc_lock>
 800639e:	4921      	ldr	r1, [pc, #132]	; (8006424 <_malloc_r+0xac>)
 80063a0:	680a      	ldr	r2, [r1, #0]
 80063a2:	4614      	mov	r4, r2
 80063a4:	b99c      	cbnz	r4, 80063ce <_malloc_r+0x56>
 80063a6:	4f20      	ldr	r7, [pc, #128]	; (8006428 <_malloc_r+0xb0>)
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	b923      	cbnz	r3, 80063b6 <_malloc_r+0x3e>
 80063ac:	4621      	mov	r1, r4
 80063ae:	4630      	mov	r0, r6
 80063b0:	f000 fc86 	bl	8006cc0 <_sbrk_r>
 80063b4:	6038      	str	r0, [r7, #0]
 80063b6:	4629      	mov	r1, r5
 80063b8:	4630      	mov	r0, r6
 80063ba:	f000 fc81 	bl	8006cc0 <_sbrk_r>
 80063be:	1c43      	adds	r3, r0, #1
 80063c0:	d123      	bne.n	800640a <_malloc_r+0x92>
 80063c2:	230c      	movs	r3, #12
 80063c4:	4630      	mov	r0, r6
 80063c6:	6033      	str	r3, [r6, #0]
 80063c8:	f000 fd52 	bl	8006e70 <__malloc_unlock>
 80063cc:	e7e3      	b.n	8006396 <_malloc_r+0x1e>
 80063ce:	6823      	ldr	r3, [r4, #0]
 80063d0:	1b5b      	subs	r3, r3, r5
 80063d2:	d417      	bmi.n	8006404 <_malloc_r+0x8c>
 80063d4:	2b0b      	cmp	r3, #11
 80063d6:	d903      	bls.n	80063e0 <_malloc_r+0x68>
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	441c      	add	r4, r3
 80063dc:	6025      	str	r5, [r4, #0]
 80063de:	e004      	b.n	80063ea <_malloc_r+0x72>
 80063e0:	6863      	ldr	r3, [r4, #4]
 80063e2:	42a2      	cmp	r2, r4
 80063e4:	bf0c      	ite	eq
 80063e6:	600b      	streq	r3, [r1, #0]
 80063e8:	6053      	strne	r3, [r2, #4]
 80063ea:	4630      	mov	r0, r6
 80063ec:	f000 fd40 	bl	8006e70 <__malloc_unlock>
 80063f0:	f104 000b 	add.w	r0, r4, #11
 80063f4:	1d23      	adds	r3, r4, #4
 80063f6:	f020 0007 	bic.w	r0, r0, #7
 80063fa:	1ac2      	subs	r2, r0, r3
 80063fc:	d0cc      	beq.n	8006398 <_malloc_r+0x20>
 80063fe:	1a1b      	subs	r3, r3, r0
 8006400:	50a3      	str	r3, [r4, r2]
 8006402:	e7c9      	b.n	8006398 <_malloc_r+0x20>
 8006404:	4622      	mov	r2, r4
 8006406:	6864      	ldr	r4, [r4, #4]
 8006408:	e7cc      	b.n	80063a4 <_malloc_r+0x2c>
 800640a:	1cc4      	adds	r4, r0, #3
 800640c:	f024 0403 	bic.w	r4, r4, #3
 8006410:	42a0      	cmp	r0, r4
 8006412:	d0e3      	beq.n	80063dc <_malloc_r+0x64>
 8006414:	1a21      	subs	r1, r4, r0
 8006416:	4630      	mov	r0, r6
 8006418:	f000 fc52 	bl	8006cc0 <_sbrk_r>
 800641c:	3001      	adds	r0, #1
 800641e:	d1dd      	bne.n	80063dc <_malloc_r+0x64>
 8006420:	e7cf      	b.n	80063c2 <_malloc_r+0x4a>
 8006422:	bf00      	nop
 8006424:	20000df0 	.word	0x20000df0
 8006428:	20000df4 	.word	0x20000df4

0800642c <__ssputs_r>:
 800642c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006430:	688e      	ldr	r6, [r1, #8]
 8006432:	4682      	mov	sl, r0
 8006434:	429e      	cmp	r6, r3
 8006436:	460c      	mov	r4, r1
 8006438:	4690      	mov	r8, r2
 800643a:	461f      	mov	r7, r3
 800643c:	d838      	bhi.n	80064b0 <__ssputs_r+0x84>
 800643e:	898a      	ldrh	r2, [r1, #12]
 8006440:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006444:	d032      	beq.n	80064ac <__ssputs_r+0x80>
 8006446:	6825      	ldr	r5, [r4, #0]
 8006448:	6909      	ldr	r1, [r1, #16]
 800644a:	3301      	adds	r3, #1
 800644c:	eba5 0901 	sub.w	r9, r5, r1
 8006450:	6965      	ldr	r5, [r4, #20]
 8006452:	444b      	add	r3, r9
 8006454:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006458:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800645c:	106d      	asrs	r5, r5, #1
 800645e:	429d      	cmp	r5, r3
 8006460:	bf38      	it	cc
 8006462:	461d      	movcc	r5, r3
 8006464:	0553      	lsls	r3, r2, #21
 8006466:	d531      	bpl.n	80064cc <__ssputs_r+0xa0>
 8006468:	4629      	mov	r1, r5
 800646a:	f7ff ff85 	bl	8006378 <_malloc_r>
 800646e:	4606      	mov	r6, r0
 8006470:	b950      	cbnz	r0, 8006488 <__ssputs_r+0x5c>
 8006472:	230c      	movs	r3, #12
 8006474:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006478:	f8ca 3000 	str.w	r3, [sl]
 800647c:	89a3      	ldrh	r3, [r4, #12]
 800647e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006482:	81a3      	strh	r3, [r4, #12]
 8006484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006488:	464a      	mov	r2, r9
 800648a:	6921      	ldr	r1, [r4, #16]
 800648c:	f7ff faca 	bl	8005a24 <memcpy>
 8006490:	89a3      	ldrh	r3, [r4, #12]
 8006492:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006496:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800649a:	81a3      	strh	r3, [r4, #12]
 800649c:	6126      	str	r6, [r4, #16]
 800649e:	444e      	add	r6, r9
 80064a0:	6026      	str	r6, [r4, #0]
 80064a2:	463e      	mov	r6, r7
 80064a4:	6165      	str	r5, [r4, #20]
 80064a6:	eba5 0509 	sub.w	r5, r5, r9
 80064aa:	60a5      	str	r5, [r4, #8]
 80064ac:	42be      	cmp	r6, r7
 80064ae:	d900      	bls.n	80064b2 <__ssputs_r+0x86>
 80064b0:	463e      	mov	r6, r7
 80064b2:	4632      	mov	r2, r6
 80064b4:	4641      	mov	r1, r8
 80064b6:	6820      	ldr	r0, [r4, #0]
 80064b8:	f000 fcba 	bl	8006e30 <memmove>
 80064bc:	68a3      	ldr	r3, [r4, #8]
 80064be:	6822      	ldr	r2, [r4, #0]
 80064c0:	1b9b      	subs	r3, r3, r6
 80064c2:	4432      	add	r2, r6
 80064c4:	2000      	movs	r0, #0
 80064c6:	60a3      	str	r3, [r4, #8]
 80064c8:	6022      	str	r2, [r4, #0]
 80064ca:	e7db      	b.n	8006484 <__ssputs_r+0x58>
 80064cc:	462a      	mov	r2, r5
 80064ce:	f000 fcd5 	bl	8006e7c <_realloc_r>
 80064d2:	4606      	mov	r6, r0
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d1e1      	bne.n	800649c <__ssputs_r+0x70>
 80064d8:	4650      	mov	r0, sl
 80064da:	6921      	ldr	r1, [r4, #16]
 80064dc:	f7ff ff00 	bl	80062e0 <_free_r>
 80064e0:	e7c7      	b.n	8006472 <__ssputs_r+0x46>
	...

080064e4 <_svfiprintf_r>:
 80064e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e8:	4698      	mov	r8, r3
 80064ea:	898b      	ldrh	r3, [r1, #12]
 80064ec:	4607      	mov	r7, r0
 80064ee:	061b      	lsls	r3, r3, #24
 80064f0:	460d      	mov	r5, r1
 80064f2:	4614      	mov	r4, r2
 80064f4:	b09d      	sub	sp, #116	; 0x74
 80064f6:	d50e      	bpl.n	8006516 <_svfiprintf_r+0x32>
 80064f8:	690b      	ldr	r3, [r1, #16]
 80064fa:	b963      	cbnz	r3, 8006516 <_svfiprintf_r+0x32>
 80064fc:	2140      	movs	r1, #64	; 0x40
 80064fe:	f7ff ff3b 	bl	8006378 <_malloc_r>
 8006502:	6028      	str	r0, [r5, #0]
 8006504:	6128      	str	r0, [r5, #16]
 8006506:	b920      	cbnz	r0, 8006512 <_svfiprintf_r+0x2e>
 8006508:	230c      	movs	r3, #12
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006510:	e0d1      	b.n	80066b6 <_svfiprintf_r+0x1d2>
 8006512:	2340      	movs	r3, #64	; 0x40
 8006514:	616b      	str	r3, [r5, #20]
 8006516:	2300      	movs	r3, #0
 8006518:	9309      	str	r3, [sp, #36]	; 0x24
 800651a:	2320      	movs	r3, #32
 800651c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006520:	2330      	movs	r3, #48	; 0x30
 8006522:	f04f 0901 	mov.w	r9, #1
 8006526:	f8cd 800c 	str.w	r8, [sp, #12]
 800652a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80066d0 <_svfiprintf_r+0x1ec>
 800652e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006532:	4623      	mov	r3, r4
 8006534:	469a      	mov	sl, r3
 8006536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800653a:	b10a      	cbz	r2, 8006540 <_svfiprintf_r+0x5c>
 800653c:	2a25      	cmp	r2, #37	; 0x25
 800653e:	d1f9      	bne.n	8006534 <_svfiprintf_r+0x50>
 8006540:	ebba 0b04 	subs.w	fp, sl, r4
 8006544:	d00b      	beq.n	800655e <_svfiprintf_r+0x7a>
 8006546:	465b      	mov	r3, fp
 8006548:	4622      	mov	r2, r4
 800654a:	4629      	mov	r1, r5
 800654c:	4638      	mov	r0, r7
 800654e:	f7ff ff6d 	bl	800642c <__ssputs_r>
 8006552:	3001      	adds	r0, #1
 8006554:	f000 80aa 	beq.w	80066ac <_svfiprintf_r+0x1c8>
 8006558:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800655a:	445a      	add	r2, fp
 800655c:	9209      	str	r2, [sp, #36]	; 0x24
 800655e:	f89a 3000 	ldrb.w	r3, [sl]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 80a2 	beq.w	80066ac <_svfiprintf_r+0x1c8>
 8006568:	2300      	movs	r3, #0
 800656a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800656e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006572:	f10a 0a01 	add.w	sl, sl, #1
 8006576:	9304      	str	r3, [sp, #16]
 8006578:	9307      	str	r3, [sp, #28]
 800657a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800657e:	931a      	str	r3, [sp, #104]	; 0x68
 8006580:	4654      	mov	r4, sl
 8006582:	2205      	movs	r2, #5
 8006584:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006588:	4851      	ldr	r0, [pc, #324]	; (80066d0 <_svfiprintf_r+0x1ec>)
 800658a:	f000 fc43 	bl	8006e14 <memchr>
 800658e:	9a04      	ldr	r2, [sp, #16]
 8006590:	b9d8      	cbnz	r0, 80065ca <_svfiprintf_r+0xe6>
 8006592:	06d0      	lsls	r0, r2, #27
 8006594:	bf44      	itt	mi
 8006596:	2320      	movmi	r3, #32
 8006598:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800659c:	0711      	lsls	r1, r2, #28
 800659e:	bf44      	itt	mi
 80065a0:	232b      	movmi	r3, #43	; 0x2b
 80065a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065a6:	f89a 3000 	ldrb.w	r3, [sl]
 80065aa:	2b2a      	cmp	r3, #42	; 0x2a
 80065ac:	d015      	beq.n	80065da <_svfiprintf_r+0xf6>
 80065ae:	4654      	mov	r4, sl
 80065b0:	2000      	movs	r0, #0
 80065b2:	f04f 0c0a 	mov.w	ip, #10
 80065b6:	9a07      	ldr	r2, [sp, #28]
 80065b8:	4621      	mov	r1, r4
 80065ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065be:	3b30      	subs	r3, #48	; 0x30
 80065c0:	2b09      	cmp	r3, #9
 80065c2:	d94e      	bls.n	8006662 <_svfiprintf_r+0x17e>
 80065c4:	b1b0      	cbz	r0, 80065f4 <_svfiprintf_r+0x110>
 80065c6:	9207      	str	r2, [sp, #28]
 80065c8:	e014      	b.n	80065f4 <_svfiprintf_r+0x110>
 80065ca:	eba0 0308 	sub.w	r3, r0, r8
 80065ce:	fa09 f303 	lsl.w	r3, r9, r3
 80065d2:	4313      	orrs	r3, r2
 80065d4:	46a2      	mov	sl, r4
 80065d6:	9304      	str	r3, [sp, #16]
 80065d8:	e7d2      	b.n	8006580 <_svfiprintf_r+0x9c>
 80065da:	9b03      	ldr	r3, [sp, #12]
 80065dc:	1d19      	adds	r1, r3, #4
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	9103      	str	r1, [sp, #12]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bfbb      	ittet	lt
 80065e6:	425b      	neglt	r3, r3
 80065e8:	f042 0202 	orrlt.w	r2, r2, #2
 80065ec:	9307      	strge	r3, [sp, #28]
 80065ee:	9307      	strlt	r3, [sp, #28]
 80065f0:	bfb8      	it	lt
 80065f2:	9204      	strlt	r2, [sp, #16]
 80065f4:	7823      	ldrb	r3, [r4, #0]
 80065f6:	2b2e      	cmp	r3, #46	; 0x2e
 80065f8:	d10c      	bne.n	8006614 <_svfiprintf_r+0x130>
 80065fa:	7863      	ldrb	r3, [r4, #1]
 80065fc:	2b2a      	cmp	r3, #42	; 0x2a
 80065fe:	d135      	bne.n	800666c <_svfiprintf_r+0x188>
 8006600:	9b03      	ldr	r3, [sp, #12]
 8006602:	3402      	adds	r4, #2
 8006604:	1d1a      	adds	r2, r3, #4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	9203      	str	r2, [sp, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	bfb8      	it	lt
 800660e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006612:	9305      	str	r3, [sp, #20]
 8006614:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80066e0 <_svfiprintf_r+0x1fc>
 8006618:	2203      	movs	r2, #3
 800661a:	4650      	mov	r0, sl
 800661c:	7821      	ldrb	r1, [r4, #0]
 800661e:	f000 fbf9 	bl	8006e14 <memchr>
 8006622:	b140      	cbz	r0, 8006636 <_svfiprintf_r+0x152>
 8006624:	2340      	movs	r3, #64	; 0x40
 8006626:	eba0 000a 	sub.w	r0, r0, sl
 800662a:	fa03 f000 	lsl.w	r0, r3, r0
 800662e:	9b04      	ldr	r3, [sp, #16]
 8006630:	3401      	adds	r4, #1
 8006632:	4303      	orrs	r3, r0
 8006634:	9304      	str	r3, [sp, #16]
 8006636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800663a:	2206      	movs	r2, #6
 800663c:	4825      	ldr	r0, [pc, #148]	; (80066d4 <_svfiprintf_r+0x1f0>)
 800663e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006642:	f000 fbe7 	bl	8006e14 <memchr>
 8006646:	2800      	cmp	r0, #0
 8006648:	d038      	beq.n	80066bc <_svfiprintf_r+0x1d8>
 800664a:	4b23      	ldr	r3, [pc, #140]	; (80066d8 <_svfiprintf_r+0x1f4>)
 800664c:	bb1b      	cbnz	r3, 8006696 <_svfiprintf_r+0x1b2>
 800664e:	9b03      	ldr	r3, [sp, #12]
 8006650:	3307      	adds	r3, #7
 8006652:	f023 0307 	bic.w	r3, r3, #7
 8006656:	3308      	adds	r3, #8
 8006658:	9303      	str	r3, [sp, #12]
 800665a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800665c:	4433      	add	r3, r6
 800665e:	9309      	str	r3, [sp, #36]	; 0x24
 8006660:	e767      	b.n	8006532 <_svfiprintf_r+0x4e>
 8006662:	460c      	mov	r4, r1
 8006664:	2001      	movs	r0, #1
 8006666:	fb0c 3202 	mla	r2, ip, r2, r3
 800666a:	e7a5      	b.n	80065b8 <_svfiprintf_r+0xd4>
 800666c:	2300      	movs	r3, #0
 800666e:	f04f 0c0a 	mov.w	ip, #10
 8006672:	4619      	mov	r1, r3
 8006674:	3401      	adds	r4, #1
 8006676:	9305      	str	r3, [sp, #20]
 8006678:	4620      	mov	r0, r4
 800667a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800667e:	3a30      	subs	r2, #48	; 0x30
 8006680:	2a09      	cmp	r2, #9
 8006682:	d903      	bls.n	800668c <_svfiprintf_r+0x1a8>
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0c5      	beq.n	8006614 <_svfiprintf_r+0x130>
 8006688:	9105      	str	r1, [sp, #20]
 800668a:	e7c3      	b.n	8006614 <_svfiprintf_r+0x130>
 800668c:	4604      	mov	r4, r0
 800668e:	2301      	movs	r3, #1
 8006690:	fb0c 2101 	mla	r1, ip, r1, r2
 8006694:	e7f0      	b.n	8006678 <_svfiprintf_r+0x194>
 8006696:	ab03      	add	r3, sp, #12
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	462a      	mov	r2, r5
 800669c:	4638      	mov	r0, r7
 800669e:	4b0f      	ldr	r3, [pc, #60]	; (80066dc <_svfiprintf_r+0x1f8>)
 80066a0:	a904      	add	r1, sp, #16
 80066a2:	f3af 8000 	nop.w
 80066a6:	1c42      	adds	r2, r0, #1
 80066a8:	4606      	mov	r6, r0
 80066aa:	d1d6      	bne.n	800665a <_svfiprintf_r+0x176>
 80066ac:	89ab      	ldrh	r3, [r5, #12]
 80066ae:	065b      	lsls	r3, r3, #25
 80066b0:	f53f af2c 	bmi.w	800650c <_svfiprintf_r+0x28>
 80066b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066b6:	b01d      	add	sp, #116	; 0x74
 80066b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066bc:	ab03      	add	r3, sp, #12
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	462a      	mov	r2, r5
 80066c2:	4638      	mov	r0, r7
 80066c4:	4b05      	ldr	r3, [pc, #20]	; (80066dc <_svfiprintf_r+0x1f8>)
 80066c6:	a904      	add	r1, sp, #16
 80066c8:	f000 f9d4 	bl	8006a74 <_printf_i>
 80066cc:	e7eb      	b.n	80066a6 <_svfiprintf_r+0x1c2>
 80066ce:	bf00      	nop
 80066d0:	08007154 	.word	0x08007154
 80066d4:	0800715e 	.word	0x0800715e
 80066d8:	00000000 	.word	0x00000000
 80066dc:	0800642d 	.word	0x0800642d
 80066e0:	0800715a 	.word	0x0800715a

080066e4 <__sfputc_r>:
 80066e4:	6893      	ldr	r3, [r2, #8]
 80066e6:	b410      	push	{r4}
 80066e8:	3b01      	subs	r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	6093      	str	r3, [r2, #8]
 80066ee:	da07      	bge.n	8006700 <__sfputc_r+0x1c>
 80066f0:	6994      	ldr	r4, [r2, #24]
 80066f2:	42a3      	cmp	r3, r4
 80066f4:	db01      	blt.n	80066fa <__sfputc_r+0x16>
 80066f6:	290a      	cmp	r1, #10
 80066f8:	d102      	bne.n	8006700 <__sfputc_r+0x1c>
 80066fa:	bc10      	pop	{r4}
 80066fc:	f7ff bb12 	b.w	8005d24 <__swbuf_r>
 8006700:	6813      	ldr	r3, [r2, #0]
 8006702:	1c58      	adds	r0, r3, #1
 8006704:	6010      	str	r0, [r2, #0]
 8006706:	7019      	strb	r1, [r3, #0]
 8006708:	4608      	mov	r0, r1
 800670a:	bc10      	pop	{r4}
 800670c:	4770      	bx	lr

0800670e <__sfputs_r>:
 800670e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006710:	4606      	mov	r6, r0
 8006712:	460f      	mov	r7, r1
 8006714:	4614      	mov	r4, r2
 8006716:	18d5      	adds	r5, r2, r3
 8006718:	42ac      	cmp	r4, r5
 800671a:	d101      	bne.n	8006720 <__sfputs_r+0x12>
 800671c:	2000      	movs	r0, #0
 800671e:	e007      	b.n	8006730 <__sfputs_r+0x22>
 8006720:	463a      	mov	r2, r7
 8006722:	4630      	mov	r0, r6
 8006724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006728:	f7ff ffdc 	bl	80066e4 <__sfputc_r>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d1f3      	bne.n	8006718 <__sfputs_r+0xa>
 8006730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006734 <_vfiprintf_r>:
 8006734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006738:	460d      	mov	r5, r1
 800673a:	4614      	mov	r4, r2
 800673c:	4698      	mov	r8, r3
 800673e:	4606      	mov	r6, r0
 8006740:	b09d      	sub	sp, #116	; 0x74
 8006742:	b118      	cbz	r0, 800674c <_vfiprintf_r+0x18>
 8006744:	6983      	ldr	r3, [r0, #24]
 8006746:	b90b      	cbnz	r3, 800674c <_vfiprintf_r+0x18>
 8006748:	f7ff fcc6 	bl	80060d8 <__sinit>
 800674c:	4b89      	ldr	r3, [pc, #548]	; (8006974 <_vfiprintf_r+0x240>)
 800674e:	429d      	cmp	r5, r3
 8006750:	d11b      	bne.n	800678a <_vfiprintf_r+0x56>
 8006752:	6875      	ldr	r5, [r6, #4]
 8006754:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006756:	07d9      	lsls	r1, r3, #31
 8006758:	d405      	bmi.n	8006766 <_vfiprintf_r+0x32>
 800675a:	89ab      	ldrh	r3, [r5, #12]
 800675c:	059a      	lsls	r2, r3, #22
 800675e:	d402      	bmi.n	8006766 <_vfiprintf_r+0x32>
 8006760:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006762:	f7ff fd57 	bl	8006214 <__retarget_lock_acquire_recursive>
 8006766:	89ab      	ldrh	r3, [r5, #12]
 8006768:	071b      	lsls	r3, r3, #28
 800676a:	d501      	bpl.n	8006770 <_vfiprintf_r+0x3c>
 800676c:	692b      	ldr	r3, [r5, #16]
 800676e:	b9eb      	cbnz	r3, 80067ac <_vfiprintf_r+0x78>
 8006770:	4629      	mov	r1, r5
 8006772:	4630      	mov	r0, r6
 8006774:	f7ff fb28 	bl	8005dc8 <__swsetup_r>
 8006778:	b1c0      	cbz	r0, 80067ac <_vfiprintf_r+0x78>
 800677a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800677c:	07dc      	lsls	r4, r3, #31
 800677e:	d50e      	bpl.n	800679e <_vfiprintf_r+0x6a>
 8006780:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006784:	b01d      	add	sp, #116	; 0x74
 8006786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800678a:	4b7b      	ldr	r3, [pc, #492]	; (8006978 <_vfiprintf_r+0x244>)
 800678c:	429d      	cmp	r5, r3
 800678e:	d101      	bne.n	8006794 <_vfiprintf_r+0x60>
 8006790:	68b5      	ldr	r5, [r6, #8]
 8006792:	e7df      	b.n	8006754 <_vfiprintf_r+0x20>
 8006794:	4b79      	ldr	r3, [pc, #484]	; (800697c <_vfiprintf_r+0x248>)
 8006796:	429d      	cmp	r5, r3
 8006798:	bf08      	it	eq
 800679a:	68f5      	ldreq	r5, [r6, #12]
 800679c:	e7da      	b.n	8006754 <_vfiprintf_r+0x20>
 800679e:	89ab      	ldrh	r3, [r5, #12]
 80067a0:	0598      	lsls	r0, r3, #22
 80067a2:	d4ed      	bmi.n	8006780 <_vfiprintf_r+0x4c>
 80067a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067a6:	f7ff fd36 	bl	8006216 <__retarget_lock_release_recursive>
 80067aa:	e7e9      	b.n	8006780 <_vfiprintf_r+0x4c>
 80067ac:	2300      	movs	r3, #0
 80067ae:	9309      	str	r3, [sp, #36]	; 0x24
 80067b0:	2320      	movs	r3, #32
 80067b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067b6:	2330      	movs	r3, #48	; 0x30
 80067b8:	f04f 0901 	mov.w	r9, #1
 80067bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80067c0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006980 <_vfiprintf_r+0x24c>
 80067c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067c8:	4623      	mov	r3, r4
 80067ca:	469a      	mov	sl, r3
 80067cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067d0:	b10a      	cbz	r2, 80067d6 <_vfiprintf_r+0xa2>
 80067d2:	2a25      	cmp	r2, #37	; 0x25
 80067d4:	d1f9      	bne.n	80067ca <_vfiprintf_r+0x96>
 80067d6:	ebba 0b04 	subs.w	fp, sl, r4
 80067da:	d00b      	beq.n	80067f4 <_vfiprintf_r+0xc0>
 80067dc:	465b      	mov	r3, fp
 80067de:	4622      	mov	r2, r4
 80067e0:	4629      	mov	r1, r5
 80067e2:	4630      	mov	r0, r6
 80067e4:	f7ff ff93 	bl	800670e <__sfputs_r>
 80067e8:	3001      	adds	r0, #1
 80067ea:	f000 80aa 	beq.w	8006942 <_vfiprintf_r+0x20e>
 80067ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067f0:	445a      	add	r2, fp
 80067f2:	9209      	str	r2, [sp, #36]	; 0x24
 80067f4:	f89a 3000 	ldrb.w	r3, [sl]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 80a2 	beq.w	8006942 <_vfiprintf_r+0x20e>
 80067fe:	2300      	movs	r3, #0
 8006800:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006804:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006808:	f10a 0a01 	add.w	sl, sl, #1
 800680c:	9304      	str	r3, [sp, #16]
 800680e:	9307      	str	r3, [sp, #28]
 8006810:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006814:	931a      	str	r3, [sp, #104]	; 0x68
 8006816:	4654      	mov	r4, sl
 8006818:	2205      	movs	r2, #5
 800681a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800681e:	4858      	ldr	r0, [pc, #352]	; (8006980 <_vfiprintf_r+0x24c>)
 8006820:	f000 faf8 	bl	8006e14 <memchr>
 8006824:	9a04      	ldr	r2, [sp, #16]
 8006826:	b9d8      	cbnz	r0, 8006860 <_vfiprintf_r+0x12c>
 8006828:	06d1      	lsls	r1, r2, #27
 800682a:	bf44      	itt	mi
 800682c:	2320      	movmi	r3, #32
 800682e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006832:	0713      	lsls	r3, r2, #28
 8006834:	bf44      	itt	mi
 8006836:	232b      	movmi	r3, #43	; 0x2b
 8006838:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800683c:	f89a 3000 	ldrb.w	r3, [sl]
 8006840:	2b2a      	cmp	r3, #42	; 0x2a
 8006842:	d015      	beq.n	8006870 <_vfiprintf_r+0x13c>
 8006844:	4654      	mov	r4, sl
 8006846:	2000      	movs	r0, #0
 8006848:	f04f 0c0a 	mov.w	ip, #10
 800684c:	9a07      	ldr	r2, [sp, #28]
 800684e:	4621      	mov	r1, r4
 8006850:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006854:	3b30      	subs	r3, #48	; 0x30
 8006856:	2b09      	cmp	r3, #9
 8006858:	d94e      	bls.n	80068f8 <_vfiprintf_r+0x1c4>
 800685a:	b1b0      	cbz	r0, 800688a <_vfiprintf_r+0x156>
 800685c:	9207      	str	r2, [sp, #28]
 800685e:	e014      	b.n	800688a <_vfiprintf_r+0x156>
 8006860:	eba0 0308 	sub.w	r3, r0, r8
 8006864:	fa09 f303 	lsl.w	r3, r9, r3
 8006868:	4313      	orrs	r3, r2
 800686a:	46a2      	mov	sl, r4
 800686c:	9304      	str	r3, [sp, #16]
 800686e:	e7d2      	b.n	8006816 <_vfiprintf_r+0xe2>
 8006870:	9b03      	ldr	r3, [sp, #12]
 8006872:	1d19      	adds	r1, r3, #4
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	9103      	str	r1, [sp, #12]
 8006878:	2b00      	cmp	r3, #0
 800687a:	bfbb      	ittet	lt
 800687c:	425b      	neglt	r3, r3
 800687e:	f042 0202 	orrlt.w	r2, r2, #2
 8006882:	9307      	strge	r3, [sp, #28]
 8006884:	9307      	strlt	r3, [sp, #28]
 8006886:	bfb8      	it	lt
 8006888:	9204      	strlt	r2, [sp, #16]
 800688a:	7823      	ldrb	r3, [r4, #0]
 800688c:	2b2e      	cmp	r3, #46	; 0x2e
 800688e:	d10c      	bne.n	80068aa <_vfiprintf_r+0x176>
 8006890:	7863      	ldrb	r3, [r4, #1]
 8006892:	2b2a      	cmp	r3, #42	; 0x2a
 8006894:	d135      	bne.n	8006902 <_vfiprintf_r+0x1ce>
 8006896:	9b03      	ldr	r3, [sp, #12]
 8006898:	3402      	adds	r4, #2
 800689a:	1d1a      	adds	r2, r3, #4
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	9203      	str	r2, [sp, #12]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	bfb8      	it	lt
 80068a4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80068a8:	9305      	str	r3, [sp, #20]
 80068aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006990 <_vfiprintf_r+0x25c>
 80068ae:	2203      	movs	r2, #3
 80068b0:	4650      	mov	r0, sl
 80068b2:	7821      	ldrb	r1, [r4, #0]
 80068b4:	f000 faae 	bl	8006e14 <memchr>
 80068b8:	b140      	cbz	r0, 80068cc <_vfiprintf_r+0x198>
 80068ba:	2340      	movs	r3, #64	; 0x40
 80068bc:	eba0 000a 	sub.w	r0, r0, sl
 80068c0:	fa03 f000 	lsl.w	r0, r3, r0
 80068c4:	9b04      	ldr	r3, [sp, #16]
 80068c6:	3401      	adds	r4, #1
 80068c8:	4303      	orrs	r3, r0
 80068ca:	9304      	str	r3, [sp, #16]
 80068cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068d0:	2206      	movs	r2, #6
 80068d2:	482c      	ldr	r0, [pc, #176]	; (8006984 <_vfiprintf_r+0x250>)
 80068d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80068d8:	f000 fa9c 	bl	8006e14 <memchr>
 80068dc:	2800      	cmp	r0, #0
 80068de:	d03f      	beq.n	8006960 <_vfiprintf_r+0x22c>
 80068e0:	4b29      	ldr	r3, [pc, #164]	; (8006988 <_vfiprintf_r+0x254>)
 80068e2:	bb1b      	cbnz	r3, 800692c <_vfiprintf_r+0x1f8>
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	3307      	adds	r3, #7
 80068e8:	f023 0307 	bic.w	r3, r3, #7
 80068ec:	3308      	adds	r3, #8
 80068ee:	9303      	str	r3, [sp, #12]
 80068f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068f2:	443b      	add	r3, r7
 80068f4:	9309      	str	r3, [sp, #36]	; 0x24
 80068f6:	e767      	b.n	80067c8 <_vfiprintf_r+0x94>
 80068f8:	460c      	mov	r4, r1
 80068fa:	2001      	movs	r0, #1
 80068fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006900:	e7a5      	b.n	800684e <_vfiprintf_r+0x11a>
 8006902:	2300      	movs	r3, #0
 8006904:	f04f 0c0a 	mov.w	ip, #10
 8006908:	4619      	mov	r1, r3
 800690a:	3401      	adds	r4, #1
 800690c:	9305      	str	r3, [sp, #20]
 800690e:	4620      	mov	r0, r4
 8006910:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006914:	3a30      	subs	r2, #48	; 0x30
 8006916:	2a09      	cmp	r2, #9
 8006918:	d903      	bls.n	8006922 <_vfiprintf_r+0x1ee>
 800691a:	2b00      	cmp	r3, #0
 800691c:	d0c5      	beq.n	80068aa <_vfiprintf_r+0x176>
 800691e:	9105      	str	r1, [sp, #20]
 8006920:	e7c3      	b.n	80068aa <_vfiprintf_r+0x176>
 8006922:	4604      	mov	r4, r0
 8006924:	2301      	movs	r3, #1
 8006926:	fb0c 2101 	mla	r1, ip, r1, r2
 800692a:	e7f0      	b.n	800690e <_vfiprintf_r+0x1da>
 800692c:	ab03      	add	r3, sp, #12
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	462a      	mov	r2, r5
 8006932:	4630      	mov	r0, r6
 8006934:	4b15      	ldr	r3, [pc, #84]	; (800698c <_vfiprintf_r+0x258>)
 8006936:	a904      	add	r1, sp, #16
 8006938:	f3af 8000 	nop.w
 800693c:	4607      	mov	r7, r0
 800693e:	1c78      	adds	r0, r7, #1
 8006940:	d1d6      	bne.n	80068f0 <_vfiprintf_r+0x1bc>
 8006942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006944:	07d9      	lsls	r1, r3, #31
 8006946:	d405      	bmi.n	8006954 <_vfiprintf_r+0x220>
 8006948:	89ab      	ldrh	r3, [r5, #12]
 800694a:	059a      	lsls	r2, r3, #22
 800694c:	d402      	bmi.n	8006954 <_vfiprintf_r+0x220>
 800694e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006950:	f7ff fc61 	bl	8006216 <__retarget_lock_release_recursive>
 8006954:	89ab      	ldrh	r3, [r5, #12]
 8006956:	065b      	lsls	r3, r3, #25
 8006958:	f53f af12 	bmi.w	8006780 <_vfiprintf_r+0x4c>
 800695c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800695e:	e711      	b.n	8006784 <_vfiprintf_r+0x50>
 8006960:	ab03      	add	r3, sp, #12
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	462a      	mov	r2, r5
 8006966:	4630      	mov	r0, r6
 8006968:	4b08      	ldr	r3, [pc, #32]	; (800698c <_vfiprintf_r+0x258>)
 800696a:	a904      	add	r1, sp, #16
 800696c:	f000 f882 	bl	8006a74 <_printf_i>
 8006970:	e7e4      	b.n	800693c <_vfiprintf_r+0x208>
 8006972:	bf00      	nop
 8006974:	08007114 	.word	0x08007114
 8006978:	08007134 	.word	0x08007134
 800697c:	080070f4 	.word	0x080070f4
 8006980:	08007154 	.word	0x08007154
 8006984:	0800715e 	.word	0x0800715e
 8006988:	00000000 	.word	0x00000000
 800698c:	0800670f 	.word	0x0800670f
 8006990:	0800715a 	.word	0x0800715a

08006994 <_printf_common>:
 8006994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006998:	4616      	mov	r6, r2
 800699a:	4699      	mov	r9, r3
 800699c:	688a      	ldr	r2, [r1, #8]
 800699e:	690b      	ldr	r3, [r1, #16]
 80069a0:	4607      	mov	r7, r0
 80069a2:	4293      	cmp	r3, r2
 80069a4:	bfb8      	it	lt
 80069a6:	4613      	movlt	r3, r2
 80069a8:	6033      	str	r3, [r6, #0]
 80069aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80069ae:	460c      	mov	r4, r1
 80069b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069b4:	b10a      	cbz	r2, 80069ba <_printf_common+0x26>
 80069b6:	3301      	adds	r3, #1
 80069b8:	6033      	str	r3, [r6, #0]
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	0699      	lsls	r1, r3, #26
 80069be:	bf42      	ittt	mi
 80069c0:	6833      	ldrmi	r3, [r6, #0]
 80069c2:	3302      	addmi	r3, #2
 80069c4:	6033      	strmi	r3, [r6, #0]
 80069c6:	6825      	ldr	r5, [r4, #0]
 80069c8:	f015 0506 	ands.w	r5, r5, #6
 80069cc:	d106      	bne.n	80069dc <_printf_common+0x48>
 80069ce:	f104 0a19 	add.w	sl, r4, #25
 80069d2:	68e3      	ldr	r3, [r4, #12]
 80069d4:	6832      	ldr	r2, [r6, #0]
 80069d6:	1a9b      	subs	r3, r3, r2
 80069d8:	42ab      	cmp	r3, r5
 80069da:	dc28      	bgt.n	8006a2e <_printf_common+0x9a>
 80069dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80069e0:	1e13      	subs	r3, r2, #0
 80069e2:	6822      	ldr	r2, [r4, #0]
 80069e4:	bf18      	it	ne
 80069e6:	2301      	movne	r3, #1
 80069e8:	0692      	lsls	r2, r2, #26
 80069ea:	d42d      	bmi.n	8006a48 <_printf_common+0xb4>
 80069ec:	4649      	mov	r1, r9
 80069ee:	4638      	mov	r0, r7
 80069f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069f4:	47c0      	blx	r8
 80069f6:	3001      	adds	r0, #1
 80069f8:	d020      	beq.n	8006a3c <_printf_common+0xa8>
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	68e5      	ldr	r5, [r4, #12]
 80069fe:	f003 0306 	and.w	r3, r3, #6
 8006a02:	2b04      	cmp	r3, #4
 8006a04:	bf18      	it	ne
 8006a06:	2500      	movne	r5, #0
 8006a08:	6832      	ldr	r2, [r6, #0]
 8006a0a:	f04f 0600 	mov.w	r6, #0
 8006a0e:	68a3      	ldr	r3, [r4, #8]
 8006a10:	bf08      	it	eq
 8006a12:	1aad      	subeq	r5, r5, r2
 8006a14:	6922      	ldr	r2, [r4, #16]
 8006a16:	bf08      	it	eq
 8006a18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	bfc4      	itt	gt
 8006a20:	1a9b      	subgt	r3, r3, r2
 8006a22:	18ed      	addgt	r5, r5, r3
 8006a24:	341a      	adds	r4, #26
 8006a26:	42b5      	cmp	r5, r6
 8006a28:	d11a      	bne.n	8006a60 <_printf_common+0xcc>
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	e008      	b.n	8006a40 <_printf_common+0xac>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4652      	mov	r2, sl
 8006a32:	4649      	mov	r1, r9
 8006a34:	4638      	mov	r0, r7
 8006a36:	47c0      	blx	r8
 8006a38:	3001      	adds	r0, #1
 8006a3a:	d103      	bne.n	8006a44 <_printf_common+0xb0>
 8006a3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a44:	3501      	adds	r5, #1
 8006a46:	e7c4      	b.n	80069d2 <_printf_common+0x3e>
 8006a48:	2030      	movs	r0, #48	; 0x30
 8006a4a:	18e1      	adds	r1, r4, r3
 8006a4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a50:	1c5a      	adds	r2, r3, #1
 8006a52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a56:	4422      	add	r2, r4
 8006a58:	3302      	adds	r3, #2
 8006a5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a5e:	e7c5      	b.n	80069ec <_printf_common+0x58>
 8006a60:	2301      	movs	r3, #1
 8006a62:	4622      	mov	r2, r4
 8006a64:	4649      	mov	r1, r9
 8006a66:	4638      	mov	r0, r7
 8006a68:	47c0      	blx	r8
 8006a6a:	3001      	adds	r0, #1
 8006a6c:	d0e6      	beq.n	8006a3c <_printf_common+0xa8>
 8006a6e:	3601      	adds	r6, #1
 8006a70:	e7d9      	b.n	8006a26 <_printf_common+0x92>
	...

08006a74 <_printf_i>:
 8006a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006a78:	460c      	mov	r4, r1
 8006a7a:	7e27      	ldrb	r7, [r4, #24]
 8006a7c:	4691      	mov	r9, r2
 8006a7e:	2f78      	cmp	r7, #120	; 0x78
 8006a80:	4680      	mov	r8, r0
 8006a82:	469a      	mov	sl, r3
 8006a84:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a8a:	d807      	bhi.n	8006a9c <_printf_i+0x28>
 8006a8c:	2f62      	cmp	r7, #98	; 0x62
 8006a8e:	d80a      	bhi.n	8006aa6 <_printf_i+0x32>
 8006a90:	2f00      	cmp	r7, #0
 8006a92:	f000 80d9 	beq.w	8006c48 <_printf_i+0x1d4>
 8006a96:	2f58      	cmp	r7, #88	; 0x58
 8006a98:	f000 80a4 	beq.w	8006be4 <_printf_i+0x170>
 8006a9c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006aa4:	e03a      	b.n	8006b1c <_printf_i+0xa8>
 8006aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006aaa:	2b15      	cmp	r3, #21
 8006aac:	d8f6      	bhi.n	8006a9c <_printf_i+0x28>
 8006aae:	a001      	add	r0, pc, #4	; (adr r0, 8006ab4 <_printf_i+0x40>)
 8006ab0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ab4:	08006b0d 	.word	0x08006b0d
 8006ab8:	08006b21 	.word	0x08006b21
 8006abc:	08006a9d 	.word	0x08006a9d
 8006ac0:	08006a9d 	.word	0x08006a9d
 8006ac4:	08006a9d 	.word	0x08006a9d
 8006ac8:	08006a9d 	.word	0x08006a9d
 8006acc:	08006b21 	.word	0x08006b21
 8006ad0:	08006a9d 	.word	0x08006a9d
 8006ad4:	08006a9d 	.word	0x08006a9d
 8006ad8:	08006a9d 	.word	0x08006a9d
 8006adc:	08006a9d 	.word	0x08006a9d
 8006ae0:	08006c2f 	.word	0x08006c2f
 8006ae4:	08006b51 	.word	0x08006b51
 8006ae8:	08006c11 	.word	0x08006c11
 8006aec:	08006a9d 	.word	0x08006a9d
 8006af0:	08006a9d 	.word	0x08006a9d
 8006af4:	08006c51 	.word	0x08006c51
 8006af8:	08006a9d 	.word	0x08006a9d
 8006afc:	08006b51 	.word	0x08006b51
 8006b00:	08006a9d 	.word	0x08006a9d
 8006b04:	08006a9d 	.word	0x08006a9d
 8006b08:	08006c19 	.word	0x08006c19
 8006b0c:	680b      	ldr	r3, [r1, #0]
 8006b0e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b12:	1d1a      	adds	r2, r3, #4
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	600a      	str	r2, [r1, #0]
 8006b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e0a4      	b.n	8006c6a <_printf_i+0x1f6>
 8006b20:	6825      	ldr	r5, [r4, #0]
 8006b22:	6808      	ldr	r0, [r1, #0]
 8006b24:	062e      	lsls	r6, r5, #24
 8006b26:	f100 0304 	add.w	r3, r0, #4
 8006b2a:	d50a      	bpl.n	8006b42 <_printf_i+0xce>
 8006b2c:	6805      	ldr	r5, [r0, #0]
 8006b2e:	600b      	str	r3, [r1, #0]
 8006b30:	2d00      	cmp	r5, #0
 8006b32:	da03      	bge.n	8006b3c <_printf_i+0xc8>
 8006b34:	232d      	movs	r3, #45	; 0x2d
 8006b36:	426d      	negs	r5, r5
 8006b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b3c:	230a      	movs	r3, #10
 8006b3e:	485e      	ldr	r0, [pc, #376]	; (8006cb8 <_printf_i+0x244>)
 8006b40:	e019      	b.n	8006b76 <_printf_i+0x102>
 8006b42:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b46:	6805      	ldr	r5, [r0, #0]
 8006b48:	600b      	str	r3, [r1, #0]
 8006b4a:	bf18      	it	ne
 8006b4c:	b22d      	sxthne	r5, r5
 8006b4e:	e7ef      	b.n	8006b30 <_printf_i+0xbc>
 8006b50:	680b      	ldr	r3, [r1, #0]
 8006b52:	6825      	ldr	r5, [r4, #0]
 8006b54:	1d18      	adds	r0, r3, #4
 8006b56:	6008      	str	r0, [r1, #0]
 8006b58:	0628      	lsls	r0, r5, #24
 8006b5a:	d501      	bpl.n	8006b60 <_printf_i+0xec>
 8006b5c:	681d      	ldr	r5, [r3, #0]
 8006b5e:	e002      	b.n	8006b66 <_printf_i+0xf2>
 8006b60:	0669      	lsls	r1, r5, #25
 8006b62:	d5fb      	bpl.n	8006b5c <_printf_i+0xe8>
 8006b64:	881d      	ldrh	r5, [r3, #0]
 8006b66:	2f6f      	cmp	r7, #111	; 0x6f
 8006b68:	bf0c      	ite	eq
 8006b6a:	2308      	moveq	r3, #8
 8006b6c:	230a      	movne	r3, #10
 8006b6e:	4852      	ldr	r0, [pc, #328]	; (8006cb8 <_printf_i+0x244>)
 8006b70:	2100      	movs	r1, #0
 8006b72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006b76:	6866      	ldr	r6, [r4, #4]
 8006b78:	2e00      	cmp	r6, #0
 8006b7a:	bfa8      	it	ge
 8006b7c:	6821      	ldrge	r1, [r4, #0]
 8006b7e:	60a6      	str	r6, [r4, #8]
 8006b80:	bfa4      	itt	ge
 8006b82:	f021 0104 	bicge.w	r1, r1, #4
 8006b86:	6021      	strge	r1, [r4, #0]
 8006b88:	b90d      	cbnz	r5, 8006b8e <_printf_i+0x11a>
 8006b8a:	2e00      	cmp	r6, #0
 8006b8c:	d04d      	beq.n	8006c2a <_printf_i+0x1b6>
 8006b8e:	4616      	mov	r6, r2
 8006b90:	fbb5 f1f3 	udiv	r1, r5, r3
 8006b94:	fb03 5711 	mls	r7, r3, r1, r5
 8006b98:	5dc7      	ldrb	r7, [r0, r7]
 8006b9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b9e:	462f      	mov	r7, r5
 8006ba0:	42bb      	cmp	r3, r7
 8006ba2:	460d      	mov	r5, r1
 8006ba4:	d9f4      	bls.n	8006b90 <_printf_i+0x11c>
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d10b      	bne.n	8006bc2 <_printf_i+0x14e>
 8006baa:	6823      	ldr	r3, [r4, #0]
 8006bac:	07df      	lsls	r7, r3, #31
 8006bae:	d508      	bpl.n	8006bc2 <_printf_i+0x14e>
 8006bb0:	6923      	ldr	r3, [r4, #16]
 8006bb2:	6861      	ldr	r1, [r4, #4]
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	bfde      	ittt	le
 8006bb8:	2330      	movle	r3, #48	; 0x30
 8006bba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006bbe:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006bc2:	1b92      	subs	r2, r2, r6
 8006bc4:	6122      	str	r2, [r4, #16]
 8006bc6:	464b      	mov	r3, r9
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4640      	mov	r0, r8
 8006bcc:	f8cd a000 	str.w	sl, [sp]
 8006bd0:	aa03      	add	r2, sp, #12
 8006bd2:	f7ff fedf 	bl	8006994 <_printf_common>
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	d14c      	bne.n	8006c74 <_printf_i+0x200>
 8006bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bde:	b004      	add	sp, #16
 8006be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006be4:	4834      	ldr	r0, [pc, #208]	; (8006cb8 <_printf_i+0x244>)
 8006be6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006bea:	680e      	ldr	r6, [r1, #0]
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	f856 5b04 	ldr.w	r5, [r6], #4
 8006bf2:	061f      	lsls	r7, r3, #24
 8006bf4:	600e      	str	r6, [r1, #0]
 8006bf6:	d514      	bpl.n	8006c22 <_printf_i+0x1ae>
 8006bf8:	07d9      	lsls	r1, r3, #31
 8006bfa:	bf44      	itt	mi
 8006bfc:	f043 0320 	orrmi.w	r3, r3, #32
 8006c00:	6023      	strmi	r3, [r4, #0]
 8006c02:	b91d      	cbnz	r5, 8006c0c <_printf_i+0x198>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	f023 0320 	bic.w	r3, r3, #32
 8006c0a:	6023      	str	r3, [r4, #0]
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	e7af      	b.n	8006b70 <_printf_i+0xfc>
 8006c10:	6823      	ldr	r3, [r4, #0]
 8006c12:	f043 0320 	orr.w	r3, r3, #32
 8006c16:	6023      	str	r3, [r4, #0]
 8006c18:	2378      	movs	r3, #120	; 0x78
 8006c1a:	4828      	ldr	r0, [pc, #160]	; (8006cbc <_printf_i+0x248>)
 8006c1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c20:	e7e3      	b.n	8006bea <_printf_i+0x176>
 8006c22:	065e      	lsls	r6, r3, #25
 8006c24:	bf48      	it	mi
 8006c26:	b2ad      	uxthmi	r5, r5
 8006c28:	e7e6      	b.n	8006bf8 <_printf_i+0x184>
 8006c2a:	4616      	mov	r6, r2
 8006c2c:	e7bb      	b.n	8006ba6 <_printf_i+0x132>
 8006c2e:	680b      	ldr	r3, [r1, #0]
 8006c30:	6826      	ldr	r6, [r4, #0]
 8006c32:	1d1d      	adds	r5, r3, #4
 8006c34:	6960      	ldr	r0, [r4, #20]
 8006c36:	600d      	str	r5, [r1, #0]
 8006c38:	0635      	lsls	r5, r6, #24
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	d501      	bpl.n	8006c42 <_printf_i+0x1ce>
 8006c3e:	6018      	str	r0, [r3, #0]
 8006c40:	e002      	b.n	8006c48 <_printf_i+0x1d4>
 8006c42:	0671      	lsls	r1, r6, #25
 8006c44:	d5fb      	bpl.n	8006c3e <_printf_i+0x1ca>
 8006c46:	8018      	strh	r0, [r3, #0]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	4616      	mov	r6, r2
 8006c4c:	6123      	str	r3, [r4, #16]
 8006c4e:	e7ba      	b.n	8006bc6 <_printf_i+0x152>
 8006c50:	680b      	ldr	r3, [r1, #0]
 8006c52:	1d1a      	adds	r2, r3, #4
 8006c54:	600a      	str	r2, [r1, #0]
 8006c56:	681e      	ldr	r6, [r3, #0]
 8006c58:	2100      	movs	r1, #0
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	6862      	ldr	r2, [r4, #4]
 8006c5e:	f000 f8d9 	bl	8006e14 <memchr>
 8006c62:	b108      	cbz	r0, 8006c68 <_printf_i+0x1f4>
 8006c64:	1b80      	subs	r0, r0, r6
 8006c66:	6060      	str	r0, [r4, #4]
 8006c68:	6863      	ldr	r3, [r4, #4]
 8006c6a:	6123      	str	r3, [r4, #16]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c72:	e7a8      	b.n	8006bc6 <_printf_i+0x152>
 8006c74:	4632      	mov	r2, r6
 8006c76:	4649      	mov	r1, r9
 8006c78:	4640      	mov	r0, r8
 8006c7a:	6923      	ldr	r3, [r4, #16]
 8006c7c:	47d0      	blx	sl
 8006c7e:	3001      	adds	r0, #1
 8006c80:	d0ab      	beq.n	8006bda <_printf_i+0x166>
 8006c82:	6823      	ldr	r3, [r4, #0]
 8006c84:	079b      	lsls	r3, r3, #30
 8006c86:	d413      	bmi.n	8006cb0 <_printf_i+0x23c>
 8006c88:	68e0      	ldr	r0, [r4, #12]
 8006c8a:	9b03      	ldr	r3, [sp, #12]
 8006c8c:	4298      	cmp	r0, r3
 8006c8e:	bfb8      	it	lt
 8006c90:	4618      	movlt	r0, r3
 8006c92:	e7a4      	b.n	8006bde <_printf_i+0x16a>
 8006c94:	2301      	movs	r3, #1
 8006c96:	4632      	mov	r2, r6
 8006c98:	4649      	mov	r1, r9
 8006c9a:	4640      	mov	r0, r8
 8006c9c:	47d0      	blx	sl
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	d09b      	beq.n	8006bda <_printf_i+0x166>
 8006ca2:	3501      	adds	r5, #1
 8006ca4:	68e3      	ldr	r3, [r4, #12]
 8006ca6:	9903      	ldr	r1, [sp, #12]
 8006ca8:	1a5b      	subs	r3, r3, r1
 8006caa:	42ab      	cmp	r3, r5
 8006cac:	dcf2      	bgt.n	8006c94 <_printf_i+0x220>
 8006cae:	e7eb      	b.n	8006c88 <_printf_i+0x214>
 8006cb0:	2500      	movs	r5, #0
 8006cb2:	f104 0619 	add.w	r6, r4, #25
 8006cb6:	e7f5      	b.n	8006ca4 <_printf_i+0x230>
 8006cb8:	08007165 	.word	0x08007165
 8006cbc:	08007176 	.word	0x08007176

08006cc0 <_sbrk_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	4d05      	ldr	r5, [pc, #20]	; (8006cdc <_sbrk_r+0x1c>)
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	4608      	mov	r0, r1
 8006cca:	602b      	str	r3, [r5, #0]
 8006ccc:	f000 f916 	bl	8006efc <_sbrk>
 8006cd0:	1c43      	adds	r3, r0, #1
 8006cd2:	d102      	bne.n	8006cda <_sbrk_r+0x1a>
 8006cd4:	682b      	ldr	r3, [r5, #0]
 8006cd6:	b103      	cbz	r3, 8006cda <_sbrk_r+0x1a>
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	bd38      	pop	{r3, r4, r5, pc}
 8006cdc:	20000eb0 	.word	0x20000eb0

08006ce0 <__sread>:
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	460c      	mov	r4, r1
 8006ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce8:	f000 f8ee 	bl	8006ec8 <_read_r>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	bfab      	itete	ge
 8006cf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006cf2:	89a3      	ldrhlt	r3, [r4, #12]
 8006cf4:	181b      	addge	r3, r3, r0
 8006cf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006cfa:	bfac      	ite	ge
 8006cfc:	6563      	strge	r3, [r4, #84]	; 0x54
 8006cfe:	81a3      	strhlt	r3, [r4, #12]
 8006d00:	bd10      	pop	{r4, pc}

08006d02 <__swrite>:
 8006d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d06:	461f      	mov	r7, r3
 8006d08:	898b      	ldrh	r3, [r1, #12]
 8006d0a:	4605      	mov	r5, r0
 8006d0c:	05db      	lsls	r3, r3, #23
 8006d0e:	460c      	mov	r4, r1
 8006d10:	4616      	mov	r6, r2
 8006d12:	d505      	bpl.n	8006d20 <__swrite+0x1e>
 8006d14:	2302      	movs	r3, #2
 8006d16:	2200      	movs	r2, #0
 8006d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d1c:	f000 f868 	bl	8006df0 <_lseek_r>
 8006d20:	89a3      	ldrh	r3, [r4, #12]
 8006d22:	4632      	mov	r2, r6
 8006d24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d28:	81a3      	strh	r3, [r4, #12]
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	463b      	mov	r3, r7
 8006d2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d36:	f000 b817 	b.w	8006d68 <_write_r>

08006d3a <__sseek>:
 8006d3a:	b510      	push	{r4, lr}
 8006d3c:	460c      	mov	r4, r1
 8006d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d42:	f000 f855 	bl	8006df0 <_lseek_r>
 8006d46:	1c43      	adds	r3, r0, #1
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	bf15      	itete	ne
 8006d4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006d52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006d56:	81a3      	strheq	r3, [r4, #12]
 8006d58:	bf18      	it	ne
 8006d5a:	81a3      	strhne	r3, [r4, #12]
 8006d5c:	bd10      	pop	{r4, pc}

08006d5e <__sclose>:
 8006d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d62:	f000 b813 	b.w	8006d8c <_close_r>
	...

08006d68 <_write_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4604      	mov	r4, r0
 8006d6c:	4608      	mov	r0, r1
 8006d6e:	4611      	mov	r1, r2
 8006d70:	2200      	movs	r2, #0
 8006d72:	4d05      	ldr	r5, [pc, #20]	; (8006d88 <_write_r+0x20>)
 8006d74:	602a      	str	r2, [r5, #0]
 8006d76:	461a      	mov	r2, r3
 8006d78:	f7f9 fcc6 	bl	8000708 <_write>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d102      	bne.n	8006d86 <_write_r+0x1e>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	b103      	cbz	r3, 8006d86 <_write_r+0x1e>
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	bd38      	pop	{r3, r4, r5, pc}
 8006d88:	20000eb0 	.word	0x20000eb0

08006d8c <_close_r>:
 8006d8c:	b538      	push	{r3, r4, r5, lr}
 8006d8e:	2300      	movs	r3, #0
 8006d90:	4d05      	ldr	r5, [pc, #20]	; (8006da8 <_close_r+0x1c>)
 8006d92:	4604      	mov	r4, r0
 8006d94:	4608      	mov	r0, r1
 8006d96:	602b      	str	r3, [r5, #0]
 8006d98:	f7f9 fe3b 	bl	8000a12 <_close>
 8006d9c:	1c43      	adds	r3, r0, #1
 8006d9e:	d102      	bne.n	8006da6 <_close_r+0x1a>
 8006da0:	682b      	ldr	r3, [r5, #0]
 8006da2:	b103      	cbz	r3, 8006da6 <_close_r+0x1a>
 8006da4:	6023      	str	r3, [r4, #0]
 8006da6:	bd38      	pop	{r3, r4, r5, pc}
 8006da8:	20000eb0 	.word	0x20000eb0

08006dac <_fstat_r>:
 8006dac:	b538      	push	{r3, r4, r5, lr}
 8006dae:	2300      	movs	r3, #0
 8006db0:	4d06      	ldr	r5, [pc, #24]	; (8006dcc <_fstat_r+0x20>)
 8006db2:	4604      	mov	r4, r0
 8006db4:	4608      	mov	r0, r1
 8006db6:	4611      	mov	r1, r2
 8006db8:	602b      	str	r3, [r5, #0]
 8006dba:	f7f9 fe35 	bl	8000a28 <_fstat>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	d102      	bne.n	8006dc8 <_fstat_r+0x1c>
 8006dc2:	682b      	ldr	r3, [r5, #0]
 8006dc4:	b103      	cbz	r3, 8006dc8 <_fstat_r+0x1c>
 8006dc6:	6023      	str	r3, [r4, #0]
 8006dc8:	bd38      	pop	{r3, r4, r5, pc}
 8006dca:	bf00      	nop
 8006dcc:	20000eb0 	.word	0x20000eb0

08006dd0 <_isatty_r>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	4d05      	ldr	r5, [pc, #20]	; (8006dec <_isatty_r+0x1c>)
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	4608      	mov	r0, r1
 8006dda:	602b      	str	r3, [r5, #0]
 8006ddc:	f7f9 fe33 	bl	8000a46 <_isatty>
 8006de0:	1c43      	adds	r3, r0, #1
 8006de2:	d102      	bne.n	8006dea <_isatty_r+0x1a>
 8006de4:	682b      	ldr	r3, [r5, #0]
 8006de6:	b103      	cbz	r3, 8006dea <_isatty_r+0x1a>
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	bd38      	pop	{r3, r4, r5, pc}
 8006dec:	20000eb0 	.word	0x20000eb0

08006df0 <_lseek_r>:
 8006df0:	b538      	push	{r3, r4, r5, lr}
 8006df2:	4604      	mov	r4, r0
 8006df4:	4608      	mov	r0, r1
 8006df6:	4611      	mov	r1, r2
 8006df8:	2200      	movs	r2, #0
 8006dfa:	4d05      	ldr	r5, [pc, #20]	; (8006e10 <_lseek_r+0x20>)
 8006dfc:	602a      	str	r2, [r5, #0]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	f7f9 fe2b 	bl	8000a5a <_lseek>
 8006e04:	1c43      	adds	r3, r0, #1
 8006e06:	d102      	bne.n	8006e0e <_lseek_r+0x1e>
 8006e08:	682b      	ldr	r3, [r5, #0]
 8006e0a:	b103      	cbz	r3, 8006e0e <_lseek_r+0x1e>
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	bd38      	pop	{r3, r4, r5, pc}
 8006e10:	20000eb0 	.word	0x20000eb0

08006e14 <memchr>:
 8006e14:	4603      	mov	r3, r0
 8006e16:	b510      	push	{r4, lr}
 8006e18:	b2c9      	uxtb	r1, r1
 8006e1a:	4402      	add	r2, r0
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	d101      	bne.n	8006e26 <memchr+0x12>
 8006e22:	2000      	movs	r0, #0
 8006e24:	e003      	b.n	8006e2e <memchr+0x1a>
 8006e26:	7804      	ldrb	r4, [r0, #0]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	428c      	cmp	r4, r1
 8006e2c:	d1f6      	bne.n	8006e1c <memchr+0x8>
 8006e2e:	bd10      	pop	{r4, pc}

08006e30 <memmove>:
 8006e30:	4288      	cmp	r0, r1
 8006e32:	b510      	push	{r4, lr}
 8006e34:	eb01 0402 	add.w	r4, r1, r2
 8006e38:	d902      	bls.n	8006e40 <memmove+0x10>
 8006e3a:	4284      	cmp	r4, r0
 8006e3c:	4623      	mov	r3, r4
 8006e3e:	d807      	bhi.n	8006e50 <memmove+0x20>
 8006e40:	1e43      	subs	r3, r0, #1
 8006e42:	42a1      	cmp	r1, r4
 8006e44:	d008      	beq.n	8006e58 <memmove+0x28>
 8006e46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e4e:	e7f8      	b.n	8006e42 <memmove+0x12>
 8006e50:	4601      	mov	r1, r0
 8006e52:	4402      	add	r2, r0
 8006e54:	428a      	cmp	r2, r1
 8006e56:	d100      	bne.n	8006e5a <memmove+0x2a>
 8006e58:	bd10      	pop	{r4, pc}
 8006e5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e62:	e7f7      	b.n	8006e54 <memmove+0x24>

08006e64 <__malloc_lock>:
 8006e64:	4801      	ldr	r0, [pc, #4]	; (8006e6c <__malloc_lock+0x8>)
 8006e66:	f7ff b9d5 	b.w	8006214 <__retarget_lock_acquire_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	20000ea8 	.word	0x20000ea8

08006e70 <__malloc_unlock>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__malloc_unlock+0x8>)
 8006e72:	f7ff b9d0 	b.w	8006216 <__retarget_lock_release_recursive>
 8006e76:	bf00      	nop
 8006e78:	20000ea8 	.word	0x20000ea8

08006e7c <_realloc_r>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	4607      	mov	r7, r0
 8006e80:	4614      	mov	r4, r2
 8006e82:	460e      	mov	r6, r1
 8006e84:	b921      	cbnz	r1, 8006e90 <_realloc_r+0x14>
 8006e86:	4611      	mov	r1, r2
 8006e88:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006e8c:	f7ff ba74 	b.w	8006378 <_malloc_r>
 8006e90:	b922      	cbnz	r2, 8006e9c <_realloc_r+0x20>
 8006e92:	f7ff fa25 	bl	80062e0 <_free_r>
 8006e96:	4625      	mov	r5, r4
 8006e98:	4628      	mov	r0, r5
 8006e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e9c:	f000 f826 	bl	8006eec <_malloc_usable_size_r>
 8006ea0:	42a0      	cmp	r0, r4
 8006ea2:	d20f      	bcs.n	8006ec4 <_realloc_r+0x48>
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	f7ff fa66 	bl	8006378 <_malloc_r>
 8006eac:	4605      	mov	r5, r0
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	d0f2      	beq.n	8006e98 <_realloc_r+0x1c>
 8006eb2:	4631      	mov	r1, r6
 8006eb4:	4622      	mov	r2, r4
 8006eb6:	f7fe fdb5 	bl	8005a24 <memcpy>
 8006eba:	4631      	mov	r1, r6
 8006ebc:	4638      	mov	r0, r7
 8006ebe:	f7ff fa0f 	bl	80062e0 <_free_r>
 8006ec2:	e7e9      	b.n	8006e98 <_realloc_r+0x1c>
 8006ec4:	4635      	mov	r5, r6
 8006ec6:	e7e7      	b.n	8006e98 <_realloc_r+0x1c>

08006ec8 <_read_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4604      	mov	r4, r0
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4d05      	ldr	r5, [pc, #20]	; (8006ee8 <_read_r+0x20>)
 8006ed4:	602a      	str	r2, [r5, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f7f9 fd7e 	bl	80009d8 <_read>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d102      	bne.n	8006ee6 <_read_r+0x1e>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	b103      	cbz	r3, 8006ee6 <_read_r+0x1e>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	20000eb0 	.word	0x20000eb0

08006eec <_malloc_usable_size_r>:
 8006eec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ef0:	1f18      	subs	r0, r3, #4
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	bfbc      	itt	lt
 8006ef6:	580b      	ldrlt	r3, [r1, r0]
 8006ef8:	18c0      	addlt	r0, r0, r3
 8006efa:	4770      	bx	lr

08006efc <_sbrk>:
 8006efc:	4b04      	ldr	r3, [pc, #16]	; (8006f10 <_sbrk+0x14>)
 8006efe:	4602      	mov	r2, r0
 8006f00:	6819      	ldr	r1, [r3, #0]
 8006f02:	b909      	cbnz	r1, 8006f08 <_sbrk+0xc>
 8006f04:	4903      	ldr	r1, [pc, #12]	; (8006f14 <_sbrk+0x18>)
 8006f06:	6019      	str	r1, [r3, #0]
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	4402      	add	r2, r0
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	4770      	bx	lr
 8006f10:	20000df8 	.word	0x20000df8
 8006f14:	20000eb8 	.word	0x20000eb8

08006f18 <_init>:
 8006f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1a:	bf00      	nop
 8006f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f1e:	bc08      	pop	{r3}
 8006f20:	469e      	mov	lr, r3
 8006f22:	4770      	bx	lr

08006f24 <_fini>:
 8006f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f26:	bf00      	nop
 8006f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f2a:	bc08      	pop	{r3}
 8006f2c:	469e      	mov	lr, r3
 8006f2e:	4770      	bx	lr
