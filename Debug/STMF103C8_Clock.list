
STMF103C8_Clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003304  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08003414  08003414  00013414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003460  08003460  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003460  08003460  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003460  08003460  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003460  08003460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003468  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000de4  20000010  08003478  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000df4  08003478  00020df4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011194  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d46  00000000  00000000  000311cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  00033f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00034f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ced  00000000  00000000  00035ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001240b  00000000  00000000  0004ebcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093154  00000000  00000000  00060fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f412c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f8  00000000  00000000  000f4180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080033fc 	.word	0x080033fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080033fc 	.word	0x080033fc

08000150 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000156:	4b1a      	ldr	r3, [pc, #104]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000158:	699b      	ldr	r3, [r3, #24]
 800015a:	4a19      	ldr	r2, [pc, #100]	; (80001c0 <MX_GPIO_Init+0x70>)
 800015c:	f043 0310 	orr.w	r3, r3, #16
 8000160:	6193      	str	r3, [r2, #24]
 8000162:	4b17      	ldr	r3, [pc, #92]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000164:	699b      	ldr	r3, [r3, #24]
 8000166:	f003 0310 	and.w	r3, r3, #16
 800016a:	60fb      	str	r3, [r7, #12]
 800016c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800016e:	4b14      	ldr	r3, [pc, #80]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000170:	699b      	ldr	r3, [r3, #24]
 8000172:	4a13      	ldr	r2, [pc, #76]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000174:	f043 0320 	orr.w	r3, r3, #32
 8000178:	6193      	str	r3, [r2, #24]
 800017a:	4b11      	ldr	r3, [pc, #68]	; (80001c0 <MX_GPIO_Init+0x70>)
 800017c:	699b      	ldr	r3, [r3, #24]
 800017e:	f003 0320 	and.w	r3, r3, #32
 8000182:	60bb      	str	r3, [r7, #8]
 8000184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000186:	4b0e      	ldr	r3, [pc, #56]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000188:	699b      	ldr	r3, [r3, #24]
 800018a:	4a0d      	ldr	r2, [pc, #52]	; (80001c0 <MX_GPIO_Init+0x70>)
 800018c:	f043 0304 	orr.w	r3, r3, #4
 8000190:	6193      	str	r3, [r2, #24]
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <MX_GPIO_Init+0x70>)
 8000194:	699b      	ldr	r3, [r3, #24]
 8000196:	f003 0304 	and.w	r3, r3, #4
 800019a:	607b      	str	r3, [r7, #4]
 800019c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800019e:	4b08      	ldr	r3, [pc, #32]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001a0:	699b      	ldr	r3, [r3, #24]
 80001a2:	4a07      	ldr	r2, [pc, #28]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001a4:	f043 0308 	orr.w	r3, r3, #8
 80001a8:	6193      	str	r3, [r2, #24]
 80001aa:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <MX_GPIO_Init+0x70>)
 80001ac:	699b      	ldr	r3, [r3, #24]
 80001ae:	f003 0308 	and.w	r3, r3, #8
 80001b2:	603b      	str	r3, [r7, #0]
 80001b4:	683b      	ldr	r3, [r7, #0]

}
 80001b6:	bf00      	nop
 80001b8:	3714      	adds	r7, #20
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bc80      	pop	{r7}
 80001be:	4770      	bx	lr
 80001c0:	40021000 	.word	0x40021000

080001c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ca:	f000 fa49 	bl	8000660 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ce:	f000 f81f 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d2:	f7ff ffbd 	bl	8000150 <MX_GPIO_Init>
  MX_RTC_Init();
 80001d6:	f000 f88b 	bl	80002f0 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80001da:	f000 f9a5 	bl	8000528 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  Status = xTaskCreate(Task_1_funtion, "Task 1", 100, "Hello World", 3, &Task_1_Handler);
 80001de:	4b07      	ldr	r3, [pc, #28]	; (80001fc <main+0x38>)
 80001e0:	9301      	str	r3, [sp, #4]
 80001e2:	2303      	movs	r3, #3
 80001e4:	9300      	str	r3, [sp, #0]
 80001e6:	4b06      	ldr	r3, [pc, #24]	; (8000200 <main+0x3c>)
 80001e8:	2264      	movs	r2, #100	; 0x64
 80001ea:	4906      	ldr	r1, [pc, #24]	; (8000204 <main+0x40>)
 80001ec:	4806      	ldr	r0, [pc, #24]	; (8000208 <main+0x44>)
 80001ee:	f002 f97c 	bl	80024ea <xTaskCreate>
 80001f2:	4603      	mov	r3, r0
 80001f4:	4a05      	ldr	r2, [pc, #20]	; (800020c <main+0x48>)
 80001f6:	6013      	str	r3, [r2, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f8:	e7fe      	b.n	80001f8 <main+0x34>
 80001fa:	bf00      	nop
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	08003414 	.word	0x08003414
 8000204:	08003420 	.word	0x08003420
 8000208:	080002b5 	.word	0x080002b5
 800020c:	20000d4c 	.word	0x20000d4c

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b094      	sub	sp, #80	; 0x50
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800021a:	2228      	movs	r2, #40	; 0x28
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f003 f8e4 	bl	80033ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	f107 0314 	add.w	r3, r7, #20
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]
 800022c:	605a      	str	r2, [r3, #4]
 800022e:	609a      	str	r2, [r3, #8]
 8000230:	60da      	str	r2, [r3, #12]
 8000232:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]
 800023a:	605a      	str	r2, [r3, #4]
 800023c:	609a      	str	r2, [r3, #8]
 800023e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000240:	2305      	movs	r3, #5
 8000242:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000244:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000248:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800024e:	2300      	movs	r3, #0
 8000250:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000252:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000256:	4618      	mov	r0, r3
 8000258:	f000 fca4 	bl	8000ba4 <HAL_RCC_OscConfig>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d001      	beq.n	8000266 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000262:	f000 f83f 	bl	80002e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000266:	230f      	movs	r3, #15
 8000268:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800026a:	2301      	movs	r3, #1
 800026c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	2100      	movs	r1, #0
 8000280:	4618      	mov	r0, r3
 8000282:	f000 ff0f 	bl	80010a4 <HAL_RCC_ClockConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800028c:	f000 f82a 	bl	80002e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000290:	2301      	movs	r3, #1
 8000292:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000294:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000298:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f001 f8cb 	bl	8001438 <HAL_RCCEx_PeriphCLKConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002a8:	f000 f81c 	bl	80002e4 <Error_Handler>
  }
}
 80002ac:	bf00      	nop
 80002ae:	3750      	adds	r7, #80	; 0x50
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <Task_1_funtion>:

/* USER CODE BEGIN 4 */

static void Task_1_funtion(void * parameters)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
	for(;;)
 80002bc:	e7fe      	b.n	80002bc <Task_1_funtion+0x8>
	...

080002c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a04      	ldr	r2, [pc, #16]	; (80002e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d101      	bne.n	80002d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80002d2:	f000 f9db 	bl	800068c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40000800 	.word	0x40000800

080002e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e8:	b672      	cpsid	i
}
 80002ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002ec:	e7fe      	b.n	80002ec <Error_Handler+0x8>
	...

080002f0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80002f6:	1d3b      	adds	r3, r7, #4
 80002f8:	2100      	movs	r1, #0
 80002fa:	460a      	mov	r2, r1
 80002fc:	801a      	strh	r2, [r3, #0]
 80002fe:	460a      	mov	r2, r1
 8000300:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8000302:	2300      	movs	r3, #0
 8000304:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000306:	4b1d      	ldr	r3, [pc, #116]	; (800037c <MX_RTC_Init+0x8c>)
 8000308:	4a1d      	ldr	r2, [pc, #116]	; (8000380 <MX_RTC_Init+0x90>)
 800030a:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <MX_RTC_Init+0x8c>)
 800030e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000312:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8000314:	4b19      	ldr	r3, [pc, #100]	; (800037c <MX_RTC_Init+0x8c>)
 8000316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800031a:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800031c:	4817      	ldr	r0, [pc, #92]	; (800037c <MX_RTC_Init+0x8c>)
 800031e:	f001 fa05 	bl	800172c <HAL_RTC_Init>
 8000322:	4603      	mov	r3, r0
 8000324:	2b00      	cmp	r3, #0
 8000326:	d001      	beq.n	800032c <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8000328:	f7ff ffdc 	bl	80002e4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 800032c:	2300      	movs	r3, #0
 800032e:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8000330:	2300      	movs	r3, #0
 8000332:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8000334:	2300      	movs	r3, #0
 8000336:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000338:	1d3b      	adds	r3, r7, #4
 800033a:	2200      	movs	r2, #0
 800033c:	4619      	mov	r1, r3
 800033e:	480f      	ldr	r0, [pc, #60]	; (800037c <MX_RTC_Init+0x8c>)
 8000340:	f001 fa8a 	bl	8001858 <HAL_RTC_SetTime>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800034a:	f7ff ffcb 	bl	80002e4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 800034e:	2301      	movs	r3, #1
 8000350:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8000352:	2301      	movs	r3, #1
 8000354:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8000356:	2301      	movs	r3, #1
 8000358:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 800035a:	2300      	movs	r3, #0
 800035c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 800035e:	463b      	mov	r3, r7
 8000360:	2200      	movs	r2, #0
 8000362:	4619      	mov	r1, r3
 8000364:	4805      	ldr	r0, [pc, #20]	; (800037c <MX_RTC_Init+0x8c>)
 8000366:	f001 fb0f 	bl	8001988 <HAL_RTC_SetDate>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8000370:	f7ff ffb8 	bl	80002e4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	20000d50 	.word	0x20000d50
 8000380:	40002800 	.word	0x40002800

08000384 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <HAL_RTC_MspInit+0x3c>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d110      	bne.n	80003b8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8000396:	f000 fbf9 	bl	8000b8c <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800039a:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <HAL_RTC_MspInit+0x40>)
 800039c:	69db      	ldr	r3, [r3, #28]
 800039e:	4a09      	ldr	r2, [pc, #36]	; (80003c4 <HAL_RTC_MspInit+0x40>)
 80003a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80003a4:	61d3      	str	r3, [r2, #28]
 80003a6:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <HAL_RTC_MspInit+0x40>)
 80003a8:	69db      	ldr	r3, [r3, #28]
 80003aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80003ae:	60fb      	str	r3, [r7, #12]
 80003b0:	68fb      	ldr	r3, [r7, #12]
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80003b2:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <HAL_RTC_MspInit+0x44>)
 80003b4:	2201      	movs	r2, #1
 80003b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80003b8:	bf00      	nop
 80003ba:	3710      	adds	r7, #16
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40002800 	.word	0x40002800
 80003c4:	40021000 	.word	0x40021000
 80003c8:	4242043c 	.word	0x4242043c

080003cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <HAL_MspInit+0x5c>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a14      	ldr	r2, [pc, #80]	; (8000428 <HAL_MspInit+0x5c>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <HAL_MspInit+0x5c>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <HAL_MspInit+0x5c>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <HAL_MspInit+0x5c>)
 80003f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <HAL_MspInit+0x5c>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <HAL_MspInit+0x60>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <HAL_MspInit+0x60>)
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000
 800042c:	40010000 	.word	0x40010000

08000430 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08c      	sub	sp, #48	; 0x30
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800043c:	2300      	movs	r3, #0
 800043e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8000440:	2200      	movs	r2, #0
 8000442:	6879      	ldr	r1, [r7, #4]
 8000444:	201e      	movs	r0, #30
 8000446:	f000 f9f2 	bl	800082e <HAL_NVIC_SetPriority>

  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800044a:	201e      	movs	r0, #30
 800044c:	f000 fa0b 	bl	8000866 <HAL_NVIC_EnableIRQ>

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000450:	4b1e      	ldr	r3, [pc, #120]	; (80004cc <HAL_InitTick+0x9c>)
 8000452:	69db      	ldr	r3, [r3, #28]
 8000454:	4a1d      	ldr	r2, [pc, #116]	; (80004cc <HAL_InitTick+0x9c>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	61d3      	str	r3, [r2, #28]
 800045c:	4b1b      	ldr	r3, [pc, #108]	; (80004cc <HAL_InitTick+0x9c>)
 800045e:	69db      	ldr	r3, [r3, #28]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000468:	f107 0210 	add.w	r2, r7, #16
 800046c:	f107 0314 	add.w	r3, r7, #20
 8000470:	4611      	mov	r1, r2
 8000472:	4618      	mov	r0, r3
 8000474:	f000 ff92 	bl	800139c <HAL_RCC_GetClockConfig>

  /* Compute TIM4 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000478:	f000 ff68 	bl	800134c <HAL_RCC_GetPCLK1Freq>
 800047c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800047e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000480:	4a13      	ldr	r2, [pc, #76]	; (80004d0 <HAL_InitTick+0xa0>)
 8000482:	fba2 2303 	umull	r2, r3, r2, r3
 8000486:	0c9b      	lsrs	r3, r3, #18
 8000488:	3b01      	subs	r3, #1
 800048a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800048c:	4b11      	ldr	r3, [pc, #68]	; (80004d4 <HAL_InitTick+0xa4>)
 800048e:	4a12      	ldr	r2, [pc, #72]	; (80004d8 <HAL_InitTick+0xa8>)
 8000490:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000492:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <HAL_InitTick+0xa4>)
 8000494:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000498:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800049a:	4a0e      	ldr	r2, [pc, #56]	; (80004d4 <HAL_InitTick+0xa4>)
 800049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800049e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	; (80004d4 <HAL_InitTick+0xa4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	; (80004d4 <HAL_InitTick+0xa4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80004ac:	4809      	ldr	r0, [pc, #36]	; (80004d4 <HAL_InitTick+0xa4>)
 80004ae:	f001 fccb 	bl	8001e48 <HAL_TIM_Base_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d104      	bne.n	80004c2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80004b8:	4806      	ldr	r0, [pc, #24]	; (80004d4 <HAL_InitTick+0xa4>)
 80004ba:	f001 fd1d 	bl	8001ef8 <HAL_TIM_Base_Start_IT>
 80004be:	4603      	mov	r3, r0
 80004c0:	e000      	b.n	80004c4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004c2:	2301      	movs	r3, #1
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	3730      	adds	r7, #48	; 0x30
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	40021000 	.word	0x40021000
 80004d0:	431bde83 	.word	0x431bde83
 80004d4:	20000d64 	.word	0x20000d64
 80004d8:	40000800 	.word	0x40000800

080004dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <NMI_Handler+0x4>

080004e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004e6:	e7fe      	b.n	80004e6 <HardFault_Handler+0x4>

080004e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <MemManage_Handler+0x4>

080004ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <BusFault_Handler+0x4>

080004f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <UsageFault_Handler+0x4>

080004fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004fe:	bf00      	nop
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr
	...

08000508 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800050c:	4802      	ldr	r0, [pc, #8]	; (8000518 <TIM4_IRQHandler+0x10>)
 800050e:	f001 fd45 	bl	8001f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000d64 	.word	0x20000d64

0800051c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	bc80      	pop	{r7}
 8000526:	4770      	bx	lr

08000528 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 800052e:	4a12      	ldr	r2, [pc, #72]	; (8000578 <MX_USART1_UART_Init+0x50>)
 8000530:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000532:	4b10      	ldr	r3, [pc, #64]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 8000534:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000538:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 8000542:	2200      	movs	r2, #0
 8000544:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 8000548:	2200      	movs	r2, #0
 800054a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 800054e:	220c      	movs	r2, #12
 8000550:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000552:	4b08      	ldr	r3, [pc, #32]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 8000554:	2200      	movs	r2, #0
 8000556:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 800055a:	2200      	movs	r2, #0
 800055c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800055e:	4805      	ldr	r0, [pc, #20]	; (8000574 <MX_USART1_UART_Init+0x4c>)
 8000560:	f001 febc 	bl	80022dc <HAL_UART_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800056a:	f7ff febb 	bl	80002e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800056e:	bf00      	nop
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	20000dac 	.word	0x20000dac
 8000578:	40013800 	.word	0x40013800

0800057c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b088      	sub	sp, #32
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000584:	f107 0310 	add.w	r3, r7, #16
 8000588:	2200      	movs	r2, #0
 800058a:	601a      	str	r2, [r3, #0]
 800058c:	605a      	str	r2, [r3, #4]
 800058e:	609a      	str	r2, [r3, #8]
 8000590:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <HAL_UART_MspInit+0x8c>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d131      	bne.n	8000600 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800059c:	4b1b      	ldr	r3, [pc, #108]	; (800060c <HAL_UART_MspInit+0x90>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a1a      	ldr	r2, [pc, #104]	; (800060c <HAL_UART_MspInit+0x90>)
 80005a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <HAL_UART_MspInit+0x90>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b4:	4b15      	ldr	r3, [pc, #84]	; (800060c <HAL_UART_MspInit+0x90>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a14      	ldr	r2, [pc, #80]	; (800060c <HAL_UART_MspInit+0x90>)
 80005ba:	f043 0304 	orr.w	r3, r3, #4
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b12      	ldr	r3, [pc, #72]	; (800060c <HAL_UART_MspInit+0x90>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0304 	and.w	r3, r3, #4
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005d6:	2303      	movs	r3, #3
 80005d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005da:	f107 0310 	add.w	r3, r7, #16
 80005de:	4619      	mov	r1, r3
 80005e0:	480b      	ldr	r0, [pc, #44]	; (8000610 <HAL_UART_MspInit+0x94>)
 80005e2:	f000 f94f 	bl	8000884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005f4:	f107 0310 	add.w	r3, r7, #16
 80005f8:	4619      	mov	r1, r3
 80005fa:	4805      	ldr	r0, [pc, #20]	; (8000610 <HAL_UART_MspInit+0x94>)
 80005fc:	f000 f942 	bl	8000884 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000600:	bf00      	nop
 8000602:	3720      	adds	r7, #32
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40013800 	.word	0x40013800
 800060c:	40021000 	.word	0x40021000
 8000610:	40010800 	.word	0x40010800

08000614 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000614:	480c      	ldr	r0, [pc, #48]	; (8000648 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000616:	490d      	ldr	r1, [pc, #52]	; (800064c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000618:	4a0d      	ldr	r2, [pc, #52]	; (8000650 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800061c:	e002      	b.n	8000624 <LoopCopyDataInit>

0800061e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800061e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000622:	3304      	adds	r3, #4

08000624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000628:	d3f9      	bcc.n	800061e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062a:	4a0a      	ldr	r2, [pc, #40]	; (8000654 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800062c:	4c0a      	ldr	r4, [pc, #40]	; (8000658 <LoopFillZerobss+0x22>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000630:	e001      	b.n	8000636 <LoopFillZerobss>

08000632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000634:	3204      	adds	r2, #4

08000636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000638:	d3fb      	bcc.n	8000632 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800063a:	f7ff ff6f 	bl	800051c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800063e:	f002 feb1 	bl	80033a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000642:	f7ff fdbf 	bl	80001c4 <main>
  bx lr
 8000646:	4770      	bx	lr
  ldr r0, =_sdata
 8000648:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800064c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000650:	08003468 	.word	0x08003468
  ldr r2, =_sbss
 8000654:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000658:	20000df4 	.word	0x20000df4

0800065c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800065c:	e7fe      	b.n	800065c <ADC1_2_IRQHandler>
	...

08000660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000664:	4b08      	ldr	r3, [pc, #32]	; (8000688 <HAL_Init+0x28>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_Init+0x28>)
 800066a:	f043 0310 	orr.w	r3, r3, #16
 800066e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 f8d1 	bl	8000818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000676:	200f      	movs	r0, #15
 8000678:	f7ff feda 	bl	8000430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800067c:	f7ff fea6 	bl	80003cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40022000 	.word	0x40022000

0800068c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <HAL_IncTick+0x1c>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4b05      	ldr	r3, [pc, #20]	; (80006ac <HAL_IncTick+0x20>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4413      	add	r3, r2
 800069c:	4a03      	ldr	r2, [pc, #12]	; (80006ac <HAL_IncTick+0x20>)
 800069e:	6013      	str	r3, [r2, #0]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000df0 	.word	0x20000df0

080006b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  return uwTick;
 80006b4:	4b02      	ldr	r3, [pc, #8]	; (80006c0 <HAL_GetTick+0x10>)
 80006b6:	681b      	ldr	r3, [r3, #0]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr
 80006c0:	20000df0 	.word	0x20000df0

080006c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006c4:	b480      	push	{r7}
 80006c6:	b085      	sub	sp, #20
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f003 0307 	and.w	r3, r3, #7
 80006d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006da:	68ba      	ldr	r2, [r7, #8]
 80006dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006e0:	4013      	ands	r3, r2
 80006e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <__NVIC_SetPriorityGrouping+0x44>)
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	60d3      	str	r3, [r2, #12]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	e000ed00 	.word	0xe000ed00

0800070c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <__NVIC_GetPriorityGrouping+0x18>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	f003 0307 	and.w	r3, r3, #7
}
 800071a:	4618      	mov	r0, r3
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000736:	2b00      	cmp	r3, #0
 8000738:	db0b      	blt.n	8000752 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	f003 021f 	and.w	r2, r3, #31
 8000740:	4906      	ldr	r1, [pc, #24]	; (800075c <__NVIC_EnableIRQ+0x34>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	095b      	lsrs	r3, r3, #5
 8000748:	2001      	movs	r0, #1
 800074a:	fa00 f202 	lsl.w	r2, r0, r2
 800074e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b089      	sub	sp, #36	; 0x24
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	60f8      	str	r0, [r7, #12]
 80007bc:	60b9      	str	r1, [r7, #8]
 80007be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	f003 0307 	and.w	r3, r3, #7
 80007c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c8:	69fb      	ldr	r3, [r7, #28]
 80007ca:	f1c3 0307 	rsb	r3, r3, #7
 80007ce:	2b04      	cmp	r3, #4
 80007d0:	bf28      	it	cs
 80007d2:	2304      	movcs	r3, #4
 80007d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3304      	adds	r3, #4
 80007da:	2b06      	cmp	r3, #6
 80007dc:	d902      	bls.n	80007e4 <NVIC_EncodePriority+0x30>
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	3b03      	subs	r3, #3
 80007e2:	e000      	b.n	80007e6 <NVIC_EncodePriority+0x32>
 80007e4:	2300      	movs	r3, #0
 80007e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007ec:	69bb      	ldr	r3, [r7, #24]
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	401a      	ands	r2, r3
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000800:	697b      	ldr	r3, [r7, #20]
 8000802:	fa01 f303 	lsl.w	r3, r1, r3
 8000806:	43d9      	mvns	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	4313      	orrs	r3, r2
         );
}
 800080e:	4618      	mov	r0, r3
 8000810:	3724      	adds	r7, #36	; 0x24
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr

08000818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000820:	6878      	ldr	r0, [r7, #4]
 8000822:	f7ff ff4f 	bl	80006c4 <__NVIC_SetPriorityGrouping>
}
 8000826:	bf00      	nop
 8000828:	3708      	adds	r7, #8
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}

0800082e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082e:	b580      	push	{r7, lr}
 8000830:	b086      	sub	sp, #24
 8000832:	af00      	add	r7, sp, #0
 8000834:	4603      	mov	r3, r0
 8000836:	60b9      	str	r1, [r7, #8]
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000840:	f7ff ff64 	bl	800070c <__NVIC_GetPriorityGrouping>
 8000844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000846:	687a      	ldr	r2, [r7, #4]
 8000848:	68b9      	ldr	r1, [r7, #8]
 800084a:	6978      	ldr	r0, [r7, #20]
 800084c:	f7ff ffb2 	bl	80007b4 <NVIC_EncodePriority>
 8000850:	4602      	mov	r2, r0
 8000852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000856:	4611      	mov	r1, r2
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff81 	bl	8000760 <__NVIC_SetPriority>
}
 800085e:	bf00      	nop
 8000860:	3718      	adds	r7, #24
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b082      	sub	sp, #8
 800086a:	af00      	add	r7, sp, #0
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000870:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000874:	4618      	mov	r0, r3
 8000876:	f7ff ff57 	bl	8000728 <__NVIC_EnableIRQ>
}
 800087a:	bf00      	nop
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b480      	push	{r7}
 8000886:	b08b      	sub	sp, #44	; 0x2c
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000896:	e169      	b.n	8000b6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000898:	2201      	movs	r2, #1
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	69fa      	ldr	r2, [r7, #28]
 80008a8:	4013      	ands	r3, r2
 80008aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	f040 8158 	bne.w	8000b66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	4a9a      	ldr	r2, [pc, #616]	; (8000b24 <HAL_GPIO_Init+0x2a0>)
 80008bc:	4293      	cmp	r3, r2
 80008be:	d05e      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008c0:	4a98      	ldr	r2, [pc, #608]	; (8000b24 <HAL_GPIO_Init+0x2a0>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d875      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008c6:	4a98      	ldr	r2, [pc, #608]	; (8000b28 <HAL_GPIO_Init+0x2a4>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d058      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008cc:	4a96      	ldr	r2, [pc, #600]	; (8000b28 <HAL_GPIO_Init+0x2a4>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d86f      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008d2:	4a96      	ldr	r2, [pc, #600]	; (8000b2c <HAL_GPIO_Init+0x2a8>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d052      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008d8:	4a94      	ldr	r2, [pc, #592]	; (8000b2c <HAL_GPIO_Init+0x2a8>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d869      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008de:	4a94      	ldr	r2, [pc, #592]	; (8000b30 <HAL_GPIO_Init+0x2ac>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d04c      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008e4:	4a92      	ldr	r2, [pc, #584]	; (8000b30 <HAL_GPIO_Init+0x2ac>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d863      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008ea:	4a92      	ldr	r2, [pc, #584]	; (8000b34 <HAL_GPIO_Init+0x2b0>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d046      	beq.n	800097e <HAL_GPIO_Init+0xfa>
 80008f0:	4a90      	ldr	r2, [pc, #576]	; (8000b34 <HAL_GPIO_Init+0x2b0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d85d      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008f6:	2b12      	cmp	r3, #18
 80008f8:	d82a      	bhi.n	8000950 <HAL_GPIO_Init+0xcc>
 80008fa:	2b12      	cmp	r3, #18
 80008fc:	d859      	bhi.n	80009b2 <HAL_GPIO_Init+0x12e>
 80008fe:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <HAL_GPIO_Init+0x80>)
 8000900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000904:	0800097f 	.word	0x0800097f
 8000908:	08000959 	.word	0x08000959
 800090c:	0800096b 	.word	0x0800096b
 8000910:	080009ad 	.word	0x080009ad
 8000914:	080009b3 	.word	0x080009b3
 8000918:	080009b3 	.word	0x080009b3
 800091c:	080009b3 	.word	0x080009b3
 8000920:	080009b3 	.word	0x080009b3
 8000924:	080009b3 	.word	0x080009b3
 8000928:	080009b3 	.word	0x080009b3
 800092c:	080009b3 	.word	0x080009b3
 8000930:	080009b3 	.word	0x080009b3
 8000934:	080009b3 	.word	0x080009b3
 8000938:	080009b3 	.word	0x080009b3
 800093c:	080009b3 	.word	0x080009b3
 8000940:	080009b3 	.word	0x080009b3
 8000944:	080009b3 	.word	0x080009b3
 8000948:	08000961 	.word	0x08000961
 800094c:	08000975 	.word	0x08000975
 8000950:	4a79      	ldr	r2, [pc, #484]	; (8000b38 <HAL_GPIO_Init+0x2b4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d013      	beq.n	800097e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000956:	e02c      	b.n	80009b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	623b      	str	r3, [r7, #32]
          break;
 800095e:	e029      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	68db      	ldr	r3, [r3, #12]
 8000964:	3304      	adds	r3, #4
 8000966:	623b      	str	r3, [r7, #32]
          break;
 8000968:	e024      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	68db      	ldr	r3, [r3, #12]
 800096e:	3308      	adds	r3, #8
 8000970:	623b      	str	r3, [r7, #32]
          break;
 8000972:	e01f      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	330c      	adds	r3, #12
 800097a:	623b      	str	r3, [r7, #32]
          break;
 800097c:	e01a      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d102      	bne.n	800098c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000986:	2304      	movs	r3, #4
 8000988:	623b      	str	r3, [r7, #32]
          break;
 800098a:	e013      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	2b01      	cmp	r3, #1
 8000992:	d105      	bne.n	80009a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000994:	2308      	movs	r3, #8
 8000996:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	611a      	str	r2, [r3, #16]
          break;
 800099e:	e009      	b.n	80009b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009a0:	2308      	movs	r3, #8
 80009a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	69fa      	ldr	r2, [r7, #28]
 80009a8:	615a      	str	r2, [r3, #20]
          break;
 80009aa:	e003      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
          break;
 80009b0:	e000      	b.n	80009b4 <HAL_GPIO_Init+0x130>
          break;
 80009b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	2bff      	cmp	r3, #255	; 0xff
 80009b8:	d801      	bhi.n	80009be <HAL_GPIO_Init+0x13a>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	e001      	b.n	80009c2 <HAL_GPIO_Init+0x13e>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3304      	adds	r3, #4
 80009c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	2bff      	cmp	r3, #255	; 0xff
 80009c8:	d802      	bhi.n	80009d0 <HAL_GPIO_Init+0x14c>
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	e002      	b.n	80009d6 <HAL_GPIO_Init+0x152>
 80009d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d2:	3b08      	subs	r3, #8
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	210f      	movs	r1, #15
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	fa01 f303 	lsl.w	r3, r1, r3
 80009e4:	43db      	mvns	r3, r3
 80009e6:	401a      	ands	r2, r3
 80009e8:	6a39      	ldr	r1, [r7, #32]
 80009ea:	693b      	ldr	r3, [r7, #16]
 80009ec:	fa01 f303 	lsl.w	r3, r1, r3
 80009f0:	431a      	orrs	r2, r3
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f000 80b1 	beq.w	8000b66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a04:	4b4d      	ldr	r3, [pc, #308]	; (8000b3c <HAL_GPIO_Init+0x2b8>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a4c      	ldr	r2, [pc, #304]	; (8000b3c <HAL_GPIO_Init+0x2b8>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b4a      	ldr	r3, [pc, #296]	; (8000b3c <HAL_GPIO_Init+0x2b8>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	60bb      	str	r3, [r7, #8]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a1c:	4a48      	ldr	r2, [pc, #288]	; (8000b40 <HAL_GPIO_Init+0x2bc>)
 8000a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a20:	089b      	lsrs	r3, r3, #2
 8000a22:	3302      	adds	r3, #2
 8000a24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	220f      	movs	r2, #15
 8000a34:	fa02 f303 	lsl.w	r3, r2, r3
 8000a38:	43db      	mvns	r3, r3
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4013      	ands	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a40      	ldr	r2, [pc, #256]	; (8000b44 <HAL_GPIO_Init+0x2c0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d013      	beq.n	8000a70 <HAL_GPIO_Init+0x1ec>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a3f      	ldr	r2, [pc, #252]	; (8000b48 <HAL_GPIO_Init+0x2c4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d00d      	beq.n	8000a6c <HAL_GPIO_Init+0x1e8>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a3e      	ldr	r2, [pc, #248]	; (8000b4c <HAL_GPIO_Init+0x2c8>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d007      	beq.n	8000a68 <HAL_GPIO_Init+0x1e4>
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	4a3d      	ldr	r2, [pc, #244]	; (8000b50 <HAL_GPIO_Init+0x2cc>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d101      	bne.n	8000a64 <HAL_GPIO_Init+0x1e0>
 8000a60:	2303      	movs	r3, #3
 8000a62:	e006      	b.n	8000a72 <HAL_GPIO_Init+0x1ee>
 8000a64:	2304      	movs	r3, #4
 8000a66:	e004      	b.n	8000a72 <HAL_GPIO_Init+0x1ee>
 8000a68:	2302      	movs	r3, #2
 8000a6a:	e002      	b.n	8000a72 <HAL_GPIO_Init+0x1ee>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e000      	b.n	8000a72 <HAL_GPIO_Init+0x1ee>
 8000a70:	2300      	movs	r3, #0
 8000a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a74:	f002 0203 	and.w	r2, r2, #3
 8000a78:	0092      	lsls	r2, r2, #2
 8000a7a:	4093      	lsls	r3, r2
 8000a7c:	68fa      	ldr	r2, [r7, #12]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a82:	492f      	ldr	r1, [pc, #188]	; (8000b40 <HAL_GPIO_Init+0x2bc>)
 8000a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	3302      	adds	r3, #2
 8000a8a:	68fa      	ldr	r2, [r7, #12]
 8000a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d006      	beq.n	8000aaa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	492c      	ldr	r1, [pc, #176]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	600b      	str	r3, [r1, #0]
 8000aa8:	e006      	b.n	8000ab8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aaa:	4b2a      	ldr	r3, [pc, #168]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	43db      	mvns	r3, r3
 8000ab2:	4928      	ldr	r1, [pc, #160]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d006      	beq.n	8000ad2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ac4:	4b23      	ldr	r3, [pc, #140]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	4922      	ldr	r1, [pc, #136]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	604b      	str	r3, [r1, #4]
 8000ad0:	e006      	b.n	8000ae0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ad2:	4b20      	ldr	r3, [pc, #128]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000ad4:	685a      	ldr	r2, [r3, #4]
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	491e      	ldr	r1, [pc, #120]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000adc:	4013      	ands	r3, r2
 8000ade:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d006      	beq.n	8000afa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000aee:	689a      	ldr	r2, [r3, #8]
 8000af0:	4918      	ldr	r1, [pc, #96]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000af2:	69bb      	ldr	r3, [r7, #24]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	608b      	str	r3, [r1, #8]
 8000af8:	e006      	b.n	8000b08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000afc:	689a      	ldr	r2, [r3, #8]
 8000afe:	69bb      	ldr	r3, [r7, #24]
 8000b00:	43db      	mvns	r3, r3
 8000b02:	4914      	ldr	r1, [pc, #80]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000b04:	4013      	ands	r3, r2
 8000b06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d021      	beq.n	8000b58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b14:	4b0f      	ldr	r3, [pc, #60]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000b16:	68da      	ldr	r2, [r3, #12]
 8000b18:	490e      	ldr	r1, [pc, #56]	; (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60cb      	str	r3, [r1, #12]
 8000b20:	e021      	b.n	8000b66 <HAL_GPIO_Init+0x2e2>
 8000b22:	bf00      	nop
 8000b24:	10320000 	.word	0x10320000
 8000b28:	10310000 	.word	0x10310000
 8000b2c:	10220000 	.word	0x10220000
 8000b30:	10210000 	.word	0x10210000
 8000b34:	10120000 	.word	0x10120000
 8000b38:	10110000 	.word	0x10110000
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000
 8000b44:	40010800 	.word	0x40010800
 8000b48:	40010c00 	.word	0x40010c00
 8000b4c:	40011000 	.word	0x40011000
 8000b50:	40011400 	.word	0x40011400
 8000b54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_GPIO_Init+0x304>)
 8000b5a:	68da      	ldr	r2, [r3, #12]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	43db      	mvns	r3, r3
 8000b60:	4909      	ldr	r1, [pc, #36]	; (8000b88 <HAL_GPIO_Init+0x304>)
 8000b62:	4013      	ands	r3, r2
 8000b64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b68:	3301      	adds	r3, #1
 8000b6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b72:	fa22 f303 	lsr.w	r3, r2, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f47f ae8e 	bne.w	8000898 <HAL_GPIO_Init+0x14>
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	372c      	adds	r7, #44	; 0x2c
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr
 8000b88:	40010400 	.word	0x40010400

08000b8c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8000b90:	4b03      	ldr	r3, [pc, #12]	; (8000ba0 <HAL_PWR_EnableBkUpAccess+0x14>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
}
 8000b96:	bf00      	nop
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	420e0020 	.word	0x420e0020

08000ba4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d101      	bne.n	8000bb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e26c      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	f000 8087 	beq.w	8000cd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000bc4:	4b92      	ldr	r3, [pc, #584]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f003 030c 	and.w	r3, r3, #12
 8000bcc:	2b04      	cmp	r3, #4
 8000bce:	d00c      	beq.n	8000bea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bd0:	4b8f      	ldr	r3, [pc, #572]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f003 030c 	and.w	r3, r3, #12
 8000bd8:	2b08      	cmp	r3, #8
 8000bda:	d112      	bne.n	8000c02 <HAL_RCC_OscConfig+0x5e>
 8000bdc:	4b8c      	ldr	r3, [pc, #560]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000be8:	d10b      	bne.n	8000c02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bea:	4b89      	ldr	r3, [pc, #548]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d06c      	beq.n	8000cd0 <HAL_RCC_OscConfig+0x12c>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	685b      	ldr	r3, [r3, #4]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d168      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	e246      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c0a:	d106      	bne.n	8000c1a <HAL_RCC_OscConfig+0x76>
 8000c0c:	4b80      	ldr	r3, [pc, #512]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a7f      	ldr	r2, [pc, #508]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e02e      	b.n	8000c78 <HAL_RCC_OscConfig+0xd4>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d10c      	bne.n	8000c3c <HAL_RCC_OscConfig+0x98>
 8000c22:	4b7b      	ldr	r3, [pc, #492]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a7a      	ldr	r2, [pc, #488]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c2c:	6013      	str	r3, [r2, #0]
 8000c2e:	4b78      	ldr	r3, [pc, #480]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a77      	ldr	r2, [pc, #476]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c38:	6013      	str	r3, [r2, #0]
 8000c3a:	e01d      	b.n	8000c78 <HAL_RCC_OscConfig+0xd4>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c44:	d10c      	bne.n	8000c60 <HAL_RCC_OscConfig+0xbc>
 8000c46:	4b72      	ldr	r3, [pc, #456]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a71      	ldr	r2, [pc, #452]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c50:	6013      	str	r3, [r2, #0]
 8000c52:	4b6f      	ldr	r3, [pc, #444]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a6e      	ldr	r2, [pc, #440]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c5c:	6013      	str	r3, [r2, #0]
 8000c5e:	e00b      	b.n	8000c78 <HAL_RCC_OscConfig+0xd4>
 8000c60:	4b6b      	ldr	r3, [pc, #428]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a6a      	ldr	r2, [pc, #424]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c6a:	6013      	str	r3, [r2, #0]
 8000c6c:	4b68      	ldr	r3, [pc, #416]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a67      	ldr	r2, [pc, #412]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d013      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c80:	f7ff fd16 	bl	80006b0 <HAL_GetTick>
 8000c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c86:	e008      	b.n	8000c9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c88:	f7ff fd12 	bl	80006b0 <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b64      	cmp	r3, #100	; 0x64
 8000c94:	d901      	bls.n	8000c9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e1fa      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9a:	4b5d      	ldr	r3, [pc, #372]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f0      	beq.n	8000c88 <HAL_RCC_OscConfig+0xe4>
 8000ca6:	e014      	b.n	8000cd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca8:	f7ff fd02 	bl	80006b0 <HAL_GetTick>
 8000cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cae:	e008      	b.n	8000cc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cb0:	f7ff fcfe 	bl	80006b0 <HAL_GetTick>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	693b      	ldr	r3, [r7, #16]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	2b64      	cmp	r3, #100	; 0x64
 8000cbc:	d901      	bls.n	8000cc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	e1e6      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cc2:	4b53      	ldr	r3, [pc, #332]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d1f0      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x10c>
 8000cce:	e000      	b.n	8000cd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f003 0302 	and.w	r3, r3, #2
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d063      	beq.n	8000da6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cde:	4b4c      	ldr	r3, [pc, #304]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 030c 	and.w	r3, r3, #12
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d00b      	beq.n	8000d02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000cea:	4b49      	ldr	r3, [pc, #292]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 030c 	and.w	r3, r3, #12
 8000cf2:	2b08      	cmp	r3, #8
 8000cf4:	d11c      	bne.n	8000d30 <HAL_RCC_OscConfig+0x18c>
 8000cf6:	4b46      	ldr	r3, [pc, #280]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d116      	bne.n	8000d30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d02:	4b43      	ldr	r3, [pc, #268]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d005      	beq.n	8000d1a <HAL_RCC_OscConfig+0x176>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	691b      	ldr	r3, [r3, #16]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d001      	beq.n	8000d1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e1ba      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d1a:	4b3d      	ldr	r3, [pc, #244]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	695b      	ldr	r3, [r3, #20]
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	4939      	ldr	r1, [pc, #228]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d2e:	e03a      	b.n	8000da6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	691b      	ldr	r3, [r3, #16]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d020      	beq.n	8000d7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d38:	4b36      	ldr	r3, [pc, #216]	; (8000e14 <HAL_RCC_OscConfig+0x270>)
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d3e:	f7ff fcb7 	bl	80006b0 <HAL_GetTick>
 8000d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d44:	e008      	b.n	8000d58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d46:	f7ff fcb3 	bl	80006b0 <HAL_GetTick>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	1ad3      	subs	r3, r2, r3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d901      	bls.n	8000d58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d54:	2303      	movs	r3, #3
 8000d56:	e19b      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d58:	4b2d      	ldr	r3, [pc, #180]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f003 0302 	and.w	r3, r3, #2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d0f0      	beq.n	8000d46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d64:	4b2a      	ldr	r3, [pc, #168]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	00db      	lsls	r3, r3, #3
 8000d72:	4927      	ldr	r1, [pc, #156]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	4313      	orrs	r3, r2
 8000d76:	600b      	str	r3, [r1, #0]
 8000d78:	e015      	b.n	8000da6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d7a:	4b26      	ldr	r3, [pc, #152]	; (8000e14 <HAL_RCC_OscConfig+0x270>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d80:	f7ff fc96 	bl	80006b0 <HAL_GetTick>
 8000d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d86:	e008      	b.n	8000d9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d88:	f7ff fc92 	bl	80006b0 <HAL_GetTick>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	1ad3      	subs	r3, r2, r3
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d901      	bls.n	8000d9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000d96:	2303      	movs	r3, #3
 8000d98:	e17a      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d9a:	4b1d      	ldr	r3, [pc, #116]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0302 	and.w	r3, r3, #2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1f0      	bne.n	8000d88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f003 0308 	and.w	r3, r3, #8
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d03a      	beq.n	8000e28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d019      	beq.n	8000dee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dba:	4b17      	ldr	r3, [pc, #92]	; (8000e18 <HAL_RCC_OscConfig+0x274>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc0:	f7ff fc76 	bl	80006b0 <HAL_GetTick>
 8000dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dc8:	f7ff fc72 	bl	80006b0 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b02      	cmp	r3, #2
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e15a      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0f0      	beq.n	8000dc8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f000 fb08 	bl	80013fc <RCC_Delay>
 8000dec:	e01c      	b.n	8000e28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	; (8000e18 <HAL_RCC_OscConfig+0x274>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000df4:	f7ff fc5c 	bl	80006b0 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dfa:	e00f      	b.n	8000e1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fc58 	bl	80006b0 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d908      	bls.n	8000e1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e140      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000
 8000e14:	42420000 	.word	0x42420000
 8000e18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1c:	4b9e      	ldr	r3, [pc, #632]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d1e9      	bne.n	8000dfc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	f000 80a6 	beq.w	8000f82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e36:	2300      	movs	r3, #0
 8000e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e3a:	4b97      	ldr	r3, [pc, #604]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d10d      	bne.n	8000e62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e46:	4b94      	ldr	r3, [pc, #592]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	4a93      	ldr	r2, [pc, #588]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e50:	61d3      	str	r3, [r2, #28]
 8000e52:	4b91      	ldr	r3, [pc, #580]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e62:	4b8e      	ldr	r3, [pc, #568]	; (800109c <HAL_RCC_OscConfig+0x4f8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d118      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e6e:	4b8b      	ldr	r3, [pc, #556]	; (800109c <HAL_RCC_OscConfig+0x4f8>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a8a      	ldr	r2, [pc, #552]	; (800109c <HAL_RCC_OscConfig+0x4f8>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e7a:	f7ff fc19 	bl	80006b0 <HAL_GetTick>
 8000e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e80:	e008      	b.n	8000e94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e82:	f7ff fc15 	bl	80006b0 <HAL_GetTick>
 8000e86:	4602      	mov	r2, r0
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	2b64      	cmp	r3, #100	; 0x64
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e0fd      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e94:	4b81      	ldr	r3, [pc, #516]	; (800109c <HAL_RCC_OscConfig+0x4f8>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d0f0      	beq.n	8000e82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d106      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x312>
 8000ea8:	4b7b      	ldr	r3, [pc, #492]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000eaa:	6a1b      	ldr	r3, [r3, #32]
 8000eac:	4a7a      	ldr	r2, [pc, #488]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6213      	str	r3, [r2, #32]
 8000eb4:	e02d      	b.n	8000f12 <HAL_RCC_OscConfig+0x36e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10c      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x334>
 8000ebe:	4b76      	ldr	r3, [pc, #472]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000ec0:	6a1b      	ldr	r3, [r3, #32]
 8000ec2:	4a75      	ldr	r2, [pc, #468]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000ec4:	f023 0301 	bic.w	r3, r3, #1
 8000ec8:	6213      	str	r3, [r2, #32]
 8000eca:	4b73      	ldr	r3, [pc, #460]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000ecc:	6a1b      	ldr	r3, [r3, #32]
 8000ece:	4a72      	ldr	r2, [pc, #456]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000ed0:	f023 0304 	bic.w	r3, r3, #4
 8000ed4:	6213      	str	r3, [r2, #32]
 8000ed6:	e01c      	b.n	8000f12 <HAL_RCC_OscConfig+0x36e>
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	d10c      	bne.n	8000efa <HAL_RCC_OscConfig+0x356>
 8000ee0:	4b6d      	ldr	r3, [pc, #436]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000ee2:	6a1b      	ldr	r3, [r3, #32]
 8000ee4:	4a6c      	ldr	r2, [pc, #432]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000ee6:	f043 0304 	orr.w	r3, r3, #4
 8000eea:	6213      	str	r3, [r2, #32]
 8000eec:	4b6a      	ldr	r3, [pc, #424]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000eee:	6a1b      	ldr	r3, [r3, #32]
 8000ef0:	4a69      	ldr	r2, [pc, #420]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000ef2:	f043 0301 	orr.w	r3, r3, #1
 8000ef6:	6213      	str	r3, [r2, #32]
 8000ef8:	e00b      	b.n	8000f12 <HAL_RCC_OscConfig+0x36e>
 8000efa:	4b67      	ldr	r3, [pc, #412]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000efc:	6a1b      	ldr	r3, [r3, #32]
 8000efe:	4a66      	ldr	r2, [pc, #408]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000f00:	f023 0301 	bic.w	r3, r3, #1
 8000f04:	6213      	str	r3, [r2, #32]
 8000f06:	4b64      	ldr	r3, [pc, #400]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	4a63      	ldr	r2, [pc, #396]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000f0c:	f023 0304 	bic.w	r3, r3, #4
 8000f10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d015      	beq.n	8000f46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f1a:	f7ff fbc9 	bl	80006b0 <HAL_GetTick>
 8000f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f20:	e00a      	b.n	8000f38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f22:	f7ff fbc5 	bl	80006b0 <HAL_GetTick>
 8000f26:	4602      	mov	r2, r0
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d901      	bls.n	8000f38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e0ab      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f38:	4b57      	ldr	r3, [pc, #348]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000f3a:	6a1b      	ldr	r3, [r3, #32]
 8000f3c:	f003 0302 	and.w	r3, r3, #2
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d0ee      	beq.n	8000f22 <HAL_RCC_OscConfig+0x37e>
 8000f44:	e014      	b.n	8000f70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f46:	f7ff fbb3 	bl	80006b0 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f4c:	e00a      	b.n	8000f64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f4e:	f7ff fbaf 	bl	80006b0 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d901      	bls.n	8000f64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f60:	2303      	movs	r3, #3
 8000f62:	e095      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f64:	4b4c      	ldr	r3, [pc, #304]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000f66:	6a1b      	ldr	r3, [r3, #32]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1ee      	bne.n	8000f4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f70:	7dfb      	ldrb	r3, [r7, #23]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d105      	bne.n	8000f82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f76:	4b48      	ldr	r3, [pc, #288]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000f78:	69db      	ldr	r3, [r3, #28]
 8000f7a:	4a47      	ldr	r2, [pc, #284]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69db      	ldr	r3, [r3, #28]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 8081 	beq.w	800108e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f8c:	4b42      	ldr	r3, [pc, #264]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f003 030c 	and.w	r3, r3, #12
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d061      	beq.n	800105c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d146      	bne.n	800102e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fa0:	4b3f      	ldr	r3, [pc, #252]	; (80010a0 <HAL_RCC_OscConfig+0x4fc>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fa6:	f7ff fb83 	bl	80006b0 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fae:	f7ff fb7f 	bl	80006b0 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e067      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fc0:	4b35      	ldr	r3, [pc, #212]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f0      	bne.n	8000fae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6a1b      	ldr	r3, [r3, #32]
 8000fd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fd4:	d108      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000fd6:	4b30      	ldr	r3, [pc, #192]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	492d      	ldr	r1, [pc, #180]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a19      	ldr	r1, [r3, #32]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff8:	430b      	orrs	r3, r1
 8000ffa:	4927      	ldr	r1, [pc, #156]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <HAL_RCC_OscConfig+0x4fc>)
 8001002:	2201      	movs	r2, #1
 8001004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001006:	f7ff fb53 	bl	80006b0 <HAL_GetTick>
 800100a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800100c:	e008      	b.n	8001020 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800100e:	f7ff fb4f 	bl	80006b0 <HAL_GetTick>
 8001012:	4602      	mov	r2, r0
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	2b02      	cmp	r3, #2
 800101a:	d901      	bls.n	8001020 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800101c:	2303      	movs	r3, #3
 800101e:	e037      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001020:	4b1d      	ldr	r3, [pc, #116]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0f0      	beq.n	800100e <HAL_RCC_OscConfig+0x46a>
 800102c:	e02f      	b.n	800108e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800102e:	4b1c      	ldr	r3, [pc, #112]	; (80010a0 <HAL_RCC_OscConfig+0x4fc>)
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fb3c 	bl	80006b0 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800103c:	f7ff fb38 	bl	80006b0 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b02      	cmp	r3, #2
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e020      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800104e:	4b12      	ldr	r3, [pc, #72]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d1f0      	bne.n	800103c <HAL_RCC_OscConfig+0x498>
 800105a:	e018      	b.n	800108e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69db      	ldr	r3, [r3, #28]
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e013      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001068:	4b0b      	ldr	r3, [pc, #44]	; (8001098 <HAL_RCC_OscConfig+0x4f4>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a1b      	ldr	r3, [r3, #32]
 8001078:	429a      	cmp	r2, r3
 800107a:	d106      	bne.n	800108a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001086:	429a      	cmp	r2, r3
 8001088:	d001      	beq.n	800108e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e000      	b.n	8001090 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40021000 	.word	0x40021000
 800109c:	40007000 	.word	0x40007000
 80010a0:	42420060 	.word	0x42420060

080010a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e0d0      	b.n	800125a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010b8:	4b6a      	ldr	r3, [pc, #424]	; (8001264 <HAL_RCC_ClockConfig+0x1c0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f003 0307 	and.w	r3, r3, #7
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d910      	bls.n	80010e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010c6:	4b67      	ldr	r3, [pc, #412]	; (8001264 <HAL_RCC_ClockConfig+0x1c0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f023 0207 	bic.w	r2, r3, #7
 80010ce:	4965      	ldr	r1, [pc, #404]	; (8001264 <HAL_RCC_ClockConfig+0x1c0>)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010d6:	4b63      	ldr	r3, [pc, #396]	; (8001264 <HAL_RCC_ClockConfig+0x1c0>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d001      	beq.n	80010e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e0b8      	b.n	800125a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f003 0302 	and.w	r3, r3, #2
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d020      	beq.n	8001136 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0304 	and.w	r3, r3, #4
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d005      	beq.n	800110c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001100:	4b59      	ldr	r3, [pc, #356]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	4a58      	ldr	r2, [pc, #352]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 8001106:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800110a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	2b00      	cmp	r3, #0
 8001116:	d005      	beq.n	8001124 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001118:	4b53      	ldr	r3, [pc, #332]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	4a52      	ldr	r2, [pc, #328]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 800111e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001122:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001124:	4b50      	ldr	r3, [pc, #320]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	494d      	ldr	r1, [pc, #308]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 8001132:	4313      	orrs	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	2b00      	cmp	r3, #0
 8001140:	d040      	beq.n	80011c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b01      	cmp	r3, #1
 8001148:	d107      	bne.n	800115a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800114a:	4b47      	ldr	r3, [pc, #284]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d115      	bne.n	8001182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e07f      	b.n	800125a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d107      	bne.n	8001172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001162:	4b41      	ldr	r3, [pc, #260]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d109      	bne.n	8001182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e073      	b.n	800125a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001172:	4b3d      	ldr	r3, [pc, #244]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e06b      	b.n	800125a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001182:	4b39      	ldr	r3, [pc, #228]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f023 0203 	bic.w	r2, r3, #3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4936      	ldr	r1, [pc, #216]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 8001190:	4313      	orrs	r3, r2
 8001192:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001194:	f7ff fa8c 	bl	80006b0 <HAL_GetTick>
 8001198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119a:	e00a      	b.n	80011b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800119c:	f7ff fa88 	bl	80006b0 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d901      	bls.n	80011b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ae:	2303      	movs	r3, #3
 80011b0:	e053      	b.n	800125a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b2:	4b2d      	ldr	r3, [pc, #180]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f003 020c 	and.w	r2, r3, #12
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d1eb      	bne.n	800119c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011c4:	4b27      	ldr	r3, [pc, #156]	; (8001264 <HAL_RCC_ClockConfig+0x1c0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d210      	bcs.n	80011f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d2:	4b24      	ldr	r3, [pc, #144]	; (8001264 <HAL_RCC_ClockConfig+0x1c0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f023 0207 	bic.w	r2, r3, #7
 80011da:	4922      	ldr	r1, [pc, #136]	; (8001264 <HAL_RCC_ClockConfig+0x1c0>)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	4313      	orrs	r3, r2
 80011e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011e2:	4b20      	ldr	r3, [pc, #128]	; (8001264 <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0307 	and.w	r3, r3, #7
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d001      	beq.n	80011f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e032      	b.n	800125a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d008      	beq.n	8001212 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001200:	4b19      	ldr	r3, [pc, #100]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	4916      	ldr	r1, [pc, #88]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 800120e:	4313      	orrs	r3, r2
 8001210:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d009      	beq.n	8001232 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800121e:	4b12      	ldr	r3, [pc, #72]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	691b      	ldr	r3, [r3, #16]
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	490e      	ldr	r1, [pc, #56]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 800122e:	4313      	orrs	r3, r2
 8001230:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001232:	f000 f821 	bl	8001278 <HAL_RCC_GetSysClockFreq>
 8001236:	4602      	mov	r2, r0
 8001238:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <HAL_RCC_ClockConfig+0x1c4>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	091b      	lsrs	r3, r3, #4
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	490a      	ldr	r1, [pc, #40]	; (800126c <HAL_RCC_ClockConfig+0x1c8>)
 8001244:	5ccb      	ldrb	r3, [r1, r3]
 8001246:	fa22 f303 	lsr.w	r3, r2, r3
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <HAL_RCC_ClockConfig+0x1cc>)
 800124c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_RCC_ClockConfig+0x1d0>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff f8ec 	bl	8000430 <HAL_InitTick>

  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40022000 	.word	0x40022000
 8001268:	40021000 	.word	0x40021000
 800126c:	08003448 	.word	0x08003448
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004

08001278 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001278:	b490      	push	{r4, r7}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001280:	1d3c      	adds	r4, r7, #4
 8001282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001288:	f240 2301 	movw	r3, #513	; 0x201
 800128c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	2300      	movs	r3, #0
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800129e:	2300      	movs	r3, #0
 80012a0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012a2:	4b22      	ldr	r3, [pc, #136]	; (800132c <HAL_RCC_GetSysClockFreq+0xb4>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d002      	beq.n	80012b8 <HAL_RCC_GetSysClockFreq+0x40>
 80012b2:	2b08      	cmp	r3, #8
 80012b4:	d003      	beq.n	80012be <HAL_RCC_GetSysClockFreq+0x46>
 80012b6:	e02d      	b.n	8001314 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012ba:	623b      	str	r3, [r7, #32]
      break;
 80012bc:	e02d      	b.n	800131a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	0c9b      	lsrs	r3, r3, #18
 80012c2:	f003 030f 	and.w	r3, r3, #15
 80012c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012ca:	4413      	add	r3, r2
 80012cc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012d0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d013      	beq.n	8001304 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012dc:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_RCC_GetSysClockFreq+0xb4>)
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	0c5b      	lsrs	r3, r3, #17
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80012ea:	4413      	add	r3, r2
 80012ec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80012f0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_RCC_GetSysClockFreq+0xb8>)
 80012f6:	fb02 f203 	mul.w	r2, r2, r3
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
 8001302:	e004      	b.n	800130e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	4a0b      	ldr	r2, [pc, #44]	; (8001334 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001308:	fb02 f303 	mul.w	r3, r2, r3
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800130e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001310:	623b      	str	r3, [r7, #32]
      break;
 8001312:	e002      	b.n	800131a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001316:	623b      	str	r3, [r7, #32]
      break;
 8001318:	bf00      	nop
    }
  }
  return sysclockfreq;
 800131a:	6a3b      	ldr	r3, [r7, #32]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3728      	adds	r7, #40	; 0x28
 8001320:	46bd      	mov	sp, r7
 8001322:	bc90      	pop	{r4, r7}
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	08003428 	.word	0x08003428
 800132c:	40021000 	.word	0x40021000
 8001330:	007a1200 	.word	0x007a1200
 8001334:	003d0900 	.word	0x003d0900

08001338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_RCC_GetHCLKFreq+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	20000000 	.word	0x20000000

0800134c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001350:	f7ff fff2 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 8001354:	4602      	mov	r2, r0
 8001356:	4b05      	ldr	r3, [pc, #20]	; (800136c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	4903      	ldr	r1, [pc, #12]	; (8001370 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001362:	5ccb      	ldrb	r3, [r1, r3]
 8001364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001368:	4618      	mov	r0, r3
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40021000 	.word	0x40021000
 8001370:	08003458 	.word	0x08003458

08001374 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001378:	f7ff ffde 	bl	8001338 <HAL_RCC_GetHCLKFreq>
 800137c:	4602      	mov	r2, r0
 800137e:	4b05      	ldr	r3, [pc, #20]	; (8001394 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	0adb      	lsrs	r3, r3, #11
 8001384:	f003 0307 	and.w	r3, r3, #7
 8001388:	4903      	ldr	r1, [pc, #12]	; (8001398 <HAL_RCC_GetPCLK2Freq+0x24>)
 800138a:	5ccb      	ldrb	r3, [r1, r3]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001390:	4618      	mov	r0, r3
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	08003458 	.word	0x08003458

0800139c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	220f      	movs	r2, #15
 80013aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <HAL_RCC_GetClockConfig+0x58>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0203 	and.w	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <HAL_RCC_GetClockConfig+0x58>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <HAL_RCC_GetClockConfig+0x58>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <HAL_RCC_GetClockConfig+0x58>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	08db      	lsrs	r3, r3, #3
 80013d6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_RCC_GetClockConfig+0x5c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0207 	and.w	r2, r3, #7
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr
 80013f4:	40021000 	.word	0x40021000
 80013f8:	40022000 	.word	0x40022000

080013fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b085      	sub	sp, #20
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <RCC_Delay+0x34>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0a      	ldr	r2, [pc, #40]	; (8001434 <RCC_Delay+0x38>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0a5b      	lsrs	r3, r3, #9
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	fb02 f303 	mul.w	r3, r2, r3
 8001416:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001418:	bf00      	nop
  }
  while (Delay --);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1e5a      	subs	r2, r3, #1
 800141e:	60fa      	str	r2, [r7, #12]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f9      	bne.n	8001418 <RCC_Delay+0x1c>
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr
 8001430:	20000000 	.word	0x20000000
 8001434:	10624dd3 	.word	0x10624dd3

08001438 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	d07d      	beq.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001454:	2300      	movs	r3, #0
 8001456:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001458:	4b4f      	ldr	r3, [pc, #316]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	2b00      	cmp	r3, #0
 8001462:	d10d      	bne.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	4b4c      	ldr	r3, [pc, #304]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001466:	69db      	ldr	r3, [r3, #28]
 8001468:	4a4b      	ldr	r2, [pc, #300]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800146a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146e:	61d3      	str	r3, [r2, #28]
 8001470:	4b49      	ldr	r3, [pc, #292]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001472:	69db      	ldr	r3, [r3, #28]
 8001474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800147c:	2301      	movs	r3, #1
 800147e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001480:	4b46      	ldr	r3, [pc, #280]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001488:	2b00      	cmp	r3, #0
 800148a:	d118      	bne.n	80014be <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800148c:	4b43      	ldr	r3, [pc, #268]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a42      	ldr	r2, [pc, #264]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001496:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001498:	f7ff f90a 	bl	80006b0 <HAL_GetTick>
 800149c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	e008      	b.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a0:	f7ff f906 	bl	80006b0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	2b64      	cmp	r3, #100	; 0x64
 80014ac:	d901      	bls.n	80014b2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80014ae:	2303      	movs	r3, #3
 80014b0:	e06d      	b.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d0f0      	beq.n	80014a0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014c0:	6a1b      	ldr	r3, [r3, #32]
 80014c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014c6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d02e      	beq.n	800152c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d027      	beq.n	800152c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80014dc:	4b2e      	ldr	r3, [pc, #184]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014de:	6a1b      	ldr	r3, [r3, #32]
 80014e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014e4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80014e6:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014ec:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80014f2:	4a29      	ldr	r2, [pc, #164]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d014      	beq.n	800152c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff f8d5 	bl	80006b0 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001508:	e00a      	b.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff f8d1 	bl	80006b0 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	f241 3288 	movw	r2, #5000	; 0x1388
 8001518:	4293      	cmp	r3, r2
 800151a:	d901      	bls.n	8001520 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e036      	b.n	800158e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	f003 0302 	and.w	r3, r3, #2
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0ee      	beq.n	800150a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800152c:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4917      	ldr	r1, [pc, #92]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800153a:	4313      	orrs	r3, r2
 800153c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800153e:	7dfb      	ldrb	r3, [r7, #23]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d105      	bne.n	8001550 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800154a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800154e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0302 	and.w	r3, r3, #2
 8001558:	2b00      	cmp	r3, #0
 800155a:	d008      	beq.n	800156e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	490b      	ldr	r1, [pc, #44]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800156a:	4313      	orrs	r3, r2
 800156c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	2b00      	cmp	r3, #0
 8001578:	d008      	beq.n	800158c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	4904      	ldr	r1, [pc, #16]	; (8001598 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001588:	4313      	orrs	r3, r2
 800158a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	40007000 	.word	0x40007000
 80015a0:	42420440 	.word	0x42420440

080015a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80015a4:	b590      	push	{r4, r7, lr}
 80015a6:	b08d      	sub	sp, #52	; 0x34
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015ac:	4b5a      	ldr	r3, [pc, #360]	; (8001718 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80015ae:	f107 040c 	add.w	r4, r7, #12
 80015b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015b8:	f240 2301 	movw	r3, #513	; 0x201
 80015bc:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
 80015c2:	2300      	movs	r3, #0
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2b10      	cmp	r3, #16
 80015d6:	d00a      	beq.n	80015ee <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b10      	cmp	r3, #16
 80015dc:	f200 8091 	bhi.w	8001702 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d04c      	beq.n	8001680 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d07c      	beq.n	80016e6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80015ec:	e089      	b.n	8001702 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 80015ee:	4b4b      	ldr	r3, [pc, #300]	; (800171c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80015f4:	4b49      	ldr	r3, [pc, #292]	; (800171c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 8082 	beq.w	8001706 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	0c9b      	lsrs	r3, r3, #18
 8001606:	f003 030f 	and.w	r3, r3, #15
 800160a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800160e:	4413      	add	r3, r2
 8001610:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001614:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d018      	beq.n	8001652 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001620:	4b3e      	ldr	r3, [pc, #248]	; (800171c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	0c5b      	lsrs	r3, r3, #17
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800162e:	4413      	add	r3, r2
 8001630:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00d      	beq.n	800165c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001640:	4a37      	ldr	r2, [pc, #220]	; (8001720 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	fbb2 f2f3 	udiv	r2, r2, r3
 8001648:	6a3b      	ldr	r3, [r7, #32]
 800164a:	fb02 f303 	mul.w	r3, r2, r3
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001650:	e004      	b.n	800165c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	4a33      	ldr	r2, [pc, #204]	; (8001724 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 8001656:	fb02 f303 	mul.w	r3, r2, r3
 800165a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800165c:	4b2f      	ldr	r3, [pc, #188]	; (800171c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001664:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001668:	d102      	bne.n	8001670 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 800166a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800166c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800166e:	e04a      	b.n	8001706 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4a2c      	ldr	r2, [pc, #176]	; (8001728 <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 8001676:	fba2 2303 	umull	r2, r3, r2, r3
 800167a:	085b      	lsrs	r3, r3, #1
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800167e:	e042      	b.n	8001706 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800168c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001690:	d108      	bne.n	80016a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 800169c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016a2:	e01f      	b.n	80016e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016ae:	d109      	bne.n	80016c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80016b0:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 80016bc:	f649 4340 	movw	r3, #40000	; 0x9c40
 80016c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80016c2:	e00f      	b.n	80016e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80016ce:	d11c      	bne.n	800170a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d016      	beq.n	800170a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 80016dc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80016e0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80016e2:	e012      	b.n	800170a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 80016e4:	e011      	b.n	800170a <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80016e6:	f7ff fe45 	bl	8001374 <HAL_RCC_GetPCLK2Freq>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	0b9b      	lsrs	r3, r3, #14
 80016f2:	f003 0303 	and.w	r3, r3, #3
 80016f6:	3301      	adds	r3, #1
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fe:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8001700:	e004      	b.n	800170c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001702:	bf00      	nop
 8001704:	e002      	b.n	800170c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8001706:	bf00      	nop
 8001708:	e000      	b.n	800170c <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800170a:	bf00      	nop
    }
  }
  return (frequency);
 800170c:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 800170e:	4618      	mov	r0, r3
 8001710:	3734      	adds	r7, #52	; 0x34
 8001712:	46bd      	mov	sp, r7
 8001714:	bd90      	pop	{r4, r7, pc}
 8001716:	bf00      	nop
 8001718:	08003438 	.word	0x08003438
 800171c:	40021000 	.word	0x40021000
 8001720:	007a1200 	.word	0x007a1200
 8001724:	003d0900 	.word	0x003d0900
 8001728:	aaaaaaab 	.word	0xaaaaaaab

0800172c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e084      	b.n	800184c <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7c5b      	ldrb	r3, [r3, #17]
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7fe fe16 	bl	8000384 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2202      	movs	r2, #2
 800175c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f9c8 	bl	8001af4 <HAL_RTC_WaitForSynchro>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d004      	beq.n	8001774 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2204      	movs	r2, #4
 800176e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e06b      	b.n	800184c <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 fa81 	bl	8001c7c <RTC_EnterInitMode>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d004      	beq.n	800178a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2204      	movs	r2, #4
 8001784:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e060      	b.n	800184c <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0207 	bic.w	r2, r2, #7
 8001798:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80017a2:	4b2c      	ldr	r3, [pc, #176]	; (8001854 <HAL_RTC_Init+0x128>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a2b      	ldr	r2, [pc, #172]	; (8001854 <HAL_RTC_Init+0x128>)
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80017ae:	4b29      	ldr	r3, [pc, #164]	; (8001854 <HAL_RTC_Init+0x128>)
 80017b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b2:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	4926      	ldr	r1, [pc, #152]	; (8001854 <HAL_RTC_Init+0x128>)
 80017bc:	4313      	orrs	r3, r2
 80017be:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017c8:	d003      	beq.n	80017d2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e00e      	b.n	80017f0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80017d2:	2001      	movs	r0, #1
 80017d4:	f7ff fee6 	bl	80015a4 <HAL_RCCEx_GetPeriphCLKFreq>
 80017d8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d104      	bne.n	80017ea <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2204      	movs	r2, #4
 80017e4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e030      	b.n	800184c <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3b01      	subs	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f023 010f 	bic.w	r1, r3, #15
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	0c1a      	lsrs	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	430a      	orrs	r2, r1
 8001804:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	0c1b      	lsrs	r3, r3, #16
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	68fa      	ldr	r2, [r7, #12]
 8001812:	b291      	uxth	r1, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	430b      	orrs	r3, r1
 800181a:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	f000 fa55 	bl	8001ccc <RTC_ExitInitMode>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d004      	beq.n	8001832 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2204      	movs	r2, #4
 800182c:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e00c      	b.n	800184c <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2201      	movs	r2, #1
 800183c:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2201      	movs	r2, #1
 8001842:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2201      	movs	r2, #1
 8001848:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800184a:	2300      	movs	r3, #0
  }
}
 800184c:	4618      	mov	r0, r3
 800184e:	3710      	adds	r7, #16
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40006c00 	.word	0x40006c00

08001858 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001858:	b590      	push	{r4, r7, lr}
 800185a:	b087      	sub	sp, #28
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	2300      	movs	r3, #0
 800186a:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <HAL_RTC_SetTime+0x20>
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d101      	bne.n	800187c <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e080      	b.n	800197e <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	7c1b      	ldrb	r3, [r3, #16]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d101      	bne.n	8001888 <HAL_RTC_SetTime+0x30>
 8001884:	2302      	movs	r3, #2
 8001886:	e07a      	b.n	800197e <HAL_RTC_SetTime+0x126>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2201      	movs	r2, #1
 800188c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2202      	movs	r2, #2
 8001892:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d113      	bne.n	80018c2 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	461a      	mov	r2, r3
 80018a0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80018a4:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	785b      	ldrb	r3, [r3, #1]
 80018ac:	4619      	mov	r1, r3
 80018ae:	460b      	mov	r3, r1
 80018b0:	011b      	lsls	r3, r3, #4
 80018b2:	1a5b      	subs	r3, r3, r1
 80018b4:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80018b6:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80018b8:	68ba      	ldr	r2, [r7, #8]
 80018ba:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e01e      	b.n	8001900 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fa28 	bl	8001d1c <RTC_Bcd2ToByte>
 80018cc:	4603      	mov	r3, r0
 80018ce:	461a      	mov	r2, r3
 80018d0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80018d4:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	785b      	ldrb	r3, [r3, #1]
 80018dc:	4618      	mov	r0, r3
 80018de:	f000 fa1d 	bl	8001d1c <RTC_Bcd2ToByte>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	4613      	mov	r3, r2
 80018e8:	011b      	lsls	r3, r3, #4
 80018ea:	1a9b      	subs	r3, r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80018ee:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	789b      	ldrb	r3, [r3, #2]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f000 fa11 	bl	8001d1c <RTC_Bcd2ToByte>
 80018fa:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 80018fc:	4423      	add	r3, r4
 80018fe:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001900:	6979      	ldr	r1, [r7, #20]
 8001902:	68f8      	ldr	r0, [r7, #12]
 8001904:	f000 f953 	bl	8001bae <RTC_WriteTimeCounter>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2204      	movs	r2, #4
 8001912:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2200      	movs	r2, #0
 8001918:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e02f      	b.n	800197e <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0205 	bic.w	r2, r2, #5
 800192c:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f964 	bl	8001bfc <RTC_ReadAlarmCounter>
 8001934:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800193c:	d018      	beq.n	8001970 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	429a      	cmp	r2, r3
 8001944:	d214      	bcs.n	8001970 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 800194c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001950:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001952:	6939      	ldr	r1, [r7, #16]
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f96a 	bl	8001c2e <RTC_WriteAlarmCounter>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2204      	movs	r2, #4
 8001964:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e006      	b.n	800197e <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2201      	movs	r2, #1
 8001974:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2200      	movs	r2, #0
 800197a:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 800197c:	2300      	movs	r3, #0
  }
}
 800197e:	4618      	mov	r0, r3
 8001980:	371c      	adds	r7, #28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd90      	pop	{r4, r7, pc}
	...

08001988 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8001994:	2300      	movs	r3, #0
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_RTC_SetDate+0x24>
 80019a6:	68bb      	ldr	r3, [r7, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e097      	b.n	8001ae0 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	7c1b      	ldrb	r3, [r3, #16]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d101      	bne.n	80019bc <HAL_RTC_SetDate+0x34>
 80019b8:	2302      	movs	r3, #2
 80019ba:	e091      	b.n	8001ae0 <HAL_RTC_SetDate+0x158>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2201      	movs	r2, #1
 80019c0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	2202      	movs	r2, #2
 80019c6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d10c      	bne.n	80019e8 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	78da      	ldrb	r2, [r3, #3]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	785a      	ldrb	r2, [r3, #1]
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	789a      	ldrb	r2, [r3, #2]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	739a      	strb	r2, [r3, #14]
 80019e6:	e01a      	b.n	8001a1e <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	78db      	ldrb	r3, [r3, #3]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f000 f995 	bl	8001d1c <RTC_Bcd2ToByte>
 80019f2:	4603      	mov	r3, r0
 80019f4:	461a      	mov	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	785b      	ldrb	r3, [r3, #1]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f98c 	bl	8001d1c <RTC_Bcd2ToByte>
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	789b      	ldrb	r3, [r3, #2]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 f983 	bl	8001d1c <RTC_Bcd2ToByte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	7bdb      	ldrb	r3, [r3, #15]
 8001a22:	4618      	mov	r0, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	7b59      	ldrb	r1, [r3, #13]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	7b9b      	ldrb	r3, [r3, #14]
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	f000 f993 	bl	8001d58 <RTC_WeekDayNum>
 8001a32:	4603      	mov	r3, r0
 8001a34:	461a      	mov	r2, r3
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	7b1a      	ldrb	r2, [r3, #12]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f000 f883 	bl	8001b4e <RTC_ReadTimeCounter>
 8001a48:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	4a26      	ldr	r2, [pc, #152]	; (8001ae8 <HAL_RTC_SetDate+0x160>)
 8001a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a52:	0adb      	lsrs	r3, r3, #11
 8001a54:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b18      	cmp	r3, #24
 8001a5a:	d93a      	bls.n	8001ad2 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	4a23      	ldr	r2, [pc, #140]	; (8001aec <HAL_RTC_SetDate+0x164>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	4a22      	ldr	r2, [pc, #136]	; (8001af0 <HAL_RTC_SetDate+0x168>)
 8001a68:	fb02 f303 	mul.w	r3, r2, r3
 8001a6c:	69fa      	ldr	r2, [r7, #28]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001a72:	69f9      	ldr	r1, [r7, #28]
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 f89a 	bl	8001bae <RTC_WriteTimeCounter>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2204      	movs	r2, #4
 8001a84:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e027      	b.n	8001ae0 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001a90:	68f8      	ldr	r0, [r7, #12]
 8001a92:	f000 f8b3 	bl	8001bfc <RTC_ReadAlarmCounter>
 8001a96:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a9e:	d018      	beq.n	8001ad2 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d214      	bcs.n	8001ad2 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8001aae:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001ab2:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001ab4:	69b9      	ldr	r1, [r7, #24]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f8b9 	bl	8001c2e <RTC_WriteAlarmCounter>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e006      	b.n	8001ae0 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	3720      	adds	r7, #32
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	91a2b3c5 	.word	0x91a2b3c5
 8001aec:	aaaaaaab 	.word	0xaaaaaaab
 8001af0:	00015180 	.word	0x00015180

08001af4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d101      	bne.n	8001b0a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e01d      	b.n	8001b46 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	685a      	ldr	r2, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0208 	bic.w	r2, r2, #8
 8001b18:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001b1a:	f7fe fdc9 	bl	80006b0 <HAL_GetTick>
 8001b1e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001b20:	e009      	b.n	8001b36 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001b22:	f7fe fdc5 	bl	80006b0 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001b30:	d901      	bls.n	8001b36 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8001b32:	2303      	movs	r3, #3
 8001b34:	e007      	b.n	8001b46 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f003 0308 	and.w	r3, r3, #8
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d0ee      	beq.n	8001b22 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b087      	sub	sp, #28
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	827b      	strh	r3, [r7, #18]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	823b      	strh	r3, [r7, #16]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8001b7e:	8a7a      	ldrh	r2, [r7, #18]
 8001b80:	8a3b      	ldrh	r3, [r7, #16]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d008      	beq.n	8001b98 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8001b86:	8a3b      	ldrh	r3, [r7, #16]
 8001b88:	041a      	lsls	r2, r3, #16
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4313      	orrs	r3, r2
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	e004      	b.n	8001ba2 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8001b98:	8a7b      	ldrh	r3, [r7, #18]
 8001b9a:	041a      	lsls	r2, r3, #16
 8001b9c:	89fb      	ldrh	r3, [r7, #14]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8001ba2:	697b      	ldr	r3, [r7, #20]
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	371c      	adds	r7, #28
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bc80      	pop	{r7}
 8001bac:	4770      	bx	lr

08001bae <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b084      	sub	sp, #16
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f85d 	bl	8001c7c <RTC_EnterInitMode>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e011      	b.n	8001bf2 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	683a      	ldr	r2, [r7, #0]
 8001bd4:	0c12      	lsrs	r2, r2, #16
 8001bd6:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	b292      	uxth	r2, r2
 8001be0:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f872 	bl	8001ccc <RTC_ExitInitMode>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b085      	sub	sp, #20
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	81fb      	strh	r3, [r7, #14]
 8001c08:	2300      	movs	r3, #0
 8001c0a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8001c1c:	89fb      	ldrh	r3, [r7, #14]
 8001c1e:	041a      	lsls	r2, r3, #16
 8001c20:	89bb      	ldrh	r3, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3714      	adds	r7, #20
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f81d 	bl	8001c7c <RTC_EnterInitMode>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d002      	beq.n	8001c4e <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	73fb      	strb	r3, [r7, #15]
 8001c4c:	e011      	b.n	8001c72 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	683a      	ldr	r2, [r7, #0]
 8001c54:	0c12      	lsrs	r2, r2, #16
 8001c56:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	683a      	ldr	r2, [r7, #0]
 8001c5e:	b292      	uxth	r2, r2
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f832 	bl	8001ccc <RTC_ExitInitMode>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8001c88:	f7fe fd12 	bl	80006b0 <HAL_GetTick>
 8001c8c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001c8e:	e009      	b.n	8001ca4 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001c90:	f7fe fd0e 	bl	80006b0 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c9e:	d901      	bls.n	8001ca4 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e00f      	b.n	8001cc4 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f003 0320 	and.w	r3, r3, #32
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d0ee      	beq.n	8001c90 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f042 0210 	orr.w	r2, r2, #16
 8001cc0:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8001cc2:	2300      	movs	r3, #0
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3710      	adds	r7, #16
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f022 0210 	bic.w	r2, r2, #16
 8001ce6:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8001ce8:	f7fe fce2 	bl	80006b0 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001cee:	e009      	b.n	8001d04 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001cf0:	f7fe fcde 	bl	80006b0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cfe:	d901      	bls.n	8001d04 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e007      	b.n	8001d14 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0320 	and.w	r3, r3, #32
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0ee      	beq.n	8001cf0 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	091b      	lsrs	r3, r3, #4
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	461a      	mov	r2, r3
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4413      	add	r3, r2
 8001d4a:	b2db      	uxtb	r3, r3
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3714      	adds	r7, #20
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bc80      	pop	{r7}
 8001d54:	4770      	bx	lr
	...

08001d58 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	460b      	mov	r3, r1
 8001d62:	70fb      	strb	r3, [r7, #3]
 8001d64:	4613      	mov	r3, r2
 8001d66:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001d76:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d82d      	bhi.n	8001dda <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001d7e:	78fa      	ldrb	r2, [r7, #3]
 8001d80:	4613      	mov	r3, r2
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	4413      	add	r3, r2
 8001d86:	00db      	lsls	r3, r3, #3
 8001d88:	1a9b      	subs	r3, r3, r2
 8001d8a:	4a2c      	ldr	r2, [pc, #176]	; (8001e3c <RTC_WeekDayNum+0xe4>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	085a      	lsrs	r2, r3, #1
 8001d92:	78bb      	ldrb	r3, [r7, #2]
 8001d94:	441a      	add	r2, r3
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	441a      	add	r2, r3
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	441a      	add	r2, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	4926      	ldr	r1, [pc, #152]	; (8001e40 <RTC_WeekDayNum+0xe8>)
 8001da8:	fba1 1303 	umull	r1, r3, r1, r3
 8001dac:	095b      	lsrs	r3, r3, #5
 8001dae:	1ad2      	subs	r2, r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	4922      	ldr	r1, [pc, #136]	; (8001e40 <RTC_WeekDayNum+0xe8>)
 8001db6:	fba1 1303 	umull	r1, r3, r1, r3
 8001dba:	09db      	lsrs	r3, r3, #7
 8001dbc:	4413      	add	r3, r2
 8001dbe:	1d1a      	adds	r2, r3, #4
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <RTC_WeekDayNum+0xec>)
 8001dc2:	fba3 1302 	umull	r1, r3, r3, r2
 8001dc6:	1ad1      	subs	r1, r2, r3
 8001dc8:	0849      	lsrs	r1, r1, #1
 8001dca:	440b      	add	r3, r1
 8001dcc:	0899      	lsrs	r1, r3, #2
 8001dce:	460b      	mov	r3, r1
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	1a5b      	subs	r3, r3, r1
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	60fb      	str	r3, [r7, #12]
 8001dd8:	e029      	b.n	8001e2e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001dda:	78fa      	ldrb	r2, [r7, #3]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	4a15      	ldr	r2, [pc, #84]	; (8001e3c <RTC_WeekDayNum+0xe4>)
 8001de8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dec:	085a      	lsrs	r2, r3, #1
 8001dee:	78bb      	ldrb	r3, [r7, #2]
 8001df0:	441a      	add	r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	441a      	add	r2, r3
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	441a      	add	r2, r3
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	4910      	ldr	r1, [pc, #64]	; (8001e40 <RTC_WeekDayNum+0xe8>)
 8001e00:	fba1 1303 	umull	r1, r3, r1, r3
 8001e04:	095b      	lsrs	r3, r3, #5
 8001e06:	1ad2      	subs	r2, r2, r3
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	490d      	ldr	r1, [pc, #52]	; (8001e40 <RTC_WeekDayNum+0xe8>)
 8001e0c:	fba1 1303 	umull	r1, r3, r1, r3
 8001e10:	09db      	lsrs	r3, r3, #7
 8001e12:	4413      	add	r3, r2
 8001e14:	1c9a      	adds	r2, r3, #2
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <RTC_WeekDayNum+0xec>)
 8001e18:	fba3 1302 	umull	r1, r3, r3, r2
 8001e1c:	1ad1      	subs	r1, r2, r3
 8001e1e:	0849      	lsrs	r1, r1, #1
 8001e20:	440b      	add	r3, r1
 8001e22:	0899      	lsrs	r1, r3, #2
 8001e24:	460b      	mov	r3, r1
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	1a5b      	subs	r3, r3, r1
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	b2db      	uxtb	r3, r3
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	38e38e39 	.word	0x38e38e39
 8001e40:	51eb851f 	.word	0x51eb851f
 8001e44:	24924925 	.word	0x24924925

08001e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d101      	bne.n	8001e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e041      	b.n	8001ede <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 f839 	bl	8001ee6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2202      	movs	r2, #2
 8001e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3304      	adds	r3, #4
 8001e84:	4619      	mov	r1, r3
 8001e86:	4610      	mov	r0, r2
 8001e88:	f000 f9b4 	bl	80021f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b085      	sub	sp, #20
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d001      	beq.n	8001f10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e03a      	b.n	8001f86 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f042 0201 	orr.w	r2, r2, #1
 8001f26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a18      	ldr	r2, [pc, #96]	; (8001f90 <HAL_TIM_Base_Start_IT+0x98>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d00e      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0x58>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f3a:	d009      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0x58>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <HAL_TIM_Base_Start_IT+0x9c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_TIM_Base_Start_IT+0x58>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <HAL_TIM_Base_Start_IT+0xa0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d111      	bne.n	8001f74 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d010      	beq.n	8001f84 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f72:	e007      	b.n	8001f84 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f042 0201 	orr.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3714      	adds	r7, #20
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr
 8001f90:	40012c00 	.word	0x40012c00
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40000800 	.word	0x40000800

08001f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d122      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0202 	mvn.w	r2, #2
 8001fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f8ed 	bl	80021be <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8e0 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f8ef 	bl	80021d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b04      	cmp	r3, #4
 8002004:	d122      	bne.n	800204c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b04      	cmp	r3, #4
 8002012:	d11b      	bne.n	800204c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0204 	mvn.w	r2, #4
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f8c3 	bl	80021be <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8b6 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f8c5 	bl	80021d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b08      	cmp	r3, #8
 8002058:	d122      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b08      	cmp	r3, #8
 8002066:	d11b      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0208 	mvn.w	r2, #8
 8002070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2204      	movs	r2, #4
 8002076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f000 f899 	bl	80021be <HAL_TIM_IC_CaptureCallback>
 800208c:	e005      	b.n	800209a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f88c 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f89b 	bl	80021d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	691b      	ldr	r3, [r3, #16]
 80020a6:	f003 0310 	and.w	r3, r3, #16
 80020aa:	2b10      	cmp	r3, #16
 80020ac:	d122      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0310 	and.w	r3, r3, #16
 80020b8:	2b10      	cmp	r3, #16
 80020ba:	d11b      	bne.n	80020f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0210 	mvn.w	r2, #16
 80020c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2208      	movs	r2, #8
 80020ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	69db      	ldr	r3, [r3, #28]
 80020d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f86f 	bl	80021be <HAL_TIM_IC_CaptureCallback>
 80020e0:	e005      	b.n	80020ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f862 	bl	80021ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f871 	bl	80021d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	2b01      	cmp	r3, #1
 800210e:	d107      	bne.n	8002120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f06f 0201 	mvn.w	r2, #1
 8002118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe f8d0 	bl	80002c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	691b      	ldr	r3, [r3, #16]
 8002126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800212a:	2b80      	cmp	r3, #128	; 0x80
 800212c:	d10e      	bne.n	800214c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d107      	bne.n	800214c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8bf 	bl	80022ca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d10e      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002164:	2b40      	cmp	r3, #64	; 0x40
 8002166:	d107      	bne.n	8002178 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f835 	bl	80021e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	f003 0320 	and.w	r3, r3, #32
 8002182:	2b20      	cmp	r3, #32
 8002184:	d10e      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	f003 0320 	and.w	r3, r3, #32
 8002190:	2b20      	cmp	r3, #32
 8002192:	d107      	bne.n	80021a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f06f 0220 	mvn.w	r2, #32
 800219c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 f88a 	bl	80022b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr

080021e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a29      	ldr	r2, [pc, #164]	; (80022ac <TIM_Base_SetConfig+0xb8>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d00b      	beq.n	8002224 <TIM_Base_SetConfig+0x30>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002212:	d007      	beq.n	8002224 <TIM_Base_SetConfig+0x30>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a26      	ldr	r2, [pc, #152]	; (80022b0 <TIM_Base_SetConfig+0xbc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d003      	beq.n	8002224 <TIM_Base_SetConfig+0x30>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a25      	ldr	r2, [pc, #148]	; (80022b4 <TIM_Base_SetConfig+0xc0>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d108      	bne.n	8002236 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800222a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a1c      	ldr	r2, [pc, #112]	; (80022ac <TIM_Base_SetConfig+0xb8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00b      	beq.n	8002256 <TIM_Base_SetConfig+0x62>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002244:	d007      	beq.n	8002256 <TIM_Base_SetConfig+0x62>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a19      	ldr	r2, [pc, #100]	; (80022b0 <TIM_Base_SetConfig+0xbc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d003      	beq.n	8002256 <TIM_Base_SetConfig+0x62>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a18      	ldr	r2, [pc, #96]	; (80022b4 <TIM_Base_SetConfig+0xc0>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d108      	bne.n	8002268 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800225c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4a07      	ldr	r2, [pc, #28]	; (80022ac <TIM_Base_SetConfig+0xb8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d103      	bne.n	800229c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	691a      	ldr	r2, [r3, #16]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	615a      	str	r2, [r3, #20]
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	40012c00 	.word	0x40012c00
 80022b0:	40000400 	.word	0x40000400
 80022b4:	40000800 	.word	0x40000800

080022b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bc80      	pop	{r7}
 80022c8:	4770      	bx	lr

080022ca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e03f      	b.n	800236e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d106      	bne.n	8002308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7fe f93a 	bl	800057c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2224      	movs	r2, #36	; 0x24
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68da      	ldr	r2, [r3, #12]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800231e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f000 f829 	bl	8002378 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	695a      	ldr	r2, [r3, #20]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68da      	ldr	r2, [r3, #12]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	431a      	orrs	r2, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	695b      	ldr	r3, [r3, #20]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023b2:	f023 030c 	bic.w	r3, r3, #12
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	68b9      	ldr	r1, [r7, #8]
 80023bc:	430b      	orrs	r3, r1
 80023be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a2c      	ldr	r2, [pc, #176]	; (800248c <UART_SetConfig+0x114>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d103      	bne.n	80023e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80023e0:	f7fe ffc8 	bl	8001374 <HAL_RCC_GetPCLK2Freq>
 80023e4:	60f8      	str	r0, [r7, #12]
 80023e6:	e002      	b.n	80023ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80023e8:	f7fe ffb0 	bl	800134c <HAL_RCC_GetPCLK1Freq>
 80023ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	4613      	mov	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	009a      	lsls	r2, r3, #2
 80023f8:	441a      	add	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	fbb2 f3f3 	udiv	r3, r2, r3
 8002404:	4a22      	ldr	r2, [pc, #136]	; (8002490 <UART_SetConfig+0x118>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	095b      	lsrs	r3, r3, #5
 800240c:	0119      	lsls	r1, r3, #4
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009a      	lsls	r2, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	fbb2 f2f3 	udiv	r2, r2, r3
 8002424:	4b1a      	ldr	r3, [pc, #104]	; (8002490 <UART_SetConfig+0x118>)
 8002426:	fba3 0302 	umull	r0, r3, r3, r2
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2064      	movs	r0, #100	; 0x64
 800242e:	fb00 f303 	mul.w	r3, r0, r3
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	3332      	adds	r3, #50	; 0x32
 8002438:	4a15      	ldr	r2, [pc, #84]	; (8002490 <UART_SetConfig+0x118>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002444:	4419      	add	r1, r3
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4613      	mov	r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	4413      	add	r3, r2
 800244e:	009a      	lsls	r2, r3, #2
 8002450:	441a      	add	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	fbb2 f2f3 	udiv	r2, r2, r3
 800245c:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <UART_SetConfig+0x118>)
 800245e:	fba3 0302 	umull	r0, r3, r3, r2
 8002462:	095b      	lsrs	r3, r3, #5
 8002464:	2064      	movs	r0, #100	; 0x64
 8002466:	fb00 f303 	mul.w	r3, r0, r3
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	011b      	lsls	r3, r3, #4
 800246e:	3332      	adds	r3, #50	; 0x32
 8002470:	4a07      	ldr	r2, [pc, #28]	; (8002490 <UART_SetConfig+0x118>)
 8002472:	fba2 2303 	umull	r2, r3, r2, r3
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	f003 020f 	and.w	r2, r3, #15
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	440a      	add	r2, r1
 8002482:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002484:	bf00      	nop
 8002486:	3710      	adds	r7, #16
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40013800 	.word	0x40013800
 8002490:	51eb851f 	.word	0x51eb851f

08002494 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f103 0208 	add.w	r2, r3, #8
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f103 0208 	add.w	r2, r3, #8
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f103 0208 	add.w	r2, r3, #8
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bc80      	pop	{r7}
 80024d0:	4770      	bx	lr

080024d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024d2:	b480      	push	{r7}
 80024d4:	b083      	sub	sp, #12
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bc80      	pop	{r7}
 80024e8:	4770      	bx	lr

080024ea <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b08c      	sub	sp, #48	; 0x30
 80024ee:	af04      	add	r7, sp, #16
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	603b      	str	r3, [r7, #0]
 80024f6:	4613      	mov	r3, r2
 80024f8:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fd54 	bl	8002fac <pvPortMalloc>
 8002504:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00e      	beq.n	800252a <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800250c:	2058      	movs	r0, #88	; 0x58
 800250e:	f000 fd4d 	bl	8002fac <pvPortMalloc>
 8002512:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	631a      	str	r2, [r3, #48]	; 0x30
 8002520:	e005      	b.n	800252e <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f000 fe22 	bl	800316c <vPortFree>
 8002528:	e001      	b.n	800252e <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002534:	88fa      	ldrh	r2, [r7, #6]
 8002536:	2300      	movs	r3, #0
 8002538:	9303      	str	r3, [sp, #12]
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	9302      	str	r3, [sp, #8]
 800253e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002540:	9301      	str	r3, [sp, #4]
 8002542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f000 f80e 	bl	800256c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002550:	69f8      	ldr	r0, [r7, #28]
 8002552:	f000 f8af 	bl	80026b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002556:	2301      	movs	r3, #1
 8002558:	61bb      	str	r3, [r7, #24]
 800255a:	e002      	b.n	8002562 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800255c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002560:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002562:	69bb      	ldr	r3, [r7, #24]
    }
 8002564:	4618      	mov	r0, r3
 8002566:	3720      	adds	r7, #32
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
 8002578:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800257a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800257c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	461a      	mov	r2, r3
 8002584:	21a5      	movs	r1, #165	; 0xa5
 8002586:	f000 ff31 	bl	80033ec <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800258a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800258c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002594:	3b01      	subs	r3, #1
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f023 0307 	bic.w	r3, r3, #7
 80025a2:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00a      	beq.n	80025c4 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80025c0:	bf00      	nop
 80025c2:	e7fe      	b.n	80025c2 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d01f      	beq.n	800260a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
 80025ce:	e012      	b.n	80025f6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	4413      	add	r3, r2
 80025d6:	7819      	ldrb	r1, [r3, #0]
 80025d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	4413      	add	r3, r2
 80025de:	3334      	adds	r3, #52	; 0x34
 80025e0:	460a      	mov	r2, r1
 80025e2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80025e4:	68ba      	ldr	r2, [r7, #8]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	4413      	add	r3, r2
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d006      	beq.n	80025fe <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	3301      	adds	r3, #1
 80025f4:	61fb      	str	r3, [r7, #28]
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	2b09      	cmp	r3, #9
 80025fa:	d9e9      	bls.n	80025d0 <prvInitialiseNewTask+0x64>
 80025fc:	e000      	b.n	8002600 <prvInitialiseNewTask+0x94>
            {
                break;
 80025fe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002602:	2200      	movs	r2, #0
 8002604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002608:	e003      	b.n	8002612 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	2b04      	cmp	r3, #4
 8002616:	d90a      	bls.n	800262e <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800261c:	f383 8811 	msr	BASEPRI, r3
 8002620:	f3bf 8f6f 	isb	sy
 8002624:	f3bf 8f4f 	dsb	sy
 8002628:	613b      	str	r3, [r7, #16]
    }
 800262a:	bf00      	nop
 800262c:	e7fe      	b.n	800262c <prvInitialiseNewTask+0xc0>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800262e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002630:	2b04      	cmp	r3, #4
 8002632:	d901      	bls.n	8002638 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002634:	2304      	movs	r3, #4
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800263c:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002642:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	2200      	movs	r2, #0
 8002648:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800264c:	3304      	adds	r3, #4
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff ff3f 	bl	80024d2 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002656:	3318      	adds	r3, #24
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff3a 	bl	80024d2 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002662:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002666:	f1c3 0205 	rsb	r2, r3, #5
 800266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800266c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800266e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002670:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002672:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002676:	3350      	adds	r3, #80	; 0x50
 8002678:	2204      	movs	r2, #4
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f000 feb5 	bl	80033ec <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002684:	3354      	adds	r3, #84	; 0x54
 8002686:	2201      	movs	r2, #1
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f000 feae 	bl	80033ec <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	68f9      	ldr	r1, [r7, #12]
 8002694:	69b8      	ldr	r0, [r7, #24]
 8002696:	f000 fb77 	bl	8002d88 <pxPortInitialiseStack>
 800269a:	4602      	mov	r2, r0
 800269c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800269e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80026a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d002      	beq.n	80026ac <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026aa:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80026ac:	bf00      	nop
 80026ae:	3720      	adds	r7, #32
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80026bc:	f000 fbd4 	bl	8002e68 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80026c0:	4b40      	ldr	r3, [pc, #256]	; (80027c4 <prvAddNewTaskToReadyList+0x110>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	3301      	adds	r3, #1
 80026c6:	4a3f      	ldr	r2, [pc, #252]	; (80027c4 <prvAddNewTaskToReadyList+0x110>)
 80026c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80026ca:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <prvAddNewTaskToReadyList+0x114>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80026d2:	4a3d      	ldr	r2, [pc, #244]	; (80027c8 <prvAddNewTaskToReadyList+0x114>)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80026d8:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <prvAddNewTaskToReadyList+0x110>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d110      	bne.n	8002702 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80026e0:	f000 faf8 	bl	8002cd4 <prvInitialiseTaskLists>
 80026e4:	e00d      	b.n	8002702 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80026e6:	4b39      	ldr	r3, [pc, #228]	; (80027cc <prvAddNewTaskToReadyList+0x118>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d109      	bne.n	8002702 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80026ee:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <prvAddNewTaskToReadyList+0x114>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d802      	bhi.n	8002702 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80026fc:	4a32      	ldr	r2, [pc, #200]	; (80027c8 <prvAddNewTaskToReadyList+0x114>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <prvAddNewTaskToReadyList+0x11c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3301      	adds	r3, #1
 8002708:	4a31      	ldr	r2, [pc, #196]	; (80027d0 <prvAddNewTaskToReadyList+0x11c>)
 800270a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800270c:	4b30      	ldr	r3, [pc, #192]	; (80027d0 <prvAddNewTaskToReadyList+0x11c>)
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002718:	2201      	movs	r2, #1
 800271a:	409a      	lsls	r2, r3
 800271c:	4b2d      	ldr	r3, [pc, #180]	; (80027d4 <prvAddNewTaskToReadyList+0x120>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4313      	orrs	r3, r2
 8002722:	4a2c      	ldr	r2, [pc, #176]	; (80027d4 <prvAddNewTaskToReadyList+0x120>)
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272a:	492b      	ldr	r1, [pc, #172]	; (80027d8 <prvAddNewTaskToReadyList+0x124>)
 800272c:	4613      	mov	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4413      	add	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	440b      	add	r3, r1
 8002736:	3304      	adds	r3, #4
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	689a      	ldr	r2, [r3, #8]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	3204      	adds	r2, #4
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	1d1a      	adds	r2, r3, #4
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	4a1b      	ldr	r2, [pc, #108]	; (80027d8 <prvAddNewTaskToReadyList+0x124>)
 800276a:	441a      	add	r2, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	615a      	str	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002774:	4918      	ldr	r1, [pc, #96]	; (80027d8 <prvAddNewTaskToReadyList+0x124>)
 8002776:	4613      	mov	r3, r2
 8002778:	009b      	lsls	r3, r3, #2
 800277a:	4413      	add	r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	1c59      	adds	r1, r3, #1
 8002784:	4814      	ldr	r0, [pc, #80]	; (80027d8 <prvAddNewTaskToReadyList+0x124>)
 8002786:	4613      	mov	r3, r2
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4413      	add	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4403      	add	r3, r0
 8002790:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002792:	f000 fb99 	bl	8002ec8 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <prvAddNewTaskToReadyList+0x118>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00e      	beq.n	80027bc <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <prvAddNewTaskToReadyList+0x114>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d207      	bcs.n	80027bc <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80027ac:	4b0b      	ldr	r3, [pc, #44]	; (80027dc <prvAddNewTaskToReadyList+0x128>)
 80027ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	f3bf 8f4f 	dsb	sy
 80027b8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000104 	.word	0x20000104
 80027c8:	20000030 	.word	0x20000030
 80027cc:	20000110 	.word	0x20000110
 80027d0:	20000120 	.word	0x20000120
 80027d4:	2000010c 	.word	0x2000010c
 80027d8:	20000034 	.word	0x20000034
 80027dc:	e000ed04 	.word	0xe000ed04

080027e0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <vTaskSuspendAll+0x18>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	4a03      	ldr	r2, [pc, #12]	; (80027f8 <vTaskSuspendAll+0x18>)
 80027ec:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bc80      	pop	{r7}
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000128 	.word	0x20000128

080027fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002802:	2300      	movs	r3, #0
 8002804:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002806:	2300      	movs	r3, #0
 8002808:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800280a:	4b71      	ldr	r3, [pc, #452]	; (80029d0 <xTaskResumeAll+0x1d4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d10a      	bne.n	8002828 <xTaskResumeAll+0x2c>
        __asm volatile
 8002812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002816:	f383 8811 	msr	BASEPRI, r3
 800281a:	f3bf 8f6f 	isb	sy
 800281e:	f3bf 8f4f 	dsb	sy
 8002822:	607b      	str	r3, [r7, #4]
    }
 8002824:	bf00      	nop
 8002826:	e7fe      	b.n	8002826 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002828:	f000 fb1e 	bl	8002e68 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800282c:	4b68      	ldr	r3, [pc, #416]	; (80029d0 <xTaskResumeAll+0x1d4>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	3b01      	subs	r3, #1
 8002832:	4a67      	ldr	r2, [pc, #412]	; (80029d0 <xTaskResumeAll+0x1d4>)
 8002834:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002836:	4b66      	ldr	r3, [pc, #408]	; (80029d0 <xTaskResumeAll+0x1d4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f040 80c0 	bne.w	80029c0 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002840:	4b64      	ldr	r3, [pc, #400]	; (80029d4 <xTaskResumeAll+0x1d8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b00      	cmp	r3, #0
 8002846:	f000 80bb 	beq.w	80029c0 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800284a:	e08a      	b.n	8002962 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800284c:	4b62      	ldr	r3, [pc, #392]	; (80029d8 <xTaskResumeAll+0x1dc>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	69fa      	ldr	r2, [r7, #28]
 8002860:	6a12      	ldr	r2, [r2, #32]
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	69d2      	ldr	r2, [r2, #28]
 800286c:	605a      	str	r2, [r3, #4]
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	685a      	ldr	r2, [r3, #4]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	3318      	adds	r3, #24
 8002876:	429a      	cmp	r2, r3
 8002878:	d103      	bne.n	8002882 <xTaskResumeAll+0x86>
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	6a1a      	ldr	r2, [r3, #32]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	2200      	movs	r2, #0
 8002886:	629a      	str	r2, [r3, #40]	; 0x28
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	1e5a      	subs	r2, r3, #1
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	60fb      	str	r3, [r7, #12]
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	68d2      	ldr	r2, [r2, #12]
 80028a0:	609a      	str	r2, [r3, #8]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	69fa      	ldr	r2, [r7, #28]
 80028a8:	6892      	ldr	r2, [r2, #8]
 80028aa:	605a      	str	r2, [r3, #4]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	3304      	adds	r3, #4
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d103      	bne.n	80028c0 <xTaskResumeAll+0xc4>
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	68da      	ldr	r2, [r3, #12]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	605a      	str	r2, [r3, #4]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2200      	movs	r2, #0
 80028c4:	615a      	str	r2, [r3, #20]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	1e5a      	subs	r2, r3, #1
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d4:	2201      	movs	r2, #1
 80028d6:	409a      	lsls	r2, r3
 80028d8:	4b40      	ldr	r3, [pc, #256]	; (80029dc <xTaskResumeAll+0x1e0>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4313      	orrs	r3, r2
 80028de:	4a3f      	ldr	r2, [pc, #252]	; (80029dc <xTaskResumeAll+0x1e0>)
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028e6:	493e      	ldr	r1, [pc, #248]	; (80029e0 <xTaskResumeAll+0x1e4>)
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	3304      	adds	r3, #4
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	689a      	ldr	r2, [r3, #8]
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	3204      	adds	r2, #4
 800290e:	605a      	str	r2, [r3, #4]
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	1d1a      	adds	r2, r3, #4
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	609a      	str	r2, [r3, #8]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800291c:	4613      	mov	r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	4413      	add	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4a2e      	ldr	r2, [pc, #184]	; (80029e0 <xTaskResumeAll+0x1e4>)
 8002926:	441a      	add	r2, r3
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	615a      	str	r2, [r3, #20]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002930:	492b      	ldr	r1, [pc, #172]	; (80029e0 <xTaskResumeAll+0x1e4>)
 8002932:	4613      	mov	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	1c59      	adds	r1, r3, #1
 8002940:	4827      	ldr	r0, [pc, #156]	; (80029e0 <xTaskResumeAll+0x1e4>)
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4403      	add	r3, r0
 800294c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002952:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <xTaskResumeAll+0x1e8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	429a      	cmp	r2, r3
 800295a:	d302      	bcc.n	8002962 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <xTaskResumeAll+0x1ec>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <xTaskResumeAll+0x1dc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	f47f af70 	bne.w	800284c <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002972:	f000 f9ef 	bl	8002d54 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002976:	4b1d      	ldr	r3, [pc, #116]	; (80029ec <xTaskResumeAll+0x1f0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d010      	beq.n	80029a4 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002982:	f000 f837 	bl	80029f4 <xTaskIncrementTick>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 800298c:	4b16      	ldr	r3, [pc, #88]	; (80029e8 <xTaskResumeAll+0x1ec>)
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	3b01      	subs	r3, #1
 8002996:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d1f1      	bne.n	8002982 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 800299e:	4b13      	ldr	r3, [pc, #76]	; (80029ec <xTaskResumeAll+0x1f0>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <xTaskResumeAll+0x1ec>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80029ac:	2301      	movs	r3, #1
 80029ae:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80029b0:	4b0f      	ldr	r3, [pc, #60]	; (80029f0 <xTaskResumeAll+0x1f4>)
 80029b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	f3bf 8f4f 	dsb	sy
 80029bc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80029c0:	f000 fa82 	bl	8002ec8 <vPortExitCritical>

    return xAlreadyYielded;
 80029c4:	69bb      	ldr	r3, [r7, #24]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3720      	adds	r7, #32
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	20000128 	.word	0x20000128
 80029d4:	20000104 	.word	0x20000104
 80029d8:	200000c8 	.word	0x200000c8
 80029dc:	2000010c 	.word	0x2000010c
 80029e0:	20000034 	.word	0x20000034
 80029e4:	20000030 	.word	0x20000030
 80029e8:	20000118 	.word	0x20000118
 80029ec:	20000114 	.word	0x20000114
 80029f0:	e000ed04 	.word	0xe000ed04

080029f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b08a      	sub	sp, #40	; 0x28
 80029f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80029fa:	2300      	movs	r3, #0
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029fe:	4b7d      	ldr	r3, [pc, #500]	; (8002bf4 <xTaskIncrementTick+0x200>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f040 80ec 	bne.w	8002be0 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a08:	4b7b      	ldr	r3, [pc, #492]	; (8002bf8 <xTaskIncrementTick+0x204>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3301      	adds	r3, #1
 8002a0e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a10:	4a79      	ldr	r2, [pc, #484]	; (8002bf8 <xTaskIncrementTick+0x204>)
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d120      	bne.n	8002a5e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a1c:	4b77      	ldr	r3, [pc, #476]	; (8002bfc <xTaskIncrementTick+0x208>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <xTaskIncrementTick+0x48>
        __asm volatile
 8002a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	607b      	str	r3, [r7, #4]
    }
 8002a38:	bf00      	nop
 8002a3a:	e7fe      	b.n	8002a3a <xTaskIncrementTick+0x46>
 8002a3c:	4b6f      	ldr	r3, [pc, #444]	; (8002bfc <xTaskIncrementTick+0x208>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	4b6f      	ldr	r3, [pc, #444]	; (8002c00 <xTaskIncrementTick+0x20c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a6d      	ldr	r2, [pc, #436]	; (8002bfc <xTaskIncrementTick+0x208>)
 8002a48:	6013      	str	r3, [r2, #0]
 8002a4a:	4a6d      	ldr	r2, [pc, #436]	; (8002c00 <xTaskIncrementTick+0x20c>)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b6c      	ldr	r3, [pc, #432]	; (8002c04 <xTaskIncrementTick+0x210>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	4a6b      	ldr	r2, [pc, #428]	; (8002c04 <xTaskIncrementTick+0x210>)
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	f000 f97b 	bl	8002d54 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a5e:	4b6a      	ldr	r3, [pc, #424]	; (8002c08 <xTaskIncrementTick+0x214>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a3a      	ldr	r2, [r7, #32]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	f0c0 80a6 	bcc.w	8002bb6 <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a6a:	4b64      	ldr	r3, [pc, #400]	; (8002bfc <xTaskIncrementTick+0x208>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d104      	bne.n	8002a7e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a74:	4b64      	ldr	r3, [pc, #400]	; (8002c08 <xTaskIncrementTick+0x214>)
 8002a76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a7a:	601a      	str	r2, [r3, #0]
                    break;
 8002a7c:	e09b      	b.n	8002bb6 <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a7e:	4b5f      	ldr	r3, [pc, #380]	; (8002bfc <xTaskIncrementTick+0x208>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002a8e:	6a3a      	ldr	r2, [r7, #32]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d203      	bcs.n	8002a9e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a96:	4a5c      	ldr	r2, [pc, #368]	; (8002c08 <xTaskIncrementTick+0x214>)
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002a9c:	e08b      	b.n	8002bb6 <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	695b      	ldr	r3, [r3, #20]
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	68d2      	ldr	r2, [r2, #12]
 8002aac:	609a      	str	r2, [r3, #8]
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	6892      	ldr	r2, [r2, #8]
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d103      	bne.n	8002acc <xTaskIncrementTick+0xd8>
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	69bb      	ldr	r3, [r7, #24]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	615a      	str	r2, [r3, #20]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	1e5a      	subs	r2, r3, #1
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01e      	beq.n	8002b22 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ae4:	69bb      	ldr	r3, [r7, #24]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	6a12      	ldr	r2, [r2, #32]
 8002af2:	609a      	str	r2, [r3, #8]
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	69d2      	ldr	r2, [r2, #28]
 8002afc:	605a      	str	r2, [r3, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	3318      	adds	r3, #24
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d103      	bne.n	8002b12 <xTaskIncrementTick+0x11e>
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6a1a      	ldr	r2, [r3, #32]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	605a      	str	r2, [r3, #4]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	2200      	movs	r2, #0
 8002b16:	629a      	str	r2, [r3, #40]	; 0x28
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	1e5a      	subs	r2, r3, #1
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	2201      	movs	r2, #1
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	4b38      	ldr	r3, [pc, #224]	; (8002c0c <xTaskIncrementTick+0x218>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	4a36      	ldr	r2, [pc, #216]	; (8002c0c <xTaskIncrementTick+0x218>)
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b38:	4935      	ldr	r1, [pc, #212]	; (8002c10 <xTaskIncrementTick+0x21c>)
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	440b      	add	r3, r1
 8002b44:	3304      	adds	r3, #4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	60da      	str	r2, [r3, #12]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	3204      	adds	r2, #4
 8002b60:	605a      	str	r2, [r3, #4]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	1d1a      	adds	r2, r3, #4
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	609a      	str	r2, [r3, #8]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4a26      	ldr	r2, [pc, #152]	; (8002c10 <xTaskIncrementTick+0x21c>)
 8002b78:	441a      	add	r2, r3
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	615a      	str	r2, [r3, #20]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b82:	4923      	ldr	r1, [pc, #140]	; (8002c10 <xTaskIncrementTick+0x21c>)
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	1c59      	adds	r1, r3, #1
 8002b92:	481f      	ldr	r0, [pc, #124]	; (8002c10 <xTaskIncrementTick+0x21c>)
 8002b94:	4613      	mov	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	4403      	add	r3, r0
 8002b9e:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <xTaskIncrementTick+0x220>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	429a      	cmp	r2, r3
 8002bac:	f4ff af5d 	bcc.w	8002a6a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bb4:	e759      	b.n	8002a6a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002bb6:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <xTaskIncrementTick+0x220>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bbc:	4914      	ldr	r1, [pc, #80]	; (8002c10 <xTaskIncrementTick+0x21c>)
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d901      	bls.n	8002bd2 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <xTaskIncrementTick+0x224>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d007      	beq.n	8002bea <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8002bde:	e004      	b.n	8002bea <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002be0:	4b0e      	ldr	r3, [pc, #56]	; (8002c1c <xTaskIncrementTick+0x228>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <xTaskIncrementTick+0x228>)
 8002be8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3728      	adds	r7, #40	; 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	20000128 	.word	0x20000128
 8002bf8:	20000108 	.word	0x20000108
 8002bfc:	200000c0 	.word	0x200000c0
 8002c00:	200000c4 	.word	0x200000c4
 8002c04:	2000011c 	.word	0x2000011c
 8002c08:	20000124 	.word	0x20000124
 8002c0c:	2000010c 	.word	0x2000010c
 8002c10:	20000034 	.word	0x20000034
 8002c14:	20000030 	.word	0x20000030
 8002c18:	20000118 	.word	0x20000118
 8002c1c:	20000114 	.word	0x20000114

08002c20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002c26:	4b26      	ldr	r3, [pc, #152]	; (8002cc0 <vTaskSwitchContext+0xa0>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002c2e:	4b25      	ldr	r3, [pc, #148]	; (8002cc4 <vTaskSwitchContext+0xa4>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002c34:	e03f      	b.n	8002cb6 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002c36:	4b23      	ldr	r3, [pc, #140]	; (8002cc4 <vTaskSwitchContext+0xa4>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c3c:	4b22      	ldr	r3, [pc, #136]	; (8002cc8 <vTaskSwitchContext+0xa8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	fab3 f383 	clz	r3, r3
 8002c48:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002c4a:	7afb      	ldrb	r3, [r7, #11]
 8002c4c:	f1c3 031f 	rsb	r3, r3, #31
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	491e      	ldr	r1, [pc, #120]	; (8002ccc <vTaskSwitchContext+0xac>)
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10a      	bne.n	8002c7c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6a:	f383 8811 	msr	BASEPRI, r3
 8002c6e:	f3bf 8f6f 	isb	sy
 8002c72:	f3bf 8f4f 	dsb	sy
 8002c76:	607b      	str	r3, [r7, #4]
    }
 8002c78:	bf00      	nop
 8002c7a:	e7fe      	b.n	8002c7a <vTaskSwitchContext+0x5a>
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	4a11      	ldr	r2, [pc, #68]	; (8002ccc <vTaskSwitchContext+0xac>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	3308      	adds	r3, #8
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d104      	bne.n	8002cac <vTaskSwitchContext+0x8c>
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	685a      	ldr	r2, [r3, #4]
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	605a      	str	r2, [r3, #4]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	4a07      	ldr	r2, [pc, #28]	; (8002cd0 <vTaskSwitchContext+0xb0>)
 8002cb4:	6013      	str	r3, [r2, #0]
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr
 8002cc0:	20000128 	.word	0x20000128
 8002cc4:	20000118 	.word	0x20000118
 8002cc8:	2000010c 	.word	0x2000010c
 8002ccc:	20000034 	.word	0x20000034
 8002cd0:	20000030 	.word	0x20000030

08002cd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cda:	2300      	movs	r3, #0
 8002cdc:	607b      	str	r3, [r7, #4]
 8002cde:	e00c      	b.n	8002cfa <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	4a12      	ldr	r2, [pc, #72]	; (8002d34 <prvInitialiseTaskLists+0x60>)
 8002cec:	4413      	add	r3, r2
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fbd0 	bl	8002494 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	607b      	str	r3, [r7, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d9ef      	bls.n	8002ce0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d00:	480d      	ldr	r0, [pc, #52]	; (8002d38 <prvInitialiseTaskLists+0x64>)
 8002d02:	f7ff fbc7 	bl	8002494 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d06:	480d      	ldr	r0, [pc, #52]	; (8002d3c <prvInitialiseTaskLists+0x68>)
 8002d08:	f7ff fbc4 	bl	8002494 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d0c:	480c      	ldr	r0, [pc, #48]	; (8002d40 <prvInitialiseTaskLists+0x6c>)
 8002d0e:	f7ff fbc1 	bl	8002494 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002d12:	480c      	ldr	r0, [pc, #48]	; (8002d44 <prvInitialiseTaskLists+0x70>)
 8002d14:	f7ff fbbe 	bl	8002494 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002d18:	480b      	ldr	r0, [pc, #44]	; (8002d48 <prvInitialiseTaskLists+0x74>)
 8002d1a:	f7ff fbbb 	bl	8002494 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <prvInitialiseTaskLists+0x78>)
 8002d20:	4a05      	ldr	r2, [pc, #20]	; (8002d38 <prvInitialiseTaskLists+0x64>)
 8002d22:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d24:	4b0a      	ldr	r3, [pc, #40]	; (8002d50 <prvInitialiseTaskLists+0x7c>)
 8002d26:	4a05      	ldr	r2, [pc, #20]	; (8002d3c <prvInitialiseTaskLists+0x68>)
 8002d28:	601a      	str	r2, [r3, #0]
}
 8002d2a:	bf00      	nop
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000034 	.word	0x20000034
 8002d38:	20000098 	.word	0x20000098
 8002d3c:	200000ac 	.word	0x200000ac
 8002d40:	200000c8 	.word	0x200000c8
 8002d44:	200000dc 	.word	0x200000dc
 8002d48:	200000f0 	.word	0x200000f0
 8002d4c:	200000c0 	.word	0x200000c0
 8002d50:	200000c4 	.word	0x200000c4

08002d54 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d58:	4b09      	ldr	r3, [pc, #36]	; (8002d80 <prvResetNextTaskUnblockTime+0x2c>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d62:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <prvResetNextTaskUnblockTime+0x30>)
 8002d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d68:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d6a:	e005      	b.n	8002d78 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <prvResetNextTaskUnblockTime+0x2c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a03      	ldr	r2, [pc, #12]	; (8002d84 <prvResetNextTaskUnblockTime+0x30>)
 8002d76:	6013      	str	r3, [r2, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bc80      	pop	{r7}
 8002d7e:	4770      	bx	lr
 8002d80:	200000c0 	.word	0x200000c0
 8002d84:	20000124 	.word	0x20000124

08002d88 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b085      	sub	sp, #20
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	60b9      	str	r1, [r7, #8]
 8002d92:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	3b04      	subs	r3, #4
 8002d98:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002da0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	3b04      	subs	r3, #4
 8002da6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f023 0201 	bic.w	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	3b04      	subs	r3, #4
 8002db6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002db8:	4a08      	ldr	r2, [pc, #32]	; (8002ddc <pxPortInitialiseStack+0x54>)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	3b14      	subs	r3, #20
 8002dc2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3b20      	subs	r3, #32
 8002dce:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	08002de1 	.word	0x08002de1

08002de0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002dea:	4b12      	ldr	r3, [pc, #72]	; (8002e34 <prvTaskExitError+0x54>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df2:	d00a      	beq.n	8002e0a <prvTaskExitError+0x2a>
        __asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60fb      	str	r3, [r7, #12]
    }
 8002e06:	bf00      	nop
 8002e08:	e7fe      	b.n	8002e08 <prvTaskExitError+0x28>
        __asm volatile
 8002e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0e:	f383 8811 	msr	BASEPRI, r3
 8002e12:	f3bf 8f6f 	isb	sy
 8002e16:	f3bf 8f4f 	dsb	sy
 8002e1a:	60bb      	str	r3, [r7, #8]
    }
 8002e1c:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002e1e:	bf00      	nop
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d0fc      	beq.n	8002e20 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002e26:	bf00      	nop
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	2000000c 	.word	0x2000000c
	...

08002e40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002e40:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <pxCurrentTCBConst2>)
 8002e42:	6819      	ldr	r1, [r3, #0]
 8002e44:	6808      	ldr	r0, [r1, #0]
 8002e46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002e4a:	f380 8809 	msr	PSP, r0
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f380 8811 	msr	BASEPRI, r0
 8002e5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8002e5e:	4770      	bx	lr

08002e60 <pxCurrentTCBConst2>:
 8002e60:	20000030 	.word	0x20000030
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop

08002e68 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
        __asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	607b      	str	r3, [r7, #4]
    }
 8002e80:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002e82:	4b0f      	ldr	r3, [pc, #60]	; (8002ec0 <vPortEnterCritical+0x58>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	3301      	adds	r3, #1
 8002e88:	4a0d      	ldr	r2, [pc, #52]	; (8002ec0 <vPortEnterCritical+0x58>)
 8002e8a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <vPortEnterCritical+0x58>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d10f      	bne.n	8002eb4 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <vPortEnterCritical+0x5c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00a      	beq.n	8002eb4 <vPortEnterCritical+0x4c>
        __asm volatile
 8002e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea2:	f383 8811 	msr	BASEPRI, r3
 8002ea6:	f3bf 8f6f 	isb	sy
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	603b      	str	r3, [r7, #0]
    }
 8002eb0:	bf00      	nop
 8002eb2:	e7fe      	b.n	8002eb2 <vPortEnterCritical+0x4a>
    }
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bc80      	pop	{r7}
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	2000000c 	.word	0x2000000c
 8002ec4:	e000ed04 	.word	0xe000ed04

08002ec8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002ece:	4b11      	ldr	r3, [pc, #68]	; (8002f14 <vPortExitCritical+0x4c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10a      	bne.n	8002eec <vPortExitCritical+0x24>
        __asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	607b      	str	r3, [r7, #4]
    }
 8002ee8:	bf00      	nop
 8002eea:	e7fe      	b.n	8002eea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002eec:	4b09      	ldr	r3, [pc, #36]	; (8002f14 <vPortExitCritical+0x4c>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	4a08      	ldr	r2, [pc, #32]	; (8002f14 <vPortExitCritical+0x4c>)
 8002ef4:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002ef6:	4b07      	ldr	r3, [pc, #28]	; (8002f14 <vPortExitCritical+0x4c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d105      	bne.n	8002f0a <vPortExitCritical+0x42>
 8002efe:	2300      	movs	r3, #0
 8002f00:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002f08:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	2000000c 	.word	0x2000000c
	...

08002f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002f20:	f3ef 8009 	mrs	r0, PSP
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	4b0d      	ldr	r3, [pc, #52]	; (8002f60 <pxCurrentTCBConst>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f30:	6010      	str	r0, [r2, #0]
 8002f32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002f36:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002f3a:	f380 8811 	msr	BASEPRI, r0
 8002f3e:	f7ff fe6f 	bl	8002c20 <vTaskSwitchContext>
 8002f42:	f04f 0000 	mov.w	r0, #0
 8002f46:	f380 8811 	msr	BASEPRI, r0
 8002f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	6808      	ldr	r0, [r1, #0]
 8002f52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002f56:	f380 8809 	msr	PSP, r0
 8002f5a:	f3bf 8f6f 	isb	sy
 8002f5e:	4770      	bx	lr

08002f60 <pxCurrentTCBConst>:
 8002f60:	20000030 	.word	0x20000030
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop

08002f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
        __asm volatile
 8002f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f72:	f383 8811 	msr	BASEPRI, r3
 8002f76:	f3bf 8f6f 	isb	sy
 8002f7a:	f3bf 8f4f 	dsb	sy
 8002f7e:	607b      	str	r3, [r7, #4]
    }
 8002f80:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002f82:	f7ff fd37 	bl	80029f4 <xTaskIncrementTick>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <SysTick_Handler+0x40>)
 8002f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	2300      	movs	r3, #0
 8002f96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	f383 8811 	msr	BASEPRI, r3
    }
 8002f9e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002fa0:	bf00      	nop
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	e000ed04 	.word	0xe000ed04

08002fac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	; 0x28
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002fb8:	f7ff fc12 	bl	80027e0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002fbc:	4b65      	ldr	r3, [pc, #404]	; (8003154 <pvPortMalloc+0x1a8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d101      	bne.n	8002fc8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002fc4:	f000 f934 	bl	8003230 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002fc8:	4b63      	ldr	r3, [pc, #396]	; (8003158 <pvPortMalloc+0x1ac>)
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f040 80a7 	bne.w	8003124 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02d      	beq.n	8003038 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002fdc:	2208      	movs	r2, #8
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d227      	bcs.n	8003038 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002fe8:	2208      	movs	r2, #8
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4413      	add	r3, r2
 8002fee:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d021      	beq.n	800303e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f023 0307 	bic.w	r3, r3, #7
 8003000:	3308      	adds	r3, #8
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	429a      	cmp	r2, r3
 8003006:	d214      	bcs.n	8003032 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f023 0307 	bic.w	r3, r3, #7
 800300e:	3308      	adds	r3, #8
 8003010:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <pvPortMalloc+0x92>
        __asm volatile
 800301c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003020:	f383 8811 	msr	BASEPRI, r3
 8003024:	f3bf 8f6f 	isb	sy
 8003028:	f3bf 8f4f 	dsb	sy
 800302c:	617b      	str	r3, [r7, #20]
    }
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003036:	e002      	b.n	800303e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	607b      	str	r3, [r7, #4]
 800303c:	e000      	b.n	8003040 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800303e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d06e      	beq.n	8003124 <pvPortMalloc+0x178>
 8003046:	4b45      	ldr	r3, [pc, #276]	; (800315c <pvPortMalloc+0x1b0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	d869      	bhi.n	8003124 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003050:	4b43      	ldr	r3, [pc, #268]	; (8003160 <pvPortMalloc+0x1b4>)
 8003052:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003054:	4b42      	ldr	r3, [pc, #264]	; (8003160 <pvPortMalloc+0x1b4>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800305a:	e004      	b.n	8003066 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d903      	bls.n	8003078 <pvPortMalloc+0xcc>
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f1      	bne.n	800305c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003078:	4b36      	ldr	r3, [pc, #216]	; (8003154 <pvPortMalloc+0x1a8>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	429a      	cmp	r2, r3
 8003080:	d050      	beq.n	8003124 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003082:	6a3b      	ldr	r3, [r7, #32]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2208      	movs	r2, #8
 8003088:	4413      	add	r3, r2
 800308a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800308c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	1ad2      	subs	r2, r2, r3
 800309c:	2308      	movs	r3, #8
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d91f      	bls.n	80030e4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80030a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4413      	add	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <pvPortMalloc+0x120>
        __asm volatile
 80030b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ba:	f383 8811 	msr	BASEPRI, r3
 80030be:	f3bf 8f6f 	isb	sy
 80030c2:	f3bf 8f4f 	dsb	sy
 80030c6:	613b      	str	r3, [r7, #16]
    }
 80030c8:	bf00      	nop
 80030ca:	e7fe      	b.n	80030ca <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	1ad2      	subs	r2, r2, r3
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80030de:	69b8      	ldr	r0, [r7, #24]
 80030e0:	f000 f908 	bl	80032f4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80030e4:	4b1d      	ldr	r3, [pc, #116]	; (800315c <pvPortMalloc+0x1b0>)
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	4a1b      	ldr	r2, [pc, #108]	; (800315c <pvPortMalloc+0x1b0>)
 80030f0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80030f2:	4b1a      	ldr	r3, [pc, #104]	; (800315c <pvPortMalloc+0x1b0>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <pvPortMalloc+0x1b8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d203      	bcs.n	8003106 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <pvPortMalloc+0x1b0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a18      	ldr	r2, [pc, #96]	; (8003164 <pvPortMalloc+0x1b8>)
 8003104:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <pvPortMalloc+0x1ac>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	431a      	orrs	r2, r3
 8003110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003112:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003116:	2200      	movs	r2, #0
 8003118:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <pvPortMalloc+0x1bc>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3301      	adds	r3, #1
 8003120:	4a11      	ldr	r2, [pc, #68]	; (8003168 <pvPortMalloc+0x1bc>)
 8003122:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003124:	f7ff fb6a 	bl	80027fc <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <pvPortMalloc+0x19c>
        __asm volatile
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	f383 8811 	msr	BASEPRI, r3
 800313a:	f3bf 8f6f 	isb	sy
 800313e:	f3bf 8f4f 	dsb	sy
 8003142:	60fb      	str	r3, [r7, #12]
    }
 8003144:	bf00      	nop
 8003146:	e7fe      	b.n	8003146 <pvPortMalloc+0x19a>
    return pvReturn;
 8003148:	69fb      	ldr	r3, [r7, #28]
}
 800314a:	4618      	mov	r0, r3
 800314c:	3728      	adds	r7, #40	; 0x28
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	20000d34 	.word	0x20000d34
 8003158:	20000d48 	.word	0x20000d48
 800315c:	20000d38 	.word	0x20000d38
 8003160:	20000d2c 	.word	0x20000d2c
 8003164:	20000d3c 	.word	0x20000d3c
 8003168:	20000d40 	.word	0x20000d40

0800316c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d04d      	beq.n	800321a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800317e:	2308      	movs	r3, #8
 8003180:	425b      	negs	r3, r3
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	4413      	add	r3, r2
 8003186:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	4b24      	ldr	r3, [pc, #144]	; (8003224 <vPortFree+0xb8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10a      	bne.n	80031b0 <vPortFree+0x44>
        __asm volatile
 800319a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800319e:	f383 8811 	msr	BASEPRI, r3
 80031a2:	f3bf 8f6f 	isb	sy
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	60fb      	str	r3, [r7, #12]
    }
 80031ac:	bf00      	nop
 80031ae:	e7fe      	b.n	80031ae <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00a      	beq.n	80031ce <vPortFree+0x62>
        __asm volatile
 80031b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031bc:	f383 8811 	msr	BASEPRI, r3
 80031c0:	f3bf 8f6f 	isb	sy
 80031c4:	f3bf 8f4f 	dsb	sy
 80031c8:	60bb      	str	r3, [r7, #8]
    }
 80031ca:	bf00      	nop
 80031cc:	e7fe      	b.n	80031cc <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	685a      	ldr	r2, [r3, #4]
 80031d2:	4b14      	ldr	r3, [pc, #80]	; (8003224 <vPortFree+0xb8>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01e      	beq.n	800321a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11a      	bne.n	800321a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4b0e      	ldr	r3, [pc, #56]	; (8003224 <vPortFree+0xb8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	401a      	ands	r2, r3
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80031f4:	f7ff faf4 	bl	80027e0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <vPortFree+0xbc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4413      	add	r3, r2
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <vPortFree+0xbc>)
 8003204:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003206:	6938      	ldr	r0, [r7, #16]
 8003208:	f000 f874 	bl	80032f4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800320c:	4b07      	ldr	r3, [pc, #28]	; (800322c <vPortFree+0xc0>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3301      	adds	r3, #1
 8003212:	4a06      	ldr	r2, [pc, #24]	; (800322c <vPortFree+0xc0>)
 8003214:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003216:	f7ff faf1 	bl	80027fc <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20000d48 	.word	0x20000d48
 8003228:	20000d38 	.word	0x20000d38
 800322c:	20000d44 	.word	0x20000d44

08003230 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003236:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800323a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800323c:	4b27      	ldr	r3, [pc, #156]	; (80032dc <prvHeapInit+0xac>)
 800323e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00c      	beq.n	8003264 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3307      	adds	r3, #7
 800324e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f023 0307 	bic.w	r3, r3, #7
 8003256:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	4a1f      	ldr	r2, [pc, #124]	; (80032dc <prvHeapInit+0xac>)
 8003260:	4413      	add	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003268:	4a1d      	ldr	r2, [pc, #116]	; (80032e0 <prvHeapInit+0xb0>)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800326e:	4b1c      	ldr	r3, [pc, #112]	; (80032e0 <prvHeapInit+0xb0>)
 8003270:	2200      	movs	r2, #0
 8003272:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	4413      	add	r3, r2
 800327a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800327c:	2208      	movs	r2, #8
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0307 	bic.w	r3, r3, #7
 800328a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4a15      	ldr	r2, [pc, #84]	; (80032e4 <prvHeapInit+0xb4>)
 8003290:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003292:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <prvHeapInit+0xb4>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800329a:	4b12      	ldr	r3, [pc, #72]	; (80032e4 <prvHeapInit+0xb4>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	1ad2      	subs	r2, r2, r3
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <prvHeapInit+0xb4>)
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <prvHeapInit+0xb8>)
 80032be:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	4a09      	ldr	r2, [pc, #36]	; (80032ec <prvHeapInit+0xbc>)
 80032c6:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80032c8:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <prvHeapInit+0xc0>)
 80032ca:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032ce:	601a      	str	r2, [r3, #0]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bc80      	pop	{r7}
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	2000012c 	.word	0x2000012c
 80032e0:	20000d2c 	.word	0x20000d2c
 80032e4:	20000d34 	.word	0x20000d34
 80032e8:	20000d3c 	.word	0x20000d3c
 80032ec:	20000d38 	.word	0x20000d38
 80032f0:	20000d48 	.word	0x20000d48

080032f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80032fc:	4b27      	ldr	r3, [pc, #156]	; (800339c <prvInsertBlockIntoFreeList+0xa8>)
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	e002      	b.n	8003308 <prvInsertBlockIntoFreeList+0x14>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	60fb      	str	r3, [r7, #12]
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	429a      	cmp	r2, r3
 8003310:	d8f7      	bhi.n	8003302 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	68ba      	ldr	r2, [r7, #8]
 800331c:	4413      	add	r3, r2
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	429a      	cmp	r2, r3
 8003322:	d108      	bne.n	8003336 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	441a      	add	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	441a      	add	r2, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d118      	bne.n	800337c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b14      	ldr	r3, [pc, #80]	; (80033a0 <prvInsertBlockIntoFreeList+0xac>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d00d      	beq.n	8003372 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685a      	ldr	r2, [r3, #4]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	441a      	add	r2, r3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e008      	b.n	8003384 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003372:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <prvInsertBlockIntoFreeList+0xac>)
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	601a      	str	r2, [r3, #0]
 800337a:	e003      	b.n	8003384 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	429a      	cmp	r2, r3
 800338a:	d002      	beq.n	8003392 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003392:	bf00      	nop
 8003394:	3714      	adds	r7, #20
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr
 800339c:	20000d2c 	.word	0x20000d2c
 80033a0:	20000d34 	.word	0x20000d34

080033a4 <__libc_init_array>:
 80033a4:	b570      	push	{r4, r5, r6, lr}
 80033a6:	2600      	movs	r6, #0
 80033a8:	4d0c      	ldr	r5, [pc, #48]	; (80033dc <__libc_init_array+0x38>)
 80033aa:	4c0d      	ldr	r4, [pc, #52]	; (80033e0 <__libc_init_array+0x3c>)
 80033ac:	1b64      	subs	r4, r4, r5
 80033ae:	10a4      	asrs	r4, r4, #2
 80033b0:	42a6      	cmp	r6, r4
 80033b2:	d109      	bne.n	80033c8 <__libc_init_array+0x24>
 80033b4:	f000 f822 	bl	80033fc <_init>
 80033b8:	2600      	movs	r6, #0
 80033ba:	4d0a      	ldr	r5, [pc, #40]	; (80033e4 <__libc_init_array+0x40>)
 80033bc:	4c0a      	ldr	r4, [pc, #40]	; (80033e8 <__libc_init_array+0x44>)
 80033be:	1b64      	subs	r4, r4, r5
 80033c0:	10a4      	asrs	r4, r4, #2
 80033c2:	42a6      	cmp	r6, r4
 80033c4:	d105      	bne.n	80033d2 <__libc_init_array+0x2e>
 80033c6:	bd70      	pop	{r4, r5, r6, pc}
 80033c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80033cc:	4798      	blx	r3
 80033ce:	3601      	adds	r6, #1
 80033d0:	e7ee      	b.n	80033b0 <__libc_init_array+0xc>
 80033d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80033d6:	4798      	blx	r3
 80033d8:	3601      	adds	r6, #1
 80033da:	e7f2      	b.n	80033c2 <__libc_init_array+0x1e>
 80033dc:	08003460 	.word	0x08003460
 80033e0:	08003460 	.word	0x08003460
 80033e4:	08003460 	.word	0x08003460
 80033e8:	08003464 	.word	0x08003464

080033ec <memset>:
 80033ec:	4603      	mov	r3, r0
 80033ee:	4402      	add	r2, r0
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d100      	bne.n	80033f6 <memset+0xa>
 80033f4:	4770      	bx	lr
 80033f6:	f803 1b01 	strb.w	r1, [r3], #1
 80033fa:	e7f9      	b.n	80033f0 <memset+0x4>

080033fc <_init>:
 80033fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fe:	bf00      	nop
 8003400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003402:	bc08      	pop	{r3}
 8003404:	469e      	mov	lr, r3
 8003406:	4770      	bx	lr

08003408 <_fini>:
 8003408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800340a:	bf00      	nop
 800340c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800340e:	bc08      	pop	{r3}
 8003410:	469e      	mov	lr, r3
 8003412:	4770      	bx	lr
